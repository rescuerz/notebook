{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to rescuerz's notebook","text":"<p> \u7ea6 31 \u4e2a\u5b57 </p> <p>\u8fd9\u91cc\u662frescuerz\u7684notebook </p> <p>\u6b22\u8fce\u5b66\u4e60\u4ea4\u6d41 </p>"},{"location":"#about","title":"About","text":"<p> My GitHub</p> <p> My Gmail and  My ZJU Email</p>"},{"location":"changelog/","title":"\u66f4\u65b0\u8bb0\u5f55","text":"<p> \u7ea6 37 \u4e2a\u5b57 </p> <p>Abstract</p> <p>\u7279\u522b\u9e23\u8c22\uff1a@TonyCrane \u672c\u9875\u9762\u6837\u5f0f\u6765\u81ea TonyCrane \u8001\u5e08\u7684\u63d2\u4ef6\uff0c\u53ef\u89c1  TonyCrane/mkdocs-changelog-plugin</p>"},{"location":"changelog/#2024","title":"2024","text":"2024-7-27\u00b6 <p> Papers &gt; NN-LUT</p>"},{"location":"changelog/#2023","title":"2023","text":"<p>{{ 2023 }}</p>"},{"location":"home/","title":"Welcome to rescuerz's notebook","text":"<p> \u7ea6 31 \u4e2a\u5b57 </p> <p>\u8fd9\u91cc\u662frescuerz\u7684notebook </p> <p>\u6b22\u8fce\u5b66\u4e60\u4ea4\u6d41 </p>"},{"location":"home/#about","title":"About","text":"<p> My GitHub</p> <p> My Gmail and  My ZJU Email</p>"},{"location":"link/","title":"\u53cb\u94fe","text":"<p> \u7ea6 0 \u4e2a\u5b57 </p>"},{"location":"ADS/1.%20AVL_tree/","title":"\u4e00. AVL Tree &amp; Splay Tree","text":"<p> \u7ea6 5283 \u4e2a\u5b57  565 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 33 \u5206\u949f</p> <p>Lecture 1 | AVL Trees &amp; Splay Trees - Isshiki \u4fee's Notebook (isshikih.top)</p>"},{"location":"ADS/1.%20AVL_tree/#11-avl-tree","title":"1.1 AVL Tree","text":"<p>\u5bf9\u4e8e\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5176\u5bf9\u70b9\u7684\u64cd\u4f5c\u4ee3\u4ef7\u4e3a \\(O(log \\ N)\\)\u3002\u7136\u800c\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u5b83\u4f1a\u9000\u5316\u6210 \\(O(N)\\)\uff0c\u4f8b\u5982\u8fd9\u662f\u4e00\u68f5\u53ea\u6709\u5de6\u5b69\u5b50\u6811\u7684\u94fe\u578b\u4e8c\u53c9\u6811\uff0c\u90a3\u4e48\u64cd\u4f5c\u8fd9\u91cc\u552f\u4e00\u7684\u53f6\u5b69\u5b50\u7ed3\u70b9\u5c31\u662f \\(O(N)\\)\u3002</p> <p>\u6362\u53e5\u8bdd\u6765\u8bf4\uff0c\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u7ef4\u62a4\u6210\u672c\u57fa\u672c\u4e0a\u4e0e\u5176\u9ad8\u5ea6\u6b63\u76f8\u5173\u3002\u56e0\u800c\u4e00\u4e2a\u5f88\u81ea\u7136\u7684\u60f3\u6cd5\u662f\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8ba9\u4e00\u68f5\u4e8c\u53c9\u6811\u597d\u7ef4\u62a4\uff0c\u90a3\u4e48\u5c31 \u5e0c\u671b\u5b83\u7684\u9ad8\u5ea6\u5c3d\u53ef\u80fd\u4f4e\uff0c\u800c\u5728\u70b9\u6570\u56fa\u5b9a\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u79cd\u6734\u7d20\u7684\u601d\u60f3\u662f\u8ba9 <code>\u7ed3\u70b9\u5c3d\u53ef\u80fd\u201c\u5747\u5300\u201d\u5730\u5206\u5e03\u5728\u6811\u4e0a</code>\u3002</p> <p>\u6811\u7684\u9ad8\u5ea6(Height of Tree) \u7b49\u4e8e\u5176\u6839\u7ed3\u70b9\u5230\u53f6\u5b69\u5b50\u7ed3\u70b9\u7684\u82e5\u5e72\u8def\u5f84\u4e2d\uff0c\u6700\u5927\u7684\u8ddd\u79bb\uff08\u5373\u8fb9\u7684\u6570\u91cf\uff09\uff0c\u4e5f\u5c31\u662f\u6df1\u5ea6\u6700\u6df1\u7684\u7ed3\u70b9\u5230\u6839\u7ed3\u70b9\u5230\u8ddd\u79bb\u3002</p> <p>\u7279\u522b\u7684\uff0c\u4e00\u68f5\u7a7a\u6811\u7684\u9ad8\u5ea6\u4e3a -1\u3002</p> <ol> <li> <p>\u5b9a\u4e49\uff1a</p> </li> <li> <p>\u4e00\u4e2a\u7a7a\u7684\u4e8c\u53c9\u6811\u662f\u4e00\u4e2a \\(AVL \\ Tree\\)</p> </li> <li> <p>\u5982\u679c\u4e8c\u53c9\u6811 \\(T\\) \u662f\u4e00\u4e2a \\(AVL \\ Tree\\), \u5f53\u4e14\u4ec5\u5f53\u5219\u5176\u5de6\u53f3\u5b69\u5b50\u6811 \\(T_L , T_R\\) \u4e5f\u90fd\u5e94\u8be5\u662f \\(AVL\\) \u6811\uff0c\u4e14\u6709 \\(\u2223\u210e(T_L)\u2212\u210e(T_R)\u2223\u22641\\)\uff1b</p> </li> <li> <p>\u4e00\u4e2a\u7ed3\u70b9\u7684 \u5e73\u8861\u56e0\u5b50(Balance Factor, BF) \u7528\u6765\u63cf\u8ff0\u4e00\u4e2a\u7ed3\u70b9\u7684\u5e73\u8861\u72b6\u6001\uff0c\u5bf9\u4e8e\u7ed3\u70b9 \\(T_P\\)\uff0c\u5b83\u7684\u5de6\u5b69\u5b50\u6811\u4e3a \\(T_L\\)\uff0c\u53f3\u5b69\u5b50\u6811\u4e3a \\(T_R\\)\uff0c\u5219\uff1a\\(BF(T_P) = h(T_L) - h(T_R)\\)</p> </li> </ol> <p>\u5982\u679c\u4e8c\u53c9\u6811 \\(T\\) \u662f\u4e00\u4e2a \\(AVL\\) \u6811\uff0c\u5219\u5176\u5de6\u53f3\u5b69\u5b50\u6811 \\(T_L\\) \u548c \\(T_R\\) \u4e5f\u90fd\u5e94\u8be5\u662f \\(AVL\\) \u6811\uff0c\u4e14\u6709 \\(BF(T_P)\\) \u2208{0, \u00b11}\uff1b</p> <p>\u4e8e\u662f\uff0cAVL \u6811\u5e73\u8861\u4e0e\u5426\u53d6\u51b3\u4e8e\u7ed3\u70b9\u7684\u4e24\u4e2a\u5b50\u6811\u5c42\u6570\u4e4b\u5dee\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e 1</p> <p><code>\u8bc1\u660e\u5f15\u74061\uff1a\u8bbeAVL\u6811\u7684\u7ed3\u70b9\u6570\u91cf\u4e3an\uff0c\u5219\u6811\u9ad8\u4e3aO(log n)</code></p> <p>\\(n_h\\) \u8868\u793a\u9ad8\u5ea6\u4e3a h \u7684 AVL \u6811\uff0c\u6700\u5c11\u5177\u6709\u7684\u7ed3\u70b9\u6570</p> <p>$$ n_h = \\begin{cases} 0 &amp;\\text{h = -1, NULL} \\ 1 &amp;\\text{h = 0}\\ 2 &amp;\\text{h = 1}\\ n_{h-1} + n_{h-2} + 1 &amp;\\text{h &gt; 1} \\end{cases}\\ \\begin{aligned} define : F_h &amp;= n_h + 1 \\rightarrow F_h = F_{h-1} + F_{h-2}, F_0 = 2, F_1 = 3\\ F_n &amp;= \\dfrac{1}{\\sqrt{5}}\\times [(\\dfrac{1 + \\sqrt{5}}{2})^{n+2} - (\\dfrac{1 - \\sqrt{5}}{2})^{n+2}]\\ &amp;when  n  is  large  enough, F_n = \\dfrac{1}{\\sqrt{5}}\\times (\\dfrac{1 + \\sqrt{5}}{2})^{n+2}\\ h &amp;\\approx log(F_h) = log(n)</p> <p>\\end{aligned} $$</p> <ol> <li>\u65cb\u8f6c\u64cd\u4f5c</li> </ol> <p>\u5bf9\u4e8e\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u65cb\u8f6c\u64cd\u4f5c\uff0c\u4e0d\u80fd\u6539\u53d8\u641c\u7d22\u6811\u5de6\u5c0f\u53f3\u5927\u7684\u6027\u8d28</p> <p></p> <p>\u65cb\u8f6c\u524d\u540e\u5927\u5c0f\u5173\u7cfb\u5747\u4e3a \\(\\alpha , x, \\beta, y, \\gamma\\)</p> <p></p> <ol> <li>Trouble maker \u548c Trouble finder \u4e4b\u95f4\u7684\u4f4d\u7f6e\u5173\u7cfb\u51b3\u5b9a\u65cb\u8f6c\u7684\u65b9\u5f0f\uff0c\u4e00\u5171\u5206\u4e3a \\(RR\uff0cRL\uff0cLR\uff0cLL\\)</li> <li>Trouble Finder\uff1a \u7531\u4e8e\u67d0\u4e2a\u70b9\u7684\u63d2\u5165\uff0c\u5bfc\u81f4 BF \u4e0d\u7b26\u5408\u8981\u6c42\u7684\u70b9</li> <li>Related Trouble Finder\u2019s Child</li> <li>Trouble Maker\uff1a \u5bfc\u81f4 Trouble Finder \u51fa\u73b0\u7684\u70b9</li> </ol> <p> </p> <p>\u5982\u4e0b\u6240\u793a\uff0c\u5728\u63d2\u5165\u7ed3\u70b9 5 \u540e\uff0c\u6b64\u65f6\u6839\u7ed3\u70b9 8 \u7684\u5e73\u8861\u56e0\u5b50 BF \u503c\u53d8\u4e3a 2\uff0c\u4e0d\u518d\u6ee1\u8db3 AVL Tree \u7684\u8981\u6c42\uff0c\u800c\u8fd9\u4e00\u5207\u90fd\u662f <code>5</code> \u7684\u63d2\u5165\u5bfc\u81f4\u7684\u2014\u2014\u4e8e\u662f\u6211\u4eec\u79f0\u50cf\u8fd9\u91cc\u7684 <code>8</code> \u4e00\u6837\uff0c\u7531\u4e8e\u67d0\u4e2a\u70b9\u7684\u63d2\u5165\uff0c\u5176\u300c\u5e73\u8861\u56e0\u5b50\u300d\u4e0d\u518d\u7b26\u5408\u8981\u6c42\u7684\u70b9\uff0c\u4e3a Trouble Finder\uff1b\u800c\u50cf\u8fd9\u91cc\u7684 <code>5</code> \u4e00\u6837\uff0c\u5bfc\u81f4 Trouble Finder \u51fa\u73b0\u7684\u70b9\uff0c\u88ab\u79f0\u4e4b\u4e3a Trouble Maker\u3002</p> <p></p> <p><code>A\u7ed3\u70b9\u4e0d\u4e00\u5b9a\u662f\u6839\u7ed3\u70b9</code>\uff0c\u5f53\u53d1\u73b0 RR \u5173\u7cfb\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 \u5c40\u90e8\u7684\u65cb\u8f6c \u4f7f\u6811\u53d8\u5f97\u5e73\u8861</p> <p>LL Single Rotation \u7684\u6362\u6839\u89c6\u89d2</p> <p></p> <p> </p> <p>\u539f\u5148\u7684\u6839\u7ed3\u70b9\u8eab\u5904\u5de6\u5b50\u6811\u7684\u9ad8\u53f0\u4e0a\uff0c\\(BF(root) = h_L - h_R = 2\\), \u6240\u4ee5\u8981\u5c06\u6839\u7ed3\u70b9\u4ece\u53f0\u5b50\u4e0a\u62c9\u4e0b\u6765\uff0c\u6b64\u65f6\u987a\u7406\u6210\u7ae0\uff0c\u5de6\u5b50\u6811\u7684\u6839\u7ed3\u70b9\u6210\u4e3a\u6574\u68f5\u6811\u7684\u6839\u7ed3\u70b9\u3002</p> <p>\u4e3a\u4e86\u5f97\u5230\u4e8c\u5206\u641c\u7d22\u6811\uff0c\u9700\u8981\u5c06 Trouble Finder \u4e0e \u5de6\u5b50\u6811\u7684\u6839\u7ed3\u70b9\u76f8\u8fde\u63a5\uff0c\u6b64\u65f6\u591a\u51fa\u7684 L Right Subtree \u9700\u8981\u8fde\u63a5\u5230 Trouble Finder\u3002</p> <p></p> <p>\u4ee5 B \u4e3a\u652f\u70b9\uff0c\u5148\u8fdb\u884c C \u7684\u5de6\u65cb\uff0c\\(C_L\\) \u7531\u4e8e\u6bd4 B \u5927\uff0c\u6240\u4ee5\u6210\u4e3a B \u7684\u53f3\u5b50\u6811\uff1b\u518d\u8fdb\u884c A \u7684\u53f3\u65cb\uff0cA \u6bd4 C \u5927\uff0c\u6210\u4e3a C \u7684\u53f3\u5b50\u6811</p> <p><code>\u4e3a\u4ec0\u4e48\u662f\u6700\u4e0b\u9762\u7684\u70b9\u6210\u4e3a\u6839\u7ed3\u70b9\u5462\uff1f\u56e0\u4e3aABC\u4e09\u4e2a\u70b9\uff0c\u80fd\u6ee1\u8db3\u6839\u7ed3\u70b9\u7684\u53ea\u6709C\uff0cB &lt; C &lt; A</code></p> <p>\u7528\u8bed\u8a00\u6982\u62ec\u5c31\u662f\uff0c\u627e\u5230\u5173\u952e\u7684\u90a3\u4e09\u4e2a\u70b9\uff0c\u7136\u540e\u628a\u6700\u4e0b\u9762\u7684\u9876\u5230\u4e0a\u9762\u53bb\uff0c\u5269\u4e0b\u4e24\u4e2a\u4f5c\u4e3a\u5de6\u53f3\u5b69\u5b50\u6811\uff0c\u539f\u5148\u7684\u90a3\u4e2a\u70b9\u7684\u5de6\u53f3\u5b69\u5b50\u6811\u5219\u5bf9\u5e94\u5730\uff0c\u5de6\u5b69\u5b50\u6811\u63a5\u5230\u5de6\u8fb9\u7a7a\u7f3a\u7684\u53f3\u5b69\u5b50\u6811\u4e0a\uff0c\u53f3\u5b69\u5b50\u6811\u63a5\u5230\u53f3\u8fb9\u7a7a\u7f3a\u7684\u5de6\u5b69\u5b50\u6811\u4e0a\u3002</p> <p></p> <p><code>\u5982\u679c\u4e00\u4e2aTrouble maker\u63d2\u5165\u540e\uff0c\u4ea7\u751f\u4e86\u591a\u4e2aTrouble Finder\uff0c\u8be5\u5982\u4f55\u5904\u7406\uff1f</code></p> <p>\u9009\u62e9\u8ddd\u79bb Trouble maker \u6700\u8fd1\u7684 Trouble Finder \u8fdb\u884c\u5904\u7406\uff0c\u6700\u5e95\u5c42\u53d1\u751f\u6539\u53d8\uff0c\u8fde\u5e26\u6548\u5e94\u5f15\u53d1\u4e0a\u65b9\u7684 Trouble Finder \u7684 BF \u7684\u7edd\u5bf9\u503c\u90fd\u4f1a\u51cf\u5c0f\u3002</p> <pre><code>int Height(AVLTree T)\n{\n    if(T) return T-&gt;height;\n    // \u7a7a\u6811 T == NULL\n    else return -1;\n}\nvoid ChangeHeight(AVLTree T)\n{\n    if (T)\n    {\n        ChangeHeight(T-&gt;left);\n        ChangeHeight(T-&gt;right);\n        T-&gt;height = max(Height(T-&gt;left), Height(T-&gt;right)) + 1;\n    }\n}\nint max(int a, int b)\n{\n    return a &gt; b ? a : b;\n}\nAVLTree SingleRotateWithLeft(AVLTree T)\n{\n    AVLTree Newroot = (AVLTree)malloc(sizeof(TreeNode));\n    Newroot = T-&gt;left;\n    T-&gt;left = Newroot-&gt;right;\n    Newroot-&gt;right = T;\n    T-&gt;height = max(Height(T-&gt;left), Height(T-&gt;right)) + 1;\n    Newroot-&gt;height = max(Height(Newroot-&gt;left), T-&gt;height) + 1;\n    return Newroot;\n}\n\nAVLTree SingleRotateWithLeft(AVLTree T)\n{\n    AVLTree Newroot = (AVLTree)malloc(sizeof(TreeNode));\n    // \u65cb\u8f6c\u540e\u7684\u65b0\u6839\u7ed3\u70b9\n    Newroot = T-&gt;left;\n    // \u65cb\u8f6c\u540e\u7ed3\u70b9\u5173\u7cfb\u7684\u53d8\u5316\n    T-&gt;left = Newroot-&gt;right;\n    Newroot-&gt;right = T;\n    ChangeHeight(T);\n    // T-&gt;height = max(Height(T-&gt;left), Height(T-&gt;right)) + 1;\n    // Newroot-&gt;height = max(Height(Newroot-&gt;left), T-&gt;height) + 1;\n    return Newroot;\n}\n\nAVLTree SingleRotateWithRight(AVLTree T)\n{\n    AVLTree Newroot = (AVLTree)malloc(sizeof(TreeNode));\n    // \u65cb\u8f6c\u540e\u7684\u65b0\u6839\u7ed3\u70b9\n    Newroot = T-&gt;right;\n    // \u65cb\u8f6c\u540e\u7ed3\u70b9\u5173\u7cfb\u7684\u53d8\u5316\n    T-&gt;right = Newroot-&gt;left;\n    Newroot-&gt;left = T;\n    // \u65cb\u8f6c\u540e\u66f4\u65b0\u6811\u7684\u9ad8\u5ea6\n    ChangeHeight(T);\n    // T-&gt;height = max(Height(T-&gt;left), Height(T-&gt;right)) + 1;\n    // Newroot-&gt;height = max(Height(Newroot-&gt;right), T-&gt;height) + 1;\n    return Newroot;\n}\nAVLTree DoubleRotateWithRight(AVLTree T)\n{\n    // RL\n    // k3\n    //      k2\n    //  k1\n    AVLTree newroot = (AVLTree)malloc(sizeof(TreeNode));\n    T-&gt;right = SingleRotateWithLeft(T-&gt;right);\n    // \u6b64\u65f6 k3-k1-k2\n    newroot = SingleRotateWithRight(T);\n    return newroot;\n}\n// \u5b9a\u4e49AVL Tree\u7684\u63d2\u5165\u51fd\u6570\nAVLTree Insert(AVLTree T, int value)\n{\n    if(T == NULL)\n    {\n        T = (AVLTree)malloc(sizeof(TreeNode));\n        T-&gt;data = value;\n        T-&gt;height = 0;\n        T-&gt;left = NULL;\n        T-&gt;right = NULL;\n    }\n    else\n    {\n        if(value &lt; T-&gt;data)\n        {\n            T-&gt;left = Insert(T-&gt;left, value);\n            // \u4ee5\u4e0a\u4e3a\u4e8c\u5206\u641c\u7d22\u6811\u7684\u63d2\u5165\u64cd\u4f5c\n            // \u540e\u7eed\u8fdb\u884cAVL Tree\u7684\u5e73\u8861\u64cd\u4f5c\n            if(Height(T-&gt;left) - Height(T-&gt;right) == 2)\n            {\n                if(value &lt; T-&gt;left-&gt;data)\n                {\n                    // LL\n                    T = SingleRotateWithLeft(T);\n                }\n                else\n                {\n                    // LR\n                    T = DoubleRotateWithLeft(T);\n                }\n            }\n        }\n        else if(value &gt; T-&gt;data)\n        {\n            T-&gt;right = Insert(T-&gt;right, value);\n            if(Height(T-&gt;right) - Height(T-&gt;left) == 2)\n            {\n                if(value &gt; T-&gt;right-&gt;data)\n                {\n                    // RR\n                    T = SingleRotateWithRight(T);\n                }\n                else\n                {\n                    // RL\n                    T = DoubleRotateWithRight(T);\n                }\n            }\n        }\n        // \u66f4\u65b0\u6811\u7684\u9ad8\u5ea6\n        // T\u7684\u9ad8\u5ea6\u7b49\u4e8e\u5de6\u53f3\u5b50\u6811\u4e2d\u8f83\u9ad8\u7684\u9ad8\u5ea6\u52a01\n        T-&gt;height = max(Height(T-&gt;left), Height(T-&gt;right)) + 1;\n    }\n    return T;\n}\n</code></pre> <p><code>\u63d0\u95ee1\uff1a \u5728\u63d2\u5165\u7684\u65f6\u5019\u662f\u5426\u6709\u53ef\u80fd\u4f7f\u591a\u4e2a\u7ed3\u70b9\u7684\u5e73\u8861\u6027\u8d28\u88ab\u6253\u7834\uff1f</code></p> <p>\u5728 complete binary tree \u7684\u57fa\u7840\u4e0a\uff0c\u8fde\u7eed\u5728\u5de6\u5b50\u6811\u63d2\u5165\u4e24\u4e2a\u70b9\uff0c\u4e00\u6761\u7ebf\u4e0a \\(O(log \\ n)\\) \u4e2a\u7ed3\u70b9\u5e73\u8861\u6027\u8d28\u88ab\u7834\u574f</p> <p><code>\u63d0\u95ee2\uff1a \u5982\u679c\u662f\u7684\u8bdd\uff0c\u4e00\u6b21\u65cb\u8f6c\u64cd\u4f5c\u662f\u5426\u80fd\u4f7f\u6240\u6709\u5e73\u8861\u6536\u5230\u7834\u73af\u7684\u7ed3\u70b9\u6062\u590d\u6b63\u5e38\uff1f</code></p> <p>\\(LL,LR,RL,RR\\) \u65cb\u8f6c\u90fd\u4f1a\u662f\u63d2\u5165\u7684\u7ed3\u70b9\u6df1\u5ea6\u51cf\u5c11 1\uff0c\u6240\u4ee5\u8def\u5f84\u4e0a\u6240\u6709\u5e73\u8861\u88ab\u6253\u7834\u7684\u7ed3\u70b9\u90fd\u80fd\u6062\u590d</p> <p><code>\u5b9a\u74062\uff1a AVL \u6811\u7684\u641c\u7d22\u63d2\u5165\u5220\u9664\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4e3aO(log N)</code></p> <p>\u5bf9\u4e8e\u641c\u7d22\uff0c\u5178\u578b\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u6ca1\u6709\u7591\u95ee\u3002\u5bf9\u4e8e\u63d2\u5165\uff0c\u6700\u591a\u4e24\u6b21\u65cb\u8f6c\u52a0\u4e0a\u4e00\u6b21\u641c\u7d22\u3002</p> <p>\u5bf9\u4e8e\u5220\u9664\u64cd\u4f5c\uff0c\u6700\u591a\u8fdb\u884c \\(\\(O(log N)\\)\\) \u6b21\u7684\u65cb\u8f6c\uff0c\u800c \u6bcf\u6b21\u65cb\u8f6c\u90fd\u662f\u5e38\u6570\u7ea7\u522b \u7684\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u4e3a \\(O(log N)\\)</p> <pre><code>AVLTree Delete(AVLTree T, int value)\n{\n    // \u6811\u4e3a\u7a7a,\u76f4\u63a5\u8fd4\u56deNULL\n    if (T == NULL)\n    {\n        return NULL;\n    }\n    // \u5f85\u5220\u9664\u7684\u7ed3\u70b9\u5728T\u7684\u5de6\u5b50\u6811\u4e0a\n    if (value &lt; T-&gt;data)\n    {\n        T-&gt;left = Delete(T-&gt;left, value);\n        //\u5220\u9664\u7ed3\u70b9\u540e,\u5982\u679cAVL Tree\u5931\u53bb\u5e73\u8861,\u5219\u8fdb\u884c\u76f8\u5e94\u7684\u8c03\u8282\n        if(Height(T-&gt;right) - Height(T-&gt;left) == 2)\n        {\n            AVLTree temp = T-&gt;right;\n            if(Height(temp-&gt;left) &gt; Height(temp-&gt;right))\n            {\n                T = DoubleRotateWithRight(T);\n            }\n            else\n            {\n                T = SingleRotateWithRight(T);\n            }\n        }\n    }\n    // \u5f85\u5220\u9664\u7684\u7ed3\u70b9\u5728T\u7684\u53f3\u5b50\u6811\u4e0a\n    else if (value &gt; T-&gt;data)\n    {\n        T-&gt;right = Delete(T-&gt;right, value);\n        if(Height(T-&gt;left) - Height(T-&gt;right) == 2)\n        {\n            AVLTree temp = T-&gt;left;\n            if(Height(temp-&gt;right) &gt; Height(temp-&gt;left))\n            {\n                T = DoubleRotateWithLeft(T);\n            }\n            else\n            {\n                T = SingleRotateWithLeft(T);\n            }\n        }\n    }\n    else\n    {\n        // \u5f85\u5220\u9664\u7684\u70b9\u5728\u6839\u7ed3\u70b9\n        if(T-&gt;left == NULL &amp;&amp; T-&gt;right == NULL)\n        {\n            free(T);\n            return NULL;\n        }\n        else if(T-&gt;right == NULL &amp;&amp; T-&gt;left)\n        {\n            AVLTree temp = T;\n            T = T-&gt;left;\n            free(temp);\n        }\n        else if(T-&gt;left == NULL &amp;&amp; T-&gt;right)\n        {\n            AVLTree temp = T;\n            T = T-&gt;right;\n            free(temp);\n        }\n        // \u5de6\u53f3\u5b50\u6811\u5747\u975e\u7a7a\uff0c\u6839\u636e\u4e24\u68f5\u6811\u7684height\u9009\u62e9\u66ff\u6362\u7684\u7ed3\u70b9\n        else\n        {\n            if(Height(T-&gt;left) &gt;= Height(T-&gt;right))\n            {\n                // \u9009\u62e9\u5de6\u5b50\u6811\u4e2d\u7684\u6700\u5927\u503c\u66ff\u6362\u6839\u7ed3\u70b9\n                AVLTree temp = T-&gt;left;\n                while(temp-&gt;right)\n                {\n                    temp = temp-&gt;right;\n                }\n                int max = temp-&gt;data;\n                T-&gt;data = max;\n                T-&gt;left = Delete(T-&gt;left, max);\n            }\n            else\n            {\n                // \u9009\u62e9\u53f3\u5b50\u6811\u4e2d\u7684\u6700\u5c0f\u503c\u66ff\u6362\u6839\u7ed3\u70b9\n                AVLTree temp = T-&gt;right;\n                while(temp-&gt;left)\n                {\n                    temp = temp-&gt;left;\n                }\n                int min = temp-&gt;data;\n                T-&gt;data = min;\n                T-&gt;right = Delete(T-&gt;right, min);\n            }\n        }\n    }\n    ChangeHeight(T);\n    T-&gt;height = max(Height(T-&gt;left), Height(T-&gt;right)) + 1;\n    return T;\n}\n</code></pre>"},{"location":"ADS/1.%20AVL_tree/#12-splay-tree","title":"1.2 Splay Tree","text":"<p>Splay Tree \u7684\u76ee\u6807\uff1a \u5177\u4f53\u6765\u8bf4\u5c31\u662f\u5bf9\u4e8e \\(M\\) \u6b21\u4efb\u610f\u64cd\u4f5c\uff0c\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u4e3a \\(O(MlogN)\\)\uff0c\u5747\u644a\u4e0b\u6765\u8fd9 \\(M\\) \u4e2a\u64cd\u4f5c\u6bcf\u4e00\u4e2a\u90fd\u9700\u8981 \\(O(logN)\\)\u3002</p> <p>Splay \u7684\u6838\u5fc3\u601d\u60f3\u5c31\u662f\uff0c\u6bcf\u5f53\u6211\u4eec \u8bbf\u95ee\u4e00\u4e2a\u7ed3\u70b9\uff08\u6bd4\u5982 \u67e5\u8be2 \u67d0\u4e2a\u70b9\u3001\u63d2\u5165 \u67d0\u4e2a\u70b9\uff0c\u751a\u81f3\u662f \u5220\u9664 \u67d0\u4e2a\u70b9\uff09\uff0c\u6211\u4eec\u5c31 \u901a\u8fc7\u4e00\u7cfb\u5217\u64cd\u4f5c\u5c06\u76ee\u6807\u70b9\u8f6c\u79fb\u5230\u6839\u90e8\uff0c\u5f62\u8c61\u4e0a\u7406\u89e3\u5c31\u662f\u4e0d\u65ad\u65cb\u8f6c\u6574\u4e2a\u6811\u7684\u6784\u9020\uff0c\u77e5\u9053\u628a\u70b9\u8f6c\u5230\u6839\u90e8\u3002</p> <ul> <li> <p>\u641c\u7d22\uff1a\u4f7f\u7528\u666e\u901a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u65b9\u6cd5\u627e\u5230\u7ed3\u70b9\uff0c\u7136\u540e\u901a\u8fc7 splay \u64cd\u4f5c\u7ecf\u8fc7\u4e00\u7cfb\u5217\u65cb\u8f6c\u5c06\u641c\u7d22\u7684\u7ed3\u70b9\u79fb\u52a8\u5230\u6839\u7ed3\u70b9\u7684\u4f4d\u7f6e\uff1b</p> </li> <li> <p>\u63d2\u5165\uff1a\u4f7f\u7528\u666e\u901a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u65b9\u6cd5\u627e\u5230\u8981\u63d2\u5165\u7684\u4f4d\u7f6e\u8fdb\u884c\u63d2\u5165\uff0c\u7136\u540e\u628a\u521a\u521a\u63d2\u5165\u7684\u7ed3\u70b9\u901a\u8fc7 splay \u64cd\u4f5c\u7ecf\u8fc7\u4e00\u7cfb\u5217\u65cb\u8f6c\u79fb\u52a8\u5230\u6839\u7ed3\u70b9\u7684\u4f4d\u7f6e\uff1b</p> </li> <li> <p>\u5220\u9664\uff1a\u4f7f\u7528\u666e\u901a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u65b9\u6cd5\u627e\u5230\u8981\u5220\u9664\u7684\u7ed3\u70b9\uff0c\u7136\u540e\u901a\u8fc7 splay \u64cd\u4f5c\u7ecf\u8fc7\u4e00\u7cfb\u5217\u65cb\u8f6c\u5c06\u8981\u5220\u9664\u7684\u7ed3\u70b9\u79fb\u52a8\u5230\u6839\u7ed3\u70b9\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u5220\u9664\u6839\u7ed3\u70b9\uff08\u73b0\u5728\u6839\u7ed3\u70b9\u5c31\u662f\u8981\u5220\u9664\u7684\u70b9\uff09\uff0c\u7136\u540e\u548c\u666e\u901a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u5220\u9664\u4e00\u6837\u8fdb\u884c\u5408\u7406\u7684 merge \u5373\u53ef\u3002</p> </li> </ul> <p><code>\u5148\u79fb\u5230\u6839\u7ed3\u70b9\uff0c\u5728\u8fdb\u884c\u5220\u9664</code></p> <p>\u5047\u5982\u7b2c\u4e00\u6b21\u8bbf\u95ee\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(N), \u90a3\u4e48\u7b2c\u4e8c\u6b21\u8bbf\u95ee\u5c31\u662f O(1)\uff0c\u56e0\u4e3a\u6b64\u65f6\u8be5\u70b9\u5df2\u7ecf\u4f4d\u4e8e\u6839\u7ed3\u70b9\u3002</p> <p></p> <p>\u5982\u56fe\u6240\u793a\uff0c\u6b64\u65f6 \\(k1, k2, k3\\) \u5bf9\u5e94 LR \u7684\u65cb\u8f6c\u5173\u7cfb\uff0c\u5e76\u4e14 \\(k3\\) \u662f\u6700\u8fd1\u7684 Trouble Finder\u3002</p> <p>\u5229\u7528\u6362\u6839\u601d\u60f3\uff0c\u4ee5 \\(k1\\) \u4e3a\u6839\u7ed3\u70b9</p> <p></p> <p>\u8981\u4f7f\u6839\u7ed3\u70b9\u4e3a \\(k1\\) , \u5219\u5c06\u5bf9 \\(k4,k5\\) \u8fdb\u884c \u4e24\u6b21 LL rotation\u3002</p> <p>\u7b2c\u4e00\u6b21\u4ee5 \\(k4\\) \u4e3a\u652f\u70b9\uff0c\u5bf9 \\(k1,k4,k5\\) \u8fdb\u884c\u64cd\u4f5c\uff0c\u6b64\u65f6\u5f97\u5230 \\(k4\\) \u4e3a\u6839\u7ed3\u70b9\uff0c\\(k5\\) \u6210\u4e3a \\(k4\\) \u7684\u53f3\u5b50\u6811\uff0c</p> <p>\u7b2c\u4e8c\u6b21\u4ee5 \\(k1\\) \u4e3a\u652f\u70b9\uff0c\u5bf9 \\(k2,k1,k4\u8fdb\u884c\u64cd\u4f5c\\)\uff0c\\(k4\\) \u6210\u4e3a \\(k1\\) \u7684\u53f3\u7ed3\u70b9</p> <p></p> <p>\u5982\u4f55\u5c06\u4e0a\u56fe\u6240\u793a\uff0c\u5047\u5982\u6309\u7167\u4f18\u5148\u64cd\u4f5c\u6700\u8fd1\u7684 Trouble Finder \u8f6c\u5316\u4e3a AVL Tree</p> <p></p> <p>LR rotation\uff0c\\(k1\\) \u6210\u4e3a \\(k2,k3\\) \u7684\u6839\u7ed3\u70b9</p> <p></p> <p>\u6b64\u65f6 \\(k4\\) \u662f\u6700\u8fd1\u7684 Trouble Finder\uff0c \u6309\u7167 LL rotatio \u5f97\u5230\u4e0b\u56fe</p> <p></p> <p>\u5269\u4f59 \\(k5\\) \u662f Trouble Finder\uff0c \u518d\u8fdb\u884c\u4e00\u6b21 LL rotation</p> <p></p> <p>\u641c\u7d22 k1 \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\uff0c\u4f46\u662f\u641c\u7d22 k3 \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u589e\u5927\uff0c\u727a\u7272\u4e86\u67d0\u4e9b\u70b9</p> <p><code>\u6b64\u65f6\u4f60\u4f1a\u53d1\u73b0\uff0c\u4e24\u6b21LL rotation \u4f5c\u7528\u7684\u987a\u5e8f\u4e0d\u4e00\u6837\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u53ef\u80fd\u662fAVL Tree\uff0c\u4e5f\u6709\u53ef\u80fd\u4e0d\u662f\u3002\u4e14\u4e0e\u6240\u5f97\u7ed3\u8bba\u77db\u76fe</code></p> <p><code>\u4ee5\u4e0b\u5f15\u5165\uff0c\u5904\u7406Splay Tree \u7684 \u5904\u7406\u65b9\u6cd5</code></p> <p>\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u7ed3\u70b9 X\uff0c\u6211\u4eec\u8bb0\u5176\u7236\u7ed3\u70b9\u4e3a P(Parent)\uff0c\u5176\u7236\u7ed3\u70b9\u7684\u7236\u7ed3\u70b9\u4e3a G(Grandparent)\u3002</p> <p>\u5f53\u6211\u4eec\u8bbf\u95ee\u5230\u67d0\u4e2a\u70b9 X \u65f6\uff1a</p> <ul> <li> <p>\u5982\u679c P \u662f\u6839\u7ed3\u70b9\uff0c\u5219\u76f4\u63a5\u8fdb\u884c\u4e00\u6b21 <code>[Single Rotation]</code>\uff0c\u5c06 X \u8f6c\u5230\u6839\u7ed3\u70b9\uff1b</p> </li> <li> <p>\u5982\u679c P \u4e0d\u662f\u6839\u7ed3\u70b9</p> </li> <li> <p>\u5f53\u60c5\u51b5\u4e3a LR / RL \u65f6\uff0c\u8fdb\u884c\u4e00\u6b21 <code>[LR Rotation / RL Rotation]</code>\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a zig-zag\uff1b\u4e0d\u5728\u4e00\u6761\u76f4\u7ebf\u4e0a</p> </li> <li> <p>\u5f53\u60c5\u51b5\u4e3a LL / RR \u65f6\uff0c\u8fdb\u884c\u4e24\u6b21 <code>[Single Rotation]</code>\uff0c\u4f7f\u5f97 X\u3001P\u3001G \u7684\u987a\u5e8f\u9006\u8f6c\uff0c\u50cf\u8df7\u8df7\u677f\u4e00\u6837\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a zig-zig\uff1b\u5728\u4e00\u6761\u76f4\u7ebf\u4e0a</p> <p>\u6b64\u65f6 LL/RR \u6267\u884c\u7684\u987a\u5e8f\u6709\u4e25\u683c\u8981\u6c42\uff0c\u8fdc\u7aef\u4f18\u5148</p> </li> </ul> <p>zig-zig \u662f\u4e0e naive \u7684\u65b9\u6cd5\u4e0d\u4e00\u6837\u7684\u5730\u65b9\uff01</p> <p>\u7279\u522b\u6ce8\u610f naive \u7684\u65b9\u6cd5 <code>\u5148\u4ea4\u6362X \u548cP \u7684\u4f4d\u7f6e\u5173\u7cfb</code>\uff0c\u7136\u540e\u4ea4\u6362 X \u548c G \u7684\u4f4d\u7f6e\u5173\u7cfb\uff0c</p> <p>\u4f46\u662f zig-zig \u7684\u6807\u51c6\u64cd\u4f5c\u65b9\u5f0f\u662f\uff0c<code>\u5148\u4ea4\u6362P \u548cG \u7684\u4f4d\u7f6e\u5173\u7cfb</code>\uff0c\u518d\u4ea4\u6362 X \u548c P \u7684\u4f4d\u7f6e\u5173\u7cfb\uff01</p> <p>\u8fd9\u4e2a\u533a\u522b\u5c31\u662f\u5b83\u4e0e naive \u65b9\u6cd5\u7684\u552f\u4e00\u533a\u522b\uff0c\u5374\u80fd\u5b9e\u73b0\u6211\u4eec\u6700\u7ec8\u5747\u644a\u7684\u76ee\u6807\uff1b</p> <p></p>"},{"location":"ADS/1.%20AVL_tree/#132-\u5bf9\u70b9\u64cd\u4f5c","title":"1.3.2 \u5bf9\u70b9\u64cd\u4f5c","text":"<p>Splay Tree \u9664\u4e86\u5728\u5b8c\u6210\u6240\u6709\u64cd\u4f5c\u4ee5\u540e\u90fd\u9700\u8981\u8fdb\u884c\u4e00\u6b21 Splay \u64cd\u4f5c\uff0c\u5176\u4ed6\u90e8\u5206\u90fd\u548c BST \u4e00\u6837\u3002</p> <ul> <li>Find X</li> </ul> <p>\u6839\u636e BST \u7684\u6027\u8d28\uff0c\u53ef\u4ee5\u5728 \\(O(log N)\\) \u7684\u65f6\u95f4\u5185\u627e\u5230 X\uff0c\u63a5\u4e0b\u6765\u9700\u8981\u901a\u8fc7\u65cb\u8f6c\u64cd\u4f5c\uff0c\u5c06 X \u4e0d\u65ad\u65cb\u8f6c\u81f3\u6839\u7ed3\u70b9</p> <p></p> <ul> <li>Remove X</li> </ul> <p>\u6839\u636e\u4e8c\u5206\u641c\u7d22\u6811\u7684\u6027\u8d28\uff0c\u53ef\u4ee5\u5728 \\(O(log N)\\) \u7684\u65f6\u95f4\u5185\u627e\u5230 X\uff0c\u63a5\u4e0b\u6765\u9700\u8981\u901a\u8fc7\u65cb\u8f6c\u64cd\u4f5c\uff0c\u5c06 X \u4e0d\u65ad\u65cb\u8f6c\u81f3\u6839\u7ed3\u70b9\u3002<code>\u540e\u7eed\u5220\u9664Root\u7ed3\u70b9\uff0c\u627e\u5230\u5de6\u5b50\u6811\u7684\u6700\u5927\u503c\u6216\u8005\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u503c\uff0c\u518d\u8fdb\u4e00\u6b65\u8c03\u6574</code></p> <ul> <li>FindMax</li> </ul> <p>\u6839\u636e BST \u7684\u6027\u8d28\uff0c\u53ef\u4ee5\u5728 \\(O(log N)\\) \u7684\u65f6\u95f4\u91cc\u627e\u5230\u6700\u5927\u503c\uff0c\u5c06\u5b83\u65cb\u8f6c\u5230\u6839\u90e8\u4ee5\u540e\uff0c\u53ef\u4ee5\u53d1\u73b0 <code>\u5b83\u6ca1\u6709\u53f3\u5b69\u5b50\u6811</code>\uff0c\u76f4\u63a5\u5220\u6389\u5c31\u884c\u3002</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n// \u5b9a\u4e49\u4e8c\u5206\u641c\u7d22\u6811\u7ed3\u6784\u4f53\ntypedef struct SplayNode *SplayTree;\nstruct SplayNode\n{\n    int data;\n    SplayTree left;\n    SplayTree right;\n    SplayTree parent;\n} SplayNode;\n\nSplayTree Insert(SplayTree T, int value);\nSplayTree Find(SplayTree T, int value);\nvoid Parent(SplayTree T);\n\nSplayTree Insert(SplayTree T, int value)\n{\n    if (T == NULL)\n    {\n        T = (SplayTree)malloc(sizeof(SplayNode));\n        T-&gt;data = value;\n        T-&gt;left = T-&gt;right = NULL;\n    }\n    else\n    {\n        if (value &lt; T-&gt;data)\n        {\n            T-&gt;left = Insert(T-&gt;left, value);\n        }\n        else if (value &gt; T-&gt;data)\n        {\n            T-&gt;right = Insert(T-&gt;right, value);\n        }\n    }\n    return T;\n}\n// \u9012\u5f52\u904d\u5386\u6811\uff0c\u5efa\u7acb\u7236\u5b50\u5173\u7cfb\nvoid Parent(SplayTree T)\n{\n    if (T-&gt;left)\n    {\n        T-&gt;left-&gt;parent = T;\n        Parent(T-&gt;left);\n    }\n    if (T-&gt;right)\n    {\n        T-&gt;right-&gt;parent = T;\n        Parent(T-&gt;right);\n    }\n}\n\nSplayTree Find(SplayTree T, int value)\n{\n    if (T == NULL)\n    {\n        return NULL;\n    }\n    else\n    {\n        if (value &lt; T-&gt;data)\n        {\n            return Find(T-&gt;left, value);\n        }\n        else if (value &gt; T-&gt;data)\n        {\n            return Find(T-&gt;right, value);\n        }\n        else\n        {\n            return T;\n        }\n    }\n}\nSplayTree SingleRotateWithLeft(SplayTree T)\n{\n    SplayTree newroot = T-&gt;left;\n    if (T-&gt;parent)\n    {\n        SplayTree G = T-&gt;parent;\n        T-&gt;left = newroot-&gt;right;\n        newroot-&gt;right = T;\n        T-&gt;parent = newroot;\n        newroot-&gt;parent = G;\n        if(G-&gt;left == T)\n            G-&gt;left = newroot;\n        else\n            G-&gt;right = newroot;\n    }\n    else\n    {\n        T-&gt;left = newroot-&gt;right;\n        newroot-&gt;right = T;\n        T-&gt;parent = newroot;\n        newroot-&gt;parent = NULL;\n    }\n\n    return newroot;\n}\nSplayTree SingleRotateWithRight(SplayTree T)\n{\n    SplayTree newroot = T-&gt;right;\n    if (T-&gt;parent)\n    {\n        SplayTree G = T-&gt;parent;\n        T-&gt;right = newroot-&gt;left;\n        newroot-&gt;left = T;\n        T-&gt;parent = newroot;\n        newroot-&gt;parent = G;\n        if(G-&gt;left == T)\n            G-&gt;left = newroot;\n        else\n            G-&gt;right = newroot;\n    }\n    else\n    {\n        T-&gt;right = newroot-&gt;left;\n        newroot-&gt;left = T;\n        T-&gt;parent = newroot;\n        newroot-&gt;parent = NULL;\n    }\n    return newroot;\n}\n\nSplayTree DoubleRotateWithLeft(SplayTree T)\n{\n    SplayTree P = T-&gt;left;\n    SplayTree newroot = P-&gt;right;\n    if(T-&gt;parent)\n    {\n        SplayTree G = T-&gt;parent;\n        T-&gt;left = SingleRotateWithRight(T-&gt;left);\n        newroot = SingleRotateWithLeft(T);\n        newroot-&gt;parent = G;\n    }\n    else\n    {\n        T-&gt;left = SingleRotateWithRight(T-&gt;left);\n        newroot = SingleRotateWithLeft(T);\n        newroot-&gt;parent = NULL;\n    }\n    return newroot;\n\n}\nSplayTree DoubleRotateWithRight(SplayTree T)\n{\n    SplayTree newroot = T-&gt;right-&gt;left;\n    if(T-&gt;parent)\n    {\n        SplayTree G = T-&gt;parent;\n        T-&gt;right = SingleRotateWithLeft(T-&gt;right);\n        newroot = SingleRotateWithRight(T);\n        newroot-&gt;parent = G;\n    }\n    else\n    {\n        T-&gt;right = SingleRotateWithLeft(T-&gt;right);\n        newroot = SingleRotateWithRight(T);\n        newroot-&gt;parent = NULL;\n    }\n    return newroot;\n}\nSplayTree RotatetoRoot(SplayTree T, int value)\n{\n    SplayTree temp = (SplayTree)malloc(sizeof(SplayNode));\n    temp = Find(T, value);\n    while (temp-&gt;parent != NULL)\n    {\n        SplayTree G = temp-&gt;parent-&gt;parent;\n        SplayTree P = temp-&gt;parent;\n        // \u5982\u679ctemp\u7684\u7236\u7ed3\u70b9\u662f\u6839\u7ed3\u70b9\n        if (temp-&gt;parent == T)\n        {\n            // \u76f4\u63a5\u8fdb\u884c\u4e00\u6b21SingleRotate\uff0c\u5c06temp\u65cb\u8f6c\u5230\u6839\u7ed3\u70b9\n            if (temp-&gt;parent-&gt;left == temp)\n            {\n                temp = SingleRotateWithLeft(temp-&gt;parent);\n            }\n            else\n            {\n                temp = SingleRotateWithRight(temp-&gt;parent);\n            }\n        }\n        // \u5982\u679ctemp\u7684\u7236\u7ed3\u70b9\u4e0d\u662f\u6839\u7ed3\u70b9\n        else\n        {\n            // \u6309\u7167Zig-zig \u6216\u8005 Zig-zag\u5206\u7c7b\u8ba8\u8bba\n            // LL\u578b zig-zig\n            if (G-&gt;left == P &amp;&amp; P-&gt;left == temp)\n            {\n                P = SingleRotateWithLeft(G);\n                temp = SingleRotateWithLeft(P);\n            }\n            // RR\u578b zig-zig\n            else if (G-&gt;right == P &amp;&amp; P-&gt;right == temp)\n            {\n                P = SingleRotateWithRight(G);\n                temp = SingleRotateWithRight(P);\n            }\n            // LR\u578b zig-zag\n            else if (G-&gt;left == P &amp;&amp; P-&gt;right == temp)\n            {\n                temp = DoubleRotateWithLeft(G);\n            }\n            // RL\u578b zig-zag\n            else if (G-&gt;right == P &amp;&amp; P-&gt;left == temp)\n            {\n                temp = DoubleRotateWithRight(G);\n            }\n        }\n    }\n    return temp;\n}\n\nvoid Levelorder(SplayTree T)\n{\n    SplayTree queue[100];\n    int front = 0, rear = 0;\n    int currentLevelCount = 1, nextLevelCount = 0;\n    if (T == NULL)\n    {\n        return;\n    }\n    queue[rear++] = T;\n    while (front &lt; rear)\n    {\n        SplayTree temp = queue[front++];\n        printf(\"%d \", temp-&gt;data);\n        currentLevelCount--;\n        if (temp-&gt;left)\n        {\n            queue[rear++] = temp-&gt;left;\n            nextLevelCount++;\n        }\n        if (temp-&gt;right)\n        {\n            queue[rear++] = temp-&gt;right;\n            nextLevelCount++;\n        }\n        if (currentLevelCount == 0)\n        {\n            printf(\"\\n\");\n            currentLevelCount = nextLevelCount;\n            nextLevelCount = 0;\n        }\n    }\n}\nint main()\n{\n    SplayTree T = NULL;\n    T = Insert(T, 10);\n    T = Insert(T, 4);\n    T = Insert(T, 11);\n    T = Insert(T, 2);\n    T = Insert(T, 6);\n    T = Insert(T, 12);\n    T = Insert(T, 1);\n    T = Insert(T, 3);\n    T = Insert(T, 5);\n    T = Insert(T, 8);\n    T = Insert(T, 7);\n    T = Insert(T, 9);\n    T = Insert(T, 13);\n    Parent(T);\n    T-&gt;parent = NULL;\n    T = RotatetoRoot(T, 3);\n    Levelorder(T);\n    Parent(T);\n    T-&gt;parent = NULL;\n    T = RotatetoRoot(T, 9);\n    Levelorder(T);\n    Parent(T);\n    T-&gt;parent = NULL;\n    T = RotatetoRoot(T, 1);\n    Levelorder(T);\n    Parent(T);\n    T-&gt;parent = NULL;\n    T = RotatetoRoot(T, 5);\n\n    Levelorder(T);\n}\n</code></pre> <p>\u5bf9\u4e8e Insert \u64cd\u4f5c</p> <pre><code>SplayTree RotatetoRoot(SplayTree T, int value)\n{\n    SplayTree temp = (SplayTree)malloc(sizeof(SplayNode));\n    T = Insert(T, value);\n    Parent(T);\n    temp = Find(T, value);\n    while (temp-&gt;parent != NULL)\n    {\n        SplayTree G = temp-&gt;parent-&gt;parent;\n        SplayTree P = temp-&gt;parent;\n        // \u5982\u679ctemp\u7684\u7236\u7ed3\u70b9\u662f\u6839\u7ed3\u70b9\n        if (temp-&gt;parent == T)\n        {\n            // \u76f4\u63a5\u8fdb\u884c\u4e00\u6b21SingleRotate\uff0c\u5c06temp\u65cb\u8f6c\u5230\u6839\u7ed3\u70b9\n            if (temp-&gt;parent-&gt;left == temp)\n            {\n                temp = SingleRotateWithLeft(temp-&gt;parent);\n            }\n            else\n            {\n                temp = SingleRotateWithRight(temp-&gt;parent);\n            }\n        }\n        // \u5982\u679ctemp\u7684\u7236\u7ed3\u70b9\u4e0d\u662f\u6839\u7ed3\u70b9\n        else\n        {\n            // \u6309\u7167Zig-zig \u6216\u8005 Zig-zag\u5206\u7c7b\u8ba8\u8bba\n            // LL\u578b zig-zig\n            if (G-&gt;left == P &amp;&amp; P-&gt;left == temp)\n            {\n                P = SingleRotateWithLeft(G);\n                temp = SingleRotateWithLeft(P);\n            }\n            // RR\u578b zig-zig\n            else if (G-&gt;right == P &amp;&amp; P-&gt;right == temp)\n            {\n                P = SingleRotateWithRight(G);\n                temp = SingleRotateWithRight(P);\n            }\n            // LR\u578b zig-zag\n            else if (G-&gt;left == P &amp;&amp; P-&gt;right == temp)\n            {\n                temp = DoubleRotateWithLeft(G);\n            }\n            // RL\u578b zig-zag\n            else if (G-&gt;right == P &amp;&amp; P-&gt;left == temp)\n            {\n                temp = DoubleRotateWithRight(G);\n            }\n        }\n    }\n    return temp;\n}\n</code></pre> <p>\u53ea\u9700\u5728 RotateToRoot \u51fd\u6570\u4e2d\uff0c\u5148\u63d2\u5165\u6307\u5b9a\u503c value\uff0c\u5efa\u7acb parent \u5173\u7cfb\uff0c\u518d\u627e\u5230\u8be5 value\uff0c\u8fdb\u884c\u65cb\u8f6c\u5230 root</p> <p><code>\u5220\u9664\uff1a</code></p> <p><code>\u4f7f\u7528\u666e\u901a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u65b9\u6cd5\u627e\u5230\u8981\u5220\u9664\u7684\u7ed3\u70b9\uff0c\u7136\u540e\u901a\u8fc7splay \u64cd\u4f5c\u7ecf\u8fc7\u4e00\u7cfb\u5217\u65cb\u8f6c\u5c06\u8981\u5220\u9664\u7684\u7ed3\u70b9\u79fb\u52a8\u5230\u6839\u7ed3\u70b9\u7684\u4f4d\u7f6e\uff0c</code></p> <p><code>\u7136\u540e\u5220\u9664\u6839\u7ed3\u70b9\uff08\u73b0\u5728\u6839\u7ed3\u70b9\u5c31\u662f\u8981\u5220\u9664\u7684\u70b9\uff09\uff0c\u7136\u540e\u548c\u666e\u901a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u5220\u9664\u4e00\u6837\u8fdb\u884c\u5408\u7406\u7684merge \u5373\u53ef\u3002</code></p> <p>\uff08<code>AVL\u6811\u548cSplay\u6811\u7684\u65cb\u8f6c\u4ee3\u7801\u533a\u522b\u5728\u4e8e\uff1aAVL\u6811\u7684\u65cb\u8f6c\u9009\u53d6\u7684\u662fheight\u66f4\u5927\u7684\u7ed3\u70b9\u4f5c\u4e3a\u57fa\u51c6\u70b9\uff0c\u4e5f\u5c31\u662f\u9ad8\u4f4d\u7684\u7ed3\u70b9\uff0c\u56e0\u4e3a\u63d2\u5165\u4e00\u4e2a\u70b9\u540e\uff0c\u8981\u786e\u4fdd\u9ad8\u4f4d\u4ee5\u4e0b\u7684\u7ed3\u70b9\u7684height\u90fd\u5f97\u5230\u66f4\u65b0\uff0c\u8fd9\u6837\u624d\u80fd\u8ba1\u7b97\u9ad8\u4f4d\u7684\u5e73\u8861\u56e0\u5b50&gt;=2.</code></p> <p><code>\u4f46\u662f\u5728splay\u6811\u4e2d\uff0c\u6211\u4eec\u90fd\u662f\u5148\u627e\u5230\u76ee\u6807\u7ed3\u70b9\uff0c\u663e\u7136\u5b83\u662f\u5728\u4e0b\u65b9\uff0c\u6211\u4eec\u9700\u8981\u6839\u636e\u5b83\u7684parent\u548cgrandparent\u7684\u4f4d\u7f6e\uff0c\u786e\u5b9a\u5f53\u524d\u7684\u65cb\u8f6c\u65b9\u5f0f\u3002\u6240\u4ee5\u65cb\u8f6c\u7684\u4ee3\u7801\u662f\u4ee5\u4e0b\u4f4d\u7684\u70b9\u4f5c\u4e3a\u57fa\u51c6\u70b9</code>\u3002\u6b64\u65f6\u7565\u6709\u95ee\u9898\uff0c\u53ef\u5ffd\u7565\u4e0d\u770b\uff09</p>"},{"location":"ADS/1.%20AVL_tree/#13-amortized-analysis","title":"1.3 Amortized Analysis","text":"<p>Any M consecutive operations take at most O(M log N) time. -- Amortized time bound</p> <p>\u5b83\u8ba1\u7b97\u7684\u662f\u4ece\u521d\u59cb\u72b6\u6001\u5f00\u59cb\uff0c\u8fde\u7eed\u7684 M \u6b21\u4efb\u610f\u64cd\u4f5c \u6700\u591a\u6709 \u7684\u4ee3\u4ef7\u3002</p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5b83\u4e0d\u540c\u4e8e\u5e73\u5747\u65f6\u95f4\u5206\u6790\uff08\u6240\u6709\u53ef\u80fd\u7684\u64cd\u4f5c\u51fa\u73b0\u6982\u7387\u5e73\u5747\uff0c\u4e5f\u5c31\u662f\u76f4\u63a5\u6c42\u5e73\u5747\uff09\u548c\u6982\u7387\u7b97\u6cd5\u7684\u6982\u7387\u5206\u6790\uff08\u5e73\u5747\u8bdd\u6240\u6709\u53ef\u80fd\u7684\u968f\u673a\u9009\u62e9\uff0c\u4e5f\u5c31\u662f\u52a0\u6743\u6c42\u5e73\u5747\uff09\u4e0d\u540c\uff0c\u644a\u8fd8\u5206\u6790\u548c\u6982\u7387\u5b8c\u5168\u65e0\u5173\u3002</p> <p>worse-case  bound &gt;= amortized  bound &gt;= average-case   bound</p> <p>\u9488\u5bf9\u4e0a\u65b9\u7684\u4e0d\u7b49\u5f0f\uff0c\u7531\u4e8e amortized bound \u9650\u5236\u4e86\u6240\u6709\u7684 M \u6b21\u64cd\u4f5c\uff0c\u6240\u4ee5\u5176\u4e0a\u754c\u5c31\u7b49\u4e8e\u6700\u5dee\u7684\u60c5\u51b5\u53d1\u751f M \u6b21\u3002\uff08\u7531\u4e8e amortized bound \u662f\u8fde\u7eed\u7684 M \u6b21\u4efb\u610f\u64cd\u4f5c \u6700\u591a\u6709 \u7684\u4ee3\u4ef7\u3002\uff09average bound \u5b58\u5728\u7a00\u91ca\uff0c\u6240\u4ee5\u5927\u4e8e\u7b49\u4e8e\u5e73\u5747\u60c5\u51b5</p> <p>\u5bf9\u4e8e\u4e0a\u754c\u7b49\u4e8e\u6700\u5dee\u7684\u60c5\u51b5\u53d1\u751f M \u6b21\uff0c\u5ffd\u7565\u4e86\u6709\u7684\u5e8f\u5217\u662f\u4e0d\u53ef\u80fd\u51fa\u73b0\u7684\u3002\u4f8b\u5982\u5728\u7a7a\u6811\u4e0a\u7528 \\(O(N)\\) \u7684\u65f6\u95f4\u8fdb\u884c\u5220\u9664\u3002<code>\u644a\u8fd8\u5206\u6790\u5219\u662f\u5e0c\u671b\u6392\u9664\u6700\u5dee\u60c5\u51b5\u5206\u6790\u4e2d\u4e0d\u53ef\u80fd\u7684\u60c5\u51b5\u3002</code></p> <p>\u6ce8\u610f\u70b9\uff1a<code>\u644a\u8fd8\u5206\u6790\u8981\u6c42\u4ece\u7a7a\u7ed3\u6784\u5f00\u59cb</code>\uff0c\u3002\u5426\u5219\u53ef\u4ee5\u601d\u8003\u4ece\u4e00\u4e2a\u5df2\u7ecf\u6709\u5f88\u591a\u5143\u7d20\u7684\u6808\u91cc\u9762\u4e00\u6b21\u6027 Multipop \u51fa\u6240\u6709\u5143\u7d20\uff0c\u8fd9\u4e00\u6b65\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u663e\u7136\u4e0d\u518d\u662f O(1 \u00b7 1) \u7684</p>"},{"location":"ADS/1.%20AVL_tree/#131-aggregate-analysis-\u805a\u5408\u6cd5","title":"1.3.1 aggregate analysis \u805a\u5408\u6cd5","text":"<p>Show that for all n, a sequence of n operations takes worst-case time (\\(T(n)\\)\\) in total. In the worst case, the average cost, or amortized cost, per operation is \\(T(n)/n\\)</p> <pre><code>// stack with multipop\nvoid MultiPop(int k, Stack S)\n{\n    while(!IsEmpty(S) &amp;&amp; k &gt; 0)\n    {\n        Pop(S);\n        k--;\n    }\n}\n// T = min(sizeof(S), k)\n</code></pre> <p>Consider a sequence of n Push, Pop, and <code>MultiPop</code> operations on an initially empty stack.</p> <p>\u5747\u644a\u4ed8\u51fa\u7684\u6700\u5927\u4ee3\u4ef7\u662f\uff1a\\(n-1\\) \u6b21 \\(push\\)\uff0c1 \u6b21 \\(multipop\\)</p> <p>\\(T(n) = (n-1)O(1) + O(n-1) = O(n)\\)</p> <p>\\(T_{amortized} = O(n) / n = O(1)\\)</p>"},{"location":"ADS/1.%20AVL_tree/#132-accounting-method-\u6838\u7b97\u6cd5","title":"1.3.2 accounting method \u6838\u7b97\u6cd5","text":"<p>\u622a\u957f\u8865\u77ed</p> <p>\u8bb0 \\(credit = amortized \\ cost \\ \\widehat c_i - actual \\ cost \\ c_i\\)</p> <p>\u5bf9\u6240\u6709\u7684 n \u6b21\u64cd\u4f5c\u800c\u8a00\uff0c\u90fd\u6709</p> <p></p> <p><code>\u76ee\u7684\u662f\u6ee1\u8db3\u4e4b\u524d\u7684\u4e0d\u7b49\u5f0f\uff0c\u4fdd\u8bc1\u644a\u8fd8\u6210\u672c\u5e73\u5747\u6210\u672c\u5927</code> \\(\\sum_{i = 1}^n credit_i &gt;=0\\)</p> <p>\u4e3e\u4e2a\u4f8b\u5b50\u8bf4\u660e\u4e0a\u8ff0\u4e0d\u7b49\u5f0f</p> <p></p> <p>\u56e0\u4e3a\u6211\u4eec\u5e0c\u671b\u4e00\u6b21\u64cd\u4f5c\u644a\u8fd8\u6210\u672c\u4e3a O(1)\uff0c\u6240\u4ee5\u6211\u4eec\u5e0c\u671b\u8fd9\u4e09\u79cd\u64cd\u4f5c\u7684\u6210\u672c\u90fd\u662f \u5e38\u6570\u7ea7\u522b \u7684\uff0c\u8fd9\u6837\u53ea\u8981\u4f7f\u5f97 \\(\\sum_{i = 1}^n credit_i &gt;=0\\)\uff0c\u90a3\u5c31\u76f4\u63a5\u8bc1\u660e\u4e86\u7ed3\u8bba\u3002\u4f46\u662f\u6211\u4eec\u77e5\u9053\uff0cMultiPop \u7684\u4ee3\u4ef7\u6bd4\u8f83\u5927\uff0c\u628a\u5b83\u8c03\u6574\u4e3a\u5e38\u6570\uff0c\u5bf9\u5e94\u7684 \\(\\Delta &lt; 0\\)\uff0c\u5fc5\u7136\u9700\u8981\u4ee3\u4ef7\u5c0f\u7684\u64cd\u4f5c \\(\\Delta &gt; 0\\)\uff0c\u6240\u4ee5\u624d\u6709\u4e86\u4f8b\u5b50\u4e2d\u628a Push \u64cd\u4f5c\u4ee3\u4ef7\u8c03\u6574\u4e3a 2\uff0c\u7136\u540e\u6211\u4eec\u53ef\u4ee5 \u5229\u7528 size(S) \u2a7e 0 \u8fd9\u4e00\u7ea6\u675f\u8bc1\u660e \\(\\sum_{i = 1}^n credit_i &gt;=0\\)</p> \\[ \\begin{aligned} sizeof(S) &gt;= 0 &amp;\\rightarrow credit &gt;= 0 \\\\ &amp;\\rightarrow O(n) = \\sum \\widehat c_i &gt;= \\sum c_i\\\\ &amp;\\rightarrow T_{amortized} = O(n)/n = O(1) \\end{aligned} \\] <p>\u6808\u5185\u6709\u5269\u4f59\uff0c\u8bf4\u660e multipop \u6ca1\u6709\u53d1\u6325\u5168\u529b\uff0c\u5bfc\u81f4\u5b9e\u9645\u6210\u672c\u5c0f\u4e8e\u5747\u644a\u6210\u672c\u3002</p> <p>\u5747\u644a\u6210\u672c\u7684\u8003\u91cf\u5728\u4e8e\uff0c\u4f7f\u6808\u5185\u6ca1\u6709\u5269\u4f59\uff0c\u610f\u5473\u7740 push \u4e00\u5b9a pop\uff0c\u8fd9\u6837 push \u7684\u6210\u672c\u53d8\u4e3a 2\uff0c\u5305\u542b\u4e86 pop \u548c multipop</p>"},{"location":"ADS/1.%20AVL_tree/#133-potential-method-\u52bf\u80fd\u6cd5","title":"1.3.3 potential method \u52bf\u80fd\u6cd5","text":"<p>\u4e0a\u9762\u7684\u6838\u7b97\u6cd5\u76f8\u5bf9\u5f62\u8c61\uff0c\u4f46\u8981\u4e3a\u6bcf\u4e00\u4e2a\u64cd\u4f5c\u8bbe\u8ba1\u4e00\u4e2a\u644a\u8fd8\u4ee3\u4ef7 \\(\\widehat c_i = c_i + \\Delta_i\\) \u5e76\u4e0d\u50cf\u4e0a\u8ff0\u4f8b\u5b50\u90a3\u4e48\u7b80\u5355\uff0c\u51b5\u4e14\u9700\u8981\u4fdd\u8bc1 \\(\\sum_{i=1}^n \\Delta_i &gt;= 0\\).\u5bf9\u4e8e\u6bd4\u8f83\u590d\u6742\u7684\u7ed3\u6784\uff0c\u5982 splaytree\uff0c\u5c31\u5f88\u96be\u529e.</p> <p>\u5b9a\u4e49\u4e00\u4e2a\u52bf\u80fd\u51fd\u6570\uff0c\u7b2c i \u6b21\u64cd\u4f5c \u7684\u644a\u8fd8\u4ee3\u4ef7\u662f \\(\\widehat c_i = c_i + (\\phi(D_i)-\\phi(D_{i-1}))\\)</p> <p>\\(D_i\\) \u662f\u7b2c i \u6b21\u64cd\u4f5c\u4e4b\u540e\u7684\u6570\u636e\u7ed3\u6784\uff0c\\(\\phi(D_i)\\) \u8868\u793a\u7b2c i \u6b21\u64cd\u4f5c\u4e4b\u540e\u7684\u52bf\u80fd</p> <p>\u6bcf\u4e00\u6b65\u7684\u644a\u8fd8\u4ee3\u4ef7\u7b49\u4e8e\u771f\u5b9e\u64cd\u4f5c\u7684\u4ee3\u4ef7\u52a0\u4e0a\u52bf\u51fd\u6570\u7684\u53d8\u5316</p> <p></p> <p>\u4e3a\u4e86\u4f7f\u5f97\u644a\u8fd8\u6210\u672c\u662f\u5e73\u5747\u6210\u672c\u7684\u4e0a\u754c\uff0c\u6211\u4eec\u4ecd\u7136\u9700\u8981\u6ee1\u8db3 \\(\\sum_{i=1}^n \\widehat c_i &gt;= \\sum_{i=1}^n c_i\\), \u56e0\u6b64\u53ea\u9700\u8981\u6ee1\u8db3 \\(\\phi(D_n) &gt;= \\phi(D_0)\\)</p> <p><code>\u53ea\u9700\u8981\u8c03\u6574\u8bbe\u8ba1\uff0c\u521d\u59cb\u72b6\u6001\u65f6$\\phi(D_0)$\u6700\u5c0f\uff0c\u7b49\u4e8e0\uff0c\u540e\u7eed\u7684\u6bcf\u4e00\u6b65\u64cd\u4f5c\u52bf\u80fd\u90fd\u4e0d\u4f1a\u5c0f\u4e8e0</code></p> <p>\u5982\u679c \\(\\sum_{i=1}^n c_i = O(log N)\\)\uff0c\u5408\u7406\u7684\u52bf\u80fd\u51fd\u6570\u9009\u62e9\u5e94\u8be5\u6ee1\u8db3 \\(\u03a6(Dn) \u2212 \u03a6(D0)\\) \u4e5f\u662f \\(O(log n)\\)\uff0c\u5426\u5219\u4f1a\u5f71\u54cd\u4f30\u7b97\u7684\u7cbe\u786e\u5ea6\u3002</p> <p></p> <p>\u9488\u5bf9\u4e0a\u8ff0\u4f8b\u5b50\uff0c\u5b9a\u4e49\u52bf\u80fd\u51fd\u6570\u4e3a\u6808\u4e2d\u5b58\u5728\u7684\u5143\u7d20\u4e2a\u6570</p> <p>$$ push: \\phi(D_i) - \\phi(D_{i-1}) = sizeof(S) + 1 - sizeof(S) = 1\\ \\rightarrow \\widehat c_i = c_i + \\phi(D_i) - \\phi(D_{i-1}) = 1 + 1 = 2\\</p> <p>pop: \\phi(D_i) - \\phi(D_{i-1}) = sizeof(S) - 1 - sizeof(S) = -1\\ \\rightarrow \\widehat c_i = c_i + \\phi(D_i) - \\phi(D_{i-1}) = 1 - 1 = 0\\</p> <p>Multipop: \\phi(D_i) - \\phi(D_{i-1}) = sizeof(S) - k - sizeof(S) = -k\\ \\rightarrow \\widehat c_i = c_i + \\phi(D_i) - \\phi(D_{i-1}) = k - k = 0\\ $$</p> \\[ \\widehat c_i\\\\ \\vec{a} \u5411\u91cf\\\\ \\overline{a} \u5e73\u5747\u503c\\\\ \\widehat{a}(\u7ebf\u6027\u56de\u5f52\uff0c\u76f4\u7ebf\u65b9\u7a0b) y \u5c16\\\\ \\widetilde{a} \u989a\u5316\u7b26\u53f7  \u7b49\u4ef7\u65e0\u7a77\u5c0f\\\\ \\dot{a}   \u4e00\u9636\u5bfc\u6570\\\\ \\ddot{a}  \u4e8c\u9636\u5bfc\u6570\\\\ \\]"},{"location":"ADS/1.%20AVL_tree/#134-splay-tree-\u7684-\u644a\u8fd8\u5206\u6790","title":"1.3.4 Splay Tree \u7684 \u644a\u8fd8\u5206\u6790","text":"<p>\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u8ddf\u7ed3\u70b9\u9ad8\u5ea6\u76f8\u5173\u7684\uff08\u6216\u7c7b\u4f3c\u7684\uff09\u52bf\u80fd\u51fd\u6570\u3002</p> <p>\u6211\u4eec\u6ce8\u610f\u5230\u5728 Splay \u64cd\u4f5c\u4e2d\uff0c\u51e0\u4e4e\u6bcf\u4e2a\u7ed3\u70b9\u7684\u9ad8\u5ea6\u90fd\u4f1a\u6539\u53d8\uff0c\u54ea\u6015\u8be5\u7ed3\u70b9\u4e3a\u6839\u7ed3\u70b9\u7684\u5b50\u6811\u6ca1\u6709\u4efb\u4f55\u53d8\u5316\u3002\u5982\u679c\u6211\u4eec\u76f4\u63a5\u4f7f\u7528\u7ed3\u70b9\u9ad8\u5ea6\u4f5c\u4e3a\u52bf\u80fd\u51fd\u6570\uff0c\u540e\u7eed\u7684\u6570\u5b66\u8ba1\u7b97\u4e0e\u63a8\u5bfc\u4f1a\u53d8\u5f97\u975e\u5e38\u590d\u6742\u3002</p> <p>\u4e00\u4e2a\u53ef\u7528\u7684\u52bf\u80fd\u51fd\u6570\u662f\u6811\u4e2d\u6240\u6709\u7ed3\u70b9\u7684 <code>rank</code> \u4e4b\u548c\uff1a</p> \\[ \\phi(T) = \\sum_{i = 1}^nlog S(i) =  \\sum_{i = 1}^nR(i) \\] <p>\\(S(i)\\) \u6307\u7684\u662f\u5b50\u6811 \\(i\\) \u7684\u7ed3\u70b9\u6570\uff0c\u5305\u62ec\u7ed3\u70b9 \\(i\\).</p> <p>\\(R(i)\\) \u8868\u793a\u7ed3\u70b9 \\(i\\) \u7684 rank\uff0c\\(R(i) = logS(i)\\)</p> <p>\u9009\u53d6 rank \u4e4b\u548c\u4f5c\u4e3a\u52bf\u80fd\u51fd\u6570\u7684\u597d\u5904\u662f\u9664\u4e86 X, P, G \u4e09\u4e2a\u7ed3\u70b9\u5916\uff0c\u5176\u4ed6\u7ed3\u70b9\u5728 splay \u64cd\u4f5c\u4e2d rank \u4fdd\u6301\u4e0d\u53d8\uff0c\u56e0\u800c\u53ef\u4ee5\u7b80\u5316\u8ba1\u7b97\u3002</p> <p></p> <ol> <li>Zig: \u5728\u6574\u4e2a\u64cd\u4f5c\u4e2d\u53ea\u6709 X \u548c P \u7684 rank \u503c\u6709\u53d8\u5316\u3002</li> </ol> <p>$$      \\widehat c_i = c_i + \\phi(D_i)-\\phi(D_{i-1}) = c_i + R_2(X) -R_1(X) + R_2(P)-R_1(P)    $$</p> <p>\u5176\u4e2d \\(R_2(X) -R_1(X) &gt; 0 , R_2(P)-R_1(P) &lt;= 0\\)</p> <p>\u6240\u4ee5 \\(\\widehat c_i &lt;= 1 + R_2(X) - R_1(X) &lt;= 1 + 3(R_2(X) - R_1(X))\\)</p> <ol> <li>Zig-Zag: \u4e24\u6b21\u65cb\u8f6c</li> </ol> <p>$$      \\widehat c_i =  2 + R_2(X) -R_1(X) + R_2(P)-R_1(P) + R_2(G) - R_1(G)\\      G  is  root, X  is  also  root \\rightarrow R_2(X) = R_1(G)\\      \\widehat c_i =  2  -R_1(X) + R_2(P)-R_1(P) + R_2(G)\\    $$</p> <p>\u5f15\u7406\uff1a \u82e5 \\(a + b &lt;= c\\), \u4e14 \\(a ,b\\) \u5747\u4e3a\u6b63\u6574\u6570\uff0c\u5219 \\(log a+ log b &lt;= 2logc -2\\)</p> \\[   \\widehat c_i =  2  -R_1(X) + R_2(P)-R_1(P) + R_2(G)\\\\   S_2(P) + S_2(G) &lt;= S_2(X) \\rightarrow R_2(P) + R_2(G) &lt;= 2R_2(X) -2\\\\   \\widehat c_i &lt;= 2 - R_1(X)-R_1(P)+2R_2(X)-2 &lt;= 2(R_2(X)-R_1(X)) \\\\   \\widehat c_i &lt;= 3(R_2(X)-R_1(X)) \\] <ol> <li>Zig-zig\uff1a\u4e24\u6b21\u65cb\u8f6c    $$      \\widehat c_i =  2 + R_2(X) -R_1(X) + R_2(P)-R_1(P) + R_2(G) - R_1(G)\\      G  is  root, X  is  also  root \\rightarrow R_2(X) = R_1(G)\\      \\widehat c_i =  2  -R_1(X) + R_2(P)-R_1(P) + R_2(G)    $$</li> </ol> <p>\u6700\u540e\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u4f38\u5c55\u6811\u4e0a\u8bbf\u95ee\u8282\u70b9 X \u7684\u4e00\u7cfb\u5217 M \u4e2a splay \u64cd\u4f5c\uff08zig\u3001zigzig\u3001zigzag\uff09\uff0c\u5176\u4e2d\u6700\u591a\u53ea\u4f1a\u6709 1 \u4e2a zig\u3002\u628a\u4ed6\u4eec\u90fd\u7ed9\u52a0\u8d77\u6765\u540e\uff0c\u53ef\u5f97\uff1a</p> \\[ \\begin{aligned} \\sum_{i = 1}^M \\widehat c_i &lt;&amp;= 1 + 3 [R_M(X)-R_{M-1}(X)] + \\sum_{i = 1}^{M-1}3(R_i(X) - R_{i-1}(X))\\\\ &amp; =  1 + 3 [R_M(X)-R_{M-1}(X)] + 3 [R_{M-1}(X) - R_0(X)] \\\\ &amp;= 1+3R_M(X)-3R_0(X) = O(log n) \\end{aligned} \\] <p>\u4e0a\u9762\u8bc1\u660e\u6bcf\u4e00\u6b21\u64cd\u4f5c\u7684\u5747\u644a\u6210\u672c\u90fd\u662f \\(O(logN)\\) \u7ea7\u522b\u3002\u8003\u8651\u5230\u4e0a\u8bfe\u6709\u4e2a\u4f8b\u5b50\u5bf9\u9000\u5316\u6210\u94fe\u8868\u7684\u6811\u7684\u53f6\u7ed3\u70b9\u505a Splay \u64cd\u4f5c\uff0c\u590d\u6742\u5ea6\u4e3a \\(O(n)\\)\u3002\u662f\u5426\u4ea7\u751f\u77db\u76fe\uff1f</p> <p>\u8fd9\u5e76\u4e0d\u77db\u76fe\uff0c\u4e00\u4e2a\u662f \u5747\u644a\u6210\u672c\uff0c\u4e00\u4e2a\u662f \u771f\u5b9e\u6210\u672c</p> <p><code>\u6211\u4eec\u5e94\u8be5\u8bc1\u660eM\u4e2a\u8fde\u7eed\u64cd\u4f5c\u7684\u6210\u672c\u4e0d\u5927\u4e8e$O(MlogN)$</code></p> <p>\u4ee4 \\(T_0\\) \u4e3a\u64cd\u4f5c\u524d\u7684 splay Tree\uff0c\u4e3a\u7a7a\u6811\u3002\\(T_i\\) \u4e3a\u7b2c \\(i\\) \u6b21\u64cd\u4f5c\u540e\u7684\u4f38\u5c55\u6811(\\(1 &lt;= i &lt;= M\\)), \\(c_i\\) \u4e3a\u7b2c \\(i\\) \u6b21\u64cd\u4f5c\u7684\u5b9e\u9645\u6210\u672c</p> \\[ \\sum_{i = 1}^M \\widehat c_i = \\sum_{i = 1}^M c_i + \\phi(T_M) - \\phi(T_0)\\\\ \\sum_{i = 1}^M c_i = \\sum_{i = 1}^M \\widehat c_i + \\phi(T_0) - \\phi(T_M) &lt;= \\sum_{i = 1}^M \\widehat c_i + \\phi(T_0) = \\sum_{i = 1}^M \\widehat c_i = O(MlogN) \\] <p><code>\u5b9a\u7406</code>\uff1aSplay \u6811\u7684\u641c\u7d22\u3001\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u7684\u644a\u8fd8\u590d\u6742\u5ea6\u5747\u4e3a \\(O(log n)\\)\u3002</p> <p></p> <p></p> \\[ \\begin{aligned} &amp;assume \\ \\phi = 2|S_B|\\\\ &amp;enqueue : \\widehat c_i = c_i = 1\\\\ &amp;dequeue: \\begin{cases} \\widehat c_i = c_i + \\phi(D_i) - \\phi(D_{i-1}) = 1 + 2(-1) = -1 &amp; not \\  empty\\\\ \\widehat c_i = c_i + \\phi(D_i) - \\phi(D_{i-1}) = 2sizeof(A) + 2sizeof(A) &amp; empty\\\\ \\end{cases}\\\\ &amp;assume \\ \\phi = 2|S_A|\\\\ &amp;enqueue : \\widehat c_i = c_i + \\phi(D_i) - \\phi(D_{i-1})= 1 + 2 = 3\\\\ &amp;dequeue: \\begin{cases} \\widehat c_i = c_i + \\phi(D_i) - \\phi(D_{i-1}) = 1  &amp; not \\  empty\\\\ \\widehat c_i = c_i + \\phi(D_i) - \\phi(D_{i-1}) = 2sizeof(A) - 2sizeof(A) = 0 &amp; empty\\\\ \\end{cases}\\\\ &amp; finally \\ select \\ A \\end{aligned} \\] <p></p> <p></p> <p>$$ insert: \\phi(D_i) - \\phi(D_{i-1}) = sizeof(list) + 1 - sizeof(list) = 1\\ \\rightarrow \\widehat c_i = c_i + \\phi(D_i) - \\phi(D_{i-1}) = 1 + 1 = 2\\</p> <p>sum: \\phi(D_i) - \\phi(D_{i-1}) = 1 - sizeof(list) = 1 - k\\ \\rightarrow \\widehat c_i = c_i + \\phi(D_i) - \\phi(D_{i-1}) = k + 1 - k = 1\\ $$</p>"},{"location":"ADS/1.%20AVL_tree/#14-\u4e60\u9898\u96c6","title":"1.4 \u4e60\u9898\u96c6","text":"<ol> <li> <p>If the depth of an AVL tree is 6 (the depth of an empty tree is defined to be -1), then the minimum possible number of nodes in this tree is:</p> </li> <li> <p>A. 13</p> </li> <li> <p>B. 17</p> </li> <li> <p>C. 20</p> </li> <li> <p><code>D. 33</code></p> </li> </ol> <p>\u524d\u9762\u7684\u9012\u63a8\u5173\u7cfb\u5f0f \\(N_h = N_{h-1} + N_{h-2} + 1, N_0 = 1, N_1 = 2\\)</p> <p>\u90a3\u4e48 \\(N_2 = 4, N_3 = 7, N_4 = 12, N_5= 20\uff0c N_6= 33\\)</p> <ol> <li> <p>Insert 2, 1, 4, 5, 9, 3, 6, 7 into an initially empty AVL tree. Which one of the following statements is FALSE?</p> </li> <li> <p>A. 4 is the root</p> </li> <li> <p><code>B. 3 and 7 are siblings</code></p> </li> <li> <p>C. 2 and 6 are siblings</p> </li> <li> <p>D. 9 is the parent of 7</p> </li> </ol> <p></p> <ol> <li>For the result of accessing the keys 3, 9, 1, 5 in order in the splay tree in the following figure, which one of the following statements is FALSE?</li> </ol> <p></p> <ul> <li> <p>A. 5 is the root</p> </li> <li> <p>B. 1 and 9 are siblings</p> </li> <li> <p>C. 6 and 10 are siblings</p> </li> <li> <p><code>D. 3 is the parent of 4</code></p> </li> </ul> <pre><code>5\n1 9\n2 6 10\n4 8 11\n3 7 12\n13\n</code></pre> <p></p> <ol> <li> <p>When doing amortized analysis, which one of the following statements is FALSE?</p> </li> <li> <p>A. Aggregate analysis(\u805a\u5408\u6cd5) shows that for all \\(n\\), a sequence of \\(n\\) operations takes worst-case time \\(T(n)\\) in total. Then the amortized cost per operation is therefore \\(T(n)/n\\)</p> </li> <li> <p>B. <code>For potential method(\u52bf\u80fd\u6cd5), a good potential function should always assume its **maximum** at the start of the sequence</code></p> <p><code>\u52bf\u80fd\u6cd5\uff0c\u8981\u6c42\u521d\u59cb\u65f6\u523b\u7684\u52bf\u80fd\u6700\u5c0f</code></p> </li> <li> <p>C. For accounting method(\u6838\u7b97\u6cd5), when an operation's amortized cost exceeds its actual cost, we save the difference as credit to pay for later operations whose amortized cost is less than their actual cost</p> </li> <li> <p>D. The difference between aggregate analysis and accounting method is that the later one assumes that the amortized costs of the operations may differ from each other</p> <p>\u805a\u5408\u6cd5\u662f\u6c42\u5e73\u5747\uff0c\u5047\u8bbe\u7684\u662f amortized cost \u662f\u76f8\u7b49\u7684\u3002account \u6cd5\u5047\u8bbe\u7684\u662f amortized cost \u662f\u4e0d\u76f8\u7b49\u7684\u6bcf\u6b21\u64cd\u4f5c\u3002\u5f53\u64cd\u4f5c\u7684\u644a\u4f59\u6210\u672c\u8d85\u8fc7\u5176\u5b9e\u9645\u6210\u672c\u65f6\uff0c\u6211\u4eec\u4f1a\u5c06\u5dee\u989d\u5b58\u4e3a credit\uff0c\u4ee5\u652f\u4ed8\u644a\u4f59\u6210\u672c\u4f4e\u4e8e\u5176\u5b9e\u9645\u6210\u672c\u7684\u540e\u7eed\u64cd\u4f5c</p> </li> <li> <p>Consider the following buffer management problem. Initially the buffer size (the number of blocks) is one. Each block can accommodate exactly one item. As soon as a new item arrives, check if there is an available block. If yes, put the item into the block, induced a cost of one. Otherwise, the buffer size is doubled, and then the item is able to put into. Moreover, the old items have to be moved into the new buffer so it costs \\(k+1\\) to make this insertion, where \\(k\\) is the number of old items. Clearly, if there are \\(N\\) items, the worst-case cost for one insertion can be \\(\\Omega (N)\\). To show that the average cost is \\(O(1)\\), let us turn to the amortized analysis. To simplify the problem, assume that the buffer is full after all the \\(N\\) items are placed. Which of the following potential functions works?</p> </li> <li> <p>A. The number of items currently in the buffer</p> </li> <li> <p>B. The opposite number of items currently in the buffer</p> </li> <li> <p>C. The number of available blocks currently in the buffer</p> </li> <li> <p>D. <code>The opposite number of available blocks in the buffer</code></p> </li> </ol> <p>$$ \\begin{aligned} &amp;assume  D  is   right,\\Phi(D_i) \u8868\u793a buffer \u7a7a\u4f59\u683c\u6570\u7684\u76f8\u53cd\u6570\\ &amp;not full: \\widehat c_i =  c_i + \\phi(D_i) - \\phi(D_{i-1})= c_i + [-(size - k) +(size - k + 1)] = 1 + 1 = 2\\ &amp;full : \\widehat c_i = c_i + \\phi(D_i) - \\phi(D_{i-1}) = k + 1 + (1-k) - 0 = 2\\</p> <p>\\ \\ &amp;assume  C  is   right\uff0c\\Phi(D_i) \u8868\u793a buffer \u7a7a\u4f59\u683c\u6570 \\ &amp;not full: \\widehat c_i = c_i - 1 = 0\\ &amp;full : \\widehat c_i = c_i + k -1 = k+1  + k-1 = 2k\\ \\ &amp; \u4ece\u94fa\u6ee1 buffer \u5f00\u59cb\u9006\u63a8\\ &amp;N/2 + N/2 + N/4 + N/4 +N/8 + N/8 = N + N/2 + N/4 + \\cdots +1\\ &amp;logN \u9879\\ &amp;\\dfrac{1-2^{logN+1}}{1-2} \\end{aligned} $$</p> <ul> <li> <p>A. The number of items currently in the buffer</p> </li> <li> <p>B. The opposite number of items currently in the buffer</p> </li> <li> <p>C. The number of available blocks currently in the buffer</p> </li> <li> <p>D. <code>The opposite number of available blocks in the buffer</code></p> </li> </ul> <p></p>"},{"location":"ADS/10.%20NP-Completeness/","title":"\u5341. NP-Completeness","text":"<p> \u7ea6 4423 \u4e2a\u5b57  2 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 22 \u5206\u949f</p>"},{"location":"ADS/10.%20NP-Completeness/#101-\u6982\u8ff0","title":"10.1 \u6982\u8ff0","text":"<p>\u6839\u636e\u95ee\u9898\u7684\u96be\u5ea6\uff0c\u7531\u4e0d\u540c\u7684\u5b9a\u4e49\u5212\u5206\uff0c\u95ee\u9898\u53ef\u4ee5\u5206\u4e3a\uff1a</p> <p>P \u95ee\u9898(polynomial time)\u3001NP \u95ee\u9898(nondeterministic polynomial time)\u3001NPC \u95ee\u9898(NP complete)\u3001NPH \u95ee\u9898(NP hard)\u3002\u9664\u6b64\u4e4b\u5916 \uff0c\u6211\u4eec\u8fd8\u9700\u8981\u989d\u5916\u4e86\u89e3\u4e0d\u53ef\u8ba1\u7b97\u95ee\u9898(undecidable)\u3002</p> <p></p> <ul> <li>P \u53d6\u81ea polynomial time\uff0c\u6307\u7684\u662f\u53ef\u4ee5\u7528\u786e\u5b9a\u578b\u56fe\u7075\u673a\uff08\u6307\u67d0\u4e00\u6307\u4ee4\u6267\u884c\u5b8c\u6210\u4e4b\u540e\uff0c\u4e0b\u4e00\u6761\u6307\u4ee4\u662f\u552f\u4e00\u786e\u5b9a\u7684\uff09\ud83d\udd0d\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u89e3\u51b3\u7684\u95ee\u9898\u3002</li> </ul> <p>\u4e5f\u5c31\u662f\u6211\u4eec\u901a\u5e38\u610f\u4e49\u4e0b\u6240\u8bf4\u7684\uff0c<code>\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u89e3\u51b3\u7684\u95ee\u9898</code>\u3002</p> <ul> <li>NP \u5373 nondeterministic polynomial time\uff0c\u6307\u7684\u662f\u53ef\u4ee5\u7528[\u975e\u786e\u5b9a\u578b\u56fe\u7075\u673a\uff08\u5728\u67d0\u4e00\u6761\u6307\u4ee4\u6267\u884c\u5b8c\u6210\u4e4b\u540e\uff0c\u4e0b\u4e00\u6761\u6307\u4ee4\u53ef\u4ee5\u6709\u82e5\u5e72\u4e2a\uff0c\u673a\u5668\u603b\u80fd\u9009\u51fa\u6b63\u786e\u7684\u4e00\u6761\uff09\ud83d\udd0d]\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u89e3\u51b3\u7684\u95ee\u9898\u3002\u8fd9\u4e2a\u8bf4\u6cd5\u7b49\u4ef7\u4e8e\u53ef\u4ee5\u7528[\u786e\u5b9a\u578b\u56fe\u7075\u673a\ud83d\udd0d]\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u9a8c\u8bc1\uff08\u5224\u65ad\u7b54\u6848\u662f\u5426\u6b63\u786e\uff09\u3002</li> </ul> <p>\u4e5f\u5c31\u662f\u6211\u4eec\u901a\u5e38\u610f\u4e49\u4e0b\u6240\u8bf4\u7684\uff0c<code>\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u9a8c\u8bc1\u7684\u95ee\u9898</code>\u3002</p> <ul> <li> <p>NPC \u5373 NP complete\uff0cNP \u5b8c\u5168\uff0c\u662f NP \u4e2d\u6700\u96be\u7684\u51b3\u5b9a\u6027\u95ee\u9898\uff08\u5e76\u4e0d\u662f\u65e0\u9650\u5b9a\u8bcd\u7684\u6700\u96be\u7684\u95ee\u9898\uff01\uff09\u3002\u800c\u6211\u4eec\u79f0\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\u7684\u95ee\u9898\u4e3a NPC \u95ee\u9898\uff1a</p> </li> <li> <p>\u662f\u4e00\u4e2a NP \u95ee\u9898\uff1b</p> </li> <li>\u6240\u6709 NP \u95ee\u9898\u90fd\u53ef\u4ee5[\u591a\u9879\u5f0f\u65f6\u95f4\u5f52\u7ea6\ud83d\udd0d]\u4e3a\u8be5\u95ee\u9898\uff1b</li> </ul> <p>\u7531 2 \u53ef\u4ee5\u6709\u7ed3\u8bba\uff0c\u6240\u6709\u7684 NPC \u95ee\u9898\u96be\u5ea6\u76f8\u540c\u2014\u2014\u4e00\u65e6\u6709\u4e00\u4e2a NPC \u95ee\u9898\u88ab\u89e3\u51b3\uff0c\u90a3\u4e48\u6240\u6709 NPC \u95ee\u9898\uff0c\u4e43\u81f3\u6240\u6709 NP \u95ee\u9898\u90fd\u80fd\u88ab\u89e3\u51b3\u3002</p> <p>\u5982\u679c\u6211\u4eec\u8bd5\u56fe\u8bc1\u660e\u4e00\u4e2a\u95ee\u9898\u662f NPC \u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u624b\u6bb5\uff1a</p> <ol> <li> <p>\u5224\u5b9a\u8be5\u95ee\u9898\u662f\u4e00\u4e2a NP \u95ee\u9898\uff1b</p> </li> <li> <p>\u5224\u5b9a\u4e00\u4e2a\u5df2\u77e5\u7684 NPC \u95ee\u9898\u53ef\u4ee5[\u591a\u9879\u5f0f\u65f6\u95f4\u5f52\u7ea6\ud83d\udd0d]\u4e3a\u8be5\u95ee\u9898\uff0c\u6216\u5224\u5b9a\u8be5\u95ee\u9898\u662f NPH\uff08\u5728\u4e0b\u9762\uff09\u95ee\u9898\uff1b</p> <p><code>NPC\u95ee\u9898\u96be\u5ea6\u76f8\u540c\uff0cNPC\u95ee\u9898\u80fd\u591f\u5f52\u7ea6\u5230\u53e6\u4e00\u4e2aNPC\u6545\u4e8b\u3002\u6216\u8005\u5229\u7528</code>\\(NPC = NP \\cap NPH\\),<code>\u5982\u679c\u4e00\u4e2a\u65e2\u662fNP\u95ee\u9898\uff0c\u53c8\u662fNPH\u95ee\u9898\uff0c\u90a3\u4e48\u5b83\u4e5f\u662fNPC\u95ee\u9898</code></p> </li> </ol> <p>\u7b2c\u4e00\u4e2a\u88ab\u8bc1\u660e\u662f NPC \u7684\u95ee\u9898\u662f [Circuit-SAT\ud83d\udd0d] \u95ee\u9898\u3002</p> <ul> <li>NPH \u5373 NP hard\uff0cNP \u56f0\u96be\uff0c\u5b83\u4e0d\u4e00\u5b9a\u9700\u8981\u662f NP \u95ee\u9898\u3002\u800c\u6240\u6709 NP \u95ee\u9898\u90fd\u53ef\u4ee5[\u591a\u9879\u5f0f\u65f6\u95f4\u5f52\u7ea6\ud83d\udd0d]\u4e3a NPH \u95ee\u9898\u3002</li> </ul> <p>NPH\u95ee\u9898\u65e0\u6cd5\u901a\u8fc7\u4e0d\u786e\u5b9a\u56fe\u7075\u673a\u8fdb\u884c\u9a8c\u8bc1</p> <p><code>all the language can be decided by a non-deterministic machine\u3002 F</code></p> <p>$$   NPC = NP \\cap NPH   $$</p>"},{"location":"ADS/10.%20NP-Completeness/#102-undecidable-problem","title":"10.2 Undecidable Problem","text":"<p>\u4e0d\u53ef\u5224\u5b9a\u95ee\u9898(undecidable problem)\u662f\u4e00\u7c7b\u7279\u6b8a\u7684\u51b3\u5b9a\u6027\u95ee\u9898\uff0c\u5b83\u7684\u7279\u70b9\u662f\u6211\u4eec\u65e0\u6cd5\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u6c42\u89e3\u5b83\u7684\u7ed3\u679c\u3002</p> <p>\u505c\u673a\u95ee\u9898\u662f\u4e00\u4e2a\u5178\u578b\u7684\u4e0d\u53ef\u8ba1\u7b97\u95ee\u9898\uff0c\u5b83\u6307\u7684\u662f\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u6211\u4eec\u65e0\u6cd5\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u5224\u65ad\u5b83\u662f\u5426\u4f1a\u5728\u6709\u9650\u65f6\u95f4\u5185\u505c\u673a\uff08\u5373\u5224\u65ad\u7a0b\u5e8f\u662f\u5426\u4f1a\u6b7b\u5faa\u73af\uff09\u3002</p> <p></p> <p>\u6211\u4eec\u901a\u8fc7\u53cd\u8bc1\u6cd5\u53ef\u4ee5\u8bc1\u660e\uff1a</p> <p>\u5047\u8bbe\u5b58\u5728\u51fd\u6570 <code>willHalt(func F)</code> \u53ef\u4ee5\u5224\u65ad\u51fd\u6570 F \u662f\u5426\u4f1a\u505c\u673a\uff0c\u5982\u679c\u4f1a\uff0c\u5219\u8fd4\u56de <code>true</code>\uff0c\u5426\u5219\u8fd4\u56de <code>false</code>\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u8fd9\u6837\u7684\u51fd\u6570 <code>foo()</code>\uff1a</p> <pre><code>void foo() {\n    if ( willHalt(foo) ) {\n        while (true) {} // Endless loop.\n    }\n    return;\n}\n</code></pre> <p>\u63a5\u4e0b\u6765\uff0c\u5982\u679c\u6211\u4eec\u60f3\u77e5\u9053 <code>foo()</code> \u662f\u5426\u4f1a\u505c\u673a\uff0c\u5c31\u4f1a\u6267\u884c <code>willHalt(foo)</code>\u3002\u7136\u800c\u5728 <code>foo()</code> \u5185\u90e8\u4e5f\u6709\u4e00\u4e2a <code>willHalt(foo)</code>\uff0c\u5982\u679c\u5b83\u8ba4\u4e3a <code>foo()</code> \u4f1a\u505c\u673a\uff0c\u5219\u6784\u9020\u4e00\u4e2a\u6b7b\u5faa\u73af\uff1b\u800c\u5982\u679c\u5b83\u8ba4\u4e3a <code>foo()</code> \u4e0d\u4f1a\u505c\u673a\uff0c\u5219\u9009\u62e9\u8ba9\u5b83\u7acb\u523b\u505c\u673a\uff0c\u4e8e\u662f\u8fd9\u91cc\u5c31\u4ea7\u751f\u4e86\u77db\u76fe\u3002</p> <p>\u7406\u89e3\u4e0a\u9762\u8fd9\u6bb5\u5185\u5bb9\u7684\u5173\u952e\u5c31\u662f\uff0c\u8fd9\u91cc\u867d\u7136\u4e0d\u5b58\u5728\u4e8b\u5b9e\u610f\u4e49\u4e0a\u7684\u201c\u6b7b\u5faa\u73af\u201d\uff0c\u4f46\u53ef\u4ee5\u7406\u89e3\u4e3a\u8fd9\u91cc\u5b58\u5728\u4e00\u4e2a\u903b\u8f91\u4e0a\u7684\u9012\u5f52\uff0c\u800c\u8fd9\u79cd\u201c\u903b\u8f91\u4e0a\u7684\u9012\u5f52\u201d\uff0c\u6b63\u662f\u5bfc\u81f4\u505c\u673a\u95ee\u9898\u6210\u4e3a\u4e00\u4e2a\u4e0d\u53ef\u8ba1\u7b97\u95ee\u9898\u7684\u539f\u56e0\u3002</p>"},{"location":"ADS/10.%20NP-Completeness/#103-p-\u95ee\u9898-\u548c-np-\u95ee\u9898","title":"10.3 P \u95ee\u9898 \u548c NP \u95ee\u9898","text":""},{"location":"ADS/10.%20NP-Completeness/#1031-\u56fe\u7075\u673a","title":"10.3.1 \u56fe\u7075\u673a","text":"<p>\u56fe\u7075\u673a\u7531\u4e00\u4e2a\u65e0\u9650\u957f\u7684\u7eb8\u5e26\u548c\u4e00\u4e2a\u8bfb\u5199\u5934\u7ec4\u6210\u3002\u7eb8\u5e26\u88ab\u5212\u5206\u4e3a\u4e00\u4e2a\u4e2a\u683c\u5b50\uff0c\u6bcf\u4e2a\u683c\u5b50\u4e0a\u6709\u4e00\u4e2a\u7b26\u53f7\uff0c\u8bfb\u5199\u5934\u53ef\u4ee5\u5728\u7eb8\u5e26\u4e0a\u79fb\u52a8\uff0c\u8bfb\u5199\u5934\u53ef\u4ee5\u8bfb\u53d6\u5f53\u524d\u683c\u5b50\u4e0a\u7684\u7b26\u53f7\uff0c\u4e5f\u53ef\u4ee5\u6539\u53d8\u5f53\u524d\u683c\u5b50\u4e0a\u7684\u7b26\u53f7\u3002\u56fe\u7075\u673a\u7684\u72b6\u6001\u662f\u4e00\u4e2a\u6709\u9650\u96c6\u5408\uff0c\u6bcf\u4e2a\u72b6\u6001\u90fd\u6709\u4e00\u4e2a\u8f6c\u79fb\u51fd\u6570\uff0c\u8f6c\u79fb\u51fd\u6570\u7684\u8f93\u5165\u662f\u5f53\u524d\u72b6\u6001\u548c\u5f53\u524d\u683c\u5b50\u4e0a\u7684\u7b26\u53f7\uff0c\u8f93\u51fa\u662f\u4e0b\u4e00\u4e2a\u72b6\u6001\u3001\u4e0b\u4e00\u4e2a\u683c\u5b50\u4e0a\u7684\u7b26\u53f7\u548c\u8bfb\u5199\u5934\u7684\u79fb\u52a8\u65b9\u5411</p> <p>A <code>Deterministic Turing Machine</code> executes one instruction at each point in time.  Then depending on the instruction, it goes to the next unique instruction.</p> <p><code>\u786e\u5b9a\u6027\u56fe\u7075\u673a</code>\u5728\u6bcf\u4e2a\u65f6\u95f4\u70b9\u6267\u884c\u4e00\u6761\u6307\u4ee4\u3002 \u7136\u540e\u6839\u636e\u6307\u4ee4\uff0c\u5b83\u8fdb\u5165\u4e0b\u4e00\u4e2a\u552f\u4e00\u7684\u6307\u4ee4\u3002</p> <p>A <code>Nondeterministic Turing Machine</code> is free to choose its next step from a finite set.  And if one of these steps leads to a solution, it will always choose the correct one.</p> <p><code>\u975e\u786e\u5b9a\u6027\u56fe\u7075\u673a</code>\u53ef\u4ee5\u4ece\u6709\u9650\u96c6\u5408\u4e2d\u81ea\u7531\u9009\u62e9\u4e0b\u4e00\u6b65\u3002 \u5982\u679c\u8fd9\u4e9b\u6b65\u9aa4\u4e4b\u4e00\u5bfc\u81f4\u89e3\u51b3\u65b9\u6848\uff0c\u5b83\u5c06\u59cb\u7ec8\u9009\u62e9\u6b63\u786e\u7684\u89e3\u51b3\u65b9\u6848\u3002</p> <p><code>\u4e24\u8005\u4e4b\u95f4\u5b58\u5728\u590d\u6742\u5ea6\u5b58\u5728\u5dee\u5f02\u3002\u5047\u8bbe\u4e24\u8005\u90fd\u9700\u8981\u4f7f\u7528n\u6b65\u89e3\u51b3\u95ee\u9898\uff0c\u5176\u4e2d\u975e\u786e\u5b9a\u6027\u56fe\u7075\u673a\u5728\u6bcf\u4e00\u6b65\u90fd\u6709k\u4e2d\u9009\u62e9\uff0c\u5b83\u9700\u8981\u5728k\u79cd\u9009\u62e9\u4e2d\u627e\u5230\u6b63\u786e\u7684\u52a8\u4f5c\uff0c\u6240\u4ee5\u9700\u8981\u904d\u5386k\u79cd\u9009\u62e9\u3002\u90a3\u4e48\u786e\u5b9a\u6027\u56fe\u7075\u673a\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n), \u975e\u786e\u5b9a\u6027\u56fe\u7075\u673a\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(k^n)\u3002</code></p> <p><code>\u4e24\u4e2a\u56fe\u7075\u673a\u5728\u89e3\u51b3\u95ee\u9898\u4e0a\u6ca1\u6709\u5dee\u5f02\uff0c\u4e00\u4e2a\u56fe\u7075\u673a\u80fd\u591f\u89e3\u51b3\uff0c\u90a3\u4e48\u53e6\u4e00\u4e2a\u4e5f\u80fd\u89e3\u51b3\u95ee\u9898\uff0c\u65e0\u975e\u662f\u4e0d\u540c\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u7684\u89e3\u51b3\u95ee\u9898</code></p>"},{"location":"ADS/10.%20NP-Completeness/#1032-p--np","title":"10.3.2 P &amp; NP","text":"<p>P \u53d6\u81ea polynomial time\uff0c\u6307\u7684\u662f\u53ef\u4ee5\u7528[\u786e\u5b9a\u578b\u56fe\u7075\u673a\uff08Deterministic Turing Machine\uff09\ud83d\udd0d]\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u89e3\u51b3\u7684\u95ee\u9898\u3002</p> <p>\u4e5f\u5c31\u662f\u6211\u4eec\u901a\u5e38\u610f\u4e49\u4e0b\u6240\u8bf4\u7684\uff0c\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u89e3\u51b3\u7684\u95ee\u9898\u3002</p> <p>NP \u5373 nondeterministic polynomial time\uff08<code>\u975e\u786e\u5b9a\u6027\u591a\u9879\u5f0f\u65f6\u95f4\uff01=\u975e\u591a\u9879\u5f0f\u65f6\u95f4</code>\uff09\uff0c\u6307\u7684\u662f\u53ef\u4ee5\u7528[\u975e\u786e\u5b9a\u578b\u56fe\u7075\u673a\uff08Nondeterministic Turing Machine\uff09\ud83d\udd0d]\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u89e3\u51b3\u7684\u95ee\u9898\u3002\u8fd9\u4e2a\u8bf4\u6cd5\u7b49\u4ef7\u4e8e\u53ef\u4ee5\u7528[\u786e\u5b9a\u578b\u56fe\u7075\u673a\ud83d\udd0d]\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u9a8c\u8bc1\uff08\u5224\u65ad\u7b54\u6848\u662f\u5426\u6b63\u786e\uff09\u3002</p> <p>\u4e5f\u5c31\u662f\u6211\u4eec\u901a\u5e38\u610f\u4e49\u4e0b\u6240\u8bf4\u7684\uff0c\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u9a8c\u8bc1\u7684\u95ee\u9898\u3002</p> <p>The problem is NP if we can prove any solution is true in polynomial time.</p> <p>example\uff1aHamilton cycle problem\uff1a\u627e\u5230\u4e00\u4e2a\u5305\u542b\u6240\u6709\u9876\u70b9\u7684\u5355\u4e2a\u5faa\u73af</p> <ul> <li>\u5f53\u524d\u6ca1\u6709\u627e\u5230\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u89e3\u51b3\u95ee\u9898\u7684\u89e3\u6cd5</li> <li>\u4f46\u662f\u5047\u8bbe\u6211\u4eec\u5df2\u77e5\u89e3\u6cd5\uff0c\u663e\u7136\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u9a8c\u8bc1\uff08\u628a\u6bcf\u4e00\u6b65\u8d70\u4e00\u904d\uff09\uff0c\u6240\u4ee5\u8fd9\u662fNP\u95ee\u9898</li> </ul> <p><code>\u770b\u6e05\u9898\u76ee\uff0c\u54c8\u5bc6\u987f\u56de\u8def\u95ee\u9898\uff08\u51b3\u7b56\u7248\uff09\u662f\u53ef\u5224\u5b9a\u95ee\u9898\uff0c\u4f46\u4e0d\u662fNP\u95ee\u9898\uff0c\u662fNPC\u95ee\u9898</code></p> <p><code>\u54c8\u5bc6\u987f\u95ee\u9898\uff08\u975e\u51b3\u7b56\uff0c\u8def\u5f84\u7248\uff09\u662f\u4e00\u4e2aNP\u95ee\u9898\uff0c\u7ed9\u5b9a\u8def\u5f84\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u8fdb\u884c\u9a8c\u8bc1</code></p> <p>P\u4e0eNP\u4e4b\u95f4\u7684\u5173\u7cfb\u662f \\(P \\subseteq NP\\),\u4e5f\u5c31\u662f\u6240\u6709\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u90fd\u5c5e\u4e8eNP\u95ee\u9898\uff0c\u4f46\u662f\u95ee\u9898\u51fa\u5728\u4e24\u8005\u662f\u5426\u662f\u771f\u5b50\u96c6\u7684\u5173\u7cfb\uff1f</p> <p>\u540c\u65f6\u5e76\u975e\u6240\u6709\u53ef\u5224\u5b9a\u7684\u95ee\u9898\u90fd\u5728 NP \u4e2d\u3002 \u4f8b\u5982\uff0c\u8003\u8651\u786e\u5b9a\u56fe\u662f\u5426\u6ca1\u6709\u54c8\u5bc6\u987f\u5faa\u73af\u7684\u95ee\u9898\u3002\u5047\u5982\u7ed9\u4f60\u4e00\u4e2a\u89e3\u6cd5\uff0c\u4f60\u8981\u4e48\u5229\u7528\u8be5\u89e3\u6cd5\u627e\u5230\u54c8\u5bc6\u987f\u56de\u8def\uff0c\u8981\u4e48\u5c31\u662f\u904d\u5386\u6240\u6709\u7684\u56de\u8def\uff0c\u8bf4\u660e\u6240\u6709\u7684\u56de\u8def\u90fd\u4e0d\u662f\u54c8\u5bc6\u987f\u56de\u8def</p>"},{"location":"ADS/10.%20NP-Completeness/#104-npc-\u95ee\u9898","title":"10.4 NPC \u95ee\u9898","text":"<p>An NP-complete problem has the property that any problem in NP can be polynomially reduced to it.</p> <p><code>\u6240\u6709\u7684NP\u95ee\u9898\uff0c\u90fd\u80fd\u591f\u591a\u9879\u5f0f\u5f52\u7ea6\u5230NPC\u95ee\u9898\uff0c\u4f46\u662fNPC\u4e0d\u80fd\u5f52\u7ea6\u5230NP\u95ee\u9898</code></p> <p>If we can solve any NP-complete problem in polynomial time, then we will be able to solve, in polynomial time, all the problems in NP!</p> <p><code>\u5982\u679c\u6211\u4eec\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u6c42\u89e3\u4efb\u4f55NP\u5b8c\u5168\u95ee\u9898\uff0c\u90a3\u4e48\u6211\u4eec\u5c06\u80fd\u591f\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u6c42\u89e3NP\u4e2d\u7684\u6240\u6709\u95ee\u9898\uff01</code></p>"},{"location":"ADS/10.%20NP-Completeness/#1041-\u591a\u9879\u5f0f\u65f6\u95f4\u5f52\u7ea6","title":"10.4.1 \u591a\u9879\u5f0f\u65f6\u95f4\u5f52\u7ea6","text":"<p>\u6211\u4eec\u5f15\u5165 P/NP \u7b49\u8fd9\u4e9b\u6982\u5ff5\uff0c\u662f\u4e3a\u4e86\u8861\u91cf\u95ee\u9898\u7684\u590d\u6742\u7a0b\u5ea6\uff0c\u800c\u5982\u4f55\u5728\u5177\u4f53\u7684\u201c\u95ee\u9898\u201d\u95f4\u4f20\u9012\u3001\u6bd4\u8f83\u8fd9\u79cd\u201c\u590d\u6742\u7a0b\u5ea6\u201d\uff0c\u5c31\u662f\u591a\u9879\u5f0f\u65f6\u95f4\u5f52\u7ea6(polynomial reduce)\u7684\u76ee\u7684\u3002</p> <pre><code>graph LR\n\u95ee\u9898A --\u591a\u9879\u5f0f\u65f6\u95f4\u8f6c\u5316--&gt; \u95ee\u9898B</code></pre> <p>\u5982\u679c\u6211\u4eec\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u7684\u590d\u6742\u5ea6\u5185\uff0c\u5c06\u95ee\u9898 A \u8f6c\u5316\u4e3a\u95ee\u9898 B\uff0c\u5219\u79f0\u95ee\u9898 A \u53ef\u4ee5\u591a\u9879\u5f0f\u65f6\u95f4\u5f52\u7ea6(polynomial reduce)\u4e3a B\uff0c\u8bb0\u4e3a \\(A \\leq_{p} B\\)\uff0c\u8868\u793a A \u4e0d\u4f1a\u6bd4 B \u96be\u3002</p> <p>\u800c\u91c7\u53d6\u6570\u5b66\u8bed\u8a00\u6765\u63cf\u8ff0\uff0c\u5219\u662f\uff1a</p> \\[ \\begin{aligned} A \\leq_{p} B  \\;\\;\\Leftrightarrow\\;\\; &amp; \\exist f() \\text{ which runs in polynomial time}, \\\\ &amp; s.t.    \\;\\; \\forall x \\in A,\\; f(x) \\in B \\\\ &amp; \\text{and}\\; \\forall f(x) \\in B,\\; y \\in A \\end{aligned} \\] <p><code>\u5c06\u95ee\u9898A\u591a\u9879\u5f0f\u89c4\u7ea6\u5230\u95ee\u9898B\uff0c\u5219\u95ee\u9898A\u4e0d\u4f1a\u6bd4\u95ee\u9898B\u96be\u3002</code></p> <p><code>\u4e5f\u5c31\u662f\u8bf4\u95ee\u9898\u7684\u96be\u5ea6\u5c0f\u4e8e\u95ee\u9898B\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u603b\u662f\u5c06\u4e00\u4e2a\u7b80\u5355\u7684\u95ee\u9898\u5f52\u7ea6\u8f6c\u5316\u4e3a\u4e00\u4e2a\u8f83\u96be\u7684\u95ee\u9898</code></p> <p></p> <ul> <li>\u5982\u679c\u95ee\u9898B\u662fP\u95ee\u9898\uff0c\u90a3\u4e48\u95ee\u9898A\u4e5f\u662fP\u95ee\u9898\uff0c\u4e24\u8005\u90fd\u80fd\u7528\u591a\u9879\u5f0f\u65f6\u95f4\u8fdb\u884c\u89e3\u51b3</li> <li>\u5982\u679cA\u662f\u4e00\u4e2aNP\u95ee\u9898\uff0c\u90a3\u4e48B\u4e5f\u662f\u4e00\u4e2aNP\u95ee\u9898</li> </ul> <p>if \\(L_1 \\leq_p L_2\\),\u8bf4\u660e\u95ee\u9898L1\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u662f\u53ef\u4ee5\u5f52\u7ea6\u5230\\(L2\\)\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cL2\u5982\u679c\u662fP\uff08\u591a\u9879\u5f0f\u53ef\u89e3\u7684\uff09\uff0c\u90a3\u4e48L1\u4e5f\u662fP\u95ee\u9898\uff08\u591a\u9879\u5f0f\u53ef\u89e3\u7684\uff09\u3002</p> <p>L2\u5982\u679c\u662fNP\u95ee\u9898\uff08\u591a\u9879\u5f0f\u53ef\u9a8c\u8bc1\uff09\uff0c\u90a3\u4e48\u8981\u9a8c\u8bc1L1\u7684\u4e00\u4e2a\u89e3\u662f\u5426\u6b63\u786e\uff0c\u5c31\u8981\u5148\u7528\u591a\u9879\u5f0f\u65f6\u95f4\u5c06L1\u7684\u8fd9\u4e2a\u89e3\u8f6c\u5316\u4e3aL2\u7684\u4e00\u4e2a\u89e3\uff0c\u7136\u540e\u518d\u7528\u591a\u9879\u5f0f\u65f6\u95f4\u9a8c\u8bc1L2\u7684\u8fd9\u4e2a\u89e3\u662f\u5426\u6b63\u786e\uff0c\u56e0\u6b64L1\u4e5f\u662fNP\u95ee\u9898</p> <p><code>example\uff1a\u5047\u8bbe\u6211\u4eec\u5df2\u77e5 Hamilton Cycle Problem \u95ee\u9898\u662f\u4e00\u4e2a NPC \u95ee\u9898\uff0c\u5c1d\u8bd5\u901a\u8fc7\u591a\u9879\u5f0f\u65f6\u95f4\u5f52\u7ea6\ud83d\udd0d\u7684\u65b9\u5f0f\u6765\u8bc1\u660e TSP \u4e5f\u662f\u4e00\u4e2a NPC \u95ee\u9898\u3002</code></p> <p>Suppose that we already know that the Hamiltonian cycle problem is NP-complete.  Prove that the traveling salesman problem is NP-complete as well.   </p> <ul> <li> <p>Hamiltonian cycle problem: Given a graph$ G=(V, E)$, <code>is there</code> a simple cycle that visits all vertices?                 </p> </li> <li> <p>Traveling salesman problem: Given a complete graph $ G=(V, E),$ with edge costs, and an integer K, is there a simple cycle that visits all vertices and has total cost \\(&lt;=\\) K?</p> </li> </ul> <p>\u76ee\u6807\uff1a\u5c06\u54c8\u5bc6\u987f\u56de\u8def\u95ee\u9898\u5f52\u7ea6\u5230\u65c5\u884c\u8005\u95ee\u9898\uff08NPC-&gt;???\uff09</p> <p>\u5bf9\u6bd4 HCP \u548c TSP \u7684\u5dee\u5f02\u3002</p> <p>\u4ee5 HCP \u4e3a\u57fa\u7840\u63cf\u8ff0 TSP\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u5728\u4e00\u5f20\u5b8c\u5168\u56fe\u4e0a\u5bfb\u627e\u603b\u957f\u4e0d\u8d85\u8fc7 \\(k\\) \u7684\u54c8\u5bc6\u987f\u73af\u8def\uff0c\u5177\u4f53\u6765\u8bf4\uff1a</p> HCP TSP \u56fe \\(G(V,E)\\) \u5b8c\u5168\u56fe \\(G'(V',E')\\) \u65e0\u8fb9\u6743 \u6709\u8fb9\u6743 - \\(\\sum v_i \\leq k\\) <p></p> <ol> <li>\u5148\u8bc1\u660eTSP\u95ee\u9898\u662fNP\u95ee\u9898\uff1a\u663e\u7136\u53ea\u9700\u8981\u9a8c\u8bc1\u7ed9\u5b9a\u7684\u7b54\u6848\u80fd\u591f\u6ee1\u8db3\u6761\u4ef6\u5373\u53ef\uff0c\u91cd\u65b0\u8d70\u4e00\u904d\u5c31\u597d\u4e86,\u53ea\u9700\u8981$ \ud835\udc42(\ud835\udc41) $\u7684\u5f00\u9500\u5c31\u80fd\u9a8c\u8bc1</li> <li>\u7531\u4e8eTSP\u95ee\u9898\u8981\u6c42\u662f\u5b8c\u5168\u56fe\uff0c\u4e5f\u5c31\u662f\u6bcf\u4e24\u70b9\u4e4b\u95f4\u90fd\u6709\u4e00\u6761\u8fb9\uff0c\u6211\u4eec\u73b0\u5728\u54c8\u5bc6\u987f\u95ee\u9898\u7684\u57fa\u7840\u4e0a\u8865\u5168\u56fe\uff0c\u5c06\u6ca1\u6709\u8fde\u7684\u8fb9\u90fd\u8fde\u8d77\u6765\uff0c\u6743\u91cd\u6807\u4e3a2\uff0c\u539f\u5148\u5df2\u7ecf\u5728\u7684\u6743\u91cd\u5c31\u6807\u4e3a1\uff0c\u5f97\u5230\u7684\u65b0\u56fe\u6807\u8bb0\u4e3a\\(G'\\)</li> <li>\u90a3\u4e48\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\uff1a\\(G\\)\u6709\u54c8\u5bc6\u987f\u56de\u8def\u5f53\u4e14\u4ec5\u5f53\\(G'\\)\u6ee1\u8db3TSP\u95ee\u9898\uff0c\u4e14\\(K = |V|\\)</li> <li>\u6240\u4ee5\u5982\u679c\u54c8\u5bc6\u987f\u56de\u8def\u95ee\u9898\u662fNPC\u95ee\u9898\uff0c\u90a3\u4e48TSP\u4e5f\u662f\u4e00\u4e2aNPC\u95ee\u9898(\u539f\u95ee\u9898\u4e3a\u5728 \\(G\\) \u4e0a\u5bfb\u627e\u54c8\u5bc6\u987f\u73af\uff0c\u7b49\u4ef7\u4e8e\u5728 \\(G' = f(G)\\) \u4e0a\u505a \\(K = |V|\\) \u7684 TSP\u3002\u7531\u6b64\u8bc1\u660e \\(\\text{HCP} \\leq_{p} \\text{TSP}\\))</li> </ol> <p>\u65c5\u884c\u5546\u95ee\u9898TSP\u5b58\u5728\u4e24\u79cd\u5b9a\u4e49\uff1a</p> <ol> <li>\u7ed9\u5b9a\u4e00\u4e2a\u5b8c\u5168\u56fe\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e00\u6761\u8def\u5f84\uff0c\u4f7f\u5f97\u5b83\u7ecf\u8fc7\u56fe\u4e2d\u7684\u6bcf\u4e2a\u70b9\u6070\u597d\u4e00\u6b21\uff0c\u4e14\u6700\u540e\u56de\u5230\u8d77\u70b9\uff0c\u4e14\u8def\u5f84\u957f\u5ea6\u6700\u77ed\u3002</li> </ol> <p>\u8be5\u7248\u672c\u7684 TSP \u95ee\u9898\u662f\u4e00\u4e2a NPH \u95ee\u9898\uff0c\u5e38\u5e38\u51fa\u73b0\u5728\u7ec4\u5408\u4f18\u5316\u7684\u8bed\u5883\u4e2d</p> <ol> <li>\u7ed9\u5b9a\u4e00\u4e2a\u5b8c\u5168\u56fe\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e00\u6761\u8def\u5f84\uff0c\u4f7f\u5f97\u5b83\u7ecf\u8fc7\u56fe\u4e2d\u7684\u6bcf\u4e2a\u70b9\u6070\u597d\u4e00\u6b21\uff0c\u4e14\u6700\u540e\u56de\u5230\u8d77\u70b9\uff0c\u4e14\u8def\u5f84\u957f\u5ea6\u4e0d\u8d85\u8fc7 \\(k\\) \u3002</li> </ol> <p>\u8be5\u7248\u672c\u7684 TSP \u95ee\u9898\u662f\u4e00\u4e2a NPC \u95ee\u9898\uff0c\u5e38\u5e38\u51fa\u73b0\u5728\u590d\u6742\u5ea6\u7406\u8bba\u7684\u8bed\u5883\u4e2d\u3002</p>"},{"location":"ADS/10.%20NP-Completeness/#105-\u5f62\u5f0f\u5316\u8bed\u8a00","title":"10.5 \u5f62\u5f0f\u5316\u8bed\u8a00","text":""},{"location":"ADS/10.%20NP-Completeness/#1051-abstract-problem","title":"10.5.1 Abstract Problem","text":"<p>an abstract problem Q is a binary relation on a set I of problem instances and a set S of problem solutions.</p> <p>\u62bd\u8c61\u95ee\u9898 Q \u662f\u4e00\u7ec4\u95ee\u9898\u5b9e\u4f8b\u548c\u4e00\u7ec4\u95ee\u9898\u89e3 S \u4e0a\u7684\u4e8c\u5143\u5173\u7cfb\u3002</p> <p>example:</p> <ul> <li>For SHORTEST-PATH problem</li> </ul> <p>$ I = { : G=(V, E)  is  an   undirected  graph; u, v \\in V };$   \\(S = { &lt;u, w_1, w_2, \u2026, w_k, v&gt;: &lt;u, w_1&gt;, \u2026, &lt;w_k, v&gt; \\in E }.\\) <p>\\(For \\ every \\ i \\in I\\), \\(SHORTEST-PATH(i) = s \\in  S.\\)</p> <ul> <li>For decision problem PATH:</li> </ul> <p>$ I = { : G=(V, E)  is  an  undirected  graph; u, v \\in V; k \u2265 0  is  an  integer };   $ <p>\\(S = { 0, 1 }.\\) \\(For\\  every \\ i \\in I, PATH(i) = 1 \\ or \\ 0.\\)</p> <p></p> <p>\u5982\u679c\u4e24\u4e2a\u5f62\u5f0f\u5316\u8bed\u8a00\u8868\u793a\u95ee\u9898\u90fd\u662fP\u95ee\u9898\uff0c\u90a3\u4e48\u5b83\u4eec\u7684\u4ea4\u96c6\u3001\u95ed\u5305\u90fd\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u5b8c\u6210\uff0c\u8fd8\u662fP\u95ee\u9898\u3002\u4e5f\u5c31\u662f\u8bf4P\u95ee\u9898\u5177\u6709\u5c01\u95ed\u6027</p> <p>\u90a3\u5982\u679c\u662fNP\u95ee\u9898\u5462\uff1f</p> <p></p> <p>\u5982\u679c \\(A(x) = 1\\)\uff0c\u5219\u7b97\u6cd5 A \u63a5\u53d7\u5b57\u7b26\u4e32 \\(x \u2208 {0\uff0c 1}\\)</p> <p>\u5982\u679c \\(A(x) = 0\\)\uff0c\u5219\u7b97\u6cd5 A \u62d2\u7edd\u5b57\u7b26\u4e32 x</p> <p>\u5982\u679c L \u4e2d\u7684\u6bcf\u4e2a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u90fd\u88ab A \u63a5\u53d7\uff0c\u5e76\u4e14 L \u4e2d\u7684\u6bcf\u4e2a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u90fd\u88ab A \u62d2\u7edd\uff0c\u5219\u7b97\u6cd5 L \u7531\u7b97\u6cd5 A \u51b3\u5b9a</p> <p>\u8981\u63a5\u53d7\u4e00\u79cd\u8bed\u8a00\uff0c\u7b97\u6cd5\u53ea\u9700\u8981\u62c5\u5fc3 L \u4e2d\u7684\u5b57\u7b26\u4e32\uff0c\u4f46\u8981\u51b3\u5b9a\u4e00\u79cd\u8bed\u8a00\uff0c\u5b83\u5fc5\u987b\u6b63\u786e\u63a5\u53d7\u6216\u62d2\u7edd \\({0\uff0c 1}\\) \u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u4e32</p> <p></p> <p>\u9a8c\u8bc1\u7b97\u6cd5\u662f\u53cc\u53c2\u6570\u7b97\u6cd5 A\uff0c\u5176\u4e2d\u4e00\u4e2a\u53c2\u6570\u662f\u666e\u901a\u8f93\u5165\u5b57\u7b26\u4e32 x\uff0c\u53e6\u4e00\u4e2a\u53c2\u6570\u662f\u79f0\u4e3a\u8bc1\u4e66\u7684\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32 y\u3002</p> <p>\u5982\u679c\u5b58\u5728\u8bc1\u4e66 y\uff0c\u5219\u53cc\u53c2\u6570\u7b97\u6cd5 A \u9a8c\u8bc1\u8f93\u5165\u5b57\u7b26\u4e32 x\uff0c\u4f7f\u5f97 \\(A\uff08x\uff0c y\uff09 = 1\u3002\\)</p> <p>\u9a8c\u8bc1\u7b97\u6cd5 A \u9a8c\u8bc1\u7684\u8bed\u8a00\u662f \\(L = { x \u2208 {0\uff0c 1} \uff1a \u5b58\u5728 y \u2208 {0\uff0c 1}\uff0c\u4f7f\u5f97 A(x\uff0c y) = 1}\u3002\\)</p> <p>\u521a\u521a\u6211\u4eec\u7814\u7a76\u5f97\u5230P\u95ee\u9898\u7684\u8865\u96c6\u4e5f\u5c5e\u4e8eP\u95ee\u9898</p> <p><code>\u73b0\u5728\u6211\u4eec\u7814\u7a76NP\u7684\u95ee\u9898\u7684\u8865\u96c6\u662f\u5426\u4e5f\u662fNP\u95ee\u9898\uff1f</code></p> <p></p> <p>\u5b9a\u4e49co-NP\u7684\u6761\u4ef6\u4e3a\\(L\\)\u7684\u8865\u96c6\\(\\overline L \\in NP\\)\uff0c\u4e00\u5171\u5b58\u5728\u4ee5\u4e0b\u56db\u79cd\u53ef\u80fd</p> <p>\u6839\u636eco-NP\u548cP\u7684\u5b9a\u4e49\uff0c\u4f60\u4f1a\u53d1\u73b0\uff0c\\(P \\in NP\\)\u5e76\u4e14\\(P \\in\\)\\(co-NP\\)</p> <p>\u56e0\u4e3a\u5982\u679c\\(L \\in P\\), \u90a3\u4e48 $ \\overline L \\in P \\subseteq NP$\u7b26\u5408co-NP\u7684\u6761\u4ef6</p> <ul> <li> <p>\\(NP = co-NP\\)</p> </li> <li> <p>\u82e5\\(P = NP\\),\u6839\u636e\\(P\\)\u7684\u5c01\u95ed\u6027\u53ef\u5f97\\(L \\in P \\Leftrightarrow \\overline L \\in P\\),\u53c8\u56e0\u4e3aco-NP\u6761\u4ef6\u4e3a\\(\\overline L \\in NP\\),\u6240\u4ee5\\(P=NP=\\)co-NP</p> </li> <li> <p>\\(NP = co-NP, P \\in NP, P\\in co-NP\\)</p> </li> <li> <p>\\(NP != co-NP\\)</p> </li> <li> <p>\\(P \\in NP \\cap co-NP\\)</p> </li> <li> <p>\\(P = NP \\cap co-NP\\)</p> </li> </ul> <p>\u5f62\u5f0f\u5316\u8bed\u8a00\u7684\u5f52\u7ea6</p> <p>A language \\(L1\\) is polynomial-time reducible to a language \\(L2\\) ( \\(L1 \u2264_p L2\\) ) if there exists a polynomial-time computable function $ f : {0, 1} \u2192 {0,1} $such that for all \\(x \\{0, 1\\},  x \\in L1  \\ iff \\  f (x) \\in L2.\\)</p> <p>We call the function$ f \\(the **reduction function(\u5f52\u7ea6\u51fd\u6570)**, and a polynomial-time algorithm\\) F$ that computes  $f $ is called a reduction algorithm\uff08\u5f52\u7ea6\u7b97\u6cd5\uff09.</p> <p>A language L \u2286 {0, 1}* is NP-complete if</p> <ol> <li>L  \u2208 NP, and</li> <li>\\(L' \u2264_p L \\ for \\ every L\u2019 \u2208 NP.\\)</li> </ol> <p></p> <p></p> <p>\u4f8b\u5b50\uff1a\u5c06\u9876\u70b9\u8986\u76d6\u95ee\u9898\u5f52\u7ea6\u5230clique problem\uff08\u5206\u56e2\u95ee\u9898\uff09</p> <p>\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u5206\u56e2\u95ee\u9898\uff08clique problem\uff09\u662fNP\u5b8c\u5907\u7684\u3002 \u8bc1\u660e\u9876\u70b9\u8986\u76d6\u95ee\u9898\u4e5f\u662f NP \u5b8c\u5907\u7684\u3002</p> <ul> <li>Clique problem: Given an undirected graph $G = (V, E) $and an integer \\(K\\), does \\(G\\) contain a complete subgraph (clique) of (at least) \\(K\\) vertices?</li> </ul> <p><code>CLIQUE = { &lt;G, K&gt; : G is a graph with a clique of size K }.</code></p> <ul> <li>Vertex cover problem: Given an undirected graph \\(G = (V, E)\\) and an integer \\(K\\), does \\(G (contain a subset \\(V' \\subset V\\) such that\\) |V'|\\) is (at most) $K $and every edge in $ G $ has a vertex in $ V' $(vertex cover)?</li> </ul> <p><code>VERTEX-COVER = { &lt;G, K&gt; : G has a vertex cover of size K }.</code></p> <p>\u8bc1\u660e\uff1a</p> <ol> <li>VERTEX-COVER \u2208 NP</li> </ol> <p>Given any $ x = $, take \\(V' \\subseteq  V\\) as the certificate \\(y.\\) Verification algorithm: check if \\(|V'| = K\\); check if for each edge \\((u, v) \u2208 E\\), that \\(u \u2208 V'\\) or \\(v \u2208 V'\\).  <p><code>\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\uff1a\u6bcf\u6761\u8fb9\u68c0\u6d4b\u662f\u5426\u6709\u9876\u70b9\u4f4d\u4e8eV\u2018\u4e2d\uff0c\u4e00\u5171\u6709N\u6761\u8fb9</code>\\(O(N \\times N \\times N = N^3)\\)</p> <ol> <li>CLIQUE \\(\u2264_p\\) VERTEX-COVER (<code>\u8bc1\u660e\u5206\u56e2\u95ee\u9898 no harder than\u9876\u70b9\u8986\u76d6\u95ee\u9898</code>)</li> </ol> <p>G has a clique of size K iff \\(\\overline G\\) has a vertex cover of size \\(|V| - K\\).</p> <p>\\(\\Rightarrow\\)</p> <ul> <li>\\(G\\)\u4e2d\u5b58\u5728\u5206\u56e2\u5b50\u96c6\\(V' \\subseteq V\\)\u5176\u5927\u5c0f\u4e3a\\(|V'| = K\\)\uff0c\u4ee4\u8fb9\\((u,v)\\)\u8868\u793a\u4e0d\u5728\\(E\\)\u4e2d\u7684\u8fb9\uff0c\u4e5f\u5c31\u662f\u6839\u636e\\(V\\)\u5c06\u539f\u56fe\u8865\u5168\u6210\u5b8c\u5168\u56fe\u7684\u8fb9</li> <li>\u90a3\u4e48\u80af\u5b9a\u5b58\u5728\u4e00\u4e2a\u70b9\\(u/v\\)\u4e0d\u5728\\(V'\\)\u4e2d\uff0c\u4e5f\u5c31\u662f\u8bf4\u5b58\u5728\u4e8e\\(V - V'\\),\u6b64\u65f6\u521a\u597d\u8bf4\u660e\\(\\overline G\\)(\u539f\u56fe\u7684\u8865\u56fe)\u4e2d\u6bcf\u4e00\u6761\u8fb9\u90fd\u81f3\u5c11\u6709\u4e00\u4e2a\u9876\u70b9\u5b58\u5728\u4e8e\\(V - V'\\)\u4e2d</li> <li>\u521a\u597d\u6ee1\u8db3\u9876\u76d6\u8986\u76d6\u7684\u5b9a\u4e49\uff0c\u6240\u4ee5 \\(\\overline G\\) has a vertex cover of size \\(|V| - K\\).</li> </ul> <p>\\(\\Leftarrow\\)</p> <ul> <li>\u5df2\u77e5\u8865\u56fe\u6ee1\u8db3\u9876\u70b9\u8986\u76d6\uff0c\u5bf9\u4efb\u610f\u7684\u8fb9\\((u,v) \\notin E\\),\\(u \\in V'\\)\u6216\u8005\\(v \\in V'\\)</li> <li>\u90a3\u4e48\u5bf9\u4e8e\u540c\u65f6\u4e0d\u5728\\(V\u2019\\)\u7684\u70b9\u6784\u6210\u7684\u8fb9\\((u,v) \\in E\\),\u6240\u4ee5\\(V-V'\\) is a clique and it has size$ |V|-|V'| = K. $</li> </ul> <p></p>"},{"location":"ADS/10.%20NP-Completeness/#106-\u4e60\u9898\u96c6","title":"10.6 \u4e60\u9898\u96c6","text":"<ol> <li>If \\(\ud835\udc3f1\u2264_p\ud835\udc3f2\\) and$ \ud835\udc3f2\u2208\ud835\udc41\ud835\udc43$, then \\(\ud835\udc3f1\u2208\ud835\udc41\ud835\udc43\\). (T/F)</li> </ol> <p><code>T</code>,\u8fd9\u91cc\u7684\\(\u2264_p\\)\u8868\u793ano harder than\uff0c \u5176\u5b9e\u662f\\(L_1\\)\u53ef\u4ee5\u591a\u9879\u5f0f\u5f52\u7ea6\u81f3\\(L_2\\),\u7531\u4e8e\\(L_2 \\in NP\\),\u90a3\u4e48\\(L_2\\)\u53ef\u4ee5\u5728\u975e\u786e\u5b9a\u6027\u56fe\u7075\u673a\u4e0a\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u8303\u56f4\u5185\u89e3\u51b3\u95ee\u9898\uff0c\u6240\u4ee5\\(L_1\\)\u4e5f\u80fd\u591f\u5728\u975e\u786e\u5b9a\u6027\u56fe\u7075\u673a\u4e0a\u591a\u9879\u5f0f\u65f6\u95f4\u89e3\u51b3</p> <ol> <li><code>All NP-complete problems are NP problems.</code></li> </ol> <p><code>T,\u6240\u6709\u7684NPC\u95ee\u9898\u90fd\u662fNP\u95ee\u9898.</code>NPC = NP \\(\\cap\\) NPH</p> <ol> <li>All the languages can be decided by a non-deterministic machine.</li> </ol> <p><code>F,\u5ffd\u7565\u4e86\u4e0d\u53ef\u5224\u5b9a\u95ee\u9898\u3002\u975e\u786e\u5b9a\u6027\u56fe\u7075\u673a\u80fd\u591f\u5904\u7406NP\u95ee\u9898\uff0c\u786e\u5b9a\u6027\u56fe\u7075\u673a\u80fd\u591f\u5904\u7406P\u95ee\u9898.</code>NPH\u95ee\u9898\u65e0\u6cd5\u4f7f\u7528\u4e0d\u786e\u5b9a\u6027\u56fe\u7075\u673a\u8fdb\u884c\u9a8c\u8bc1</p> <ol> <li>If a problem can be solved by dynamic programming, it must be solved in polynomial time.</li> </ol> <p><code>F,\u80cc\u5305\u95ee\u9898\uff0c\u4f46\u662f\u4e0d\u80fd\u7528\u591a\u9879\u5f0f\u65f6\u95f4\u8fdb\u884c\u89e3\u51b3\uff0c\u539f\u56e0\u662f\u8f93\u5165\u7684\u6570\u636e\u4e0d\u662f\u591a\u9879\u5f0f\u7684</code></p> <ol> <li>all decidable problems are NP problems.</li> </ol> <p><code>F,\u4f46\u5e76\u975e\u6240\u6709\u7684decidable problems\u90fd\u53ef\u4ee5\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u9a8c\u8bc1\u89e3\uff0c\u8fd8\u5305\u62ecNPH\u95ee\u9898</code></p> <ol> <li>Among the following problems, __ is NOT an NP-complete problem.</li> </ol> <p>A.Vertex cover problem</p> <p>B.Hamiltonian cycle problem</p> <p>C.Halting problem</p> <p>D.Satisfiability problem</p> <p><code>C\u662f\u4e0d\u53ef\u5224\u5b9a\u95ee\u9898\uff0c\u9876\u70b9\u8986\u76d6\u95ee\u9898\u548c\u5206\u56e2\u95ee\u9898\uff08clique problem\uff09\uff0c\u54c8\u5bc6\u987f\u56de\u8def\u95ee\u9898\u548c\u65c5\u884c\u5546\u95ee\u9898\u3002D\u9009\u9879\u662f\u6700\u65e9\u53d1\u73b0\u7684NPC\u95ee\u9898</code></p> <ol> <li>Suppose $ \ud835\udc44 $ is a problem in \\(\ud835\udc41\ud835\udc43\\), but not necessarily NP-complete. Which of the following is FALSE?</li> </ol> <p>A. A polynomial-time algorithm for SAT would sufficiently imply a polynomial-time algorithm for \\(\ud835\udc44\\).</p> <p><code>B. A polynomial-time algorithm for$ \ud835\udc44 $would sufficiently imply a polynomial-time algorithm for SAT.</code></p> <p>C. If \\(Q \\notin P\\), then \ud835\udc43\u2260\ud835\udc41\ud835\udc43.</p> <p>D. If \ud835\udc44 is NP-hard, then \ud835\udc44 is NP-complete.</p> <ol> <li> <p></p> </li> <li> <p></p> </li> </ol>"},{"location":"ADS/11.%20Approximation/","title":"Lecture 11 | Approximation","text":"<p> \u7ea6 6742 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 34 \u5206\u949f</p> <p>\u5728\u4e0a\u4e00\u7ae0\u4e2d\u6211\u4eec\u4ecb\u7ecd\u4e86 P/NP \u95ee\u9898\uff0c\u800c\u5927\u5bb6\u666e\u904d\u8ba4\u4e3a P \u2260 NP\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u5bf9\u4e8e\u67d0\u4e9b\u95ee\u9898\uff0c\u6211\u4eec\u65e0\u6cd5\u4f7f\u7528\u591a\u9879\u5f0f\u65f6\u95f4\u89e3\u51b3\uff0c\u800c\u5728\u95ee\u9898\u89c4\u6a21\u53d8\u5927\u65f6\uff0c\u8d8a\u53d1\u4e0d\u53ef\u63a5\u53d7\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u8003\u8651\u80fd\u5426\u9000\u800c\u6c42\u5176\u6b21\uff0c\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u6c42\u4e00\u4e2a\u6bd4\u8f83\u4f18\u7684\u89e3\u3002\u66f4\u5177\u4f53\u7684\u6765\u8bf4\uff0c\u6211\u4eec\u5c1d\u8bd5\u5bfb\u627e\u4e00\u79cd\u591a\u9879\u5f0f\u7b97\u6cd5\uff0c\u4f7f\u5f97\u5176\u7ed3\u679c\u59cb\u7ec8\u5728\u5173\u4e8e\u6700\u4f18\u89e3\u7684\u53ef\u63a5\u53d7\u504f\u5dee\u8303\u56f4\u5185\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u7b97\u6cd5\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u8fd1\u4f3c\u7b97\u6cd5(approximation algorithm)\u3002</p>"},{"location":"ADS/11.%20Approximation/#111-\u8fd1\u4f3c\u7b97\u6cd5","title":"11.1 \u8fd1\u4f3c\u7b97\u6cd5","text":"<p>\u6211\u4eec\u8bbe \\(f(n, x)\\) \u662f\u5bf9\u8f93\u5165\u5927\u5c0f\u4e3a \\(n\\) \u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u8ba1\u7b97\u7ed3\u679c \\(x\\) \u6240\u4ed8\u51fa\u4ee3\u4ef7Cost\u7684\u76f4\u89c2\u91cf\u5316\uff08\u4f8b\u5982 dist, weight...\uff09\uff0c\u82e5\u8bbe \\(x^*\\) \u4e3a\u6700\u4f18\u89e3\uff0c\\(x\\) \u4e3a\u7ed9\u5b9a\u7b97\u6cd5\u7ed3\u679c\uff0c\u5219\u6211\u4eec\u5b9a\u4e49\u8fd1\u4f3c\u6bd4(Approximation Ratio) \\(\\rho(n)\\)\uff1a $$ \\forall  \\rho(n) = \\max\\left{\\frac{f(n, x)}{f(n, x^)}, \\frac{f(n, x^)}{f(n, x)}\\right} $$</p> <p>\u5219\u79f0\u7ed9\u5b9a\u7b97\u6cd5\u4e3a \\(\\rho(n)\\) \u8fd1\u4f3c\u7b97\u6cd5(\\(\\rho(n)\\)-approximation algorithm)\u3002</p> <p><code>\"\u8fd1\u4f3c\u7b97\u6cd5 v.s. \u968f\u673a\u7b97\u6cd5\"</code></p> <p>\u5728\u770b\u5230\u8fd1\u4f3c\u7b97\u6cd5\u65f6\uff0c\u6211\u8111\u5b50\u91cc\u4e00\u4e0b\u5b50\u6d6e\u73b0\u51fa\u4e86\u968f\u673a\u7b97\u6cd5\u7684\u6982\u5ff5\uff0c\u540c\u6837\u662f\u6c42\u6700\u4f18\u89e3\u7684\u8fd1\u4f3c\u89e3\uff0c\u4e24\u8005\u6709\u4f55\u533a\u522b\u5462\uff1f</p> <p>\u8fd1\u4f3c\u7b97\u6cd5\u548c\u968f\u673a\u7b97\u6cd5\u6700\u5927\u7684\u533a\u522b\u5c31\u662f\uff0c\u5f53\u6211\u4eec\u8bbe\u8ba1\u3001\u5206\u6790\u3001\u8ba8\u8bba\u8fd1\u4f3c\u7b97\u6cd5\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5173\u6ce8\u7684\u90fd\u662f\u5b83\u7684\u6700\u574f\u60c5\u51b5\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c<code>\u8fd1\u4f3c\u7b97\u6cd5\u662f\u5b8c\u5168\u53ef\u63a7\u7684\uff0c\u800c\u7eaf\u7cb9\u7684\u968f\u673a\u7b97\u6cd5\u5219\u662f\u901a\u8fc7\u6982\u7387\u6765\u51cf\u5c11\u574f\u60c5\u51b5\u51fa\u73b0\u7684\u53ef\u80fd\uff0c\u5e76\u6ca1\u6709\u4e25\u683c\u7684\u7ea6\u675f\u3002</code>\u8fd1\u4f3c\u7b97\u6cd5\u6700\u574f\u4e5f\u5c31\u574f\u5230 \\(\\rho\\)\uff0c\u800c\u968f\u673a\u7b97\u6cd5\u6700\u574f\u53ef\u4ee5\u574f\u5230\u6d77\u62c9\u9c81\u5927\u9646\u3002</p>"},{"location":"ADS/11.%20Approximation/#1111-\u8fd1\u4f3c\u8303\u5f0f","title":"11.1.1 \u8fd1\u4f3c\u8303\u5f0f","text":"<p>\u5b9a\u4e4911.1 \u5047\u8bbe\u6709\u67d0\u7c7b\u95ee\u9898\uff08\u4f8b\u5982\u80cc\u5305\u95ee\u9898\uff09\uff0c\u5176\u4e2d\u7684\u4e00\u4e2a\u5177\u4f53\u5b9e\u4f8b\u8bb0\u4e3aI\uff08\u5f53\u80cc\u5305\u95ee\u9898\u7684\u53c2\u6570\u7ed9\u5b9a\u7684\u65f6\u5019\u5373\u4e3a\u4e00\u4e2a\u5b9e\u4f8b\uff09\uff0c\u4e14\u6709\u4e00\u4e2a\u590d\u6742\u5ea6\u4e3a\u591a\u9879\u5f0f\u7684\u8fd1\u4f3c\u7b97\u6cd5A\u3002\u5b9a\u4e49\uff1a</p> <p>\u2022 A(I) \u4e3a\u7b97\u6cd5A \u5728\u5b9e\u4f8bI \u4e0a\u5f97\u5230\u7684\u89e3\uff1b</p> <p>\u2022 OPT(I) \u4e3a\u5b9e\u4f8bI \u7684\u6700\u4f18\u89e3\u3002</p> <p>\u8003\u8651\u5230\u8be5\u7c7b\u95ee\u9898\u662f\u6700\u5c0f\u5316\u95ee\u9898\uff0c\u6240\u4ee5\u82e5\u5b58\u5728\\(r \\geq 1\\),\u5bf9\u4efb\u610f\u7684I\u90fd\u6709\\(A(I) \\leq r \\dot OPT(I)\\),\u90a3\u4e48\u79f0A\u4e3a\u8be5\u95ee\u9898\u7684r-\u8fd1\u4f3c\u7b97\u6cd5\uff0cr\u5c31\u662f\u8fd1\u4f3c\u6bd4</p> <p></p> <p>\u8fd1\u4f3c\u8303\u5f0f(approximation scheme)\u6307\u7684\u662f\u5bf9\u4e8e\u67d0\u4e2a\u4f18\u5316\u95ee\u9898\u7684\u4e00\u65cf\u76f8\u540c\u6a21\u5f0f\u7684\u7b97\u6cd5\uff0c\u5b83\u4eec\u6ee1\u8db3\u5bf9\u4e8e\u786e\u5b9a\u7684 \\(\\epsilon &gt; 0\\)\uff0c\u7b97\u6cd5\u7684\u8fd1\u4f3c\u6bd4\u4e3a \\(1+\\epsilon\\)\u3002</p> <p>\u4e5f\u5c31\u662f\u8bf4\u5b58\u5728\u7b97\u6cd5A\uff0c\u4f7f\u5f97\u5bf9\u4efb\u610f\u7684\u5b9e\u4f8b\u90fd\u6709\\(A(I) \\leq (1+\\epsilon)OPT(I)\\)</p> <p>\u53ef\u4ee5\u7c97\u7cd9\u5730\u7406\u89e3\u4e3a\uff1a\u201c\u8303\u5f0f\u201d\u662f\u4e00\u4e2a\u8f93\u51fa\u4e3a\u7b97\u6cd5\u7684\u7279\u6b8a\u51fd\u6570\uff0c\u800c \\(\\epsilon\\) \u662f\u201c\u8303\u5f0f\u201d\u7684\u4e00\u4e2a\u53c2\u6570\uff0c\u5bf9\u4e8e\u7279\u5b9a\u7684 \\(\\epsilon\\)\uff0c\u201c\u8303\u5f0f\u201d\u8f93\u51fa\u4e00\u4e2a\u7279\u5b9a\u7684\u7b97\u6cd5\uff08\u8fd9\u4e9b\u7b97\u6cd5\u6709\u7740\u76f8\u540c\u7684\u6a21\u5f0f\uff09\uff0c\u800c\u8fd9\u4e9b\u201c\u8303\u5f0f\u201d\u8f93\u51fa\u7684\u7b97\u6cd5\uff0c\u90fd\u89e3\u51b3\u540c\u4e00\u4e2a\u95ee\u9898\uff0c\u5e76\u4e14\u5bf9\u4e8e\u4efb\u610f\u56fa\u5b9a\u7684 \\(\\epsilon\\) \u5176\u8fd1\u4f3c\u6bd4\u4e3a \\(1+\\epsilon\\)\u3002</p> <p>\u800c\u5173\u4e8e \\(\\epsilon &gt; 0\\) \u8fd9\u4e2a\u7ea6\u675f\uff0c\u662f\u56e0\u4e3a\u8fd1\u4f3c\u6bd4\u5fc5\u5b9a\u5927\u4e8e 1\u3002</p> <p>\u800c\u6b64\u65f6\uff0c\u8fd9\u4e00\u65cf\u7684\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u53ef\u4ee5\u8868\u793a\u4e3a \\(O(f(n, \\epsilon))\\)\uff0c\u5982 \\(O(n^{2/\\epsilon}), O((\\frac{1}{\\epsilon})^2n^3)\\)\u3002\u5f53 \\(f(n, \\epsilon)\\) \u5173\u4e8e \\(n\\) \u662f\u591a\u9879\u5f0f\u65f6(\u4e5f\u5c31\u662f\u8bf4\u7b97\u6cd5\u7684\u8fd0\u884c\u65f6\u95f4\u4ee5\u95ee\u9898\u89c4\u6a21|I|\u7684\u591a\u9879\u5f0f\u4e3a\u4e0a\u754c)\uff0c\u6211\u4eec\u79f0\u5176\u4e3a<code>\u591a\u9879\u5f0f\u65f6\u95f4\u8fd1\u4f3c\u8303\u5f0f(polynomial-time approximation scheme, PTAS)</code>\u3002\u5f53 \\(f(n, \\epsilon)\\) \u5173\u4e8e \\(n\\) \u548c \\(\\frac{1}{\\epsilon}\\) \u90fd\u662f\u591a\u9879\u5f0f\u65f6\uff0c\u6211\u4eec\u79f0\u5176\u4e3a<code>\u5b8c\u5168\u591a\u9879\u5f0f\u65f6\u95f4\u8fd1\u4f3c\u8303\u5f0f(fully polynomial-time approximation scheme, FPTAS)</code>\u3002</p> <p>\u4e3a\u4ec0\u4e48\u8981\u533a\u5206 PTAS \u548c FPTAS \u5462\uff1f\u6211\u4eec\u89c2\u5bdf \\(\\epsilon\\) \u5bf9\u7b97\u6cd5\u7684\u5f71\u54cd\uff1a\u968f\u7740 \\(\\epsilon\\) \u7684\u51cf\u5c0f\uff0c\u8fd1\u4f3c\u6bd4\u9010\u6e10\u53d8\u5c0f\uff0c\u5373\u51c6\u786e\u5ea6\u63d0\u9ad8\uff1b\u800c \\(\\dfrac{1}{\\epsilon}\\) \u53d8\u5927\uff0c\u800c\u901a\u5e38\u6765\u8bf4 \\(\\dfrac{1}{\\epsilon}\\) \u4e0e\u7b97\u6cd5\u590d\u6742\u5ea6\u90fd\u662f\u6b63\u76f8\u5173\u7684\uff0c\u56e0\u6b64\u4f1a\u5bfc\u81f4\u7b97\u6cd5\u590d\u6742\u5ea6\u5347\u9ad8(\u53ef\u80fd\u6307\u6570\u7ea7\u522b\u589e\u957f)\u3002</p> <ul> <li>\u5982\u679c\u8bf4\u8fd9\u4e2a\u8fd1\u4f3c\u8303\u5f0f\u662f FPTAS\uff0c\u90a3\u4e48\u4e3a\u4e86\u63d0\u9ad8\u51c6\u786e\u5ea6\u800c\u7f29\u5c0f \\(\\epsilon\\)\uff0c\u5bfc\u81f4\u7684\u590d\u6742\u5ea6\u53d8\u5316\u662f\u76f8\u5bf9\u53ef\u63a5\u53d7\u7684\uff08\u591a\u9879\u5f0f\u7ea7\u7684\u53d8\u5316\uff0c\u5982 \\((\\dfrac{1}{\\epsilon})^2n^3\\) \u5173\u4e8e \\(\\dfrac{1}{\\epsilon}\\) \u662f\u591a\u9879\u5f0f\u7ea7\u7684\uff09\uff1b</li> <li>\u7136\u800c\u5982\u679c\u5b83\u4e0d\u662f FPTAS\uff0c\u90a3\u4e48 \\(\\epsilon\\) \u7684\u7f29\u5c0f\u53ef\u80fd\u5e26\u6765\u6050\u6016\u7684\u590d\u6742\u5ea6\u589e\u52a0\uff08\u5982 \\(n^{2/\\epsilon}\\) \u5173\u4e8e \\(\\epsilon\\) \u662f\u6307\u6570\u7ea7\u7684\uff09\u3002</li> </ul>"},{"location":"ADS/11.%20Approximation/#112-\u6848\u4f8b-approximate-bin-packing","title":"11.2 [\u6848\u4f8b] Approximate Bin Packing","text":"<p>\u88c5\u7bb1\u95ee\u9898\u6307\u7684\u662f\uff0c\u7ed9\u5b9a \\(N\\) \u4e2a item\uff0c\u7b2c \\(i\\in [1,N]\\) \u4e2a item \u7684 size \u4e3a \\(S_i \\in (0,1]\\)\uff0c\u4e00\u4e2a bin \u7684\u5927\u5c0f\u4e3a \\(1\\)\uff0c\u5c1d\u8bd5\u5bfb\u627e\u6700\u5c11\u7684\uff0c\u80fd\u591f\u88c5\u8f7d\u6240\u6709 item \u7684 bin \u7684\u6570\u91cf\u3002</p> <p>eg \"\ud83c\udf30 \u4f8b\u5b50\"\uff1a</p> <p>\u7ed9\u5b9a 7 \u4e2a item\uff0csize \u5206\u522b\u4e3a \\(0.2, 0.5, 0.4, 0.7, 0.1, 0.3, 0.8\\)\uff0c\u5219\u6700\u5c11\u9700\u8981 3 \u4e2a bin\uff08\u6700\u4f18\u89e3\uff09\uff1a</p> <pre><code>- bin 1: $0.2 + 0.8$;\n- bin 2: $0.7 + 0.3$;\n- bin 3: $0.4 + 0.1 + 0.5$;\n</code></pre> <p>\u8fd9\u662f\u4e00\u4e2a NP hard \u95ee\u9898\uff0c\u73b0\u5728\u6211\u4eec\u8003\u8651\u4e09\u79cd\u8fd1\u4f3c\u89e3\u6cd5\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e09\u79cd\u90fd\u662f\u5728\u7ebf(online)\u89e3\u6cd5\uff0c\u5373\u5904\u7406 \\(item_i\\) \u65f6\u6211\u4eec\u4e0d\u77e5\u9053 \\(item_{i+1}\\sim item_{N}\\) \u7684\u60c5\u51b5\u3002\u4e4b\u540e\u6211\u4eec\u4f1a\u518d\u8ba8\u8bba\u79bb\u7ebf(offline)\u505a\u6cd5\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u77e5\u9053\u6240\u6709 item \u7684\u60c5\u51b5\u4ee5\u540e\u518d\u7ed9\u51fa\u7b56\u7565\u3002</p>"},{"location":"ADS/11.%20Approximation/#1121-online-next-fit-nf","title":"11.2.1 (online) Next Fit (NF)","text":"<p>NF \u7b56\u7565\u603b\u662f\u9009\u62e9\u5f53\u524d\u6700\u540e\u4e00\u4e2a bin\uff0c\u82e5\u80fd\u591f\u5bb9\u7eb3\uff0c\u5219\u5c06\u5f53\u524d item \u653e\u5165\u5176\u4e2d\uff0c\u5426\u5219\u65b0\u5f00\u4e00\u4e2a bin\u3002</p> <pre><code>void NextFit ( )\n{   \n    read item1;\n    while ( read item2 ) \n    {\n        if ( item2 can be packed in the same bin as item1 )\n            place item2 in the bin;\n        else\n            create a new bin for item2;\n        item1 = item2;\n    } /* end-while */\n}\n</code></pre> <p>\u3010Theorem\u3011 Let M be the optimal number of bins required to pack a list I of items.  Then next fit never uses more than 2M \u2013 1 bins.  There exist sequences such that next fit uses 2M  \u2013 1 bins.</p> <p>\u9006\u53cd\u547d\u9898\uff1aIf Next Fit generates 2M (or 2M+1) bins, then the optimal solution must generate at least M+1 bins.</p> <p>proof \uff1a</p> <p>\u6211\u4eec\u4ece NF \u7684\u7ed3\u679c\u51fa\u53d1\uff0c\u8bc1\u660e\u5f53 NF \u7684\u7ed3\u679c\u4e3a\u9700\u8981 \\(2M+1\\) \u6216 \\(2M\\) \u4e2a bin \u65f6\uff0c\u6700\u4f18\u89e3\u4e3a\u81f3\u5c11\u9700\u8981 \\(M+1\\) \u4e2a bin\u3002</p> <p>\u5047\u8bbe \\(S(B_i)\\) \u8868\u793a\u7b2c \\(i\\) \u4e2a bin \u7684 size\uff0c\u5219\u6839\u636e NF \u7684\u5b9a\u4e49\uff0c\u6709\uff1a\\(S(B_{i}) + S(B_{i+1}) &gt; 1\\)\uff08<code>\u53ea\u6709\u5f53\u7b2ci\u4e2abin\u88c5\u4e0d\u4e0b\u4e1c\u897f\u4e86\uff0c\u624d\u80fd\u542f\u7528\u7b2ci+1\u4e2abin\uff0c\u4e5f\u5c31\u662f\u8bf4\u7b2ci\u4e2abin\u7684\u5269\u4f59\u7a7a\u95f4\u4e0d\u5141\u8bb8\u7b2ci+1\u4e2abin\u6240\u88c5\u7684\u7269\u54c1\u7684\u4f53\u79ef</code>\uff09\u3002\u6216\u8005\u4f7f\u7528\u53cd\u8bc1\u6cd5\uff0c\u5047\u8bbe \\(S(B_{i}) + S(B_{i+1}) \\leq 1\\)\uff0c\u8fd9\u8bf4\u660e\u65e0\u8bba \\(B_{i+1}\\) \u4e2d\u6709\u591a\u5c11 item\uff0c\u90fd\u4e00\u5b9a\u80fd\u653e\u8fdb \\(B_i\\)\uff0c\u800c\u8fd9\u4e0e NF \u201c\\(B_i\\) \u653e\u4e0d\u4e0b\u4e86\u624d\u5f00\u59cb\u653e \\(B_{i+1}\\)\u201d \u7684\u6027\u8d28\u76f8\u8fdd\u80cc\u3002\u4e8e\u662f\u6211\u4eec\u5c06\u6240\u6709\u6876\u4e24\u4e24\u914d\u5bf9\uff1a</p> <p>1.\u5f53 NF \u7684\u7ed3\u679c\u662f\u9700\u8981 \\(2M\\) \u4e2a bin \u65f6\uff1a $$ \\left{ \\begin{aligned}     &amp;S(B_1) + S(B_2) &amp;&gt; 1 \\     &amp;S(B_3) + S(B_4) &amp;&gt; 1 \\     \\vdots \\     &amp;S(B_{2M-3}) + S(B_{2M-2}) &amp;&gt; 1 \\     &amp;S(B_{2M-1})+S(B_{2M}) &amp;&gt; 1 \\end{aligned} \\right. \\ \\begin{aligned}     &amp;\\therefore \\sum_{i=1}^{2M+1} &gt; \\sum_{i=1}^{2M} &gt; M \\     &amp;\\therefore \\sum_{i=1}^{2M} \\geq M+1 \\end{aligned} $$</p> <p>\u5373 item \u7684\u603b size \u81f3\u5c11\u4e3a M+1\uff0c\u5373\u6700\u4f18\u89e3\u81f3\u5c11\u9700\u8981 \\(M+1\\) \u4e2a bin\u3002</p> <p>2.\u800c\u5f53 NF \u7684\u7ed3\u679c\u662f\u9700\u8981 \\(2M+1\\) \u4e2a bin \u65f6\uff0c\u53ef\u4ee5\u8f6c\u5316\u4e3a \\(2M\\) \u7684\u60c5\u51b5\uff0c<code>\u663e\u71362M+1\u4e2abin\u6240\u88c5\u7269\u54c1\u7684\u4f53\u79ef\u5927\u4e8e2M\u4e2abin\u6240\u88c5\u7269\u54c1\u7684\u4f53\u79ef</code>\u3002</p> <p>Next Fit\u7684\u8fd1\u4f3c\u6bd4\u7ea6\u4e3a2\uff0c\u4e0a\u754c\u6765\u6e90\u4e8e\u4e0a\u65b9\u7684\u8ba1\u7b97\uff0c\\(\\rho = \\dfrac{A(I)}{OPT(I)} \\leq \\dfrac{2M+1}{M+1} \\approx 2\\)</p> <p>\u4e0b\u754c\u6765\u81ea\u5b9e\u4f8b\uff1a\u6240\u6709\u7684\u7269\u54c1\u5927\u5c0f\u4e3a\\(\\dfrac{1}{2},\\epsilon,\\cdots,\\dfrac{1}{2},\\epsilon\\),\u4e00\u5171\u6709m\u7ec4\\(\\dfrac{1}{2},\\epsilon\\),\u5176\u4e2d\\(\\epsilon\\)\u5145\u5206\u5c0f\uff0cm\u5145\u5206\u5927\uff0c\u90a3\u4e48NF\u7684\u89e3\u4e3am\uff0c\u6700\u4f18\u89e3\u4e3a\\(\\dfrac{m}{2}+1\\),\\(\\rho &gt; \\dfrac{m}{\\frac{m}{2}+1} \\approx 2\\)</p>"},{"location":"ADS/11.%20Approximation/#1122-online-first-fit-ff","title":"11.2.2 (online) First Fit (FF)","text":"<p>FF \u7b56\u7565\u603b\u662f\u9009\u62e9\u7b2c\u4e00\u4e2a\u80fd\u653e\u4e0b\u5f53\u524d item \u7684 bin\uff0c\u82e5\u6240\u6709 bin \u90fd\u65e0\u6cd5\u5bb9\u7eb3\u5f53\u524d item\uff0c\u5219\u65b0\u5f00\u4e00\u4e2a bin\u3002</p> <pre><code>void FirstFit ( )\n{   \n    while ( read item ) \n    {\n        scan for the first bin that is large enough for item;\n        if ( found )\n            place item in that bin;\n        else\n            create a new bin for item;\n    } /* end-while */\n}\n</code></pre> <p>\u3010Theorem\u3011Let M be the optimal number of bins required to pack a list I of items.  Then first fit never uses more than 17M / 10 bins.  There exist sequences such that first fit uses 17(M \u2013 1) / 10 bins.</p> <p>FF \u7b56\u7565\u603b\u662f\u4f7f\u7528\u4e0d\u8d85\u8fc7 \\(\\lfloor 1.7M \\rfloor\\) \u4e2a bin\uff0c\u5e76\u4e14\u5b58\u5728\u4e00\u65cf\u80fd\u5bf9\u8fb9\u754c\u53d6\u7b49\u7684\u8f93\u5165\uff0c\u5176\u4e2d \\(M\\) \u8868\u793a\u6700\u4f18\u89e3\u7684 bin \u6570\u91cf\u3002</p>"},{"location":"ADS/11.%20Approximation/#1123-online-best-fit-bf","title":"11.2.3 (online) Best Fit (BF)","text":"<p>BF \u7b56\u7565\u603b\u662f\u9009\u62e9\u80fd\u591f\u5bb9\u7eb3\u5f53\u524d item \u4e14\u5269\u4f59\u7a7a\u95f4\u6700\u5c0f\u7684 bin\uff08\u5373 tightest\uff09\uff0c\u82e5\u6240\u6709 bin \u90fd\u65e0\u6cd5\u5bb9\u7eb3\u5f53\u524d item\uff0c\u5219\u65b0\u5f00\u4e00\u4e2a bin\u3002</p> <p>NF \u7b56\u7565\u4e5f\u603b\u662f\u4f7f\u7528\u4e0d\u8d85\u8fc7 \\(\\lfloor 1.7M \\rfloor\\) \u4e2a bin\uff0c\u5e76\u4e14\u5b58\u5728\u4e00\u65cf\u80fd\u5bf9\u8fb9\u754c\u53d6\u7b49\u7684\u8f93\u5165\uff0c\u5176\u4e2d \\(M\\) \u8868\u793a\u6700\u4f18\u89e3\u7684 bin \u6570\u91cf\u3002</p> <p>\u770b\u4f3cBF\u6709\u6bd4FF\u66f4\u9ad8\u7684bin\u5229\u7528\u7387\uff0c\u4f46\u662f\u4e8b\u5b9e\u5e76\u975e\u5982\u6b64\u3002</p> <p>\u8003\u8651\u4e0b\u97625 \u4e2a\u7269\u54c1\u7684\u5b9e\u4f8b\uff1a0.5\u30010.7\u30010.1\u30010.4\u30010.3\u3002\u6b64\u5b9e\u4f8bFF \u9700\u89812 \u4e2a\u7bb1\u5b50\uff0c\u800cBF \u5219\u9700\u89813 \u4e2a\uff1b\u8003\u8651\u4e0b\u97624 \u4e2a\u7269\u54c1\u7684\u5b9e\u4f8b\uff1a0.5\u30010.7\u30010.3\u30010.5\uff0c\u6b64\u5b9e\u4f8b\u7528FF \u9700\u89813 \u4e2a\u7bb1\u5b50\uff0c\u800cBF \u53ea\u9700\u89812 \u4e2a\u3002<code>\u8fd9\u4e24\u4e2a\u4f8b\u5b50\u8bf4\u660e\u4e0d\u4f1a\u5b58\u5728\u201cBF \u603b\u6bd4FF \u597d\u201d \u6216\u8005\u201cFF \u603b\u6bd4BF\u201d \u597d\u7684\u7ed3\u8bba\u3002</code></p> <p></p> <p>\u6b64\u5916\uff0c\u5173\u4e8e\u5728\u7ebf\u505a\u6cd5(<code>\u5728\u5904\u7406\u5f53\u524ditem\u65f6\uff0c\u4e0d\u80fd\u5f97\u77e5\u540e\u9762\u7684item\u60c5\u51b5\u3002\u5e76\u4e14\u4e00\u65e6\u505a\u51fa\u51b3\u7b56\u4fbf\u65e0\u6cd5\u4fee\u6539</code>)\uff0c\u6709\u4e00\u4e2a\u7ed3\u8bba\uff1aYou never know when the input might end.  No on-line algorithm can always give an optimal solution.</p> <p>\u3010Theorem\u3011There are inputs that force any on-line bin-packing algorithm to use at least 5/3 the optimal number of bins. </p> <p>\u5bf9\u4e8e\u88c5\u7bb1\u95ee\u9898\uff0c\u5982\u679c\u9650\u5b9a\u4f7f\u7528\u5728\u7ebf\u505a\u6cd5\uff0c\u5219\u6700\u4f18\u7684\u8fd1\u4f3c\u89e3\u6cd5\uff0c\u5176\u6700\u574f\u60c5\u51b5\u7684\u7ed3\u679c\u4e5f\u81f3\u5c11\u9700\u8981\u6700\u4f18\u89e3\u7684 \\(\\frac{5}{3}\\)\u3002</p>"},{"location":"ADS/11.%20Approximation/#1124-offline-first-fit-decreasing-ffd","title":"11.2.4 (offline) First Fit Decreasing (FFD)","text":"<p>\u79bb\u7ebf\u505a\u6cd5\u7684\u4f18\u52bf\u5728\u4e8e\u5b83\u80fd\u591f\u83b7\u5f97\u6240\u6709 item \u7684\u4fe1\u606f\u4ee5\u6c42\u7edf\u7b79\u89c4\u5212\u3002</p> <p><code>solution: \u5c06 item \u6309\u7167 size \u964d\u5e8f\u6392\u5e8f\uff0c\u800c\u540e\u4f7f\u7528 FF\uff08\u6216 BF\uff0c\u7531\u4e8e\u5355\u8c03\u6027\uff0c\u4e24\u8005\u7b49\u4ef7\uff09\u3002</code></p> <p>\u7ed9\u5b9a 7 \u4e2a item\uff08\u540c\u4e4b\u524d\u7684 \ud83c\udf30\uff09\uff0c\u7ecf\u8fc7\u6392\u5e8f\u540e\uff0c\u5b83\u4eec\u7684 size \u5206\u522b\u4e3a $0.8, 0.7, 0.5, 0.4, 0.3, 0.2, 0.1\uff0c\u5219\u6700\u5c11\u9700\u8981 3 \u4e2a bin\uff08\u6700\u4f18\u89e3\uff09\uff1a</p> <pre><code>- bin 1: $0.8 + 0.2$;\n- bin 2: $0.7 + 0.3$;\n- bin 3: $0.5 + 0.4 + 0.1$;\n</code></pre> <p>\u3010Theorem\u3011Let M be the optimal number of bins required to pack a list I of items.  Then first fit decreasing never uses more than \\(11M / 9 + 6/9\\) bins.  There exist sequences such that first fit decreasing uses \\(11M / 9 + 6/9\\) bins.</p> <p>proof\uff1a</p> <p>\u5047\u8bbe\u6240\u6709\u7684\u7269\u54c1\u4e3a\\(a_1 \\geq a_2 \\geq ... \\geq a_n &gt; 0\\), \u8003\u8651\u7b2c\\(j = \\lceil \\dfrac{2}{3}FFD(T) \\rceil\\)\u4e2abin \\(B_j\\)</p> <ul> <li>\u5982\u679c\u5b83\u5305\u542b\u4e86\u4e00\u4e2a\\(a_i &gt; \\dfrac{1}{2}\\)\u7684\u7269\u54c1\uff0c\u90a3\u4e48\\(B_j\\)\u524d\u9762\u7684bin\u4e2d\u7269\u4f53\u7684\u4f53\u79ef\u90fd\u8d85\u8fc71/2\uff0c\u7531\u4e8e\u6392\u5728\\(a_i\\)\u524d\u9762\u7684\u7269\u4f53\u4f53\u79ef\u90fd\u8d85\u8fc7\u4e861/2\uff0c\u56e0\u6b64\u81f3\u5c11\u6709\\(j\\)\u4e2a\u4f53\u79ef\u8d85\u8fc7\\(\\dfrac{1}{2}\\)\u7684\u7269\u54c1\uff0c\u8fd9\u4e9b\u7269\u54c1\u88ab\u653e\u5728\u4e0d\u540c\u7684\u7bb1\u5b50\u91cc\uff0c\u4e8e\u662f</li> </ul> \\[ OPT(I) \\geq j \\geq \\dfrac{2}{3}FFD(I) \\] <ul> <li>\u82e5\u4e0d\u7136\uff0c\u4e5f\u5c31\u662f\u8bf4\\(B_j\\)\u4e2d\u6ca1\u6709\u4f53\u79ef\u8d85\u8fc71/2\u7684\u7269\u54c1\uff0c\u90a3\u4e48\u9664\u4e86\u6700\u540e\u4e00\u4e2a\u7bb1\u5b50\\(B_{FFD(I)}\\)\uff0c\\(B_j\\)\u53ca\u5176\u4e4b\u540e\u7684\u7bb1\u5b50\u5185\u90fd\u81f3\u5c11\u6709\u4e24\u4e2a\u4f53\u79ef\u4e0d\u8d85\u8fc71/2\u7684\u7269\u54c1\u3002\u4e8e\u662f\u81f3\u5c11\u6709\\(2(FFD(I)-j)+1\\)\u4e2a\u7269\u54c1\u65e0\u6cd5\u653e\u5165\u524d\\(j-1\\)\u4e2a\u7bb1\u5b50\uff0c\u6240\u4ee5   $$   \\begin{aligned}   OPT(I) &amp;&gt; min{j-1,2(FFD(I)-j)+1}\\   &amp; &gt;min{\\lceil \\dfrac{2}{3}FFD(I)\\rceil -1, 2(FFD - (\\dfrac{2}{3}FFD + \\dfrac{2}{3})) + 1 }\\   &amp; = \\lceil \\dfrac{2}{3}FFD(I)\\rceil -1   \\end{aligned}   $$</li> </ul>"},{"location":"ADS/11.%20Approximation/#113-\u6848\u4f8b-knapsack-problem","title":"11.3 [\u6848\u4f8b] Knapsack Problem","text":"<p>\u80cc\u5305\u95ee\u9898(fractional version)\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5bb9\u91cf\u4e3a \\(M\\) \u7684\u80cc\u5305\uff0c\u4ee5\u53ca \\(N\\) \u4e2a item\uff0c\u7b2c \\(i\\) \u4e2a item \u7684\u91cd\u91cf\u4e3a \\(w_i\\)\uff0c\u5176\u5229\u6da6\u4e3a \\(p_i\\)\u3002\u5176\u4e2d\\(x_i\\)\u8868\u793a\u88c5\u5165\u7269\u54c1\u7684\u6bd4\u4f8b\uff08\u4e5f\u5c31\u8bf4\u4e00\u4e2aitem\u53ef\u4ee5\u62c6\u5206\u53ea\u5360\u4e00\u90e8\u5206\uff0c\u8fd9\u90e8\u5206\u7684\u5229\u6da6\u662f\\(p_ix_i\\)\uff09\uff0c\u8981\u6c42\u5728\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\u7684\u524d\u63d0\u4e0b\uff0c\u4f7f\u5f97\u80cc\u5305\u4e2d\u7684\u5229\u6da6\u6700\u5927\u5316\u3002</p> <p>\u6839\u636e\u6bcf\u4e00\u4e2a\u7269\u54c1\u80fd\u5426\u81ea\u7531\u62c6\u5206\uff0c\u80cc\u5305\u95ee\u9898\u5206\u4e3a fractional version \u548c 0-1 version \u4e24\u7c7b\u3002</p>"},{"location":"ADS/11.%20Approximation/#1131-fractional-version","title":"11.3.1 Fractional Version","text":"<p>\u5982\u679c\u6211\u4eec\u8bb0 \\(x_i\\in[0,1]\\) \u4e3a\u7b2c \\(i\\) \u4e2a item \u7684\u9009\u4e2d\u91cf\uff08\u5373\u5047\u8bbe item \u90fd\u662f\u8fde\u7eed\u53ef\u5206\u7684\uff09\uff0c\u5219\u7ea6\u675f\u6761\u4ef6\u53ef\u4ee5\u8868\u8ff0\u4e3a \\(\\sum_{i}^N w_ix_i \\leq M\\)\uff0c\u73b0\u5728\u6c42 \\(\\sum_{i}^{N} p_ix_i\\) \u7684\u6700\u5927\u503c\u3002</p> <p>\u5047\u8bbe\u73b0\u5728 \\(M = 20.0\\)\uff0c\u5e76\u4e14 \\(N = 3\\)\uff0c\u5206\u522b\u662f\uff1a</p> <ul> <li>item 1: \\(w_1 = 18.0, p_1 = 25.0\\); </li> <li>item 2: \\(w_2 = 15.0, p_2 = 24.0\\);</li> <li>item 3: \\(w_3 = 10.0, p_3 = 15.0\\);</li> </ul> <p>\u5219\u6700\u4f18\u89e3\u4e3a \\(x_1 = 0, x_2 = 1, x_3 = \\frac{1}{2}\\)\uff0c\u6b64\u65f6 \\(\\sum_{i}^{N} p_ix_i = 31.5\\)\u3002</p> <p>\u7531\u4e8e \\(x_i\\in[0,1]\\)\uff0c\u975e\u5e38\u6734\u7d20\u7684\u4e00\u4e2a\u60f3\u6cd5\u5c31\u662f\uff0c\u5c3d\u53ef\u80fd\u591a\u5730\u9009\u62e9\u201c\u6027\u4ef7\u6bd4\u201d\u9ad8\u7684\u7269\u54c1\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u6309\u7167 \\(\\dfrac{p_i}{w_i}\\)\uff08PPT \u79f0\u4e4b\u4e3a profit density\uff09\u964d\u5e8f\u6392\u5e8f\uff0c\u800c\u540e\u4ece\u5927\u5230\u5c0f\u4f9d\u6b21\u9009\u62e9\u7269\u54c1\uff0c\u76f4\u5230\u80cc\u5305\u88c5\u6ee1\u4e3a\u6b62\u3002(\u8be5\u7b97\u6cd5\u5c31\u662f\u6700\u4f18\u89e3)</p>"},{"location":"ADS/11.%20Approximation/#1132-0-1-version","title":"11.3.2 0-1 Version","text":"<p>\u76f8\u8f83\u4e8e fractional version\uff0c0-1 version \u8981\u6c42 \\(x_i \\in \\{0,1\\}\\)\uff0c\u6362\u53e5\u8bdd\u8bf4\u6bcf\u4e00\u4e2a\u7269\u54c1\u8981\u4e48\u9009\u8981\u4e48\u4e0d\u9009\u3002\u8fd9\u662f\u4e00\u4e2a\u7ecf\u5178\u7684 NPC \u95ee\u9898\uff0c\u6211\u4eec\u5c1d\u8bd5\u4f7f\u7528\u8fd1\u4f3c\u7b97\u6cd5\u6765\u6c42\u8f83\u4f18\u89e3\u3002</p>"},{"location":"ADS/11.%20Approximation/#11321-\u8d2a\u5fc3\u505a\u6cd5","title":"11.3.2.1 \u8d2a\u5fc3\u505a\u6cd5","text":"<p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8d2a\u5fc3\u7b97\u6cd5\uff0c\u8d2a\u5fc3\u7b56\u7565\u53ef\u4ee5\u662f\u603b\u662f\u9009\u53ef\u4ee5\u653e\u5f97\u4e0b\u7684\u3001\u8fd8\u6ca1\u653e\u5165\u4e2d\u7684\uff0c\u5229\u6da6\u6700\u5927\u7684\u6216 \\(\\frac{p_i}{w_i}\\) \u6700\u5927\u7684\u3002\u8fd9\u4e9b\u505a\u6cd5\u7684\u8fd1\u4f3c\u6bd4(approximation ratio)\u90fd\u662f 2\u3002     \u6211\u4eec\u7528 \\(p_\\text{max}\\) \u8868\u793a\u6240\u6709 item \u4e2d\u6700\u5927\u7684\u5229\u6da6\uff0c\u7528 \\(P_\\text{optimal}\\) \u8868\u793a\u6700\u4f18\u89e3\uff0c\\(P_\\text{greedy}\\) \u8868\u793a\u6211\u4eec\u4f7f\u7528\u8d2a\u5fc3\u505a\u6cd5\u5f97\u5230\u7684\u7b54\u6848\u3002\u5728\u8be5\u95ee\u9898\u4e2d\uff0c\u8fd1\u4f3c\u6bd4\u7684\u8ba1\u7b97\u8868\u8fbe\u5f0f\u4e3a\uff1a $$ \\rho = \\max(     \\frac{P_\\text{optimal}}{P_\\text{greedy}},     \\frac{P_\\text{greedy}}{P_\\text{optimal}} ) $$</p> <p>\u4e0b\u9762\u662f\u8bc1\u660e\u8fc7\u7a0b\uff1a</p> <p>$$ \\left{ \\begin{aligned}     &amp; p_\\text{max} \\leq P_\\text{opt} \\leq P_\\text{frac}   &amp;(1)\\     &amp; p_\\text{max} \\leq P_\\text{greedy} &amp; (2)\\     &amp; P_\\text{opt} \\leq P_\\text{frac} \\leq P_\\text{greedy} + p_\\text{max} &amp; (3) \\</p> <p>\\end{aligned} \\right. $$</p> <p>\u5c06 \\((2)\\) \u5f0f\u4e24\u4fa7\u540c\u9664\u4ee5 \\(P_\\text{greedy}\\) \u5f97\uff1a</p> \\[ \\frac{p_\\text{max}}{P_\\text{greedy}} \\leq 1 \\quad (4) \\] <p>\u5c06 \\((3)\\) \u5f0f\u4e24\u4fa7\u540c\u9664\u4ee5 \\(P_\\text{greedy}\\)\uff0c\u5e76\u4ee3\u5165 \\((4)\\) \u5f97\uff1a</p> \\[ \\frac{P_\\text{optimal}}{P_\\text{greedy}} \\leq 1 + \\frac{p_\\text{max}}{P_\\text{greedy}} \\leq 2 \\] \\[ p_\\text{max} \\leq P_\\text{greedy} \\leq P_\\text{optimal} \\leq P_\\text{frac} \\] <p>\u5176\u4e2d \\(P_\\text{frac}\\) \u6307\u7684\u662f\u540c\u6837\u7684\u6570\u636e\u4e0b fractional version \u7684\u7b54\u6848\u3002</p> <p>\u8865\u5145\u7ed3\u8bba\uff1a\u80cc\u5305\u95ee\u9898\u5177\u6709 FPTAS\u3002</p>"},{"location":"ADS/11.%20Approximation/#11322-\u52a8\u6001\u89c4\u5212\u505a\u6cd5","title":"11.3.2.2 \u52a8\u6001\u89c4\u5212\u505a\u6cd5","text":"<p>\\(W_{i,p} = \\text{the minimum weight of a collection from } \\{1, \u2026, i\\} \\text{ with total profit being  exactly } p\\)</p> <ul> <li>take i: \\(W_{i,p} = w_i + W_{i-1,p-p_i}\\)</li> <li>skip i: \\(W_{i,p} = W_{i-1,p}\\)</li> <li>impossible to get p: \\(W_{i,p} = \\infin\\)</li> </ul> \\[ W_{i,p} = \\left\\{ \\begin{aligned}     &amp;\\infty &amp;&amp; i = 0 \\\\     &amp;W_{i-1, p} &amp;&amp; p_i &gt; p \\\\     &amp;\\min\\{W_{i-1, p}, w_i + W_{i-1, p-p_i}\\} &amp;&amp; otherwise         \\end{aligned} \\right.\\\\ i = 1, ..., n; p = 1, ..., n\\cdot p_\\text{max} \\Rightarrow O(n^2p_\\text{max}) \\] <p><code>\u7531\u4e8ep_i &gt; p, \u5982\u679c\u5c06item i \u653e\u5165\u80cc\u5305\uff0c\u5229\u6da6\u5c31\u5927\u4e8e\u6307\u5b9a\u7684 p \u4e86\uff0c\u6240\u4ee5\u8981\u8df3\u8fc7item i\u3002\u5bf9\u4e8eotherwise\u60c5\u51b5\uff0c\u663e\u7136\u6211\u5e0c\u671b\u6c42\u7684\u662f\u76f8\u540c\u5229\u6da6\u4e0b\u7269\u54c1\u7684\u91cd\u91cf\u6700\u5c0f\uff0c\u8fd9\u6837\u624d\u80fd\u88c5\u6700\u5927\u4ef7\u503c\u7684\u7269\u54c1</code></p> <p>\u5982\u679c \\(p_\\text{max}\\) \u5f88\u5927\uff0c\u53ef\u4ee5\u8003\u8651\u5c06\u5b83\u4eec\u8fd1\u4f3c\u53d6\u6574\uff0c\u7c7b\u4f3c\u4e8e\u5c06\u6d6e\u70b9\u6570\u5411\u4e0a\u53d6\u6574\u3002</p> <p></p> <p>warning \"\u6ce8\u610f\"</p> <p>\u8fd9\u91cc\u8ba8\u8bba\u7684\u80cc\u5305\u95ee\u9898\u6709\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u7279\u70b9\u5c31\u662f\uff0c\u5bb9\u91cf\u548c\u5229\u6da6\u90fd\u662f\u5b9e\u6570\uff0c\u66f4\u76f4\u767d\u7684\u6765\u8bf4\uff0c\u4f60\u6ca1\u529e\u6cd5\u901a\u8fc7\u5c06\u5bb9\u91cf\u6216\u5229\u6da6\u4f5c\u4e3a\u72b6\u6001\u6765 dp \u6c42\u6700\u4f18\u89e3\u3002<code>\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0a\u8ff0\u8ba1\u7b97\u7684\u65f6\u95f4\u590d\u6742\u5ea6O(N^2 P_max),\u5176\u4e2dp_{max}\u662f\u672a\u77e5\u91cf\u53ef\u4ee5\u65e0\u7a77\u5927\uff0c\u6307\u6570\u7ea7\u522b\uff0c\u8fd9\u6837\u5c31\u4e0d\u662f\u591a\u9879\u5f0f\u65f6\u95f4\u590d\u6742\u5ea6\u4e86</code></p>"},{"location":"ADS/11.%20Approximation/#114-\u6848\u4f8b-the-k-center-problem","title":"11.4 [\u6848\u4f8b] The K-center Problem","text":"<p>\uff08\u4e8c\u7ef4\uff09K \u4e2d\u5fc3\u95ee\u9898\u6307\uff1a\u7ed9\u5b9a\u5e73\u9762\u4e0a\u7684\u4e00\u7cfb\u5217 site\uff08\u5373\u70b9\uff09\uff0c\u5728\u5e73\u9762\u4e2d\u627e\u51fa \\(k\\) \u4e2a\u4e0d\u540c\u7684 center\uff0c\u8bb0 \\(site_i\\) \u5230\u79bb\u5b83\u6700\u8fd1\u7684 center \u7684\u8ddd\u79bb\u4e3a \\(dis_i\\)\uff0c\u6c42 \\(\\max \\{dis_i\\}\\) \u7684\u6700\u5c0f\u503c\u3002     \u8bbe \\(C = \\{c_1, c_2, ..., c_k\\}\\) \u4e3a \\(k\\) \u4e2a center\uff0c\\(S = \\{s_1, s_2, ..., s_n\\}\\) \u4e3a \\(n\\) \u4e2a site\uff0c\u6211\u4eec\u5b9a\u4e49 site \u5230\u5173\u4e8e center \u7684\u96c6\u5408 \\(C\\) \u7684\u8ddd\u79bb\u4e3a\uff1a $$ dis(s_i, C) = \\min_{c_i\\in C} { dis(s_i, c_i) } $$</p> <p>\u5373 \\(s_i\\) \u5230\u8ddd\u79bb\u5b83\u6700\u8fd1\u7684 center \u7684\u8ddd\u79bb\u3002</p> <p>\u5b9a\u4e49\u6700\u5927\u7684\u6700\u5c0f\u8986\u76d6\u534a\u5f84\u4e3a\uff1a</p> \\[ r(C) = \\max_{s_i\\in S} \\{ dis(s_i, C) \\} \\\\ \\] <p>\u73b0\u5728\u8981\u5bfb\u627e\u4e00\u4e2a \\(C\\) \u4f7f\u5f97 \\(r(C)\\) \u6700\u5c0f\uff08\\(|C| = k\\)\uff09\u3002</p> <p>\u5e73\u9762\u7684\u95ee\u9898\u6211\u4eec\u5c31\u7528\u5e73\u9762\u7684\u601d\u8def\u6765\u770b\uff0c\u5c31\u662f\u4e00\u4e2a\u5e73\u9762\u4e0a\u6709\u4e00\u5806\u70b9\uff0c\u73b0\u5728\u6211\u8981\u5728\u4e0a\u9762\u627e \\(k\\) \u4e2a\u4e2d\u5fc3\u53bb\u753b\u5706\uff0c\u4f7f\u5f97\u8fd9 \\(k\\) \u4e2a\u5706\u80fd\u8986\u76d6\u6240\u6709\u7684\u70b9\u3002\u73b0\u5728\u8981\u6c42\u6700\u5927\u7684\u90a3\u4e2a\u5706\u7684\u534a\u5f84\u6700\u5c0f\u80fd\u591a\u5c0f\u3002</p>"},{"location":"ADS/11.%20Approximation/#1141-naive-greedy","title":"11.4.1 Naive Greedy","text":"<p>\u4e00\u4e2a\u505a\u6cd5\u662f\uff0c\u6211\u4eec\u6bcf\u6b21\u90fd\u9009\u62e9\u6700\u53ef\u80fd\u6210\u4e3a\u4e2d\u5fc3\u7684\u90a3\u4e2a\u70b9\uff0c\u5177\u4f53\u6765\u8bf4\uff1a</p> <ol> <li>\u5982\u679c\u662f\u7b2c\u4e00\u4e2a\u70b9\uff0c\u5c31\u9009\u53d6\u6240\u6709\u70b9\u7684\u4e2d\u5fc3\uff1b</li> <li>\u5982\u679c\u4e0d\u662f\u7b2c\u4e00\u4e2a\u70b9\uff0c\u5c31\u9009\u53d6\u80fd\u4e00\u4e2a\u6700\u80fd\u8ba9 \\(r(C)\\) \u4e0b\u964d\u7684\uff1b</li> </ol> <p>\u8fd9\u4e2a\u505a\u6cd5\u7684 bug \u6bd4\u8f83\u5927\uff0c\u5047\u8bbe\u6211\u4eec\u7684\u70b9\u662f\u805a\u7c7b\u975e\u5e38\u660e\u663e\u7684\u4e24\u4e2a\u70b9\u4e91\uff0c\u90a3\u4e48\u7b2c\u4e00\u4e2a\u70b9\u5c31\u4f1a\u843d\u5728\u4e24\u4e2a\u70b9\u4e91\u4e4b\u95f4</p> <p>\u6ce8\u610f\uff0c\u968f\u7740 center \u7684\u589e\u52a0\uff0c\u539f\u6765\u4ee5 \\(c_i\\) \u4e3a center \u7684 site \u5f88\u53ef\u80fd\u4ee5\u6700\u65b0\u63d2\u5165\u7684 \\(c_j\\) \u4e3a center\u3002</p>"},{"location":"ADS/11.%20Approximation/#1142-2r-greedy","title":"11.4.2 2r-Greedy","text":"<p>\u65e2\u7136\u6b63\u5411\u505a\u5f88\u56f0\u96be\uff0c\u90a3\u6211\u4eec\u80fd\u4e0d\u80fd\u53cd\u7740\u505a\u5462\uff1f\u6709\u4e00\u79cd\u5957\u8def\u53eb\u4e8c\u5206\u7b54\u6848\uff0c\u5373\u5148\u731c\u7b54\u6848\uff0c\u518d\u9a8c\u8bc1\u662f\u5426\u662f\u7b54\u6848\u3002\u5728\u8fd9\u4e2a\u95ee\u9898\u4e2d\u6211\u4eec\u53ef\u4ee5\u8fc1\u79fb\u8fd9\u4e2a\u601d\u60f3\uff0c\u5373\u5148\u731c\u4e00\u4e2a \\(r\\)\uff0c\u7136\u540e\u5c1d\u8bd5\u7528 \\(k\\) \u4e2a\u534a\u5f84\u4e3a \\(r\\) \u7684\u5706\u53bb\u8986\u76d6\u5269\u4e0b\u7684\u6240\u6709\u70b9\u3002</p> <p>\u66f4\u5177\u4f53\u7684\u6765\u8bf4\uff0c\u5047\u8bbe\u6700\u4f18\u89e3\u5bf9\u5e94\u7684\u4e00\u4e2a center \u96c6\u5408\u4e3a \\(C^*\\)\uff0c\u90a3\u4e48 \\(\\forall r(C_x) \\geq r(C^*)\\) \u7684 \\(C_x\\) \u90fd\u5fc5\u5b9a\u5b58\u5728\u8986\u76d6\u65b9\u6848\uff1b\u53cd\u8fc7\u6765\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u80fd\u591f\u9a8c\u8bc1\u5bf9\u4e8e \\(C_x\\) \u80fd\u591f\u8986\u76d6\u6240\u6709\u7684\u70b9\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u7ea6\u675f\u6700\u4f18\u89e3 \\(r(C^*) \\leq r(C_x)\\)\u3002</p> <p>success \"hint: \u8fd1\u4f3c\u7b97\u6cd5\"</p> <p>\u4e8e\u662f\u6211\u4eec\u7684\u8fd1\u4f3c\u7b97\u6cd5\u5c31\u53ef\u4ee5\u5927\u5c55\u62f3\u811a\u4e86\u3002\u4f46\u662f\u9700\u8981\u6ce8\u610f\uff0c\u8fd9\u91cc\u6240\u8c13\u7684\u8fd1\u4f3c\u7b97\u6cd5\uff0c\u6307\u7684\u662f\u4f7f\u7528\u4e8c\u5206\u7b54\u6848\u6c42\u89e3 \\(r(C)\\) \u8fd9\u4e2a\u7b97\u6cd5\uff0c\u800c\u975e\u5224\u65ad \\(k\\) \u4e2a\u534a\u5f84\u4e3a \\(r\\) \u7684\u5706\u80fd\u5426\u8986\u76d6\u6240\u6709\u70b9\u7684\u7b97\u6cd5\u3002\u8fd9\u4e00\u70b9\u975e\u5e38\u91cd\u8981\uff01</p> <p></p> <p>\u9996\u5148\uff0c\u6211\u4eec\u518d\u6b21\u68b3\u7406\u4e00\u4e0b\u8fd9\u4e2a\u7b97\u6cd5\uff0c\u5b83\u5305\u542b\u5185\u5916\u4e24\u5c42\uff0c\u9996\u5148\u5916\u90e8\u901a\u8fc7\u5728\u7b54\u6848\u7684\u5019\u9009\u533a\u95f4\uff08\u5373 \\((0, r_\\text{max}]\\)\uff0c\\(r_\\text{max}\\) \u4e3a\u6700\u8fdc\u7684\u4e24\u4e2a\u70b9\u7684\u8ddd\u79bb\uff09\u4e8c\u5206\u5019\u9009\u503c\uff0c\u63a5\u7740\u901a\u8fc7\u5224\u5b9a\u7b97\u6cd5\u6765\u5224\u5b9a\u63a5\u4e0b\u6765\u7684\u4e8c\u5206\u65b9\u5411\u3002\u521d\u59cb\u72b6\u6001\u7684\\(r_x = (0 + r_{max})/2\\)\uff0c\u5176\u4e2d\\(r_{max}\\)\u5728\u5b9e\u65f6\u8ba1\u7b97\uff0c\\(r_x\\)\u4e5f\u5728\u5b9e\u65f6\u8ba1\u7b97</p> <p>\u8bbe \\(C_x\\) \u8868\u793a\u9009\u4e2d\u7684 center\uff0c\\(S_x\\) \u8868\u793a\u5c1a\u672a\u88ab\u4efb\u4f55\u5706\u8986\u76d6\u7684 site\uff0c\\(r_x\\) \u8868\u793a\u5f53\u524d\u4e8c\u5206\u51fa\u6765\u7684\uff0c\u8981\u6211\u4eec\u5224\u65ad\u7684\u534a\u5f84\uff0c\\(S\\) \u4f9d\u7136\u8868\u793a\u6240\u6709 site \u7684\u96c6\u5408\uff1a</p> <ol> <li>\u521d\u59cb\u5316 \\(C_x = \\emptyset\\)\uff1b</li> <li>\u5f53 \\(S_x \\not = \\emptyset\\) \u65f6\uff08\u5373\u8fd8\u6709\u70b9\u6ca1\u88ab\u8986\u76d6\u65f6\uff09\uff0c\u91cd\u590d\u8fd9\u4e9b\u64cd\u4f5c\uff1a<ol> <li>\u968f\u673a\u9009\u53d6\u4e00\u4e2a site \\(s_i \\in S_x\\)\uff0c\u5c06\u5176\u63d2\u5165 \\(C_x\\)\uff08\u5373\u5c06 \\(s_i\\) \u5f53\u4f5c\u4e00\u4e2a center\uff09\uff0c\u5e76\u4ece \\(S_x\\) \u4e2d\u5c06 \\(s_i\\) \u5220\u9664\uff08\u5373 \\(s_i\\) \u5fc5\u5b9a\u88ab\u8986\u76d6\uff09\uff1b</li> <li>\u5220\u9664 \\(S_x\\) \u4e2d\u6240\u6709\u8ddd\u79bb \\(s_i\\) \u4e0d\u8db3 \\(r_x\\) \u7684\u70b9\uff08\u5373\u5220\u9664\u6ee1\u8db3 \\(dis(s_i, s_j) \\leq r_x\\) \u7684\u6240\u6709 \\(s_k \\in S_x\\)\uff09\uff1b</li> </ol> </li> <li>\u5f53\u6240\u6709\u70b9\u90fd\u88ab\u8986\u76d6\u540e\uff1a<ol> <li>\u5982\u679c \\(|C_x| \\leq k\\)\uff0c\u5219\u8fd4\u56de yes\uff1b</li> <li>\u5426\u5219\u8fd4\u56de no\uff1b</li> </ol> </li> </ol> <p>\u5982\u679c\u8fd4\u56de yes\uff0c\u5219\u4e0b\u4e00\u4e2a \\(r_x\\) \u5e94\u5f53\u53d6\u66f4\u5c0f\u7684 \\(r_x\\)\uff1b\u5982\u679c\u8fd4\u56de no\uff0c\u4e0b\u4e00\u6b21\u5e94\u8be5\u53d6\u66f4\u5927\u7684 \\(r_x\\)\u3002</p> <p>\u73b0\u5728\u5bf9\u5176\u505a\u8fdb\u4e00\u6b65\u89e3\u91ca\u3002\u8fd9\u662f\u4e00\u4e2a\u542f\u53d1\u5f0f\u7684\u505a\u6cd5\uff0c\u65e8\u5728\u6bcf\u6b21\u5bfb\u627e\u8fd8\u6ca1\u88ab\u8986\u76d6\u7684\u70b9\u4f5c\u4e3a\u65b0\u7684 center\uff0c\u7528\u4e00\u4e2a\u534a\u5f84\u4e3a \\(2r_x\\) \u7684\u5706\u53bb\u8986\u76d6\u5269\u4e0b\u7684\u70b9(<code>\u8981\u60f3\u8986\u76d6\u6240\u6709\u7684\u70b9\uff0c\u5fc5\u987b\u91c7\u7528\u6700\u8fdc\u7684\u4e24\u4e2a\u70b9\u7684\u8ddd\u79bb\u4f5c\u4e3a\u534a\u5f84\uff0c\u540c\u65f6</code>2\\(r_x = r_{max}\\))\u3002\u901a\u8fc7\u5224\u65ad\u8fd9\u6837\u6240\u9700\u8981\u7684 center \u6570\u91cf\u662f\u5426\u8d85\u8fc7 \\(k\\) \u6765\u5224\u65ad\u662f\u5426\u80fd\u591f\u8986\u76d6\u3002\u63a5\u4e0b\u6765\u5f88\u7ed5\uff0c\u8bf7\u4e00\u6b65\u4e00\u6b65\u7684\u770b\uff1a</p> <ol> <li>\u5f53\u8fd9\u4e2a\u542f\u53d1\u5f0f\u641c\u7d22\u6210\u529f\u65f6\uff0c\u8bf4\u660e \\(2r_x \\geq r(C^*)\\)\uff0c\u5373 \\(k\\) \u4e2a \\(2r_x\\) \u7684\u5706\u53ef\u4ee5\u8986\u76d6\u6240\u6709\u70b9\uff1b</li> <li>\u5f53\u8fd9\u4e2a\u542f\u53d1\u5f0f\u641c\u7d22\u5931\u8d25\u65f6\uff0c\u4e0d\u80fd\u8bf4\u660e \\(2r_x \\geq r(C^*)\\)\uff0c\u5373 \\(k\\) \u4e2a \\(2r_x\\) \u7684\u5706\u4e0d\u80fd\u8986\u76d6\u6240\u6709\u70b9\uff0c\u56e0\u4e3a\u542f\u53d1\u5f0f\u65b9\u6848\u5e76\u4e0d\u662f\u6700\u4f18\u65b9\u6848\uff1b\u4f46\u662f\u80fd\u8bf4\u660e\u5fc5\u5b9a\u4e0d\u5b58\u5728 \\(r_x\\) \u7684\u8986\u76d6\uff0c\u5373 \\(r_x \\leq r(C^*)\\)\uff08\u8bc1\u660e\u89c1\u4e0b\u65b9 lemma\uff09\uff1b</li> </ol> <p>property \"lemma    </p> <p>\u5047\u8bbe\u534a\u5f84\u4e3a \\(r\\)\uff0c\u4ee5 \\(c\\) \u4e3a\u5706\u5fc3\u7684\u5706 \\(C\\) \u8986\u76d6\u4e86 \\(S\\) \u4e2d\u7684\u6240\u6709\u70b9\u3002\u90a3\u4e48\uff0c\u5bf9\u4e8e\u56fa\u5b9a\u7684\u534a\u5f84 \\(r'\\)\uff0c\u8981\u60f3\u53d6\u4efb\u610f\u7684 \\(s_i \\in S\\) \u4e3a\u5706\u5fc3\uff0c\u5f62\u6210\u7684\u5706 \\(C_i\\)\uff0c\u603b\u662f\u80fd\u8986\u76d6 \\(S\\) \u4e2d\u7684\u6240\u6709\u70b9\uff0c\u5219 \\(r' \\geq 2r\\)\u3002</p> <p>\u8bc1\u660e\u7684\u5173\u952e\u662f\u8003\u8651\u4e24\u70b9\u5206\u5e03\u5728\u76f4\u5f84\u4e24\u7aef\u7684\u60c5\u51b5\u3002    </p> <p>\u8fd9\u4e2a\u5f15\u7406\u7684\u9644\u52a0\u7ed3\u8bba\u5c31\u662f\uff1a\\(\\forall i \\quad C \\subset C_i\\) </p> <p>\u5373\u4ee5 \\(r\\) \u4e3a\u534a\u5f84\u7684\u6700\u4f18\u8986\u76d6\u5706\uff0c\u4e00\u5b9a\u80fd\u88ab\u4ee5\u4efb\u610f \\(s_i\\) \u4e3a\u5706\u5fc3\u3001\\(2r\\) \u4e3a\u534a\u5f84\u7684\u5706\u6240\u8986\u76d6\u3002</p> <p></p> <p>\u5f53\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u5904\u4e8e\u60c5\u51b5 <code>1.</code> \u65f6\uff0c\u6211\u4eec\u5f00\u5fc3\u7684\u53d1\u73b0\u6211\u4eec\u786e\u5b9e\u5f97\u5230\u4e86\u4e00\u4e2a\u8ddd\u79bb \\(r(C^*)\\) \u66f4\u8fd1\u7684\u4e0a\u754c \\(2r_x\\)\uff0c\u7531\u4e8e\u4e8c\u5206\u7684\u6027\u8d28\uff0c\u6211\u4eec\u6bcf\u6b21\u901a\u8fc7 <code>1.</code> \u786e\u5b9a\u7684\u4e0a\u754c\uff0c\u603b\u662f\u8d8a\u6765\u8d8a\u7d27\u7684\u3002</p> <p>\u5f53\u6211\u4eec\u5904\u4e8e\u60c5\u51b5 <code>2.</code> \u65f6\uff0c\u6211\u4eec\u4e0d\u77e5\u9053 \\(2r_x\\) \u548c \\(r(C^*)\\) \u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u4f46\u662f\u77e5\u9053 \\(r_x\\) \u548c \\(r(C^*)\\) \u7684\u5173\u7cfb\uff0c\u7531\u4e8e\u4e8c\u5206\u7684\u6027\u8d28\uff0c\u6211\u4eec\u6bcf\u6b21\u901a\u8fc7 <code>2.</code> \u786e\u5b9a\u7684\u4e0b\u754c\uff0c\u4e5f\u603b\u662f\u8d8a\u6765\u8d8a\u7d27\u7684\u3002     \u800c\u6700\u7ec8\uff0c\u6211\u4eec\u4f1a\u5f97\u5230\u4e00\u4e2a\u6700\u7ec8\u7684 \\(r_{x_0}\\)\uff0c\u6ee1\u8db3\uff1a\\(r_{x_0} \\leq r(C^*) \\leq 2r_{x_0}\\)\uff08\u5f0f\u4e2d\u54ea\u8fb9\u80fd\u53d6\u7b49\u53d6\u51b3\u4e8e\u6700\u540e\u843d\u5728 <code>1.</code> \u8fd8\u662f <code>2.</code>\uff09\u3002</p> <p>\u800c\u6211\u4eec\u6700\u7ec8\u7ed9\u51fa\u7684\u7b54\u6848\u662f \\(2r_{x_0}\\)\uff08\u56e0\u4e3a \\(r_{x_0}\\) \u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u4e0d\u662f\u89e3\uff0c\u66f4\u4e0d\u662f\u8fd1\u4f3c\u89e3\uff09\u3002</p> <p>\u73b0\u5728\uff0c\u6211\u4eec\u6765\u8ba1\u7b97\u8fd1\u4f3c\u6bd4\uff1a</p> \\[ \\begin{aligned}     &amp; \\begin{aligned}         \\because \\;\\;\\;         &amp; r_{x_0} \\leq r(C^*) \\leq 2r_{x_0} \\\\         &amp; \\frac{1}{2} \\leq \\frac{r(C^*)}{2r_{x_0}} \\leq 1 \\\\         &amp; 1 \\leq \\frac{2r_{x_0}}{r(C^*)} \\leq 2     \\end{aligned} \\\\     &amp; \\therefore \\; \\rho = \\max\\{             \\frac{ 2 r_{x_0} }{ r(C^*) },             \\frac{ r(C^*) }{ 2 r_{x_0} }         \\} = 2 \\end{aligned} \\]"},{"location":"ADS/11.%20Approximation/#1143-smarter-greedy","title":"11.4.3 Smarter Greedy","text":"<p>\u6211\u4eec\u5173\u6ce8\u5230\uff0c\u4e0a\u9762\u90a3\u4e2a\u505a\u6cd5\u603b\u662f\u968f\u673a\u7684\u9009\u53d6\u65b0\u7684 \\(c_i\\)\uff0c\u4f46\u662f\u5bf9\u4e8e center \u7684\u9009\u53d6\uff0c\u6211\u4eec\u5176\u5b9e\u53ef\u4ee5\u603b\u662f\u9009\u62e9\u8ddd\u79bb\u5df2\u6709\u7684 center \u6700\u8fdc\u7684\u70b9\uff0c\u6b64\u5916\uff0c\u5f53 \\(|C| &gt; k\\) \u65f6\uff0c\u6211\u4eec\u4e5f\u6ca1\u5fc5\u8981\u7ee7\u7eed\u505a\u4e86\u3002</p> <p>section \"\u6d41\u7a0b\u63cf\u8ff0\"     1. \u521d\u59cb\u5316 \\(C_x = \\emptyset\\)\uff0c\\(S_x = S\\)\uff1b               1. \u968f\u673a\u9009\u53d6\u4e00\u4e2a site \\(s_i \\in S_x\\)\uff0c\u5c06\u5176\u63d2\u5165 \\(C_x\\)\uff0c\u5e76\u4ece \\(S_x\\) \u4e2d\u5c06 \\(s_i\\) \u5220\u9664\uff1b               2. \u5f53 \\(|C_x| \\leq k\\) \u4e14 \\(S_x \\not = \\emptyset\\) \u65f6\uff0c\u91cd\u590d\u4ee5\u4e0b\u6b65\u9aa4\uff1a     2. \u9009\u53d6\u4e00\u4e2a site \\(s_i \\in S_x\\)\uff0c\u8fd9\u4e2a site \u6ee1\u8db3 \\(\\forall s_j \\in S_x \\quad dis(s_i, C_x) \\geq dis(s_j, C_x)\\)\uff08\u5373\u8fd9\u4e2a\u70b9\u662f\u8fd8\u6ca1\u88ab\u8986\u76d6\u7684\u70b9\u4e2d\u8ddd\u79bb \\(C_x\\) \u6700\u8fdc\u7684\u70b9\uff09\uff1b               1. \u5c06 \\(s_i\\) \u63d2\u5165 \\(C_x\\)\uff0c\u5e76\u4ece \\(S_x\\) \u4e2d\u5c06 \\(s_i\\) \u5220\u9664\uff1b     3. \u5982\u679c \\(|C_x| \\leq k\\) \u4e14 \\(S_x = \\emptyset\\)\uff0c\u5219\u8fd4\u56de yes\uff1b\u5426\u5219\u8fd4\u56de no\u3002</p> <p>\u7531\u4e8e\u8fd9\u4e2a\u505a\u6cd5\u5b9e\u9645\u4e0a\u53ea\u662f\u4f18\u5316\u4e86\u4e00\u4e0b\u542f\u53d1\u5f0f\u7684\u7b56\u7565\uff0c\u5e76\u6ca1\u6709\u6539\u53d8\u5185\u6838\uff0c\u6240\u4ee5\u5176\u8fd1\u4f3c\u6bd4\u4ecd\u7136\u662f \\(2\\)\u3002</p>"},{"location":"ADS/11.%20Approximation/#115-\u603b\u7ed3","title":"11.5 \u603b\u7ed3","text":"<p>\u5173\u4e8e\u7b97\u6cd5\u7684\u8bbe\u8ba1\uff0c\u6211\u4eec\u8003\u8651\u8fd9\u4e09\u4e2a\u7ef4\u5ea6\uff1a</p> <ol> <li>\u6700\u4f18\u6027(optimality)\uff1a\u5373\u7b97\u6cd5\u8981\u627e\u5230\u786e\u5207\u7684\u6700\u4f18\u89e3\uff1b</li> <li>\u9ad8\u6548\u6027(efficiency)\uff1a\u5373\u7b97\u6cd5\u662f\u5426\u9ad8\u6548\uff08\u901a\u5e38\u662f\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u8fd0\u884c\uff09\uff1b</li> <li>\u666e\u904d\u6027(all instances)\uff1a\u5373\u7b97\u6cd5\u662f\u5426\u666e\u904d\u9002\u7528\u4e8e\u6240\u6709\u7684\u60c5\u51b5\uff0c\u89e3\u51b3\u6240\u6709\u7684\u95ee\u9898\uff1b</li> </ol> <p>\u5018\u82e5\u4e00\u4e2a\u89e3\u6cd5\uff1a</p> <ol> <li>\u540c\u65f6\u6ee1\u8db3\u6700\u4f18\u6027\u548c\u9ad8\u6548\u6027\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7b97\u6cd5\u5bf9\u7279\u6b8a\u60c5\u51b5\u80fd\u9ad8\u6548\u6c42\u6700\u4f18\u89e3\uff0c\uff08\u820d\u5f03\u666e\u904d\u6027\uff09\u80fd\u4e3a\u4e00\u4e9b\u95ee\u9898\u7684\u7279\u4f8b\u627e\u5230\u89e3\u51b3\u65b9\u6cd5\uff1b</li> <li>\u540c\u65f6\u6ee1\u8db3\u6700\u4f18\u6027\u548c\u666e\u904d\u6027\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7b97\u6cd5\u5bf9\u6240\u6709\u60c5\u51b5\u90fd\u80fd\u6c42\u6700\u4f18\u89e3\uff0c\uff08\u820d\u5f03\u9ad8\u6548\u6027\uff09\uff0c\u4f8b\u5982\u5bf9\u4e8e\u6570\u636e\u91cf\u4e0d\u5927\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u56de\u6eaf\u7b97\u6cd5\uff1b</li> <li>\u540c\u65f6\u6ee1\u8db3\u9ad8\u6548\u6027\u548c\u666e\u904d\u6027\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7b97\u6cd5\u53ef\u80fd\u662f\u4e2a\u8fd1\u4f3c\u7b97\u6cd5\uff0c\uff08\u820d\u5f03\u6700\u4f18\u6027\uff09\uff0c\u9ad8\u6548\u5730\u627e\u5230\u4e00\u4e2a\u548c\u6700\u4f18\u89e3\u76f8\u5dee\u4e0d\u5927\u7684\u7b54\u6848\uff1b</li> </ol> <p>\u5c31\u7b97 N=NP \u6210\u7acb\uff0c\u6211\u4eec\u4ecd\u7136\u65e0\u6cd5\u4fdd\u8bc1\u4e09\u4e2a\u613f\u671b\u4e00\u6b21\u6ee1\u8db3\u3002</p>"},{"location":"ADS/11.%20Approximation/#116-\u4e60\u9898\u96c6","title":"11.6 \u4e60\u9898\u96c6","text":"<ol> <li>Suppose ALG is an \u03b1-approximation algorithm for an optimization problem \u03a0 whose approximation ratio is tight. Then for every \u03f5&gt;0 there is no (\u03b1\u2212\u03f5)-approximation algorithm for \u03a0 unless P = NP.</li> </ol> <p>\u5bf9\u4e8e\u4e00\u79cd\u7b97\u6cd5\u800c\u8a00\uff0c\u8fd1\u4f3c\u6bd4\u4e3a \ud835\udefc\u03b1 \uff0c\u90a3\u4e48 \u2200\ud835\udefd&gt;\ud835\udefc\u2200\u03b2&gt;\u03b1 \uff0c\u90fd\u53ef\u4ee5\u8bf4 \ud835\udefd\u03b2 \u662f\u5176\u8fd1\u4f3c\u6bd4\u3002\u5982\u679c \ud835\udefc\u03b1 \u662f tight \u7684\uff0c\u5219 \ud835\udefc\u03b1 \u662f\u4e00\u4e2a\u4e0b\u786e\u754c\u3002</p> <p>\u4f46\u8fd9\u90fd\u53ea\u662f\u5bf9\u8fd9\u4e00\u79cd\u7b97\u6cd5\u7684\u5206\u6790\uff0c\u4e00\u4e2a tight \u7684\u8fd1\u4f3c\u6bd4\u53ea\u80fd\u8bf4\u660e\u4f60\u5bf9\u8fd9\u79cd\u7b97\u6cd5\u7684\u5206\u6790\u5230\u4f4d\u4e86\uff0c\u800c\u4e0d\u80fd\u8bf4\u660e\u8fd9\u4e2a\u95ee\u9898\u6ca1\u6709\u66f4\u597d\u7684\u7b97\u6cd5\u3002\u8fd9\u91cc\u5b8c\u5168\u662f\u4e24\u7801\u4e8b\u3002</p> <ol> <li>As we know there is a 2-approximation algorithm for the Vertex Cover problem. Then we must be able to obtain a 2-approximation algorithm for the Clique problem, since the Clique problem can be polynomially reduced to the Vertex Cover problem.</li> </ol> <p>F\u3002</p> <p>\u9996\u5148\uff0c\u786e\u5b9e\u6709 Clique problem \\(\u2264_\ud835\udc5d\\) Vertex Cover problem\uff0cVertex Cover problem \u4e5f\u786e\u5b9e\u6709 2-approximation \u7b97\u6cd5\uff0c\u4f46\u662f\u8fd9\u4e24\u4e2a problem \u8861\u91cf Cost \u7684\u6807\u51c6\u662f\u4e0d\u4e00\u6837\u7684\u3002</p> <p>\u5728 Vertex Cover problem \u4e2d\u7684 2- \u8fd1\u4f3c\u7b97\u6cd5\u5f97\u5230\u7684\u89e3\uff0c\u5728 Clique problem \u7ea6\u5316\u6210\u7684 Vertex Cover problem \u4e2d\u5f97\u5230\u7684\u89e3\u867d\u7136\u7b26\u5408 Vertex Cover problem \u7684 Cost \u6807\u51c6\u4e0b\u7684 2- \u8fd1\u4f3c\uff0c\u5374\u5e76\u4e0d\u4e00\u5b9a\u7b26\u5408 Clique problem \u6807\u51c6\u4e0b\u7684 2- \u8fd1\u4f3c\u3002</p> <ul> <li> <p>\u56de\u987e\u56e2\u95ee\u9898 (Clique problem) \u7684\u63cf\u8ff0\uff1a\u5bfb\u627e\u6700\u5927\u5b8c\u5168\u5b50\u56fe\uff0c\u90a3\u4e48\u5bfb\u627e\u5230\u7684\u5b8c\u5168\u5b50\u56fe\u4e2d\u9876\u70b9\u6570 (\ud835\udc361) \u8d8a\u591a\u8d8a\u597d\u3002</p> </li> <li> <p>\u56de\u987e\u9876\u70b9\u8986\u76d6\u95ee\u9898 (Vertex Cover problem) \u7684\u63cf\u8ff0\uff1a\u5bfb\u627e\u6700\u5c0f\u89c4\u6a21\u7684\u9876\u70b9\u8986\u76d6\uff0c\u90a3\u4e48\u5bfb\u627e\u5230\u7684\u9876\u70b9\u8986\u76d6\u4e2d\u9876\u70b9\u6570 (\ud835\udc362) \u8d8a\u5c11\u8d8a\u597d\u3002</p> </li> </ul> <p>\u56de\u987e\u7ea6\u5316\u65b9\u6cd5\uff1a    $$    |max  clique  of  \ud835\udc3a\u2223= \ud835\udc3e \u27fa \u2223max  vertex  cover  of  \ud835\udc3a\u203e\u2223=\u2223\ud835\udc49\u2223\u2212\ud835\udc3e    $$    \u8bbe Vertex Cover problem \u7684 2- \u8fd1\u4f3c\u7b97\u6cd5\u5f97\u5230\u7684\u9876\u70b9\u8986\u76d6\u89c4\u6a21\u4e3a \ud835\udc47\uff0c\u6700\u4f18\u89c4\u6a21\u4e3a \ud835\udc47\u2217\uff0c\u5219    $$    \\rho_2 = \\dfrac{C_2}{C_2^} = \\dfrac{T}{T} = 2 \\    \\rho_1 = \\dfrac{C_1}{C_1} = \\dfrac{|V| - T^}{|V| - T} = 1 + \\dfrac{1}{\\frac{|V|}{T^*} - 2}    $$    \u53ef\u89c1 \ud835\udf0c1 \u662f\u4e0d\u53ef\u63a7\u7684\u3002</p> <ol> <li>For the bin-packing problem: let S=\u2211Si. Which of the following statements is FALSE?</li> </ol> <p>A. The number of bins used by the next-fit heuristic is never more than \u23082S\u2309</p> <p>B. The number of bins used by the first-fit heuristic is never more than \u23082S\u2309</p> <p><code>C. The next-fit heuristic leaves at most one bin less than half full</code></p> <p>D. The first-fit heuristic leaves at most one bin less than half full</p> <ul> <li> <p>\u5bf9\u4e8eA\uff0c\u8bbe next-fit \u7b97\u6cd5\u6700\u7ec8\u751f\u6210 2\ud835\udc40 \u6216 2\ud835\udc40+1 \u4e2a bin\uff0c\u5219</p> <p>\\(S = \\sum_{i =1}^{2m}S(B_i) \\geq \\sum_{i=1}^m[S(B_{2i})+S(B_{2i-1})]&gt;\\sum_{i=1}^m 1 = m\\)</p> <p>\u6240\u4ee5\u5982\u679cNF\u9700\u89812M\u6216\u80052M+1\u4e2abin\uff0c\u90a3\u4e48\u6700\u4f18\u89e3\u81f3\u5c11\u9700\u8981M+1\u4e2abin</p> </li> <li> <p>first-fit(1.7-approximation) \u4f18\u4e8e next-fit(2-approximation)\uff0c\u56e0\u6b64 B \u4e5f\u6b63\u786e\u3002</p> </li> <li> <p>\u5bf9\u4e8e D\uff0c\u5982\u679c\u5b58\u5728\u4e24\u4e2a\u5c11\u4e8e\u534a\u6ee1\u7684 bin\uff0c\u90a3\u4e48\u5728\u4ea7\u751f\u7b2c\u4e8c\u4e2a\u5c11\u4e8e\u534a\u6ee1\u7684 bin \u65f6\uff0c\u4e0d\u53ef\u80fd\u5728\u5bf9\u524d\u9762 bins \u7684\u626b\u63cf\u4e2d\u627e\u4e0d\u5230\u653e\u4e0d\u8fdb\u53bb\u7684 bin\uff08\u7b2c\u4e00\u4e2a\u5c11\u4e8e\u534a\u6ee1\u7684 bin \u80af\u5b9a\u80fd\u653e\u8fdb\u53bb\uff09\uff0c\u56e0\u6b64\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u5c11\u4e8e\u534a\u6ee1\u7684 bin \uff0cD \u6b63\u786e\u3002</p> </li> <li> <p>\u5bf9\u4e8e C\uff0c\u4e24\u4e2a\u5c11\u4e8e\u534a\u6ee1\u7684 bin \u53ea\u8981\u4e0d\u662f\u76f8\u90bb\u51fa\u73b0\u5c31\u662f\u53ef\u80fd\u7684\uff080.2\uff0c0.9\uff0c0.2\uff09\uff0c\u56e0\u6b64 C \u9519\u8bef\u3002</p> </li> <li> <p>To approximate a maximum spanning tree \\(T\\) of an undirected graph \\(G=(V,E)\\) with distinct edge weights \\(w(u,v)\\) on each edge \\((u,v)\\in E\\), let's denote the set of maximum-weight edges incident on each vertex by \\(S\\). Also let \\(w(E')=\\sum _{(u,v)\\in E}w(u,v)\\) for any edge set \\(E'\\).    Which of the following statements is TRUE?</p> </li> </ul> <p><code>\u9898\u76ee\u7684\u610f\u601d\u662f\uff0c\u5982\u679c\u628a\u6bcf\u4e2a\u70b9\u6700\u5927\u6743\u503c\u7684\u8fb9\u52a0\u5165\u4e00\u4e2a\u96c6\u5408\uff0c\u90a3\u4e48\u8fd9\u4e2a\u96c6\u5408\u7684\u6743\u503c\u548c\u6700\u5927\u751f\u6210\u6811\u6743\u503c\u4e4b\u6bd4\u662f\u591a\u5c11\u3002\u6ce8\u610f\uff0c\u70b9\u7684\u6700\u5927\u6743\u503c\u8fb9\u96c6\u5408\u610f\u5473\u7740\u96c6\u5408\u91cc\u76f8\u540c\u7684\u8fb9\u6700\u591a\u51fa\u73b0\u4e00\u6b21\u3002</code></p> <p>A. \\(S=T\\) for any graph \\(G\\)</p> <p>B. \\(S\\neq T\\) for any graph \\(G\\)</p> <p><code>C. $w(T)\\geqslant w(S)/2$ for any graph $G$</code></p> <p>D. None of the above</p> <p> </p> <ol> <li>In the bin packing problem, we are asked to pack a list of items L to the minimum number of bins of capacity 1. For the instance L, let \\(FF(L)\\) denote the number of bins used by the algorithm First Fit. The instance$ L\u2032$ is derived from L by deleting one item from L. Then $FF(L\u2032) $is at most of \\(FF(L)\\).</li> </ol>"},{"location":"ADS/12.%20Local%20Search/","title":"Lecture 12 | Local Search","text":"<p> \u7ea6 4821 \u4e2a\u5b57  27 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 24 \u5206\u949f</p> <p>Local</p> <ul> <li>local optimum is a best solution in a neighborhood</li> </ul> <p>Search</p> <ul> <li>start with a feasible solution and search a better one within the neighborhood</li> <li>a local optimum is achieved if no improvement is possible</li> </ul> <p>\u2460 \u5f97\u5230\u4e00\u4e2a\u521d\u59cb\u7684\u53ef\u884c\u89e3  </p> <p>\u2461 \u6bcf\u4e00\u8f6e\u5faa\u73af\u4e2d\uff0c\u4ece\u8fd9\u4e2a\u53ef\u884c\u89e3\u7684\u90bb\u57df\u4e2d\uff0c\u9009\u62e9\u90bb\u57df\u6700\u4f18\u89e3\u4f5c\u4e3a\u65b0\u7684\u53ef\u884c\u89e3\u3002  </p> <p>\u2462 \u5047\u5982\u8fd9\u4e2a\u53ef\u884c\u89e3\u7684\u90bb\u57df\u4e2d\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u89e3\u4f18\u4e8e\u8fd9\u4e2a\u53ef\u884c\u89e3\uff0c\u9000\u51fa\u5faa\u73af\uff0c\u8fd4\u56de\u7ed3\u679c\u3002</p> <p></p> <p><code>\u68af\u5ea6\u4e0b\u964d\u7b97\u6cd5\uff0c\u5c40\u90e8\u641c\u7d22\u627e\u5230\u70b9\u4f7f\u5f97\uff0ccurrent cost &lt; mincost</code></p>"},{"location":"ADS/12.%20Local%20Search/#121-the-vertex-cover-problem","title":"12.1 The Vertex Cover Problem","text":"<p>\u6709\u9644\u5e26\u6761\u4ef6\uff0csize &lt;= K , \u8be5\u95ee\u9898\u662f\u4e00\u4e2aNP-complete\u95ee\u9898</p> <p>\u9876\u70b9\u8986\u76d6\u95ee\u9898(vertex cover problem)\u6307\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5411\u56fe \\(G=(V,E)\\)\uff0c\u627e\u5230\u4e00\u4e2a\u6700\u5c0f\u7684\u9876\u70b9\u96c6 \\(S\\subseteq V\\)\uff0c\u4f7f\u5f97\u6bcf\u6761\u8fb9 \\((u,v)\\) \u90fd\u81f3\u5c11\u6709\u4e00\u4e2a\u7aef\u70b9\u5728 \\(S\\) \u4e2d\uff08\u5373 \\(u\\in S \\lor v\\in S\\)\uff09\u3002</p> <p>\u8be5\u95ee\u9898\u662f\u4e00\u4e2aNP-Hard\u95ee\u9898\u3002\u6682\u65f6\u65e0\u6cd5\u627e\u5230\u4e00\u4e2a\u591a\u9879\u5f0f\u65f6\u95f4\u7684\u7b97\u6cd5\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898</p> <p>\u8fd9\u4e2a\u95ee\u9898\u7684\u53ef\u884c\u89e3\u4e3a \\(S = V\\)\uff0c\u5373\u5b8c\u5168\u8986\u76d6\uff0c\u5176\u76ee\u6807\u51fd\u6570\u4e3a \\(cost(S) = |S|\\)\u3002\u5373\uff0c\u6211\u4eec\u5c1d\u8bd5\u4f7f\u7528 local search \u6765\u964d\u4f4e \\(|S|\\)\u3002</p> <p>Search: Start from S = V; delete a node and check if S' is a vertex cover with a smaller cost.</p> <p>\u7ed9\u51fa\u51e0\u79cd\u6848\u4f8b\u4ee5\u53ca\u53ef\u89c6\u5316\uff0c\u8bf4\u660e\u5c40\u90e8\u641c\u7d22\u5bb9\u6613\u5931\u6548\u3002</p> <p></p> <ul> <li>case 0\uff1a\u6ca1\u6709\u8fb9\uff0c\u663e\u7136\u9876\u70b9\u8986\u76d6\u5b50\u96c6\u4e3a\u7a7a</li> <li>case 1\uff1a\u6700\u4f18\u9876\u70b9\u8986\u76d6\u5b50\u96c6\u4e3a\u4e2d\u5fc3\u70b9\u3002\u5047\u5982\u6211\u4eec\u4eceS=V\u5165\u624b\uff0c\u5047\u8bbe\u5148\u53bb\u6389\u4e2d\u5fc3\u70b9\uff0c\u5269\u4e0b\u76848\u4e2a\u70b9\u4ecd\u7136\u662f\u9876\u70b9\u8986\u76d6\u5b50\u96c6\uff0c\u4f46\u662f\u65e0\u6cd5\u518d\u5220\u9664\uff08\u5c40\u90e8\u6700\u4f18\u89e3\uff09\u3002\u5982\u679c\u5148\u5220\u9664\u5468\u56f4\u7684\u70b9\uff0c\u624d\u6709\u53ef\u80fd\u5f97\u5230\u5168\u5c40\u6700\u4f18\u89e3\u3002<code>\u8bf4\u660e\u5c40\u90e8\u641c\u7d22\u5b58\u5728\u5931\u6548\u7684\u53ef\u80fd</code></li> <li>case 2\uff1a\u5b58\u5728\u591a\u4e2a\u5c40\u90e8\u6700\u4f18\u89e3\uff0c\u4f46\u662f\u4e0d\u662f\u5168\u5c40\u6700\u4f18\u89e3 </li> </ul> <p>\u5f53\u6210\u672c\u51fd\u6570\u662f\u975e\u51f8\u51fd\u6570\u4e14\u5177\u6709\u591a\u4e2a\u5c40\u90e8\u6700\u5c0f\u503c\u65f6\uff0c\u68af\u5ea6\u4e0b\u964d\u53ef\u80fd\u65e0\u6cd5\u6709\u6548\u5730\u5de5\u4f5c\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u68af\u5ea6\u4e0b\u964d\u53ef\u80fd\u4f1a\u9677\u5165\u5c40\u90e8\u6700\u5c0f\u503c\uff0c\u800c\u4e0d\u662f\u6536\u655b\u5230\u5168\u5c40\u6700\u5c0f\u503c\u3002\u8fd9\u662f\u56e0\u4e3a\u68af\u5ea6\u4e0b\u964d\u6839\u636e\u6210\u672c\u51fd\u6570\u7684\u5c40\u90e8\u68af\u5ea6\u66f4\u65b0\u53c2\u6570\uff0c\u5982\u679c\u5b83\u6070\u597d\u4ece\u4e00\u4e2a\u521d\u59cb\u70b9\u5f00\u59cb\uff0c\u8be5\u70b9\u63a5\u8fd1\u4e00\u4e2a\u5c40\u90e8\u6700\u5c0f\u503c\u4f46\u8fdc\u79bb\u5168\u5c40\u6700\u5c0f\u503c\uff0c\u90a3\u4e48\u5b83\u53ef\u80fd\u4f1a\u6536\u655b\u5230\u8be5\u5c40\u90e8\u6700\u5c0f\u503c\u3002</p> <p>\u4e3a\u4e86\u7f13\u89e3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u968f\u673a\u68af\u5ea6\u4e0b\u964d\uff08SGD\uff09\u6216\u5176\u53d8\u4f53\uff0c\u5982Adam\u3001RMSprop\u6216AdaGrad\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u5f15\u5165\u4e86\u968f\u673a\u6027\u6216\u81ea\u9002\u5e94\u5b66\u4e60\u7387\uff0c\u4ee5\u5e2e\u52a9\u8df3\u51fa\u5c40\u90e8\u6700\u5c0f\u503c\u5e76\u627e\u5230\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002</p>"},{"location":"ADS/12.%20Local%20Search/#122-metropolis-algorithm","title":"12.2 metropolis algorithm","text":"<p>\u6885\u7279\u7f57\u6ce2\u5229\u65af\u7b97\u6cd5(the Metropolis algorithm)\u7684\u8fc7\u7a0b\uff1a</p> <pre><code>SolutionType Metropolis()\n{\n    Define constants k and T;\n    Start from a feasible solution S \\in FS;\n    MinCost = cost(S);\n    while (1)\n    {\n        S\u2019 = Randomly chosen from N(S);\n        CurrentCost = cost(S\u2019);\n        if (CurrentCost &lt; MinCost)\n        {\n            MinCost = CurrentCost;\n            S = S\u2019;\n        }\n        else\n        {\n            With a probability e ^ { -\\Delta cost / (kT) }, let S = S\u2019;\n            else break;\n        }\n    }\n    return S;\n}\n</code></pre> <ul> <li> <p>\u5728\u5c40\u90e8\u641c\u7d22\u7b97\u6cd5\u4e2d\u52a0\u2f0a\u2f00\u4e2a\u6982\u7387p\uff0c\u5982\u679c\u5f53\u90bb\u70b9\u7684\u503c\u4f18\u4e8e\u5f53\u524d\u70b9\u65f6\u6211\u4eec\u63a5\u53d7\u5b83\uff1b<code>\u5f53\u90bb\u70b9\u7684\u503c\u52a3\u4e8e\u5f53\u524d\u70b9\u65f6\u6211 \u4eec\u4e5f\u6709p\u7684\u6982\u7387\u4ecd\u7136\u63a5\u53d7\u5b83\u3002\u8fd9\u5c31\u5e26\u6765\u4e86\u5728\u53cd\u590d\u8fed\u4ee3\u4e2d\u8df3\u51fa\u5c40\u90e8\u6700\u4f18\u89e3\u7684\u673a\u4f1a</code>\u3002</p> </li> <li> <p>\u6982\u7387p\u7684\u5927\u5c0f\u53d7\u5230\u5f53\u524d\u70b9\u7684\u503c\u7684\u5f71\u54cd\uff0c\u5f53\u524d\u70b9\u503c\u8d8a\u9760\u8fd1\u671f\u671b\u7684\u2f45\u5411\uff08\u5373\u6e29\u5ea6\u8d8a\u4f4e\uff09\uff0cp\u7684\u503c\u8d8a\u5c0f\u3002\u8fd9\u4f7f\u5f53\u524d\u70b9 \u843d\u2f0a\u8f83\u4f18\u7684\u89e3\u7a7a\u95f4\u65f6\u66f4\u4e0d\u5bb9\u6613\u8df3\u51fa\uff0c\u5373\u66f4\u7a33\u5b9a\u7684\u80fd\u83b7\u5f97\u4f18\u503c\u3002</p> </li> </ul> <p><code>\u6ce8\uff1a\u5f53\uff08\u6e29\u5ea6\uff09T\u5f88\u9ad8\u65f6\uff0c\u4e0a\u5761\u7684\u6982\u7387\u51e0\u4e4e\u4e3a1\uff0c\u5bb9\u6613\u5f15\u8d77\u5e95\u90e8\u9707\u8361\uff1b\u5f53T\u63a5\u8fd10\u65f6\uff0c\u4e0a\u5761\u6982\u7387\u51e0\u4e4e\u4e3a0\uff0c\u63a5\u8fd1\u539f\u59cb\u7684\u68af\u5ea6\u4e0b\u964d\u6cd5\u3002</code></p> <p>Metropolis\u7b97\u6cd5\u5f53\u7136\u4e5f\u5b58\u5728\u9700\u8981\u4f18\u5316\u7684\u5730\u65b9\uff08\u5bf9\u4e8e\u7b80\u5355\u95ee\u9898\uff0c\u5b58\u5728\u8f83\u5927\u6982\u7387\u9009\u62e9\u5230\u4e00\u4e2a\u6bd4\u5f53\u524d\u89e3\u5dee\u7684\u60c5\u51b5\uff0c\u4f46\u662f\u53c8\u6709\u4e00\u5b9a\u7684\u6982\u7387\u63a5\u53d7\u8fd9\u4e2a\u89e3\uff0c\u8fd9\u6837\u5c31\u4f1a\u504f\u79bb\u6700\u4f18\u89e3\uff0c\u751a\u81f3\u9677\u5165\u5728\u51e0\u4e2a\u89e3\u4e4b\u95f4\u6765\u56de\u8df3\u8dc3\u4f46\u5c31\u662f\u627e\u4e0d\u5230\u6700\u4f18\u89e3\u7684\u5883\u5730\uff09\u3002</p> <p>\u89c2\u5bdfmetropolis\u7b97\u6cd5\u7684\u4e00\u4e2a\u91cd\u8981\u53c2\u6570\u4e4b\u540e\uff0c\u53d1\u73b0\u9ad8\u6e29\u6709\u5229\u4e8e\u8df3\u51fa\u5c40\u90e8\u6700\u4f18\u89e3\uff0c\u6e29\u5ea6\u8f83\u4f4e\u65f6\uff0c\u8fdb\u5165\u6700\u4f18\u89e3\u540e\u4e0d\u6613\u8df3\u51fa\u3002\u56e0\u6b64\u6211\u4eec\u5e0c\u671b\u5728\u5f00\u59cb\u7684\u65f6\u5019\u6e29\u5ea6\u5f88\u9ad8\uff0c\u7136\u540e\u9010\u6e10\u964d\u4f4e\u6e29\u5ea6\uff0c\u8fd9\u6837\u5728\u5f00\u59cb\u65f6\u6211\u4eec\u80fd\u591f\u8df3\u51fa\u5c40\u90e8\u6700\u4f18\u89e3\uff0c\u5728\u9010\u6e10\u964d\u6e29\u540e\u505c\u7559\u5728\u6700\u4f18\u89e3\u3002<code>\u8fd9\u5b9e\u9645\u4e0a\u5c31\u662f\u6a21\u62df\u9000\u706b\u7684\u601d\u60f3</code></p> <p>\u6a21\u62df\u9000\u706b(simulated annealing)</p> <p>Cooling schedule: T = { T1 , T2 , \u2026 }</p>"},{"location":"ADS/12.%20Local%20Search/#123-hopfield-neural-networks","title":"12.3 Hopfield Neural Networks","text":"<p>Graph $G = (V, E) $with integer edge weights w (positive or negative).</p> <p>If \\(w_e\\) &lt; 0, where \\(e = (u, v)\\), then u and v want to have the same state;</p> <p>if \\(w_e &gt; 0\\) then u and v want different states.</p> <p>The absolute value \\(|w_e|\\) indicates the strength of this requirement.</p> <p>\u7edd\u5bf9\u503c \\(|w_e|\\)\u8868\u793a\u6b64\u8981\u6c42\u7684\u5f3a\u5ea6\u3002</p> <ol> <li> <p>Hopfield \u795e\u7ecf\u7f51\u7edc\u53ef\u4ee5\u62bd\u8c61\u4e3a\u4e00\u4e2a\u65e0\u5411\u56fe\\(G = (V,E)\\)\uff0c\u5176\u4e2d\\(V \\(\u662f\u795e\u7ecf\u5143\u7684\u96c6\u5408\uff0c\\)E \\(\u662f\u795e\u7ecf\u5143\u4e4b\u95f4\u7684\u8fde\u63a5\u5173\u7cfb\uff0c\u5e76\u4e14\u6bcf\u6761\u8fb9\\)e\\) \u90fd\u6709\u4e00\u4e2a\u6743\u91cd\\(w_e\\)\uff0c\u8fd9\u53ef\u80fd\u662f\u6b63\u6570\u6216\u8d1f\u6570\uff1b</p> </li> <li> <p>\u5bf9\u7f51\u7edc\u4e2d\u6bcf\u4e2a\u795e\u7ecf\u5143\uff08\u5373\u56fe\u7684\u9876\u70b9\uff09\u7684\u72b6\u6001\u7684\u4e00\u4e2a\u8d4b\u503c\uff0c\u8d4b\u503c\u53ef\u80fd\u4e3a\\(1\\) \u6216\\(-1\\)\uff0c\u6211\u4eec\u8bb0\u9876\u70b9\\(u\\) \u7684\u72b6\u6001\u4e3a\\(s_u\\)\uff1b</p> </li> <li> <p>\u5982\u679c\u5bf9\u4e8e\u8fb9\\(e = (u, v)\\) \u6709\\(w_e &gt; 0\\)\uff0c\u5219\u6211\u4eec\u5e0c\u671b\\(u \\(\u548c\\)v \\(\u5177\u6709**\u76f8\u53cd\u7684\u72b6\u6001**\uff1b\u5982\u679c\\)w_e &lt; 0\\)\uff0c\u5219\u6211\u4eec\u5e0c\u671b\\(u\\) \u548c\\(v \\(\u5177\u6709**\u76f8\u540c\u7684\u72b6\u6001**\uff1b\u7efc\u5408\u800c\u8a00\uff0c\u6211\u4eec\u5e0c\u671b\\)w_es_us_v &lt; 0\\)</p> </li> <li> <p>\u6211\u4eec\u5c06\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u7684\u8fb9\\(e \\(\u79f0\u4e3a\u201c\u597d\u7684\uff08\\)good\\)\uff09\u201d\uff0c\u5426\u5219\u79f0\u4e3a\u201c\u574f\u7684\uff08\\(bad\\)\uff09\u201d\uff1b</p> </li> <li> <p>\u6211\u4eec\u79f0\u4e00\u4e2a\u70b9u \u662f\u201c\u6ee1\u610f\u7684\uff08\\(satisfied\\)\uff09\u201d\uff0c\u5f53\u4e14\u4ec5\u5f53$u $\u6240\u5728\u7684\u8fb9\u4e2d\uff0c\u597d\u8fb9\u7684\u6743\u91cd\u7edd\u5bf9\u503c\u4e4b\u548c\u5927\u4e8e\u7b49\u4e8e\u574f\u8fb9\u7684\u6743\u91cd\u7edd\u5bf9\u503c\u4e4b\u548c    $$    \\underset{v:e=(u,v)\\in E}{\\sum}w_es_us_v \\leq 0    $$</p> </li> <li> <p>\u6211\u4eec\u79f0\u4e00\u4e2a\u6784\u578b\u662f\u201c\u7a33\u5b9a\u7684\uff08stable\uff09\u201d\uff0c\u5f53\u4e14\u4ec5\u5f53\u6240\u6709\u7684\u70b9\u90fd\u662f\u6ee1\u610f\u7684</p> </li> </ol> <p>Output: A configuration S of the network \u2013 an assignment of the state \\(s_u\\) to each node u</p> <p></p> <p>\u3016Definition\u3017 In a configuration S, edge $e = (u, v) $is <code>good</code> if \\(w_e s_u s_v &lt; 0 \\((\\)w_e &lt; 0\\) iff \\(s_u = s_v\\) ); otherwise, it is <code>bad</code>.</p> <p>\u3016Definition\u3017 In a configuration S, a node u is <code>satisfied</code> if the weight of incident good edges \\(\\geq\\) weight of incident bad edges. $$ \\sum_{v:e=(u,v)\\in E} w_es_us_v \\leq 0 $$ \u7531\u4e8e\u4e0d\u4e00\u5b9a\u80fd\u627e\u5230\u5b8c\u7f8e\u7684configuration\uff0c\u6240\u4ee5\u9000\u800c\u6c42\u5176\u6b21\uff0c\u8981\u6c42\u597d\u8fb9\u7684\u6743\u91cd\u5927\u4e8e\u5916\u8fb9\u7684\u6743\u91cd</p> <p>\u3016Definition\u3017A configuration is <code>stable</code> if all nodes are <code>satisfied.</code></p> <p></p> <p>Does a Hopfield network always have a stable configuration, and if so, how can we find one?</p> <p>\u5982\u679c\u4e00\u4e2a\u7ed3\u70b9\u4e0d\u6ee1\u8db3\uff0c\u90a3\u4e48\u6211\u5c31\u628a\u8fd9\u4e2a\u7ed3\u70b9\u7684state\u53d6\u53cd\uff08\u56e0\u4e3a\u4ec5\u6709\u6ee1\u8db3\u548c\u4e0d\u6ee1\u8db3\uff09\uff0c\u53d6\u53cd\u4e4b\u540e\u4e0e\u8be5\u70b9\u76f8\u8fde\u7684\u8fb9\uff0c\u597d\u8fb9\u53d8\u574f\u8fb9\uff0c\u574f\u8fb9\u53d8\u597d\u8fb9</p> <p></p> <p>\u5173\u952e\u95ee\u9898\u662f\uff1aWill it always terminate\uff1f\u662f\u5426\u603b\u4f1a\u505c\u6b62</p> <p><code>\u6bcf\u4e00\u6b21\u53d6\u53cd\u4e4b\u540e\uff0c\u8be5\u70b9\u7684\u597d\u8fb9\u6743\u91cd\u81f3\u5c11+1\uff0c\u4f46\u662f\u603b\u6743\u91cd\u662f\u6709\u9650\u7684\uff0c\u6240\u4ee5\u4e00\u5b9a\u4f1a\u505c\u6b62</code></p> <ul> <li> <p>Claim:  The state-flipping algorithm terminates at a stable configuration after at most \\(W = _e|w_e|\\) iterations.</p> </li> <li> <p>Proof: </p> </li> <li> <p>Problem:  To maximize \\(\\Phi\\)</p> </li> </ul> <p>\\(S - S'\\): $S' $can be obtained from S by flipping a single state</p> <p>Claim:  Any local maximum in the state-flipping algorithm to maximize \\(\\Phi\\) is a stable configuration.</p> <ul> <li> <p>\u4ed6\u662f\u5426\u662f\u591a\u9879\u5f0f\u65f6\u95f4\u7b97\u6cd5\uff1f</p> <p>Still an open question: to find an algorithm that constructs stable states in time polynomial in $ n$ and \\(logW\\) (rather than n and W), or in a number of primitive arithmetic operations that is polynomial in n alone, independent of the value of W.</p> <p>\u4ecd\u7136\u662f\u4e00\u4e2a\u60ac\u800c\u672a\u51b3\u7684\u95ee\u9898\uff1a\u627e\u5230\u4e00\u79cd\u7b97\u6cd5\uff0c\u8be5\u7b97\u6cd5\u5728 n \u548c logW\uff08\u800c\u4e0d\u662f n \u548c W\uff09\u4e2d\u6784\u9020\u65f6\u95f4\u591a\u9879\u5f0f\u4e2d\u7684\u7a33\u5b9a\u72b6\u6001\uff0c\u6216\u8005\u5728\u4e00\u4e9b\u539f\u59cb\u7b97\u672f\u8fd0\u7b97\u4e2d\u6784\u9020\u7a33\u5b9a\u72b6\u6001\uff0c\u8be5\u8fd0\u7b97\u4ec5\u5728 n \u4e2d\u662f\u591a\u9879\u5f0f\u7684\uff0c\u4e0e W \u7684\u503c\u65e0\u5173\u3002</p> </li> </ul>"},{"location":"ADS/12.%20Local%20Search/#124-the-maximum-cut-problem","title":"12.4 The Maximum Cut Problem","text":"<p>Maximum Cut problem: Given an undirected graph \\(G = (V, E)\\) with positive integer edge weights we, find a node partition$ (A, B) $such that the total weight of edges crossing the cut is maximized. $$ w(A,B) = \\sum_{u\\in A, v\\in B} w_{uv} $$ \u5e94\u7528\uff1an\u9879\u6d3b\u52a8\uff0cM\u9879\u4eba\u3002\u6bcf\u4e2a\u4eba\u90fd\u60f3\u53c2\u52a0\u5176\u4e2d\u4e24\u9879\u6d3b\u52a8\u3002\u5c06\u6bcf\u9879\u6d3b\u52a8\u5b89\u6392\u5728\u4e0a\u5348\u6216\u4e0b\u5348\uff0c\u4ee5\u6700\u5927\u9650\u5ea6\u5730\u589e\u52a0\u53ef\u4ee5\u4eab\u53d7\u8fd9\u4e24\u9879\u6d3b\u52a8\u7684\u4eba\u6570\u3002</p> <ul> <li>problem\uff1a To maximize  \\(\\Phi(S) = \\sum_{e \\ is \\ good}|w_e|\\)</li> <li>Feasible solution set FS : any partition (A, B) </li> <li>S - S': S' can be obtained from S by moving one node from A to B, or one from B to A.</li> </ul> <p>\u6700\u5927\u5272\u95ee\u9898\u548cHopfield\u795e\u7ecf\u7f51\u7edc\u95ee\u9898\u5b58\u5728\u7740\u5173\u8054\u3002\u5bf9\u4e8e\u4efb\u610f\u89e3\uff08A\uff0cB\uff09\uff0c\u5c06A\u4e2d\u7684\u70b9\u7684\u72b6\u6001\u8d4b\u503c\u4e3a-1\uff0cB\u4e2d\u7684\u70b9\u7684\u72b6\u6001\u8d4b\u503c\u4e3a1.\u6b64\u65f6\u7ec4\u5185\u7684\u8fb9\u53d8\u4e3a\u574f\u8fb9\uff08\\(w_es_us_v &gt;0\\)\uff09,\u7ec4\u95f4\u7684\u8fb9\u53d8\u4e3a\u597d\u8fb9\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u6700\u5927\u5316\u597d\u8fb9\u7684\u603b\u6743\u91cd\u4e4b\u548c\\(\\Phi(S)\\).</p> <p>\u79fb\u52a8\u4e00\u70b9\u4ece\u7ec4A\u5230\u7ec4B\uff0c\u4e0e\u8be5\u70b9\u76f8\u8fde\u7684\u53d8\uff0c\u7ec4\u95f4\u7684\u53d8\u7ec4\u5185\uff0c\u7ec4\u5185\u7684\u53d8\u7ec4\u95f4</p> <pre><code>ConfigType State_flipping()\n{\n    Start from an arbitrary configuration S;\n    while ( ! IsStable(S) ) {\n        u = GetUnsatisfied(S);\n        su = - su;\n    }\n    return S;\n}\n</code></pre> <p></p> <p>\u5373\u56feG\u4e2d\u6240\u6709\u8fb9\u7684\u6743\u91cd\u4e4b\u548c\u4e3a\\(W = \\underset{(u,v)\\in E}{\\sum}w_{uv}\\),\u56e0\u4e3a\uff08A\uff0cB\uff09\u662f\u4e00\u4e2a\u5c40\u90e8\u6700\u4f18\u89e3\uff0c\u5373\u628au\u653e\u5230B\u4f1a\u4f7f\u5272\u8fb9\u7684\u6743\u91cd\u548c\u964d\u4f4e\uff0c<code>\u4e5f\u5c31\u662f\u8bf4\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u5728A\u4e2d\u7684\u70b9u\uff0c\u6ee1\u8db3\u7ec4\u95f4\u6743\u91cd\u4e4b\u548c\u5927\u4e8e\u7ec4\u5185\u6743\u91cd\u4e4b\u548c</code>\u5373\\(\\underset{v\\in A}{\\sum}w_{uv} \\leq \\underset{v \\in B}{\\sum}w_{uv}\\)</p> <p><code>\u8fd9\u662f\u56e0\u4e3a\u539f\u5148\u70b9u\u7684\u597d\u8fb9\u6743\u91cd\u4e4b\u548c\u5927\u4e8e\u574f\u8fb9\u6743\u91cd\u4e4b\u548c\uff0c\u4e00\u65e6\u4eceA\u79fb\u52a8\u5230B\u4e4b\u540e\uff0c\u539f\u5148\u7684\u597d\u8fb9\u53d8\u4e3a\u574f\u8fb9\uff0c\u574f\u8fb9\u53d8\u4e3a\u597d\u8fb9\uff0c\u5bfc\u81f4\u597d\u8fb9\u7684\u6743\u91cd\u964d\u4f4e</code></p> <p>\u5bf9\u6240\u6709\u7684\\(u \\in A\\)\u90fd\u6709\u8fd9\u6837\u7684\u4e0d\u7b49\u5f0f\uff0c\u5bf9\u6240\u6709\u7684\u4e0d\u7b49\u5f0f\u6c42\u548c\u5f97\u5230 $$ \\underset{u \\in A}{\\sum} \\underset{v \\in A}{\\sum}w_{uv} \\leq \\underset{u \\in A}{\\sum} \\underset{v \\in B}{\\sum}w_{uv} $$ \u663e\u7136\u5de6\u8fb9\u662f2\u500d\u7684A\u4e2d\u6240\u6709\u8fb9\u7684\u6743\u91cd\u4e4b\u548c\uff0c\u56e0\u4e3a\u6bcf\u4e00\u6761\u8fb9\u8ba1\u7b97\u4e86\u4e24\u6b21\uff0c\u53f3\u8fb9\u4f7f\u6240\u6709\u7684\u5272\u8fb9\u7684\u6743\u91cd\u4e4b\u548c $$ 2\\underset{(u,v) \\in A}{\\sum} w_{u,v} = \\underset{u \\in A}{\\sum} \\underset{v \\in A}{\\sum}w_{uv} \\leq \\underset{u \\in A}{\\sum} \\underset{v \\in B} {\\sum}w_{uv} = w(A,B) \\ \u5bf9(u,v) \\in B \u540c\u7406 $$ \u7ec4\u95f4\u6743\u91cd\u8981\u5927\u4e8e\u7ec4\u5185\u6743\u91cd\uff0c\u7ec4\u95f4\u6743\u91cd\u5728\u603b\u6743\u91cd\u4e2d\u81f3\u5c11\u8981\u53601/2</p> <p>\u603b\u6743\u91cd\\(W = \\underset{(u,v) \\in A}{\\sum} w_{u,v} + \\underset{(u,v) \\in B}{\\sum} w_{u,v} + w(A, B)\\), <code>\u7531\u4e8e\u6700\u5927\u5272\u7684\u6743\u91cd\u4e4b\u548c\u4e0d\u4f1a\u8d85\u8fc7\u5168\u4f53\u8fb9\u7684\u6743\u91cd\u548cW</code>\uff0c\u6240\u4ee5\\(w(A^*,B^*) \\leq W = \\underset{(u,v) \\in A}{\\sum} w_{u,v} + \\underset{(u,v) \\in B}{\\sum} w_{u,v} + w(A, B)  \\leq 2w(A,B)\\)</p> <p></p> <p><code>\u8bbe\u7f6e\u4e00\u4e2a\u9608\u503c\uff0c\u8981\u6c42\u6bcf\u4e00\u6b21\u6743\u91cd\u7684\u589e\u52a0\u9700\u8981\u5927\u4e8e\u9608\u503c</code></p> <ul> <li>\u5982\u679c\u6dfb\u52a0\u9608\u503c\uff0c\\(\\dfrac{2\\epsilon }{|V|} w(A,B)\\),\u90a3\u4e48\u6700\u7ec8\u5f97\u5230\u7684\u7ed3\u679c\u6ee1\u8db3\\(w(A^*,B^*) \\leq (2 + \\epsilon)w(A,B)\\)</li> </ul> <p>\u6700\u7ec8\u7ffb\u8f6c\\(O(n/\\epsilon logW)\\)\u6b21</p> <ul> <li>\u5982\u679c\u4e0d\u6dfb\u52a0\u9608\u503c\uff0c\u6700\u7ec8\u5f97\u5230\u7684\u7ed3\u679c\u6ee1\u8db3\\(w(A^*,B^*) \\leq 2w(A,B)\\)</li> </ul>"},{"location":"ADS/12.%20Local%20Search/#125-\u65c5\u884c\u5546\u95ee\u9898","title":"12.5 \u65c5\u884c\u5546\u95ee\u9898","text":"<p>\u5b9a\u4e49\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5411\u5b8c\u5168\u56fe\\(G = (V,E)\\),\u6bcf\u6761\u8fb9\\((u,v) \\in E\\)\u6709\u4e00\u4e2a\u6743\u91cd\\(w(u,v)\\),\u6211\u4eec\u5e0c\u671b\u627e\u5230\u4e00\u4e2a\u6700\u77ed\u56de\u8def\uff0c\u4f7f\u5f97\u6bcf\u4e00\u4e2a\u9876\u70b9\u90fd\u88ab\u6070\u597d\u8bbf\u95ee\u4e00\u6b21\uff0c\u5e76\u4e14\u6240\u4ed8\u51fa\u7684\u4ee3\u4ef7\u6700\u5c11\u3002</p> <p><code>\u8fd9\u662f\u4e00\u4e2aNP-Hard\u95ee\u9898\uff0c\u6682\u65f6\u627e\u4e0d\u5230\u4e00\u4e2a\u591a\u9879\u5f0f\u65f6\u95f4\u7b97\u6cd5\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898</code></p>"},{"location":"ADS/12.%20Local%20Search/#1251-\u52a8\u6001\u89c4\u5212","title":"12.5.1 \u52a8\u6001\u89c4\u5212","text":"<p>\u5047\u8bbe\u6211\u4eec\u7ed9\u6240\u6709\u9876\u70b9\u7f16\u53f7\u4e3a1\uff0c2\uff0c3\uff0c4....\uff0cn\uff0c\u7136\u540e\u6211\u4eec\u7684\u76ee\u6807\u65f6\u627e\u4e00\u6761\u6700\u77ed\u7684\u7ecf\u8fc7\u6bcf\u4e00\u70b9\u6070\u597d\u4ece1\u56de\u52301\uff08\u8d77\u59cb\u70b9\u4efb\u610f\uff0c\u56de\u8def\u7b49\u4ef7\uff09\u7684\u54c8\u5bc6\u987f\u56de\u8def\u3002\u90a3\u4e48\u8fd9\u4e2a\u8def\u5f84\u7684\u6700\u540e\u4e00\u8df3\u5e94\u5f53\u662f\u4ece\u67d0\u4e2a\u70b9\\(j != 1\\),\u90a3\u4e48\u6211\u4eec\u7684\u95ee\u9898\u8f6c\u5316\u4e3a\u627e\u6700\u4f18\u7684\u70b9\\(j\\)\u5b8c\u6210\u6700\u540e\u4e00\u8df3\u3002 $$ \u6700\u4f18\u8def\u7ebf\u7684\u6210\u672c = min_{j = 2,3,...n}\u8bbf\u95ee\u6bcf\u4e2a\u9876\u70b9\u7684\u65e0\u73af1\\rightarrow j\u8def\u5f84\u7684\u6700\u4f4e\u6210\u672c + c_{j1} $$ \u8fd9\u91cc\u6211\u4eec\u5c31\u8981\u7528\u6700\u77ed\u8def\u95ee\u9898\u81ea\u5e26\u7684\u6700\u4f18\u5b50\u7ed3\u6784\u6765\u8bbe\u8ba1\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u4e86\uff08\u6211\u4eec\u5728Bellman-Ford \u548cFloyd-Warshall \u7b97\u6cd5\u4e2d\u5df2\u7ecf\u5b9e\u8df5\u8fc7\uff09\uff1a\u5373\u6700\u77ed\u8def\u5f84\u7684\u67d0\u4e00\u6bb5\u4e5f\u4e00\u5b9a\u662f\u5bf9\u5e94\u7684\u8d77\u70b9\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002\u56e0\u6b64\u5982\u679c\u6211\u4eec\u8981\u6c42\u4ece\\(1\\) \u5230\\(j\\) \u7684\u6700\u77ed\u8def\u5f84\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u6700\u540e\u4e00\u8df3\u7684\u9009\u53d6\uff0c\u5047\u8bbe\u6700\u77ed\u8def\u5f84\u6700\u540e\u4e00\u8df3\u662f\u4ece(k \\(\u5230\\)j\\)\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c06\u95ee\u9898\u5206\u89e3\u4e3a\u4ece\\(1\\) \u5230\\(k\\) \u7684\u6700\u77ed\u8def\u5f84\u52a0\u4e0a\u4ecek \u5230j \u7684\u6210\u672c.</p> <p>\u5f53\u7136\u6211\u4eec\u5e76\u4e0d\u80fd\u76f4\u63a5\u77e5\u9053\u54ea\u4e2a\\(k\\) \u6700\u597d\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u904d\u5386\u6240\u6709\u7684\\(k\\)\uff0c\u8fd9\u6837\u5c31\u51b3\u5b9a\u4e86\u6700\u540e\u4e00\u8df3\u3002\u7136\u540e\u6211\u4eec\u9012\u5f52\u89e3\u51b3\u5012\u6570\u7b2c\u4e8c\u8df3\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\uff0c\u8fd9\u6837\u7684\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u7684\u5b50\u95ee\u9898\u53ef\u4ee5\u8868\u8fbe\u4e3a\\(C_{S,j}\\),\u8868\u793a\u4ece1\u5230\\(j \\in S\\)\u7ecf\u8fc7S\u4e2d\u6240\u6709\u70b9\u6070\u597d\u4e00\u6b21\u7684\u6700\u77ed\u8def\u5f84\u3002 $$ C_{S,j} = \\underset{k \\in S, k != 1,j}{min} C_{S-{j},k}+c_{k,j} $$ \u6839\u636e\u9012\u63a8\u5f0f\u7684\u7279\u70b9\uff0c\u6211\u4eec\u53ea\u8981\u6309\u7167S\u7684\u5927\u5c0f\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u586b\u8868\uff0c\u5c31\u80fd\u4fdd\u8bc1\u89e3\u6bcf\u4e00\u4e2a\u95ee\u9898\u7684\u65f6\u5019\uff0c\u9700\u8981\u7684\u5b50\u95ee\u9898\u7684\u7b54\u6848\u90fd\u5df2\u77e5\u3002</p>"},{"location":"ADS/12.%20Local%20Search/#1252-\u5c40\u90e8\u641c\u7d22","title":"12.5.2 \u5c40\u90e8\u641c\u7d22","text":"<ol> <li>\u5b9a\u4e49\u90bb\u5c45\u5173\u7cfb\uff1a<code>\u5bf9\u4e8e\u4e24\u6761\u957f\u5ea6\u4e3an\u7684\u4e0d\u540c\u7684\u54c8\u5bc6\u987f\u56de\u8def\uff0c\u5b83\u4eec\u4e4b\u95f4\u80fd\u5171\u4eab\u7684\u6700\u5927\u8fb9\u6570\u4e3an-2</code>\uff0c\u56e0\u6b64\u6211\u4eec\u5b9a\u4e49\u4e24\u6761\u54c8\u5bc6\u987f\u56de\u8defS\u548cS\u2018\u4e4b\u95f4\u7684\u90bb\u5c45\u5173\u7cfb\u4e3a\uff1aS\u548cS\u2019\u4e4b\u95f4\u7684\u8fb9\u6709\u4e24\u6761\u4e0d\u4e00\u6837</li> </ol> <ol> <li>\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u57282-\u8fd1\u4f3c\u7684\u89e3\u7684\u57fa\u7840\u4e0a\u505a2-\u53d8\u6362\u8fdb\u4e00\u6b65\u6539\u8fdb\u89e3\uff08\u5373\u68c0\u67e5\u6539\u53d8\u4e4b\u540e\u53d7\u5230\u5f71\u54cd\u7684\u8fb9\u7684\u957f\u5ea6\u662f\u5426\u51cf\u5c0f\uff09</li> </ol>"},{"location":"ADS/12.%20Local%20Search/#126-\u4e60\u9898\u96c6","title":"12.6 \u4e60\u9898\u96c6","text":"<ol> <li>Q1-1. For the graph given in the following figure, if we start from deleting the black vertex, then local search can always find the minimum vertex cover. (T/F)</li> </ol> <p><code>T</code></p> <p>\u4e00\u4e2a\u70b9\u53ef\u4ee5\u5220\u9664\u7684\u6761\u4ef6\u662f\uff1a\u8fd9\u6761\u8fb9\u7684\u53e6\u4e00\u4e2a\u70b9\u6ca1\u6709\u88ab\u5220\u9664\u3002\u5982\u679c\u53ef\u4ee5\u5220\u9664\uff0c\u5219\u4efb\u610f\u5220\u9664\u4e00\u4e2a\u3002\u5982\u679c\u4e0d\u80fd\u5220\u9664\uff0c\u5219\u7b97\u6cd5\u7ed3\u675f\u3002\u5269\u4e0b\u7684\u70b9\u8d8a\u5c11\u8d8a\u597d\u3002</p> <p>\u5982\u679c\u5220\u9664\u9ed1\u70b9\uff0c\u90a3\u4e48\u4e0d\u80fd\u5220\u9664\u53f3\u8fb9\u7684\u70b9\uff0c\u4e5f\u4e0d\u80fd\u5220\u9664\u4e0b\u9762\u7684\u70b9\uff0c\u53ea\u80fd\u5220\u9664\u6700\u4e0b\u9762\u4e24\u4e2a\u3002\u56e0\u6b64\u786e\u5b9e\u8fbe\u5230\u4e86\u6700\u4f18\u89e3\u3002</p> <ol> <li>Q1-2. We are given a set of sites \\(S=\\{s_{1}, s_{2}, \\cdots, s_{n}\\}\\) in the plane, and we want to choose a set of \\(k\\) centers \\(C=\\{c_{1}, c_{2}, \\cdots, c_{k}\\}\\) so that the maximum distance from a site to the nearest center is minimized. Here \\(c_{i}\\) can be an arbitrary point in the plane.</li> </ol> <p>A local search algorithm arbitrarily choose \\(k\\) points in the plane to be the centers, then</p> <ul> <li> <p>(1) divide \\(S\\) into \\(k\\) sets, where \\(S_{i}\\) is the set of all sites for which \\(c_{i}\\) is the nearest center; and</p> </li> <li> <p>(2) for each \\(S_{i}\\), compute the central position as a new center for all the sites in \\(S_{i}\\).</p> </li> </ul> <p>If steps (1) and (2) cause the covering radius to strictly decrease, we perform another iteration, otherwise the algorithm stops.</p> <p>When the above local search algorithm terminates, the covering radius of its solution is at most 2 times the optimal covering radius. (T/F)</p> <p><code>F</code>\u539f\u56e0\u5728\u4e8eK center\u8fd1\u4f3c\u6bd4\u4e0d\u80fd\u4f4e\u4e8e2.\u5426\u5219P=NP</p> <p>\u7ed9\u51fa\u53cd\u4f8b\u5982\u4e0b\u56fe\u6240\u793a\u3002\u5176\u4e2d\u6709</p> \\[ \\begin{gathered}     A(-1, \\frac{\\sqrt{3}}{2}),\\quad     B(1, \\frac{\\sqrt{3}}{2}),\\quad     C(-1, -\\frac{\\sqrt{3}}{2}),\\quad     D(1, -\\frac{\\sqrt{3}}{2})     \\\\     E(-3, 2\\sqrt{3}),\\quad     F(3, 2\\sqrt{3}),\\quad     G(0, 2\\sqrt{3}+\\sqrt{7}),\\quad     H(0,0.000001),\\quad     I(0,-0.000001) \\end{gathered} \\] <p>\u90fd\u662f\u9700\u8981\u88ab\u8986\u76d6\u7684\u70b9\u3002</p> \\[ c_1(-1, 0),\\quad c_2(0, 0),\\quad c_3(1, 0),\\quad c_4(0, 2\\sqrt{3}+\\sqrt{7}),\\quad \\] <p>\\(c_1\\), \\(c_3\\) \u534a\u5f84\u4e3a \\(\\frac{\\sqrt{3}}{2}\\), \\(c_2\\) \u534a\u5f84\u4e3a \\(0.0001\\), \\(c_4\\) \u534a\u5f84\u4e3a \\(4\\)\u3002\u8fd9\u6837\u5f97\u5230\u7684\u89e3\u5c31\u662f Local Search \u7684\u4e00\u4e2a\u53ef\u80fd\u89e3\uff0c\u8986\u76d6\u534a\u5f84\u4e3a \\(4\\)\u3002</p> <p>\u7136\u800c\uff0c\u5982\u679c\u53d6</p> \\[ c_1'(-2, \\frac{5\\sqrt{3}}{4}),\\quad c_2'(0, 0),\\quad c_3'(2, \\frac{5\\sqrt{3}}{4}),\\quad c_4'(0, 2\\sqrt{3}+\\sqrt{7}+4),\\quad \\] <p>\\(c_1\\), \\(c_3\\) \u534a\u5f84\u4e3a \\(\\frac{\\sqrt{41}}{4}\\), \\(c_2\\) \u534a\u5f84\u4e3a \\(\\frac{\\sqrt{7}}{2}\\), \\(c_4\\) \u534a\u5f84\u4e3a \\(0.0001\\)\u3002\u8fd9\u6837\u5f97\u5230\u7684\u89e3\u8986\u76d6\u534a\u5f84\u4e3a \\(\\frac{\\sqrt{41}}{4}&lt;2\\)\u3002</p> <p>\u56e0\u6b64\u867d\u7136\u4e0d\u786e\u5b9a\u6700\u4f18\u89e3\u662f\u4ec0\u4e48\uff0c\u4f46\u662f\u6700\u4f18\u89e3\u4e00\u5b9a\u6bd4\u4e0a\u9762\u7684 Local Search \u7684\u89e3\u7684\u4e8c\u5206\u4e4b\u4e00\u66f4\u5c0f.</p> <p>\u4e0b\u56fe\u4e2d\uff0c\u7eff\u8272\u5706\u5708\u8868\u793a Local Search\uff0c\u84dd\u8272\u5706\u5708\u8868\u793a\u7ed9\u51fa\u7684\u4e00\u4e2a\u6bd4 Local Search \u7684 \\(1/2\\) \u66f4\u5c0f\u7684\u89e3\u3002</p> <ol> <li>In local search, if the optimization function has a constant value in a neighborhood, there will be a problem.</li> </ol> <p><code>T</code> \u8bf4\u660e\u5230\u4e86\u4e00\u4e2a\u4f4e\u8c37\u6216\u8005\u5c71\u5cf0\u3002\u6216\u8005\u5e73\u8861\u72b6\u6001\u3002\u9700\u8981\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u8f6c\u79fb\u3002</p> <ol> <li>Greedy method is a special case of local search.</li> </ol> <p><code>F</code> Greedy\u662f\u4e0d\u65ad\u524d\u8fdb\uff0c\u6700\u540e\u8fbe\u5230\u89e3\u3002\u800clocal search\u662f\u4e0d\u65ad\u4fee\u6539\u503c\uff0c\u9009\u62e9\u4e00\u4e2a\u6700\u4f73\u7684\u89e3\u3002\u6c42\u51fa\u7684\u6bcf\u4e00\u4e2a\u89e3\u90fd\u662f\u6700\u7ec8\u7684\u89e3\u3002</p> <ol> <li>Random restarts can help a local search algorithm to better find global maxima that are surrounded by local maxima.</li> </ol> <p><code>T</code> \u7b97\u6cd5\u5982\u679c\u5230\u8fbelocal maximum\u5c31\u505c\u6b62\u4e86\uff0c\u4f46\u662f\u5982\u679c\u968f\u673a\u5f00\u59cb\uff0c\u90a3\u4e48\u53ef\u80fd\u4f1a\u5230\u8fbelocal maximum\u548cglobal maximum\u4e4b\u95f4\uff0c\u7136\u540e\u627e\u5230\u5168\u5c40\u6700\u4f18\u3002</p> <ol> <li>In Metropolis Algorithm, the probability of jumping up depends on T, the temperature. When the temperature is high, it\u2019ll be close to the original gradiant descent method.</li> </ol> <p><code>F</code> \u6e29\u5ea6\u9ad8\u7684\u65f6\u5019\u4f1a\u8df3\u8dc3\uff0c\u6e29\u5ea6\u4f4e\u7684\u65f6\u5019\u63a5\u8fd1\u4e0b\u964d\u7b97\u6cd5\u3002</p> <ol> <li>Local search algorithm can be used to solve lots of classic problems, such as SAT and N-Queen problems. Define the configuration of SAT to be X = vector of assignments of N boolean variables, and that of N-Queen to be Y = positions of the N queens in each column. The sizes of the search spaces of SAT and N-Queen are \\(O(2^N)\\) and \\(O(N^N)\\), respectively.</li> </ol> <p><code>F</code> N\u7687\u540e\u95ee\u9898\u7684\u641c\u7d22\u7a7a\u95f4\u4e3a\\(N!\\)</p> <ol> <li>Q2-1. Spanning Tree Problem: Given an undirected graph \\(G=(V, E)\\), where \\(|V|=n\\) and \\(|E|=m\\). Let \\(F\\) be the set of all spanning trees of \\(G\\). Define \\(d(u)\\) to be the degree of a vertex \\(u \\in V\\). Define \\(w(e)\\) to be the weight of an edge \\(e \\in E\\).</li> </ol> <p>We have the following three variants of spanning tree problems:</p> <ul> <li> <p>(1) Max Leaf Spanning Tree: find a spanning tree \\(T \\in F\\) with a maximum number of leaves.</p> </li> <li> <p>(2) Minimum Spanning Tree: find a spanning tree \\(T \\in F\\) with a minimum total weight of all the edges in \\(T\\).</p> </li> <li> <p>(3) Minimum Degree Spanning Tree: find a spanning tree \\(T \\in F\\) such that its maximum degree of all the vertices is the smallest.</p> </li> </ul> <p>For a pair of edges \\(\\left(e, e^{\\prime}\\right)\\) where \\(e \\in T\\) and \\(e^{\\prime} \\in(G-T)\\) such that \\(e\\) belongs to the unique cycle of \\(T \\cup e^{\\prime}\\), we define edge-swap \\(\\left(e, e^{\\prime}\\right)\\) to be \\((T-e) \\cup e^{\\prime}\\).</p> <p>Here is a local search algorithm:</p> <pre><code>T = any spanning tree in F_i\nwhile (there is an edge-swap (e, e') which reduces Cost(T)) {\n T = T - e + e';\n}\nreturn T;\n</code></pre> <p>Here \\(\\operatorname{cost}(T)\\) is the number of leaves in \\(T\\) in Max Leaf Spanning Tree; or is the total weight of \\(T\\) in Minimum Spanning Tree; or else is the minimum degree of \\(T\\) in Minimum Degree Spanning Tree.</p> <p>Which of the following statements is TRUE?</p> <p>A. The local search always return an optimal solution for Max Leaf Spanning Tree</p> <p>B.<code>The local search always return an optimal solution for Minimum Spanning Tree</code></p> <p>C. The local search always return an optimal solution for Minimum Degree Spanning Tree</p> <p>D. For neither of the problems that this local search always return an optimal solution</p> <p>B\u3002</p> <p>\u6700\u5c0f\u751f\u6210\u6811\u7684 Prim \u7b97\u6cd5\u662f\u5c40\u90e8\u6027\u7684, \u4f46\u662f\u5374\u662f\u6b63\u786e\u7684, \u731c\u60f3\u6700\u5c0f\u751f\u6210\u6811\u7684\u5c40\u90e8\u6700\u4f18\u5c31\u662f\u5168\u5c40\u6700\u4f18\u3002\u4e8b\u5b9e\u4e0a\u8fd9\u4e2a\u7ed3\u8bba\u786e\u5b9e\u662f\u6b63\u786e\u7684\uff0c\u8fd9\u4e2a\u8bc1\u660e\u6bd4\u8f83\u96be\uff0c\u8bfb\u8005\u53ef\u4ee5\u8003\u8651\u52bf\u80fd\u51fd\u6570\u7b49\u65b9\u6cd5\u3002</p> <p>\u5bf9\u4e8e\u5176\u4ed6\u4e24\u79cd\uff0c\u5bfb\u627e\u5176\u53cd\u4f8b\u3002</p> <p>\u5bf9\u4e8eMax Leaf Spanning Tree\uff0c\u5bfb\u627e\u53cd\u4f8b\u5982\u4e0b:</p> <p> </p> <p>\u5bf9\u4e8eMinimum Degree Spanning Tree\uff0c\u540c\u6837\u7684\u539f\u56fe(Original)\uff0c\u5bfb\u627e\u53cd\u4f8b\u5982\u4e0b:</p> <p> </p> <p>\u7a76\u5176\u672c\u8d28\uff0c\u6700\u5c0f\u751f\u6210\u6811\u5982\u679c\u6709\u66f4\u597d\u7684\u9009\u62e9\u4e00\u5b9a\u80fd\u4ea4\u6362\uff0c\u56e0\u4e3a\u8fdb\u884c\u7684\u6b63\u662f\u8fb9\u4ea4\u6362\uff0c\u76f4\u63a5\u5f71\u54cd\u7684\u5c31\u662f\u6811\u7684\u6574\u4f53\u6743\u503c\u3002\u53e6\u5916\u4e24\u79cd\u6811\u7684\u6027\u8d28\u5219\u4e0e\u9876\u70b9\u76f8\u5173\uff0c\u4e0d\u80fd\u76f4\u63a5\u5f71\u54cd\uff0c\u6240\u4ee5\u5c31\u5bc4\u4e86\u3002</p> <ol> <li>Q2-2. There are \\(n\\) jobs, and each job \\(j\\) has a processing time \\(t_{j}\\). We will use a local search algorithm to partition the jobs into two groups A and B, where set A is assigned to machine \\(M_{1}\\) and set \\(\\mathrm{B}\\) to \\(M_{2}\\). The time needed to process all of the jobs on the two machines is \\(T_{1}=\\sum_{j \\in A} t_{j}, T_{2}=\\sum_{j \\in B} t_{j}\\). The problem is to minimize \\(\\left|T_{1}-T_{2}\\right|\\).</li> </ol> <p>Local search: Start by assigning jobs \\(1, \\ldots, n / 2\\) to \\(M_{1}\\), and the rest to \\(M_{2}\\).</p> <p>The local moves are to move a single job from one machine to the other, and we only move a job if the move decreases the absolute difference in the processing times. Which of the following statement is true?</p> <p>A. The problem is NP-hard and the local search algorithm will not terminate.</p> <p><code>B. When there are many candidate jobs that can be moved to reduce the absolute difference, if we always move the job $j$ with maximum $t_j$, then the local search terminates in at most $n$ moves.</code></p> <p>C. The local search algorithm always returns an optimal solution.</p> <p>D. The local search algorithm always returns a local solution with \\(\\frac{1}{2}T_1\\leqslant T\\leqslant 2T_1\\).</p> <p>B\u3002</p> <p>A\uff0c\u6bcf\u6b21\u90fd\u51cf\u5c0f\uff0c\u80af\u5b9a\u4f1a\u51cf\u65e0\u53ef\u51cf\uff0c\u90a3\u4e48\u4e00\u5b9a\u4f1a\u7ec8\u6b62\u3002NP-hard\u731c\u60f3\u5e94\u8be5\u662f\u7684\uff0c\u4e00\u5171\u6709\\(2^n\\)\u79cd\u72b6\u6001\u3002</p> <p>B\uff0c\u4e00\u9879\u88ab\u79fb\u5230\u53e6\u4e00\u4fa7\u4e4b\u540e\u80af\u5b9a\u4e0d\u4f1a\u518d\u88ab\u79fb\u56de\u6765\uff0c\u56e0\u6b64\u6700\u591a\u79fb\\(n\\)\u6b21\u3002</p> <p>C\uff0c\u8003\u8651\\(\\{10,11,12,12,13,14\\}=\\{10,11,13\\}+\\{12,12,14\\}\\)\uff0c\u53ef\u77e5\u65e0\u6cd5\u79fb\u52a8\u4e86\uff0c\u4f46\u662f\u663e\u7136\u6700\u4f18\u89e3\u662f\\(\\{11,12,13\\}+\\{10,12,14\\}\\)\u3002</p> <p>D\uff0c\u8003\u8651\\(\\{1,2,100\\}=\\{1,2\\}+\\{100\\}\\)\u3002    </p> <ol> <li> <p>Q2-3. Max-cut problem: Given an undirected graph \\(G=(V, E)\\) with positive integer edge weights \\(w_{e}\\), find a node partition \\((A, B)\\) such that \\(w(A, B)\\), the total weight of edges crossing the cut, is maximized. Let us define \\(S^{\\prime}\\) be the neighbor of \\(S\\) such that \\(S^{\\prime}\\) can be obtained from \\(S\\) by moving one node from \\(A\\) to \\(B\\), or one from \\(B\\) to \\(A\\). only choose a node which, when flipped, increases the cut value by at least \\(w(A, B) /|V|\\). Then which of the following is true?</p> <p>A. <code>Upon the termination of the algorithm, the algorithm returns a cut</code>\\((A,B)\\) so that \\(2.5w(A,B)\\geqslant w(A^\u2217, b^*)\\),  where \\((A^\u2217 ,B^\u2217)\\) is an optimal partition.</p> <p>B. The algorithm terminates after at most \\(O(\\log|V|\\log W)\\) flips, where \\(W\\) is the total weight of edges.</p> <p>C. Upon the termination of the algorithm, the algorithm returns a cut \\((A,B)\\) so that \\(2w(A,B)\\geqslant w(A^\u2217, b^*)\\).</p> <p>D. The algorithm terminates after at most \\(O(|V|^2)\\) flips.</p> <p>\u9898\u76ee\u4e2d\u7ed9\u51fa\u6761\u4ef6\uff0cincrease the cut value by at least w(A,B)/V,\u8bf4\u660e\u6b64\u65f6\\(\\epsilon = 0.5\\)</p> <p>\u6839\u636e\u5b9a\u7406\uff0c\u6700\u540e\u81f3\u591a\u6267\u884c\\(n/\\epsilon \\ logW\\)\u6b21flip</p> <p>\u6700\u7ec8\u7ed3\u679c\u6ee1\u8db3\uff0c\\(w(A^*,B^*) &lt; (2 + \\epsilon)w(A,B)\\)</p> <p> </p> </li> </ol>"},{"location":"ADS/13.%20Randomized%20Algorithms/","title":"\u5341\u4e09. Randomized Algorithms","text":"<p> \u7ea6 1651 \u4e2a\u5b57  17 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 8 \u5206\u949f</p> <p>efficient randomized algorithms that only need to yield the correct answer with high probability</p> <p>randomized algorithms that are always correct, and run efficiently in expectation</p> <p></p>"},{"location":"ADS/13.%20Randomized%20Algorithms/#131-the-hiring-problem","title":"13.1 The Hiring Problem","text":"<ul> <li> <p>Hire an office assistant from headhunter </p> </li> <li> <p>Interview a different applicant per day for N days</p> </li> <li> <p>Interviewing \\(Cost = C_i  &lt;&lt;  Hiring Cost = C_h\\)</p> </li> </ul> <p>\\(\u9762\u8bd5\u6210\u672c = C_i &lt;&lt; \u62db\u8058\u6210\u672c = C_h\\)</p> <ul> <li>Analyze interview &amp; hiring cost instead of running time</li> </ul> <p>\u5206\u6790\u9762\u8bd5\u548c\u62db\u8058\u6210\u672c\u800c\u4e0d\u662f\u8fd0\u884c\u65f6\u95f4</p> <p>Assume M people are hired. Total Cost: \\(O(NC_i + MC_h)\\)</p> <pre><code>int Hiring ( EventType C[ ], int N )\n{   /* candidate 0 is a least-qualified dummy candidate */\n    int Best = 0;\n    int BestQ = the quality of candidate 0;\n    for ( i=1; i&lt;=N; i++ ) {\n        Qi = interview( i ); /* Ci */\n        if ( Qi &gt; BestQ ) {\n            BestQ = Qi;\n            Best = i;\n            hire( i );  /* Ch */\n        }\n    }\n    return Best;\n}\n</code></pre> <p>worse case: The candidates come in increasing quality order.</p> <p><code>\u6700\u574f\u7684\u60c5\u51b5\u662f\uff1a\u9762\u8bd5\u8005\u7684\u7d20\u8d28\u4e00\u6b21\u9012\u589e\uff0c\u76f8\u5f53\u4e8e\u6bcf\u9762\u8bd5\u4e00\u4e2a\u4eba\uff0c\u5c31\u4f1a\u62db\u52df\u4e00\u4e2a\u4eba</code></p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\uff1a\\(O(NC_h)\\)</p> <p>Assume candidates arrive in random order</p> <p>Randomness assumption: any of first i candidates is equally likely to be best-qualified so far.</p> <p>\u968f\u673a\u6027\u5047\u8bbe\uff1a\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u524d i \u540d\u5019\u9009\u4eba\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u90fd\u540c\u6837\u53ef\u80fd\u6700\u6709\u8d44\u683c</p> <p></p> <p><code>\u524di\u4e2a\u5019\u9009\u4eba\uff0c\u4efb\u4f55\u4e00\u4e2a\u90fd\u53ef\u80fd\u88ab\u5f55\u53d6\u3002\u4ee5\u7b2ci\u4e2a\u4eba\u4e3a\u4f8b\uff0c\u7b2ci\u4e2a\u4eba\u88ab\u5f55\u53d6\uff0c\u610f\u5473\u7740\u5b83\u7684\u80fd\u529b\u6bd4\u524d\u9762\u6240\u6709\u4eba\u7684\u80fd\u529b\u90fd\u5f3a\uff0c\u6b64\u65f6\u7684\u6982\u7387\u662f1/i\uff0c\u5bf9\u5e94\u7684\u671f\u671b\u5c31\u662f1*1/i + 0*(i-1)/i = 1/i</code></p> <p>\u6240\u4ee5\u6700\u7ec8\u7684\u671f\u671b\u4e3a\\(E[X] = E[\\sum_{i=1}^NX_i] = \\sum_{i=1}^NE[X_i] = \\sum_{i=1}^N \\dfrac{1}{i} = lnN\\)\u3002\u4ed8\u51fa\u7684\u603b\u4ee3\u4ef7\u4e3a\\(O(C_hlnN+NC_i)\\)</p> <pre><code>int RandomizedHiring ( EventType C[ ], int N )\n{   /* candidate 0 is a least-qualified dummy candidate */\n    int Best = 0;\n    int BestQ = the quality of candidate 0;\n\n    randomly permute the list of candidates;\n\n    for ( i=1; i&lt;=N; i++ ) {\n        Qi = interview( i ); /* Ci */\n        if ( Qi &gt; BestQ ) {\n            BestQ = Qi;\n            Best = i;\n            hire( i );  /* Ch */\n        }\n    }\n}\n</code></pre>"},{"location":"ADS/13.%20Randomized%20Algorithms/#1311-randomized-permutation-algorithm","title":"13.1.1 Randomized Permutation Algorithm","text":""},{"location":"ADS/13.%20Randomized%20Algorithms/#1312-online-hiring-algorithm","title":"13.1.2 Online Hiring Algorithm","text":"<p>hire only once</p> <pre><code>int OnlineHiring ( EventType C[ ], int N, int k)\n{\n    int Best = N;\n    int BestQ = - \uf0a5 ;\n    for ( i=1; i&lt;=k; i++ ) {\n        Qi = interview( i );\n        if ( Qi &gt; BestQ )   BestQ = Qi;\n    }\n    for ( i=k+1; i&lt;=N; i++ ) {\n        Qi = interview( i );\n        if ( Qi &gt; BestQ ) {\n            Best = i;\n            break;\n        }\n    }\n    return Best;\n}\n</code></pre> <p><code>\u524d\u9762k\u4e2a\u4eba\u4ec5\u7528\u4e8e\u6d4b\u8bd5\u8bc4\u4f30\u9762\u8bd5\u8005\u7684\u6c34\u5e73(\u6311\u9009\u51fa\u6700\u9ad8\u7684\u7d20\u8d28)\uff0c\u96c7\u4f63\u4eba\u4ecek+1\u4e2a\u4eba\u5f00\u59cb\uff0c\u6bcf\u4e2a\u4eba\u7684quality\u90fd\u4e0e\u6700\u9ad8\u7684\u7684quality\u8fdb\u884c\u6bd4\u8f83\uff0c\u9009\u62e9\u51fa\u6700\u597d\u7684</code></p> <p>What is the probability we hire the best qualified candidate for a given k?</p> <p></p> <p><code>\u6700\u597d\u7684\u9762\u8bd5\u8005\u5728\u7b2ci\u4e2a\u4f4d\u7f6e\uff0c\u8981\u6c42i&gt;k,\u5e76\u4e14\u4ecek+1\u5230i-1\u7684\u9762\u8bd5\u8005\u90fd\u6ca1\u6709\u88ab\u96c7\u4f63</code></p> <p>What is the best value of k to maximize above probability?</p> <ul> <li> <p>\u7528\\(S_i\\)\u8868\u793a\u7b2c\\(i\\)\u4e2a\u5019\u9009\u8005\u662f\u6700\u597d\u7684</p> </li> <li> <p>\u8981\u4f7f\u7b2c\\(i\\)\u4e2a\u4eba\u662f\u6700\u597d\u7684\uff0c\u9700\u8981\u6ee1\u8db3\u7b2c\\(i\\)\u4e2a\u4eba\u9996\u5148quality\u9700\u8981\u5927\u4e8ebestQ\uff0c\u7136\u540e\u4ece\\(k+1\\)\u5230\\(i-1\\)\u4e2a\u4eba\u6ca1\u6709\u4eba\u7684quality\u5927\u4e8ebestQ\uff0c\u4e5f\u5c31\u662f\u8bf4\u6ca1\u6709\u4eba\u88abhire\uff08<code>\u56e0\u4e3a\u4ece\u4e0a\u65b9\u4ee3\u7801\u53ef\u4ee5\u770b\u51fa\u4e00\u65e6\u67d0\u4e2a\u4eba\u7684quality\u5927\u4e8ebestQ\uff0c\u5c31\u4f1abreak</code>\uff09</p> </li> </ul> <p>\u4ece\u7b2c\\(k+1\\)\u5230\u7b2c\\(i-1\\)\u6ca1\u6709\u5f55\u4e8e\u4efb\u4f55\u4eba\u3002\u8fd9\u610f\u5473\u7740\u524d\\(i-1\\)\u4e2a\u4eba\u91cc\u9762\uff0c\u6700\u597d\u7684\u843d\u5728\u4e86\u524d\\(k\\)\u4e2a\u4eba\u4e4b\u4e2d\uff0c\u6982\u7387\u5c31\u662f\\(\\dfrac{k}{i-1}\\)</p> <ul> <li> <p>\u6b64\u65f6\u6982\u7387\u4e3a\\(P[S_i] = P[A\\cap B] = P[A]\\times P[B] = \\dfrac{1}{N} \\times \\dfrac{k}{i-1} = \\dfrac{k}{N(i-1)}\\)</p> </li> <li> <p>\u90a3\u4e48\u6700\u597d\u7684\u9762\u8bd5\u8005\u51fa\u73b0\u5728\u7b2c\\(k\\)\u4e2a\u4eba\u4e4b\u540e\u7684\u6982\u7387\u4e3a\uff1a   $$   P[S] = \\sum_{i=k+1}^N P[S_i] = \\sum_{i=k+1}^N \\dfrac{k}{N(i-1)} = \\dfrac{k}{N}\\sum_{i=k}^{N-1} \\dfrac{1}{i}   $$</p> </li> </ul> <p></p> <p></p>"},{"location":"ADS/13.%20Randomized%20Algorithms/#132-quicksort","title":"13.2 Quicksort","text":"<ul> <li>Deterministic Quicksort</li> <li>\\(\\Theta(N^2)\\) <code>worst-case running time</code></li> <li>\\(\\Theta(N logN)\\)<code>average case running time</code></li> </ul> <p>\u8981\u60f3\u52a0\u901fquicksort\uff0c\u6bcf\u4e00\u6b21\u5c06\u6570\u636e\u4e00\u5206\u4e3a\u4e8c\u65f6\uff0c\u5e0c\u671b\u4e24\u8fb9\u7684\u6570\u636e\u5927\u81f4\u76f8\u7b49</p> <p>Central splitter := the pivot that divides the set so that each side contains at least n/4</p> <p><code>Central splitter := \u5212\u5206\u96c6\u5408\u7684\u4e3b\u5143\uff0c\u4f7f\u5f97\u6bcf\u8fb9\u81f3\u5c11\u5305\u542b n/4</code></p> <p>Modified Quicksort := always select a central splitter before recursions</p> <p><code>\u76f8\u5f53\u4e8e\u9009\u62e9pivot\u7684\u8303\u56f4\u5728[n/4,3n/4].\u9009\u62e9\u5230central splitter\u7684\u6982\u7387\u662f1/2</code></p> <p>\u5982\u679c\u7b2c\u4e00\u6b21\u6ca1\u6709\u9009\u62e9\u5230\uff0c\u5c31\u518d\u6b21\u9009\u62e9\u3002\u671f\u671b\u6b21\u6570\u4e3a\uff1a $$ \\begin{aligned} &amp;1 \\times 1/2 + 2 \\times 1/4 + 3\\times 1/8 + ...\\ = &amp;\\sum_{i=1}^\\infin i \\times \\dfrac{1}{2^i}\\ = &amp; (1/2+1/4+...) + (1/4+1/8+...)+(1/8+1/16+..)+..\\ = &amp; 1 + 1/2 + 1/4 + ..\\ = &amp;2 \\end{aligned} $$</p> <p></p> <p>\u5212\u5206j\u6b21\u4e4b\u540e\uff0c\u5b50\u95ee\u9898\u7684\u6700\u5927\u5c3a\u5bf8\u662f\\(N (\\dfrac{3}{4})^{j+1} \\leq |S| \\leq N (\\dfrac{3}{4})^{j}\\)</p> <p><code>\u6309\u7167\u5b50\u95ee\u9898\u7684\u6700\u5927\u5c3a\u5bf8\u6765\uff0c\u76f8\u5e94\u7684\u5b50\u95ee\u9898\u7684\u6700\u5927\u6570\u91cf\u4e3a</code>\\((\\dfrac{4}{3})^{j+1}\\),\u6b64\u65f6\u6070\u597d\uff0c\u5b50\u95ee\u9898\u7684\u6570\u91cf\u4e58\u4ee5\u5b50\u95ee\u9898\u7684\u89c4\u6a21\u5f97\u5230N</p> <p>\u89e3\u51b3\u7c7b\u578bj\u6240\u9700\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\uff1a\\(E[T_{type \\ j}] = O(N(\\dfrac{3}{4})^j)\\times (\\dfrac{4}{3})^{j+1} = O(N)\\)</p> <p>\u5176\u4e2d\u95ee\u9898\u7684\u7c7b\u578b\u662f\\(log_{\\frac{4}{3} }N\\),<code>\u56e0\u4e3a\u95ee\u9898\u7684\u6700\u5c0f\u89c4\u6a21\u9700\u8981\u4e3a1</code></p> <p>\u6240\u4ee5\u603b\u7684\u671f\u671b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(N) \\times O(logN) = O(NlogN)\\)</p>"},{"location":"ADS/13.%20Randomized%20Algorithms/#133-\u4e60\u9898\u96c6","title":"13.3 \u4e60\u9898\u96c6","text":"<ol> <li>Let \\(a=\\left(a_{1}, a_{2}, \\ldots, a_{i}, \\ldots, a_{j}, \\ldots, a_{n}\\right)\\) denote the list of elements we want to sort. In the quicksort algorithm, if the pivot is selected uniformly at random. Then any two elements get compared at most once and the probability of \\(a_{i}\\) and \\(a_{j}\\) being compared is \\(2 /(j-i+1)\\) for \\(j&gt;i\\), given that \\(a_{i}\\) or \\(a_{j}\\) is selected as the pivot. (T/F)</li> </ol> <p><code>F</code></p> <p>\u4e3e\u53cd\u4f8b\u5982\u4e0b\uff1a{3, 4, 1, 2, }\u3002\u5982\u679c\u7b2c\u4e00\u6b21\u9009pivot\u9009\u4e2d3\u6216\u80052\uff0c\u90a3\u4e481\u548c4\u4f1a\u88ab\u5206\u5f00\uff0c\u4e0d\u4f1a\u88ab\u6bd4\u8f83\u3002</p> <p>\u5982\u679c\u7b2c\u4e00\u6b21\u5c31\u9009\u4e2d1\u62164\uff0c\u5b83\u4eec\u624d\u4f1a\u88ab\u6bd4\u8f83\u3002\u56e0\u6b64\u5b83\u4eec\u88ab\u6bd4\u8f83\u7684\u6982\u7387\u662f1/2\u3002\u6309\u7167 \\(\\dfrac{2}{j-i+1}\\) \u8ba1\u7b97\uff0c\u5e94\u8be5\u662f1\u3002</p> <p>\u4e8b\u5b9e\u4e0a\uff0c\u5982\u679c\u662f\u5df2\u7ecf\u88ab\u6392\u5e8f\u597d\u7684\uff0c\u8fd9\u5c31\u662f\u5bf9\u7684\u3002</p> <ol> <li>Given a linked list containing \\(N\\) nodes. Our task is to remove all the nodes. At each step, we randomly choose one node in the current list, then delete the selected node together with all the nodes after it. Here we assume that each time we choose one node uniformly among all the remaining nodes. What is the expected number of steps to remove all the nodes?</li> </ol> <p>A.\\(\\Theta (\\log N)\\)</p> <p>B.\\(N/e\\)</p> <p>C.\\(N/2\\)</p> <p>D.\\(\\sqrt{N}\\)</p> <p><code>A</code></p> <ol> <li>\u521d\u59cb\u65f6\uff0c\u94fe\u8868\u6709 \ud835\udc41N \u4e2a\u8282\u70b9\u3002</li> <li>\u5728\u6bcf\u4e00\u6b65\u4e2d\uff0c\u6211\u4eec\u968f\u673a\u9009\u62e9\u5f53\u524d\u94fe\u8868\u4e2d\u7684\u4e00\u4e2a\u8282\u70b9\uff0c\u5220\u9664\u8be5\u8282\u70b9\u53ca\u5176\u4e4b\u540e\u7684\u6240\u6709\u8282\u70b9\u3002</li> <li>\u76ee\u6807\u662f\u8ba1\u7b97\u5b8c\u5168\u5220\u9664\u94fe\u8868\u4e2d\u6240\u6709\u8282\u70b9\u6240\u9700\u7684\u9884\u671f\u6b65\u9aa4\u6570\u3002</li> </ol> <p>\u5047\u8bbe \ud835\udc38(\ud835\udc41)\u8868\u793a\u4ece\u6709 \ud835\udc41 \u4e2a\u8282\u70b9\u7684\u94fe\u8868\u4e2d\u5220\u9664\u6240\u6709\u8282\u70b9\u6240\u9700\u7684\u9884\u671f\u6b65\u9aa4\u6570</p> <p>\u5982\u679c\u6211\u4eec\u9009\u62e9\u7b2c \ud835\udc56 \u4e2a\u8282\u70b9\uff08\u5176\u4e2d \ud835\udc56 \u7684\u8303\u56f4\u662f\u4ece 1 \u5230 \ud835\udc41 \uff09\uff0c\u5219\u8be5\u9009\u62e9\u4f1a\u5220\u9664\u4ece\u7b2c \ud835\udc56 \u4e2a\u8282\u70b9\u5230\u672b\u5c3e\u7684\u6240\u6709\u8282\u70b9\u3002\u56e0\u6b64\uff0c\u5728\u8fd9\u4e00\u6b65\u4e2d\u5220\u9664\u4e86$ \ud835\udc41\u2212\ud835\udc56+1$\u4e2a\u8282\u70b9\u3002</p> <p><code>\u9996\u5148\u5148\u5728N\u4e2a\u70b9\u4e2d\u4efb\u9009\u4e00\u4e2a\u70b9\uff0c\u6267\u884c\u4e00\u6b65\u64cd\u4f5c\uff0c\u5047\u8bbe\u9009\u53d6\u7b2ci\u4e2a\u70b9\uff0c\u90a3\u4e48\u5269\u4f59\u7684\u70b9\u4e3ai-1\uff0c\u540e\u7eed\u53ea\u9700\u8981\u6c42E(i-1)</code></p> <p>\u90a3\u4e48\u5f97\u5230\u9012\u5f52\u5173\u7cfb\u5f0f\uff1a\\(E(N) = 1 + \\dfrac{1}{N}\\sum_{i=1}^NE(i-1) = 1 + \\dfrac{1}{N}\\sum_{i=0}^{N-1}E(i)\\)</p> <ul> <li> <p>\u76f4\u63a5\u4ee3\u5165 B,C\uff0c\u663e\u7136\u4e0d\u5bf9\u3002\u4e8b\u5b9e\u4e0a\uff0c\u53ef\u4ee5\u770b\u5230\u8fd9\u79cd\u9012\u63a8\u5f0f\u53ea\u53ef\u80fd\u51fa\u6709\u7406\u6570\uff0cD \u5f88\u53ef\u80fd\u51fa\u65e0\u7406\u6570\uff0c\u4e5f\u4e0d\u5bf9\u3002</p> </li> <li> <p>\u7136\u800c\uff0c\u5f88\u8f7b\u677e\u5c31\u53ef\u4ee5\u901a\u8fc7\u5f3a\u5f52\u7eb3\u6cd5\u5224\u65ad \\(a_n=O(\\log N)\\)\u3002(\\(\\Omega\\)\u6ca1\u6709\u8bd5\u8fc7\uff0c\u5e94\u8be5\u4e5f\u53ef\u4ee5\u3002)      $$      a_n = \\frac{1}{N}\\sum_{i=1}^{N-1}a_i+1      \\leqslant \\frac{C}{N}\\log\\left(2N\\prod_{i=1}^{N-1}i\\right)      \\leqslant C\\log N      $$      \u8fd9\u91cc\u7684\u7b2c\u4e8c\u4e2a\u4e0d\u7b49\u53f7\u5e76\u4e0d\u90a3\u4e48\u4e25\u683c\uff0c\u4e0d\u8fc7 \\(N\\) \u8db3\u591f\u5927\u7684\u65f6\u5019\u4e00\u5b9a\u662f\u4e25\u683c\u7684\u3002</p> </li> <li> <p>Use The Online Hiring Algorithm ( hire only once ). Assume that the quality input \\(C[ ]\\) is uniformly random.</p> </li> </ul> <pre><code>int OnlineHiring ( EventType C[ ], int N, int k )\n{\n    int Best = N;\n    int BestQ = -INFINITY ;\n    for ( i=1; i&lt;=k; i++ ) {\n        Qi = interview( i );\n        if ( Qi &gt; BestQ )   BestQ = Qi;\n    }\n    for ( i=k+1; i&lt;=N; i++ ) {\n        Qi = interview( i );\n        if ( Qi &gt; BestQ ) {\n            Best = i;\n            break;\n        }\n    }\n    return Best;\n}\n</code></pre> <p>When \\(N = 271\\) and \\(k = 90\\), the probability of hiring the Nth candidate is __.</p> <p><code>1/3\u3002\u8981\u6c42\u524d 270 \u4eba\u4e2d\u6700\u597d\u7684\u843d\u5728\u524d 90 \u4eba\u4e2d\u3002</code></p> <p>\u4e5f\u53ef\u4ee5\u5206\u524d 271 \u4eba\u4e2d\u6700\u597d\u7684\u5728\u54ea\u91cc\u8fdb\u884c\u8ba8\u8bba\uff0c\u5373</p> \\[ \\frac{1}{N}\\cdot \\frac{k}{N-1} + \\frac{k}{N} = \\frac{1}{3} \\]"},{"location":"ADS/14.%20Parallel%20Algorithm/","title":"\u5341\u56db. Parallel Algorithm","text":"<p> \u7ea6 3857 \u4e2a\u5b57  17 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 19 \u5206\u949f</p> <ol> <li> <p>\u6307\u4ee4\u7ea7\u5e76\u884c\uff08Instruction-Level Parallelism\uff0cILP\uff09\uff1a\u5728\u4e00\u4e2aCPU \u5185\u90e8\uff0c\u591a\u6761\u6307\u4ee4\u53ef\u4ee5\u540c\u65f6\u6267\u884c\uff1b\u4f8b\u5982\u5927\u5bb6\u73b0\u5728\u5c31\u5df2\u7ecf\u5b66\u8fc7\u7684\u6d41\u6c34\u7ebfCPU\uff0c\u4ee5\u53ca\u5c06\u6765\u53ef\u80fd\u4f1a\u5b66\u5230\u7684\u4e71\u5e8f\u3001\u591a\u53d1\u5c04\u4ee5\u53ca\u8d85\u957f\u6307\u4ee4\u5b57\uff08VLIW\uff0c\u5373\u628a\u4e0d\u76f8\u5173\u7684\u6307\u4ee4\u5c01\u88c5\u5230\u4e00\u6761\u8d85\u957f\u7684\u6307\u4ee4\u5b57\u4e2d\u3001\u8d85\u6807\u91cf\uff08\u4f8b\u5982\u6709\u591a\u4e2aALU\uff0c\u53ef\u4ee5\u540c\u65f6\u8fd0\u884c\u6ca1\u6709\u76f8\u5173\u6027\u7684\u591a\u6761\u6307\u4ee4\uff09\u7b49\uff1b</p> </li> <li> <p>\u6570\u636e\u7ea7\u5e76\u884c\uff08Data-Level Parallelism\uff0cDLP\uff09\uff1a\u5373\u5c06\u76f8\u540c\u7684\u64cd\u4f5c\u540c\u65f6\u5e94\u7528\u4e8e\u4e00\u4e9b\u6570\u636e\u9879\u7684\u7f16\u7a0b\u6a21\u578b\uff0c\u4f8b\u5982\u7ecf\u5178\u7684SIMD\uff08Single Instruction, Multiple Data\uff09\u67b6\u6784\uff0c\u5373\u4e00\u6761\u6307\u4ee4\u540c\u65f6\u4f5c\u7528\u4e8e\u591a\u4e2a\u6570\u636e\uff0c\u4f8b\u5982\u7528\u4e00\u6761\u6307\u4ee4\u5b9e\u73b0\u5411\u91cf\u52a0\u6cd5\uff0c\u4e24\u4e2a\u5411\u91cf\u4e2d\u6bcf\u5bf9\u5bf9\u5e94\u7684\u5143\u7d20\u76f8\u52a0\u4e92\u4e0d\u5e72\u6270\uff0c\u6240\u4ee5\u53ef\u4ee5\u540c\u65f6\u8fdb\u884c\u6240\u6709\u7684\u52a0\u6cd5\uff1b</p> </li> <li>\u7ebf\u7a0b\u7ea7\u5e76\u884c\uff08Thread-Level Parallelism\uff0cTLP\uff09\uff1a\u4e00\u79cd\u663e\u5f0f\u5e76\u884c\uff0c\u7a0b\u5e8f\u5458\u8981\u8bbe\u8ba1\u5e76\u884c\u7b97\u6cd5\uff0c\u5199\u591a\u7ebf\u7a0b\u7a0b\u5e8f\uff0c\u8fd9\u4e5f\u662f\u672c\u8bb2\u5c06\u8981\u8ba8\u8bba\u7684\u5185\u5bb9\u3002\u7ebf\u7a0b\u7ea7\u5e76\u884c\u4e3b\u8981\u6307\u540c\u65f6\u591a\u7ebf\u7a0b\uff08SMT\uff0c\u662f\u4e00\u79cd\u6307\u4ee4\u7ea7\u5e76\u884c\u7684\u57fa\u7840\u4e0a\u7684\u6269\u5c55\uff0c\u53ef\u4ee5\u5728\u4e00\u4e2a\u6838\u4e0a\u8fd0\u884c\u591a\u4e2a\u7ebf\u7a0b\uff0c\u591a\u4e2a\u7ebf\u7a0b\u5171\u4eab\u6267\u884c\u5355\u5143\uff0c\u4ee5\u4fbf\u63d0\u9ad8\u90e8\u4ef6\u7684\u5229\u7528\u7387\uff0c\u63d0\u9ad8\u541e\u5410\u91cf\uff09/\u8d85\u7ebf\u7a0b\uff08HT\uff0c\u4e00\u4e2a\u7269\u7406CPU \u6838\u5fc3\u88ab\u4f2a\u88c5\u6210\u4e24\u4e2a\u4ee5\u4e0a\u7684\u903b\u8f91CPU \u6838\u5fc3\uff0c\u770b\u8d77\u6765\u5c31\u50cf\u591a\u4e2aCPU \u5728\u540c\u65f6\u6267\u884c\u4efb\u52a1\uff0c\u662f\u901a\u8fc7\u5728\u4e00\u4e2a\u7269\u7406\u6838\u5fc3\u4e2d\u521b\u5efa\u591a\u4e2a\u7ebf\u7a0b\u5b9e\u73b0\u7684\uff09\u4ee5\u53ca\u591a\u6838\u548c\u591a\u5904\u7406\u5668\u3002</li> </ol>"},{"location":"ADS/14.%20Parallel%20Algorithm/#141-\u5e76\u884c\u7b97\u6cd5\u57fa\u672c\u6a21\u578b","title":"14.1 \u5e76\u884c\u7b97\u6cd5\u57fa\u672c\u6a21\u578b","text":"<p><code>\u5b9a\u4e49</code> \u52a0\u901f\u6bd4\uff08Speedup\uff09\u662f\u6307\u5728\u5e76\u884c\u8ba1\u7b97\u4e2d\uff0c\u4f7f\u7528p \u4e2a\u5904\u7406\u5668\u65f6\u76f8\u5bf9\u4e8e\u4f7f\u7528\u4e00\u4e2a\u5904\u7406\u5668\u65f6\u7684\u6027\u80fd\u63d0\u5347\u6bd4\u4f8b\uff0c\u5373 $$ S(p) = \\dfrac{T_1}{T_p} $$ \u5176\u4e2d\\(T1\\) \u662f\u4f7f\u7528\u4e00\u4e2a\u5904\u7406\u5668\u65f6\u7684\u8fd0\u884c\u65f6\u95f4\uff0c$Tp \\(\u662f\u4f7f\u7528\\)p $\u4e2a\u5904\u7406\u5668\u65f6\u7684\u8fd0\u884c\u65f6\u95f4\u3002</p> <p>\u663e\u7136\u6700\u7406\u60f3\u7684\u60c5\u51b5\u4e0b\uff0c\u52a0\u901f\u6bd4\u5e94\u5f53\u662fp\uff0c\u5373\u4f7f\u7528p \u4e2a\u5904\u7406\u5668\u65f6\u7684\u8fd0\u884c\u65f6\u95f4\u662f\u4f7f\u7528\u4e00\u4e2a\u5904\u7406\u5668\u65f6\u76841/p\u3002\u7136\u800c\u5b9e\u9645\u60c5\u51b5\u4e2d\uff0c\u7531\u4e8e\u5e76\u884c\u7b97\u6cd5\u7684\u8bbe\u8ba1\u548c\u5b9e\u73b0\u90fd\u6709\u4e00\u5b9a\u7684\u56f0\u96be\uff1a</p> <ul> <li>\u9996\u5148\uff0c\u4f7f\u7528\u591a\u4e2a\u5904\u7406\u5668\u610f\u5473\u7740\u989d\u5916\u7684\u901a\u4fe1\u5f00\u9500\uff1b</li> <li>\u5176\u6b21\uff0c\u5982\u679c\u5904\u7406\u5668\u5e76\u672a\u5206\u914d\u5230\u5b8c\u5168\u76f8\u540c\u7684\u5de5\u4f5c\u91cf\uff0c\u5219\u4f1a\u4ea7\u751f\u4e00\u90e8\u5206\u7684\u95f2\u7f6e\uff0c\u5c31\u4f1a\u9020\u6210\u8d1f\u8f7d\u4e0d\u5747\u8861\uff08load unbalance\uff09\uff0c\u518d\u6b21\u964d\u4f4e\u5b9e\u9645\u901f\u5ea6\uff1b</li> <li>\u6700\u540e\uff0c\u4ee3\u7801\u8fd0\u884c\u53ef\u80fd\u4f9d\u8d56\u5176\u539f\u6709\u987a\u5e8f\uff0c\u4e0d\u80fd\u5b8c\u5168\u5e76\u884c\u3002</li> </ul> <p>\u4e0a\u8ff0\u77e9\u9635\u76f8\u4e58\u5e76\u884c\u7b97\u6cd5\u53ef\u80fd\u6709\u5f88\u591a\u4e2aCPU \u540c\u65f6\u8bbf\u95ee\u4e86\u539f\u59cb\u77e9\u9635\u7684\u540c\u4e00\u4e2a\u5143\u7d20\uff0c\u6bd4\u5982\u540c\u65f6\u5f97\u5230C \u7684\u7b2c\u4e00\u884c\u7684\u6240\u6709\u5143\u7d20\u9700\u8981\u540c\u65f6\u8bbf\u95eeA \u7684\u7b2c\u4e00\u884c\u7684\u6240\u6709\u5143\u7d20\u3002\u4e8b\u5b9e\u4e0a\uff0c<code>\u8fd9\u79cd\u7b97\u6cd5\u6a21\u578b\u88ab\u79f0\u4e3aPRAM \u6a21\u578b\uff08Parallel Random Access Machine\uff09\uff0c\u662fRAM \u6a21\u578b\uff08Random Access Machine\uff09\u5728\u5171\u4eab\u5185\u5b58\u7cfb\u7edf\u4e0a\u7684\u6269\u5c55</code>\u3002\u8be5\u6a21\u578b\u5047\u8bbe\u6240\u6709\u5904\u7406\u5668\u5171\u4eab\u4e00\u4e2a\u8fde\u7eed\u7684\u5185\u5b58\u7a7a\u95f4\u3002\u6b64\u5916\uff0c\u6a21\u578b\u8fd8\u5141\u8bb8\u540c\u4e00\u4f4d\u7f6e\u4e0a\u540c\u65f6\u8fdb\u884c\u591a\u4e2a\u8bbf\u95ee\u3002\u8fd9\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u7279\u522b\u662f\u5728\u6269\u5927\u95ee\u9898\u89c4\u6a21\u548c\u5904\u7406\u5668\u6570\u91cf\u7684\u60c5\u51b5\u4e0b\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u5bf9PRAM \u6a21\u578b\u7684\u53e6\u4e00\u4e2a\u53cd\u5bf9\u610f\u89c1\u662f\uff0c\u5373\u4f7f\u5728\u5355\u4e2a\u5904\u7406\u5668\u4e0a\uff0c\u5b83\u4e5f\u5ffd\u7565\u4e86\u5185\u5b58\u7684\u5c42\u6b21\u7ed3\u6784\uff08\u5373\u5ffd\u7565\u4e86cache \u7b49\uff09\u3002\u4f46\u5728\u6211\u4eec\u63a5\u4e0b\u6765\u7684\u7406\u8bba\u8ba8\u8bba\u4e2d\uff0c\u6211\u4eec\u5ffd\u7565\u8fd9\u4e9b\u95ee\u9898\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u76ee\u7684\u662f\u8ba8\u8bba\u5e76\u884c\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\u3002\u6211\u4eec\u4f7f\u7528PRAM \u6a21\u578b\uff0c\u8fd9\u4e00\u6a21\u578b\u6709\u89c4\u5b9a\u5982\u4e0b\u4e09\u79cd\u5185\u5b58\u5171\u4eab\u65b9\u5f0f\uff1a 1. EREW\uff08Exclusive Read Exclusive Write\uff09\uff1a\u6bcf\u4e2a\u5185\u5b58\u4f4d\u7f6e\u5728\u4efb\u610f\u65f6\u523b\u53ea\u80fd\u88ab\u4e00\u4e2a\u5904\u7406\u5668\u8bfb\u53d6\u6216\u5199\u5165\uff1b 2. CREW\uff08Concurrent Read Exclusive Write\uff09\uff1a\u6bcf\u4e2a\u5185\u5b58\u4f4d\u7f6e\u5728\u4efb\u610f\u65f6\u523b\u53ef\u4ee5\u88ab\u591a\u4e2a\u5904\u7406\u5668\u8bfb\u53d6\uff0c\u4f46\u53ea\u80fd\u88ab\u4e00\u4e2a\u5904\u7406\u5668\u5199\u5165\uff1b 3. CRCW\uff08Concurrent Read Concurrent Write\uff09\uff1a\u6bcf\u4e2a\u5185\u5b58\u4f4d\u7f6e\u5728\u4efb\u610f\u65f6\u523b\u53ef\u4ee5\u88ab\u591a\u4e2a\u5904\u7406\u5668\u8bfb\u53d6\u6216\u5199\u5165\uff0c\u56e0\u4e3a\u5199\u5165\u6d89\u53ca\u5230\u540c\u65f6\u5199\u5165\u4e0d\u540c\u503c\u53ef\u80fd\u9020\u6210\u7684\u51b2\u7a81\uff0c\u56e0\u6b64\u5199\u5165\u7b56\u7565\u53c8\u53ef\u4ee5\u5206\u4e3a\u5982\u4e0b\u4e09\u79cd\uff1a (a) <code>CRCW-C\uff08Common\uff09</code>\uff1a\u6240\u6709\u5904\u7406\u5668\u5199\u5165\u7684\u503c\u76f8\u540c\u65f6\u624d\u4f1a\u5199\u5165\uff1b (b) <code>CRCW-A\uff08Arbitrary\uff09</code>\uff1a\u6240\u6709\u5904\u7406\u5668\u5199\u5165\u7684\u503c\u53ef\u4ee5\u4e0d\u540c\uff0c\u4efb\u610f\u9009\u53d6\u5176\u4e2d\u4e00\u4e2a\u5199\u5165\u5373\u53ef\uff1b (c)<code>CRCW-P\uff08Priority\uff09</code>\uff1a\u6240\u6709\u5904\u7406\u5668\u5199\u5165\u7684\u503c\u53ef\u4ee5\u4e0d\u540c\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u4f18\u5148\u7ea7\uff0c\u53ea\u6709\u4f18\u5148\u7ea7\u6700\u9ad8\u7684\u5199\u5165\u624d\u4f1a\u751f\u6548\u3002</p>"},{"location":"ADS/14.%20Parallel%20Algorithm/#142-the-summation-problem","title":"14.2 The Summation Problem","text":"<pre><code> for (s=2; s&lt;2*n; s*=2)\n      for (i=0; i&lt;n-s/2; i+=s)\n        x[i] += x[i+s/2]\n</code></pre> <p><code>\u968f\u7740h\u7684\u589e\u52a0\uff0c\u9700\u8981\u4f7f\u7528\u7684\u5904\u7406\u5668\u7684\u6570\u91cf\u9010\u6e10\u51cf\u5c11\u3002\u4f46\u662f\u53c8\u4e3a\u6bcf\u4e00\u4e2aprocessor\u5206\u914d\u4e86\u4efb\u52a1\uff08stay idle\uff09\uff0c\u8fd9\u662f\u4e0d\u5fc5\u8981\u7684</code></p> <p><code>\u6539\u8fdb</code></p> <p></p> <p><code>pardo</code>\u8868\u793a\u4e0d\u6307\u5b9a\u8fd0\u884c\u7684processor\uff0c\u7531\u7f16\u8bd1\u5668\u81ea\u884c\u51b3\u5b9a\u4efb\u52a1\u7684\u5206\u914d\u3002\u4f7f\u7528\u7684\u5bc4\u5b58\u5668\u7684\u6570\u91cf\u4e5f\u968f\u4e4b\u51cf\u5c11</p> <p><code>Measuring the performance</code></p> <ul> <li> <p>Work load \u2013 total number of operations: W(n)</p> </li> <li> <p>Worst-case running time: T(n)</p> </li> <li>W(n) operations and T(n) time</li> <li>P(n) = W(n)/T(n) processors and T(n) time (on a PRAM)</li> <li>W(n)/p time using any number of p \u2264 W(n)/T(n) processors (on a PRAM)</li> <li>W(n)/p + T(n) time using any number of p processors (on a PRAM)</li> </ul> <p><code>\u8ba1\u7b97n\u4e2a\u6570\u7684\u548c\u95ee\u9898\u4e2d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(log N),\u5982\u679c\u7ed9\u5b9a\u7684\u5904\u7406\u5668\u6570\u91cf\u4e3an/2\uff0c\u4f1a\u4f7f\u5f97\u6700\u5e95\u5c42\u7684\u8fd0\u7b97\u6b21\u6570\u52a0\u4e00\uff0c\u4e8e\u662fT'(n) = T(n) + 1</code></p> <p><code>\u5b9a\u7406\uff1a\u8bbe\u4e00\u4e2a\u5e76\u884c\u8ba1\u7b97\u95ee\u9898\u7684\u5de5\u4f5c\u91cf\u4e3aW\uff0c\u5173\u952e\u8def\u5f84\u957f\u5ea6\u4e3aD\uff0c\u90a3\u4e48\u4f7f\u7528p\u4e2a\u5904\u7406\u5668\u7684\u5e76\u884c\u65f6\u95f4\u5177\u6709\u5982\u4e0b\u4e0a\u4e0b\u754c\uff1a</code> $$ \\dfrac{W}{p} \\leq T_p \\leq \\dfrac{W-D}{p} + D $$ \u4e0b\u754c\u662f\u663e\u7136\u7684\uff0c\u53d7\u5230\u7406\u60f3\u52a0\u901f\u6bd4\u7684\u9650\u5236</p> <p>\u5bf9\u4e8e\u4e0a\u754c\uff0c\u56e0\u4e3a\u5173\u952e\u8def\u5f84\u7684\u957f\u5ea6\u4e3aD\uff0c\u7b97\u6cd5\u7684\u6267\u884c\u53ef\u4ee5\u5206\u4e3aD\u4e2a\u5185\u90e8\u5e76\u884c\uff0c\u4e92\u76f8\u4e4b\u95f4\u4e32\u884c\u7684\u9636\u6bb5\uff0c\u6bcf\u4e00\u4e2a\u9636\u6bb5\u7684\u5de5\u4f5c\u91cf\u4e3a\\(W_i\\),\\(W = \\underset{i = 1}{\\sum}W_i\\)</p> <p>\u4f7f\u7528p \u4e2a\u5904\u7406\u5668\u65f6\uff0c\u6bcf\u4e00\u4e2a\u9636\u6bb5\u6240\u9700\u7684\u65f6\u95f4\u4e3adWi/pe\uff0c\u5411\u4e0a\u53d6\u6574\u7684\u539f\u56e0\u5728\u4e8e\uff0c\u6bcf\u4e2a\u9636\u6bb5\u7684\u5de5\u4f5c\u91cf\u53ef\u80fd\u4e0d\u80fd\u88abp \u6574\u9664\uff0c\u6bd4\u5982\u5927\u4efb\u52a1\u88ab\u5206\u6210\u4e867 \u4e2a\u5b50\u4efb\u52a1\uff0c7 \u4e2a\u4efb\u52a1\u5206\u914d\u7ed93 \u4e2a\u5904\u7406\u5668\uff0c\u90a3\u4e48\u6bcf\u4e2a\u5904\u7406\u5668\u5206\u914d\u5230\u7684\u4efb\u52a1\u6570\u5e94\u5f53\u662f2\uff0c2\uff0c3\u3002</p> <p>\u9700\u8981\u7684\u603b\u65f6\u95f4\u4e3a\uff1a $$ T_p = \\sum_{i=1}^D \\lceil \\dfrac{W_i}{p}\\rceil= \\sum_{i=1}^D \\lceil \\dfrac{W_i - 1}{p}\\rceil + 1 \\leq \\sum_{i=1}^D  \\dfrac{W_i - 1}{p} + 1 =\\dfrac{W-D}{p}+D $$ </p> <p>\u4e34\u754c\u72b6\u6001\uff0c\u5904\u7406\u5668\u7684\u6570\u76ee\u53d8\u4e3an/log n</p> <p></p> <p>\u77e9\u9635\u4e58\u6cd5\uff1a\u4e24\u4e2an\u9636\u65b9\u9635A\u548cB\u76f8\u4e58\u5f97\u5230\u77e9\u9635C\uff0c\u663e\u7136\u603b\u7684\u64cd\u4f5c\u6570\u662f2\\(n^3\\)(\u4e58\u6cd5\u548c\u52a0\u6cd5)\uff0c\u5982\u679c\u6211\u4eec\u6709\\(n^2\\)\u4e2a\u5904\u7406\u5668\uff0c\u53ef\u4ee5\u8ba9\u6bcf\u4e00\u4e2a\u5904\u7406\u5668\u8d1f\u8d23\u7ed3\u679c\u77e9\u9635C\u7684\u4e00\u4e2a\u5143\u7d20\u7684\u8ba1\u7b97\u3002\u8fd9\u6837\u5e76\u884c\u8ba1\u7b97\u9700\u8981\u7684\u65f6\u95f4\u5c31\u662f\u8ba1\u7b97\u4e00\u4e2a\u5143\u7d20\u7684\u65f6\u95f4\uff0c\u4e5f\u5c31\u662f\\(2n\\)</p> <p>\u73b0\u5728\u63d0\u4f9b\u66f4\u591a\u7684\u5904\u7406\u5668\uff0c\u7528\u4e8e\u52a0\u901fn\u4e2a\u5bf9\u5e94\u5143\u7d20\u4e58\u6cd5\u7684\u548c\uff0c\u5229\u7528\u4e0a\u9762\u63d0\u5230\u7684\u7b97\u6cd5\uff0c\u989d\u5916\u63d0\u4f9bn/2\u4e2a\u5904\u7406\u5668\uff0c\u52a0\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u4eceO(n)\u4e0b\u964d\u5230O(logN)</p>"},{"location":"ADS/14.%20Parallel%20Algorithm/#143-prefix-sums","title":"14.3 Prefix-Sums","text":"<p>\u6211\u4eec\u53ef\u4ee5\u4ece\u4e0a\u5f80\u4e0b\u8ba1\u7b97\u8fd9\u4e2aC\uff0c\u6bcf\u4e00\u5c42\u8ba1\u7b97\u90fd\u53ef\u4ee5\u5e76\u884c\uff0c\u76f4\u5230\u7b97\u5b8cC(0, i) \u5b9e\u9645\u4e0a\u5c31\u662f1 \u5230i \u7684\u524d\u7f00\u548c\u3002\u56e0\u6b64\u5173\u952e\u5c31\u662f\u600e\u4e48\u4ece\u4e0a\u5f80\u4e0b\u8ba1\u7b97\uff0c\u5e76\u4e14\u4fdd\u8bc1\u6bcf\u4e00\u5c42\u90fd\u80fd\u5e76\u884c</p> <p><code>B(h,i)\u8bb0\u5f55\u7684\u662fsummation problem\u8bb0\u5f55\u7684\u503c\uff0c\u4e0e\u524d\u7f00\u548c\u95ee\u9898\u5b58\u5728\u7740\u91cd\u5408\u4e4b\u5904</code></p> <p><code>C(h,i)\u8868\u793a\u524d2^h * i\u4e2a\u70b9\u7684\u548c</code></p> <ul> <li><code>\u5982\u679ci=1\uff0c\u90a3\u4e48C(h,i) = B(h,i).\u56e0\u4e3ai=1\u65f6\uff0c\u6839\u636e\u5b9a\u4e49\uff0cC(h,i)\u7b49\u4e8e\u4ece\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\u52a0\u5230\u8be5\u70b9\u4e3a\u6839\u7ed3\u70b9\u7684\u53f3\u5b50\u6811\u7684\u53f3\u4e0b\u89d2\u53f6\u5b50\u3002\u6240\u4ee5\u4e24\u8005\u76f8\u7b49</code></li> <li><code>\u5982\u679ci\u662f\u5076\u6570\uff0c\u8fd9\u8868\u660e\u8fd9\u4e00\u70b9\u662f\u67d0\u4e2a\u70b9\u7684\u53f3\u513f\u5b50\uff0c\u56e0\u6b64\u5b83\u548c\u5b83\u7684\u7236\u4eb2\u7684\u6700\u53f3\u4e0b\u89d2\u7684\u53f6\u5b50\u662f\u540c\u4e00\u4e2a\uff0c\u56e0\u6b64\u6709C(h,i) = C(h+1,i/2)</code></li> <li><code>\u5982\u679ci\u662f\u5947\u6570\u4e14\u4e0d\u662f1\uff0c\u8fd9\u8868\u660e\u8be5\u70b9\u662f\u67d0\u4e00\u4e2a\u70b9\u7684\u5de6\u513f\u5b50\uff0c\u9996\u5148\u5b83\u81ea\u5df1\u7684\u503cB(h, i) \u4e0d\u662f\u4ece1 \u5f00\u59cb\u52a0\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u9009\u4e00\u4e2a\u5de6\u8fb9\u7684\u70b9\uff0c\u628a\u4ece1\u5f00\u59cb\u52a0\u5230\u8fd9\u4e2a\u70b9\u5bf9\u5e94\u7684\u4e4b\u524d\u7684\u90e8\u5206\u8865\u4e0a\u3002\u6240\u4ee5C(h,i) = C(h+1,(i-1)/2) + B(h,i).</code></li> </ul> <p></p> <p>\u663e\u7136\u8fd9\u4e00\u5e76\u884c\u7b97\u6cd5\u7684\u6df1\u5ea6\u662fO(log n)\uff0c\u603b\u5de5\u4f5c\u91cf\u662fO(n)\uff0c\u56e0\u4e3a\u65e0\u975e\u5c31\u662f\u5728\u5b8c\u5168\u4e8c\u53c9\u6811\u4e0a\u5148\u4ece\u4e0b\u5f80\u4e0a\uff0c\u7136\u540e\u518d\u4ece\u4e0a\u5f80\u4e0b\u5206\u5c42\u904d\u5386\u4e86\u4e24\u8f6e\u3002</p>"},{"location":"ADS/14.%20Parallel%20Algorithm/#144-merge","title":"14.4 Merge","text":"<p><code>\u5173\u952e\u5728\u4e8e\u6c42\u51faA\u5143\u7d20\u5728B\u4e2d\u7684\u6392\u5e8f\u6216\u8005B\u5143\u7d20\u5728A\u4e2d\u7684\u6392\u5e8f</code></p> <p></p> <p></p> <p>Binary Search:<code>\u5728n\u4e2a\u5904\u7406\u5668\u7684\u57fa\u7840\u4e0a\uff0c\u8ba1\u7b97\u6392\u5e8f\u6240\u9700\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(log n),\u5982\u679c\u662f\u5355\u4e2a\u5904\u7406\u5668\uff0c\u6240\u9700\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(nlog n)</code></p> <p>\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u627e\u5230\u4e00\u4e2a\u5143\u7d20\u5728\u53e6\u4e00\u4e2a\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\u53ea\u9700\u8981O(logN)\u7684\u65f6\u95f4\uff0c\u5373\u6df1\u5ea6D=O(logN),\u603b\u5de5\u4f5c\u91cf\u4e3aO(nlogn),\u7136\u540e\u6211\u4eec\u9700\u8981\u5c06\u5143\u7d20\u653e\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a\uff0c\u8fd9\u4e00\u6df1\u5ea6\u4e3aO(1),\u603b\u5de5\u4f5c\u91cf\u4e3aO(n),\u4e24\u6b65\u5408\u5728\u4e00\u8d77\u6df1\u5ea6\u5c31\u662fO(logn),\u603b\u5de5\u4f5c\u91cf\u4e3aO(nlogn)</p> <p>Serial Ranking: </p> <p>\u4e24\u4e2a\u6570\u7ec4\u7684\u5143\u7d20\u4ece\u5934\u4f9d\u6b21\u5411\u540e\u6bd4\u8f83</p> <p>Binary Search\u6240\u9700\u7684\u65f6\u95f4\u66f4\u5c11\uff0cSerial Ranking\u6240\u9700\u7684\u64cd\u4f5c\u6570\u91cf\u66f4\u5c0f</p> <p><code>\u6539\u8fdb\uff1aParallel Ranking \u4f7f\u7528\u5212\u5206\u8303\u5f0f\u7684\u65b9\u6cd5</code></p> <p></p> <p>\u5047\u8bbe\u6bcf\u4e00\u6bb5\u7684\u957f\u5ea6\u4e3alog n\uff0c\u90a3\u4e48\u80fd\u591f\u5206\u6210 n/log n\u6bb5</p> <p>\u5148\u5bf9\u6bcf\u4e00\u6bb5\u7684\u6bb5\u5934\u8fdb\u884c\u6392\u5e8f</p> <p>\u518d\u53ea\u9700\u8981\u4fdd\u8bc1\u6bb5\u5934\u4e4b\u95f4\u7684\u7ed3\u70b9\u662f\u6709\u5e8f\u7684\uff0c\u90a3\u4e48C\u5c31\u662f\u6709\u5e8f\u7684</p> <ol> <li> <p><code>\u5212\u5206\uff1a\u6211\u4eec\u5c06\u6570\u7ec4\u5212\u5206\u4e3ap\u4efd\uff08\u6b64\u65f6p\u672a\u77e5\uff0c\u9700\u8981\u7ecf\u8fc7\u5206\u6790\u9009\u53d6\u5230\u6700\u4f18\u7684p\uff09\u3002\u6211\u4eec\u9996\u5148\u5bf9\u6bcf\u4e00\u4e2a\u5b50\u95ee\u9898\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u6c42\u51fa\u5b83\u5728\u53e6\u4e00\u4e2a\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\uff0c\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u800c\u975e\u7ebf\u6027\u641c\u7d22\uff0c\u6df1\u5ea6\u4e3aO(logn),\u603b\u5de5\u4f5c\u91cf\u4e3aO(plogn)</code></p> </li> <li> <p><code>\u771f\u5b9e\u5de5\u4f5c\uff1a\u5269\u4e0b\u7684\u5de5\u4f5c\u5c31\u662f\u76f8\u90bb\u4e24\u4e2a\u7bad\u5934\u4e4b\u95f4\u7684\u90e8\u5206\u9700\u8981\u5728\u6700\u7ec8\u6570\u7ec4\u4e2d\u786e\u5b9a\u76f8\u5bf9\u4f4d\u7f6e\u3002\u76f8\u90bb\u7684\u4e24\u4e2a\u7bad\u5934\u7684\u8ddd\u79bb\u4e0d\u4f1a\u8d85\u8fc7n/p\uff0c\u5e76\u4e14\u4e00\u4e2a\u6570\u7ec4\u4e0a\u6709p\u4e2a\u51fa\u53d1\u7684\u4f4d\u7f6e\u548cp \u4e2a\u5230\u8fbe\u7684\u4f4d\u7f6e\uff0c\u6240\u4ee5\u5728\u4efb\u610f\u4e00\u4e2a\u6570\u7ec4\u4e0a\uff0c\u51fa\u53d1\u70b9\u548c\u5230\u8fbe\u70b9\u4e00\u5171\u6700\u591a\u67092p\u4e2a\u3002\u5bf9\u5e94\u7684\u8fd8\u5269\u4e0b2p\u4e2a\u5927\u5c0f\u4e3aO(n/p)\u7684\u5b50\u95ee\u9898\u3002</code></p> </li> </ol> <p><code>\u5982\u679c\u91c7\u7528\u7ebf\u6027\u67e5\u627e\uff0c\u6df1\u5ea6\u5c31\u662fO(n/p),\u603b\u5de5\u4f5c\u91cf\u4e3a2p*O(n/p) = O(n),\u5982\u679c\u91c7\u7528\u4e8c\u5206\u67e5\u627e\uff0c\u603b\u5de5\u4f5c\u91cf\u5c31\u662f</code>\\(2p \\times \\frac{n}{p}O(log \\frac{n}{p}) = 2n log \\frac{n}{p}\\)</p> <ol> <li>\u63a5\u4e0b\u6765\u5e0c\u671b\u627e\u5230\u4e00\u4e2a\u6700\u4f18\u7684p\uff0c\u4f7f\u5f97\u7b2c\u4e00\u6b65\u7684\u603b\u5de5\u4f5c\u91cf\u4e3aO(n),\u7b2c\u4e8c\u6b65\u7684\u6df1\u5ea6\u4e3aO(log n),<code>\u4e5f\u5c31\u662f\u96c6\u6210\u4e4b\u524dBinary Search\u548cserial Ranking\u7684\u4f18\u70b9\u3002</code>\u4e8e\u662f\u5f97\u5230\\(p=n/logn\\)</li> </ol>"},{"location":"ADS/14.%20Parallel%20Algorithm/#145-maximum-finding","title":"14.5 Maximum Finding","text":"<p><code>\u7b2c\u4e00\u79cd\u6700\u7b80\u5355\u7684\u60f3\u6cd5\u5c31\u662f\u7c7b\u4f3c\u4e8e\u524d\u9762\u6c42\u548c\u95ee\u9898\u7684\u505a\u6cd5\uff0c\u6784\u9020\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u521d\u59cb\u5143\u7d20\u4e24\u4e24\u5206\u7ec4\u6bd4\u8f83\uff0c\u7136\u540e\u9010\u5c42\u4e0a\u9012\uff0c\u6700\u7ec8\u5f97\u5230\u6700\u5927\u503c\u3002\u8fd9\u6837\u7684\u7b97\u6cd5\u6df1\u5ea6\u4e3aO(log n)\uff0c\u603b\u5de5\u4f5c\u91cf\u4e3aO(n)\u3002</code></p> <p><code>\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u662f\u5e76\u884c\u6bd4\u8f83\u6bcf\u4e00\u5bf9\u5143\u7d20\u7684\u503c\u3002\u53ea\u8981A[i]&lt;A[j],\u5c31\u5f80B[i]\u4e2d\u51991\uff0c\u6700\u540e\u53ea\u6709\u6700\u5927\u7684\u6570\u4e0d\u4f1a\u88ab\u51991\u3002\u5728\u5e76\u884c\u6bd4\u8f83\u6bcf\u4e00\u5bf9\u5143\u7d20\u65f6\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u5f80\u6570\u7ec4B \u4e2d\u8fdb\u884c\u5199\u5165\uff0c\u5b9e\u9645\u4e0a\u6211\u4eec\u53ea\u9700\u8981\u4f7f\u7528\u524d\u9762\u63d0\u5230\u7684CRCW \u7b56\u7565\u5141\u8bb8\u540c\u65f6\u5199\u5165\uff0c\u7136\u540e\u6309common rule \u5199\u5165\u5373\u53ef\uff0c\u56e0\u4e3a\u8fd9\u91cc\u6240\u6709\u7ebf\u7a0b\u5f80\u4efb\u610f\u4e00\u4e2aB[i] \u53ea\u4f1a\u5199\u51651 \u8fd9\u4e2a\u6570\u5b57\uff0c\u6240\u4ee5\u5199\u5165\u7684\u5185\u5bb9\u90fd\u662f\u4e00\u6837\u7684\u3002</code></p> <p>\u6700\u540e\u5f97\u5230\u6df1\u5ea6\u4e3aO(1),\u603b\u5de5\u4f5c\u91cf\u4e3aO(n^2)</p> <p></p> <p>\u53cc\u5bf9\u6570\u8303\u5f0f</p> <p>\u53cc\u5bf9\u6570\u8303\u5f0f\u662f\u4e00\u79cd\u53ef\u4ee5\u4e8c\u53c9\u6811\u7684\u6269\u5c55\u3002\u5728\u5b8c\u5168\u4e8c\u53c9\u6811\u4e2d\uff0c\u8bbe\u53f6\u5b50\u7684\u6570\u91cf\u4e3an\uff0c\u90a3\u4e48\u6811\u9ad8\u662flog n \u7ea7\u522b\u7684\uff0c\u8fd9\u91cc\u53cc\u5bf9\u6570\u5219\u662f\u5e0c\u671b\u6784\u9020\u4e00\u68f5\u6811\uff0c\u4f7f\u5f97\u6811\u9ad8\u662flog log n \u7ea7\u522b\u7684\u3002\u4e3a\u4e86\u6784\u9020\u8fd9\u6837\u4e00\u68f5\u6811\uff0c\u6211\u4eec\u9996\u5148\u8bbe\u6811\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684level \u4e3a\u4ece\u6839\u5230\u8be5\u8282\u70b9\u7684\u8ddd\u79bb\uff08\u9700\u8981\u7ecf\u8fc7\u7684\u8fb9\u6570\uff09\uff0c\u6839\u7684level \u4e3a0\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u6784\u9020\u8fd9\u68f5\u6811\u5982\u4e0b\uff1a</p> <ol> <li>\u8bbe\u67d0\u4e2a\u7ed3\u70b9\u7684level\u4e3as\uff0c\u5f53\\(s \\leq loglogn-1\\)\u65f6\uff0c\u5219\u5b83\u6709\\(2^{2^{h-s-1}}\u4e2a\u5b69\u5b50\\)</li> <li>\u5f53\\(s = loglogn\\)\u65f6\uff0c\u5b83\u67092\u4e2a\u5b69\u5b50\u4f5c\u4e3a\u6811\u7684\u53f6\u5b50</li> </ol> <p></p> <p>\u6bcf\u4e00\u6bb5\u7684\u957f\u5ea6\u4e3a\\(\\sqrt n\\),\u4e00\u5171\u6709\\(\\sqrt n\\)\u6bb5</p> <p></p> <p>\u628a\u6570\u636e\u5212\u5206\u6210\u66f4\u5c0f\u6bb5\uff0c\u6bcf\u4e00\u6bb5\u7684\u957f\u5ea6\u4e3aloglog n</p> <ol> <li>\u5c06\u6570\u7ec4\u5206\u4e3a\\(n/ log log n \\(\u4efd\uff0c\u5373\u6bcf\u4e00\u4efd\u7684\u5927\u5c0f\u4e3a\\)log log n\\)\uff0c\u5982PPT \u7b2c20 \u9875\uff1b\u5b9e\u9645\u4e0a\u6bcf\u4e00\u4efd\u7684\u5927\u5c0f\u90fd\u5f88\u5c0f\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5229\u7528\u7ebf\u6027\u67e5\u627e\u7684\u65b9\u5f0f\u627e\u5230\u6bcf\u4e00\u4efd\u7684\u6700\u5927\u503c\uff0c\u5219\u6bcf\u4e00\u4efd\u7684\u6df1\u5ea6\u548c\u5de5\u4f5c\u91cf\u90fd\u662f$O(log log n) $\u7684\uff1b</li> <li>\u7136\u540e\u6211\u4eec\u5bf9\u4e0a\u9762\u6c42\u51fa\u7684\\(n/ log log n\\) \u4e2a\u6700\u5927\u503c\u4f7f\u7528\u53cc\u5bf9\u6570\u8303\u5f0f\u7684\u7b97\u6cd5\u3002</li> </ol> <p></p> <p></p>"},{"location":"ADS/14.%20Parallel%20Algorithm/#146-\u4e60\u9898\u96c6","title":"14.6 \u4e60\u9898\u96c6","text":"<ol> <li>While comparing a serial algorithm with its parallel counterpart, we just concentrate on reducing the work load.</li> </ol> <p><code>F\uff0c\u9664\u4e86work load\u8fd8\u9700\u8981\u5173\u6ce8\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u5206\u522b\u5bf9\u5e94W\u548cT</code></p> <ol> <li>To evaluate the Prefix-Sums of a sequence of 16 numbers by the parallel algorithm with Balanced Binary Trees, C(4,1) is found before C(2,2).</li> </ol> <p><code>\u8ba1\u7b97\u524d\u7f00\u548c\u65f6\uff0c\u4ece\u4e0a\u5f80\u4e0b\u8ba1\u7b97\u3002\u5bf9\u4e8esummation\u95ee\u9898\uff0cB[]\u662f\u4ece\u4e0b\u5f80\u4e0a\u8ba1\u7b97\u7684</code></p> <ol> <li>To evaluate the sum of a sequence of 16 numbers by the parallel algorithm with Balanced Binary Trees, B(1,6) is found before B(2,1).</li> </ol> <p><code>B[]\u4ece\u4e0b\u5f80\u4e0a\u8ba1\u7b97</code></p> <ol> <li>In order to solve the maximum finding problem by a parallel algorithm with \\(T(n)=O(1)\\) , we need work load $W(n)=\u03a9(n^2) $in return.</li> </ol> <p><code>F.\u91c7\u7528 Random Sampling\uff0c\u5c31\u53ef\u4ee5\u5728$ \ud835\udc4a(\ud835\udc5b)=\ud835\udc42(\ud835\udc5b)$ \u4e0b\u5f97\u5230\u7ed3\u679c\u3002</code></p> <ol> <li>To solve the Maximum Finding problem with parallel Random Sampling method, $O(n) $processors are required to get \\(T(n)=O(1)\\) and \\(W(n)=O(n)\\) with very high probability</li> </ol> <p><code>T</code></p> <ol> <li>The prefix-min problem is to find for each i, 1\u2264i\u2264n, the smallest element among A(1), A(2), \u22ef, A(i). What is the run time and work load for the following algorithm?</li> </ol> <pre><code>for i, 1\u2264i\u2264n pardo\n  B(0, i) = A(i)\nfor h=1 to log(n)\n  for i, 1\u2264i\u2264n/2^h pardo\n    B(h, i) = min {B(h-1, 2i-1), B(h-1, 2i)}\nfor h=log(n) to 0\n  for i even, 1\u2264i\u2264n/2^h pardo\n    C(h, i) = C(h+1, i/2)\n  for i=1 pardo\n    C(h, 1) = B(h, 1)\n  for i odd, 3\u2264i\u2264n/2^h pardo\n    C(h, i) = min {C(h + 1, (i - 1)/2), B(h, i)}\nfor i, 1\u2264i\u2264n pardo\n  Output C(0, i)\n</code></pre> <p></p> <p><code>\u53c2\u7167\u6c42\u524d\u7f00\u548c\u95ee\u9898\uff0c\u5c42\u6570\u4e3alogn,\u5bf9\u5e94\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(logn),\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u7684\u503c\u90fd\u9700\u8981\u8ba1\u7b97\uff0c\u5bf9\u5e94\u7684\u4e5f\u5c31\u662fn+n/2+n/4+...+1 = 2n,work load\u5c31\u662fO(n)</code></p> <ol> <li>Which one of the following statements about the Maximum Finding problem is true?</li> </ol> <p>A.There exists a<code>serial algorithm</code> with time complexity being \\(O(logN)\\).</p> <p>B.<code>No parallel algorithm</code>can solve the problem in O(1) time.</p> <p>C.When partitioning the problem into sub-problems and solving them in parallel, compared with \\(\\sqrt N\\), choosing \\(loglogN\\) as the size of each sub-problem can reduce the work load and the worst-case time complexity.</p> <p>D.Parallel random sampling algorithm can run in O(1) time and O(N) work with very high probability.</p> <p><code>D\u221a</code></p> <p><code>\u5173\u4e8eC\u9009\u9879\uff0cpartition by</code>\\(\\sqrt N\\),\u5bf9\u5e94\u7684\u65f6\u95f4\u590d\u6742\u4e3a\\(T(N) = O(loglogN)\\),\u5bf9\u5e94\u7684work load\u4e3a\\(O(NloglogN)\\)</p> <p>partition by \\(loglogN\\),\u5bf9\u5e94\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(T(N) = loglogN\\),\u5bf9\u5e94\u7684work load\u4e3a\\(O(N)\\)</p> <p><code>\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u53d8\uff0c\u4f46\u662fwork load\u53d8\u5c0f</code></p> <ol> <li>Sorting-by-merging is a classic serial algorithm. It can be translated directly into a reasonably efficient parallel algorithm. A recursive description follows.</li> </ol> <p>\\(MERGE\u2212SORT( A(1), A(2), ..., A(n); B(1), B(2), ..., B(n) )\\)</p> <p>Assume that \\(n=2^l\\) for some integer \\(l\u22650\\)</p> <p>if n = 1 then return B(1) := A(1)</p> <p>else call, in parallel, \\(MERGE\u2212SORT( A(1), ..., A(n/2); C(1), ..., C(n/2) )\\) and</p> <ul> <li>\\(MERGE\u2212SORT(A(n/2+1), ..., A(n); C(n/2+1), ..., C(n) )\\)</li> <li>\\(Merge (C(1),...C(n/2)) \\ and \\ (C(n/2 + 1),...,C(n))\\) into $(B(1), B(2), ..., B(n)) $with time O(n)</li> </ul> <p>Then the MERGE\u2212SORT runs in __ .</p> <p>A.$O(nlogn) $work and \\(O(log^2n)\\) time</p> <p>B$O(nlogn) $work and  \\(O(logn)\\)time</p> <p>C.$O(nlog^2n) $ work and  \\(O(log^2n)\\)time</p> <p>D.$O(nlog^2n) $) work and  \\(O(logn)\\)time</p> <p></p> <ol> <li>Which one of the following statements about the <code>Ranking problem</code> is true? (Assume that both arrays contain N elements.)</li> </ol> <p>A.There exists a serial algorithm with time complexity being \\(O(logN)\\).</p> <p><code>serial algorithm\u5bf9\u5e94\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548cwork load\u90fd\u662fO(n)</code></p> <p>B.Parallel binary search algorithm can solve the problem in \\(O(1)\\) time.</p> <p><code>binary search\u5bf9\u5e94\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(logN)</code></p> <p>C.When partitioning the problem into sub-problems and solving them in parallel, choosing \\(O(loglogN)\\) as the size of each sub-problem can reduce the work load and the worst-case time complexity to \\(O(logN)\\).</p> <p><code>\u5728Maximum Finding\u95ee\u9898\u4e2d\uff0c\u53cc\u5bf9\u6570\u8303\u5f0f\u5206\u5272\uff0c\u5bf9\u5e94\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(loglogN)</code></p> <p>D.There is a parallel algorithm that can run in \\(O(logN)\\) time and \\(O(N)\\) work.</p> <p><code>D\u9009\u9879\uff0cparallel ranking\u96c6\u6210\u4e8c\u5206\u641c\u7d22\u7684\u65f6\u95f4\u590d\u6742\u5ea6O(logN)\u548c\u987a\u5e8f\u67e5\u627e\u7684work load O(n)</code></p> <p></p>"},{"location":"ADS/15.%20External%20Sorting/","title":"\u5341\u4e94. External Sorting","text":"<p> \u7ea6 2767 \u4e2a\u5b57  72 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 15 \u5206\u949f</p>"},{"location":"ADS/15.%20External%20Sorting/#151-\u5916\u6392\u5e8f","title":"15.1 \u5916\u6392\u5e8f","text":"<p><code>\u666e\u901a\u7684\u6392\u5e8f\u7b97\u6cd5\u6392\u5e8f\u7684\u5bf9\u8c61\u90fd\u662f\u653e\u5728\u5185\u5b58\u91cc\u7684\u4e00\u4e9b\u6570\u636e</code>\uff0c\u4f8b\u5982\u4e00\u4e2a <code>int</code> \u6570\u7ec4\u3002\u7136\u800c\u5916\u90e8\u6392\u5e8f\u6392\u5e8f\u7684\u5bf9\u8c61\uff0c\u6216\u8005\u8bf4\u8981\u6392\u5e8f\u7684\u90a3\u4e2a\u201c\u6570\u7ec4\u201d\uff0c\u6ca1\u6cd5\u88ab\u5b8c\u6574\u5730\u5b58\u5728\u5185\u5b58\u91cc\uff0c\u5b83\u4eec\u90fd\u88ab\u5b58\u50a8\u5728\u786c\u76d8\u4e4b\u7c7b\u7684\u975e\u6613\u5931\u4ecb\u8d28\u4e2d\uff0c\u800c\u4ece\u8fd9\u79cd\u4ecb\u8d28\u91cc\u8bfb\u53d6\u6570\u636e\u5f80\u5f80\u5177\u6709\u8f83\u5927\u7684\u5f00\u9500\uff0c\u6240\u4ee5\u6211\u4eec\u603b\u662f\u201c\u4e00\u5757\u4e00\u5757\u201d\u4ece\u91cc\u9762\u90a3\u6570\u636e\u3002</p> <p>\u4ece\u6267\u884c\u7684\u987a\u5e8f\u6765\u8bf4\uff0c\u5185\u6392\u5e8f\u4e2d\u7684\u5f52\u5e76\u6392\u5e8f\u662f\u4e00\u4e2a\u81ea\u4e0a\u800c\u4e0b\u4e0d\u65ad\u5730\u5212\u5206\uff0c\u518d\u81ea\u4e0b\u800c\u4e0a\u4e0d\u65ad\u5f52\u5e76\u7684\u8fc7\u7a0b\u3002\u76f8\u53cd\uff0c\u5916\u6392\u5e8f\u7531\u4e8e\u5176\u7279\u6027\u9650\u5236\uff0c\u5176\u201c\u5f52\u5e76\u6bb5\u201d\u5e76\u4e0d\u662f\u81ea\u4e0a\u800c\u4e0b\\(\\dfrac{1}{f}\\)\u5212\u5206\u51fa\u6765\u7684\uff0c\u800c\u662f\u6839\u636e\u786c\u4ef6\u5904\u7406\u80fd\u529b\uff0c\u76f4\u63a5\u5212\u5206\u597d\u6700\u5c0f\u7684\u5f52\u5e76\u6bb5\uff0c\u7136\u540e\u76f4\u63a5\u81ea\u4e0b\u800c\u4e0a\u5f52\u5e76\u3002</p> <p>\u800c\u8fd9\u6837\u4e00\u4e2a\u5c06 \\(\ud835\udc58\u22c5\ud835\udc50\\) \u4e2a run merge \u6210 \\(c\\) \u4e2a run \u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u4e00\u4e2a <code>pass</code>\u3002\uff08\u5728\u5f52\u5e76\u6811\u4e0a\u4f53\u73b0\u4e3a\u4e00\u5c42\u3002\uff09</p>"},{"location":"ADS/15.%20External%20Sorting/#152-example-2-way-merge","title":"15.2 example 2-way merge","text":"<p><code>\u5982\u4f55\u51cf\u5c0fpass\u7684\u6b21\u6570</code></p> <p>Use a k-way merge!</p> <p></p> <p>\u6570\u636e\u6700\u521d\u4fdd\u5b58\u5728\\(T1\\)\u4e0a\uff0c\u521d\u59cb\u6570\u7ec4\u4e00\u5171\u6709\\(N\\)\u4e2a\u5143\u7d20\uff0c\u5185\u5b58\u53ef\u4ee5\u5bb9\u7eb3\uff08\u6392\u5e8f\uff09\\(M\\)\u4e2a\u5143\u7d20\u3002</p> <ol> <li> <p>\u4ece\u78c1\u5e26\\(T1\\)\u8bfb\u5165\\(M\\)\u4e2a\u8bb0\u5f55\uff0c\u5728\u5185\u5b58\u4e2d\u6392\u5e8f\uff0c\u5c06\u6392\u597d\u5e8f\u7684\u8bb0\u5f55\u4ea4\u66ff\u5199\u5165\u5230\\(T2\\)\u548c\\(T3\\),\u6bcf\u7ec4\u6392\u597d\u5e8f\u7684\u8bb0\u5f55\u53eb\u505arun\uff08\u76ee\u524d\u7684\u957f\u5ea6\u4e3aM\uff09</p> </li> <li> <p>\u63a5\u4e0b\u6765\\(T2,T3\\)\u4f5c\u4e3a\u8f93\u5165\u78c1\u5e26\uff0c\\(T1\\)\u7684\u6570\u636e\u5df2\u7ecf\u5931\u6548\uff0c\u548c\\(T4\\)\u4e00\u8d77\u4f5c\u4e3a\u8f93\u51fa\u78c1\u5e26\u3002\u6211\u4eec\u5c06\\(T2,T3\\)\u7684\u7b2c\u4e00\u4e2arun\u53d6\u51fa\uff0c\u5c06\u4e24\u8005\u5408\u5e76\uff0c\u7ed3\u679c\u5199\u5165\u5230\\(T1\\),<code>\u5f97\u5230\u7684\u662f$2M$\u957f\u5ea6\u7684run</code>\u3002\u6211\u4eec\u518d\u4ece\u78c1\u5e26\\(T2,T3\\)\u53d6\u51fa\u4e0b\u4e00\u4e2arun\uff0c\u5408\u5e76\uff0c\u5c06\u7ed3\u679c\u5199\u5165\u5230\\(T4\\)\u3002\u4ea4\u66ff\u6267\u884c\uff0c\u76f4\u5230\\(T2\\)\u6216\u8005\\(T3\\)\u4e3a\u7a7a\uff0c\u5982\u679c\u67d0\u4e00\u4e2a\u78c1\u5e26\u5b58\u5728\u5269\u4f59\u5143\u7d20\uff0c\u5c31\u76f4\u63a5\u62f7\u8d1d\u5230\u78c1\u76d8\u672b\u5c3e\u3002</p> </li> <li> <p>\u91cd\u590d\u76f8\u540c\u7684\u64cd\u4f5c\uff0c<code>\u7ed3\u679c\u5f97\u5230\u957f\u5ea6\u4e3a$4M$\u7684run\uff0c\u91cd\u590d\u76f4\u5230\u5f97\u5230\u957f\u5ea6\u4e3a$N$\u7684run</code></p> </li> <li> <p>\u6bcf\u6267\u884c\u4e00\u6b21\u5408\u5e76\uff0crun\u7684\u957f\u5ea6\u52a0\u500d\uff0c\u6240\u4ee5\u4e00\u5171\u9700\u8981\\(\\lceil log_2(N/M) \\rceil\\)\u6b21\u5408\u5e76\uff08pass\uff09\uff0c\u5916\u52a0\u4e0a\u7b2c\u4e00\u6b21\u6784\u9020\u521d\u59cb\u7684\u6392\u597d\u5e8f\u7684run\uff0c\u4e8e\u662f\u4e00\u5171\u9700\u8981pass\u7684\u6b21\u6570\u662f    $$    1 + \\lceil log_2(N/M) \\rceil    $$</p> </li> </ol> <p><code>\u4f8b\u5982PPT \u4e0a\u7684\u4f8b\u5b50\uff0c\u7b2c\u4e00\u8d9f\u6784\u9020\u51fa\u957f\u5ea6\u4e3a3 \u7684run\uff0c\u63a5\u4e0b\u6765\u662f\u4e09\u6b21pass\uff08\u5408\u5e76\uff09\uff1arun\u957f\u5ea6\u4f9d\u6b21\u75313 \u53d86\uff0c6 \u53d812\uff0c12 \u53d813\uff0c\u56e0\u6b64\u51714 \u6b21pass\u3002</code></p>"},{"location":"ADS/15.%20External%20Sorting/#153-k\u8def\u5408\u5e76","title":"15.3 k\u8def\u5408\u5e76","text":"<p><code>\u4f18\u5316\uff1a\u91c7\u7528\u591a\u8def\u5408\u5e76</code></p> <p>\u7b2c\u4e00\u4e2a\u4f18\u5316\u7684\u65b9\u5411\u662f\u51cf\u5c11\u5de5\u4f5c\u7684pass\u6570\u91cf\u3002\u5982\u679c\u6211\u4eec\u4f7f\u7528k\u8def\u7684\u5f52\u5e76\uff0c\u4e5f\u5c31\u662f\u6bcf\u4e00\u6b21\u5f52\u5e76k\u6761\u78c1\u5e26\u4e0a\u5bf9\u5e94\u4f4d\u7f6e\u7684run\uff0c\u90a3\u4e48\u6bcf\u4e00\u6b21\u5408\u5e76\u4e4b\u540e\uff0crun\u7684\u957f\u5ea6\u4e3a\u589e\u52a0k\u500d\u3002</p> <p>\u6240\u4ee5\u53ea\u9700\u8981 $$ 1 + \\lceil log_k(N/M) \\rceil $$ \u6b21pass\uff0c\u5373\u53ef\u5b8c\u6210\u6392\u5e8f\u3002\u51cf\u5c11\u4e86\u8d9f\u6570\uff0c\u56e0\u6b64\u51cf\u5c11\u4e86\u78c1\u5e26\u79fb\u52a8\u7684\u6b21\u6570\uff0c\u4ece\u800c\u51cf\u5c11\u603b\u65f6\u95f4\u3002</p> <p>k \u8def\u5408\u5e76\u6709\u4e00\u4e2a\u5b9e\u73b0\u4e0a\u9700\u8981\u6ce8\u610f\u7684\u70b9\uff0c\u56e0\u4e3a\u6211\u4eec\u662fk \u4e2arun\u8981\u5408\u5e76\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4e0d\u65ad\u7684\u5728k \u4e2a\u5143\u7d20\u4e2d\u9009\u53d6\u6700\u5c0f\u503c\u653e\u5230\u8f93\u51fa\u7684\u78c1\u5e26\u4e0a\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u4f7f\u7528<code>\u4f18\u5148\u961f\u5217</code>\u6765\u5b9e\u73b0\uff0cPPT \u7b2c5 \u9875\u7ed9\u51fa\u4e86\u8fd9\u6837\u7684\u4f8b\u5b50\u3002</p> <p><code>\u6b64\u5904\u589e\u5927k\uff0c\u4f7f\u7528\u4e09\u8def\u5f52\u5e76\uff0c\u4ece\u5212\u5206\u597d\u7684\u6700\u5c0f\u5f52\u5e76\u6bb5\uff0c\u4ece\u4e0b\u5f80\u4e0a\u5408\u5e76</code></p> <p><code>\u8fd8\u9700\u8981T6\u7528\u4e8e\u5b58\u653e\u6700\u7ec8\u7684\u7ed3\u679c\uff08\u6700\u540e\u7684\u5f52\u5e76\uff09\uff0c\u6240\u4ee5\u9700\u89812k\u4e2atype\u3002\u6216\u8005\u7406\u89e3\u4e3a\uff0c\u6bcf\u4e00\u6b21\u90fd\u5c3d\u53ef\u80fd\u9700\u8981\u8fdb\u884ck\u8def\u5408\u5e76\uff0c\u90a3\u4e48\u663e\u7136\u9700\u8981k\u8def\u7684\u8f93\u5165\uff0c\u56e0\u4e3a\u8f93\u5165\u548c\u8f93\u51fa\u78c1\u5e26\u7684\u4ea4\u66ff\uff0c\u6240\u4ee5\u8f93\u51fa\u78c1\u5e26\u4e5f\u9700\u8981k\u8def\uff0c\u6240\u4ee5\u4e00\u5171\u9700\u89812k\u4e2a\u78c1\u5e26</code></p>"},{"location":"ADS/15.%20External%20Sorting/#154-\u591a\u76f8\u5408\u5e76\u6590\u6ce2\u90a3\u5951","title":"15.4 \u591a\u76f8\u5408\u5e76\uff08\u6590\u6ce2\u90a3\u5951\uff09","text":"<p><code>k \u8def\u5408\u5e76\u9700\u8981\u7684\u78c1\u5e26\u6570\u76ee\u662f2k\uff0c\u56e0\u4e3a\u6211\u4eec\u6bcf\u6b21pass\u9700\u8981k \u4e2a\u8f93\u5165\u78c1\u5e26\u548ck \u4e2a\u8f93\u51fa\u78c1\u5e26</code>\u3002\u56e0\u6b64\uff0c\u5982\u679ck \u5f88\u5927\uff0c\u90a3\u4e48\u78c1\u5e26\u6570\u76ee\u5c31\u4f1a\u5f88\u591a\uff0c\u8fd9\u662f\u4e0d\u592a\u5408\u7406\u7684\u3002\u56e0\u6b64\u6211\u4eec\u8ba8\u8bba\u53e6\u4e00\u79cd\u4f18\u5316\u65b9\u6848\uff1a<code>\u591a\u76f8\u5408\u5e76\uff0c\u80fd\u591f\u5927\u5927\u51cf\u5c0f\u5f52\u5e76\u9700\u8981\u7684\u78c1\u5e26\u6570\u76ee\uff1ak \u8def\u5408\u5e76\u53ea\u9700\u8981k + 1 \u6761\u78c1\u5e26</code>\u3002</p> <p><code>\u4e09\u6761\u78c1\u5e26\uff0c2\u8def\u5f52\u5e76\u3002T2\u548cT3\u5f52\u5e76\u540e\u7ed3\u679c\u4fdd\u5b58\u5728T1\uff0c\u4e0b\u4e00\u6b21\u53c8\u8981\u4eceT1\u5c06\u7ed3\u679c\u62f7\u8d1d\u5230T2\u548cT3\uff0c\u62f7\u8d1d\u9700\u8981\u7684IO\u6b21\u6570\u592a\u591a</code></p> <ul> <li> <p>\u5148\u4ecb\u7ecd\u5747\u5300\u5212\u5206\uff1a</p> </li> <li> <p>\u8bbe\u6709\u4e09\u76d8\u78c1\u5e26\\(T1\\)\u3001\\(T2\\) \u548c\\(T3\\)\uff0c\u5728\\(T1\\) \u4e0a\u6709\u4e00\u4e2a\u8f93\u5165\u6587\u4ef6\uff0c\u5b83\u5c06\u4ea7\u751f34 \u4e2arun\u3002\u4e00\u79cd\u9009\u62e9\u662f\u5728\\(T2 \\(\u548c\\)T3\\) \u7684\u6bcf\u4e00\u76d8\u78c1\u5e26\u4e2d\u653e\u516517 \u4e2arun\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5c06\u7ed3\u679c\u5408\u5e76\u5230T1 \u4e0a\uff0c\u5f97\u5230\u4e00\u76d8\u670917 \u4e2arun\u7684\u78c1\u5e26\u3002</p> </li> <li> <p><code>\u7531\u4e8e\u6240\u6709\u7684run\u90fd\u5728\u4e00\u76d8\u78c1\u5e26\u4e0a\uff0c\u56e0\u6b64\u6211\u4eec\u73b0\u5728\u5fc5\u987b\u628a\u5176\u4e2d\u7684\u4e00\u4e9brun\u653e\u5230T2 \u4e0a\u4ee5\u8fdb\u884c\u53e6\u4e00\u6b21\u7684\u5408\u5e76\u3002\u6267\u884c\u5408\u5e76\u7684\u903b\u8f91\u65b9\u5f0f\u662f\u5c06\u524d8 \u4e2arun\u4eceT1 \u62f7\u8d1d\u5230T2 \u5e76\u8fdb\u884c\u5408\u5e76\u3002</code>\u8fd9\u6837\u7684\u6548\u679c\u662f\uff0c\u4e3a\u4e86\u6211\u4eec\u6240\u505a\u7684\u6bcf\u4e00\u8d9f\u5408\u5e76\uff0c\u6211\u4eec\u4e0d\u5f97\u4e0d\u9644\u52a0\u989d\u5916\u7684\u590d\u5236\u5de5\u4f5c\uff0c\u800c\u590d\u5236\u4e5f\u9700\u8981\u78c1\u5934\u7684\u79fb\u52a8\uff0c\u662f\u5f88\u6602\u8d35\u7684\u64cd\u4f5c\uff0c\u56e0\u6b64\u8fd9\u79cd\u65b9\u6cd5\u5e76\u4e0d\u597d\u3002</p> </li> <li> <p>\u5982\u679c\u6211\u4eec\u63a5\u7740\u628a\u6240\u6709\u7684\u6b65\u9aa4\u90fd\u753b\u5b8c\uff0c<code>\u6211\u4eec\u4f1a\u53d1\u73b0\u6211\u4eec\u603b\u5171\u9700\u89811 \u8d9f\u521d\u59cb+6 \u8d9fpass\uff0c\u5916\u52a05 \u6b21\u590d\u5236\u64cd\u4f5c\u3002</code></p> </li> <li> <p>\u5982\u679c\u4f7f\u7528\u4e0d\u5747\u5300\u7684\u5212\u5206\uff0c\u53ef\u4ee5\u51cf\u5c11copy\u7684\u6b21\u6570\uff0c\u4f46\u662f\u589e\u52a0passes\u7684\u6b21\u6570</p> </li> <li>\u8bbe\u6211\u4eec\u628a21 \u4e2arun\u653e\u5230T2 \u4e0a\u800c\u628a13 \u4e2arun\u653e\u5230T3 \u4e0a\u3002\u7136\u540e\uff0c\u5728T3 \u7528\u5b8c\u4e4b\u524d\u5c0613 \u4e2arun\u5408\u5e76\u5230T1 \u4e0a\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5c06\u5177\u670913 \u4e2arun\u7684T1 \u548c8\u4e2arun\u7684T2 \u5408\u5e76\u5230T3 \u4e0a\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u5408\u5e768 \u4e2arun\u76f4\u5230T2 \u7528\u5b8c\u4e3a\u6b62\uff0c\u8fd9\u6837\uff0c\u5728T1 \u4e0a\u5c06\u7559\u4e0b5 \u4e2a\u987a     \u4e32\u800c\u5728T3 \u4e0a\u5219\u67098 \u4e2arun\u3002\u7136\u540e\uff0c\u6211\u4eec\u518d\u5408\u5e76T1 \u548cT3\uff0c\u7b49\u7b49\uff0c\u76f4\u5230\u5408\u5e76\u7ed3\u675f</li> </ul> <p></p> <p></p> <p><code>run\u7684\u6700\u521d\u5206\u914d\u4f1a\u5f71\u54cd\u6392\u5e8f\u7684\u6548\u7387\uff1f\u90a3\u6709\u8be5\u5982\u4f55\u8fdb\u884c\u5206\u914d\u5462\uff1f</code></p> <ul> <li>\u82e522 \u4e2arun\u653e\u5728T2 \u4e0a\uff0c12 \u4e2a\u5728T3 \u4e0a\uff0c\u5219\u7b2c\u4e00\u8d9f\u5408\u5e76\u540e\u6211\u4eec\u5f97\u5230T1 \u4e0a\u768412 \u4e2arun\u4ee5\u53caT2 \u4e0a\u768410 \u4e2arun\u3002</li> <li>\u5728\u53e6\u4e00\u6b21\u5408\u5e76\u540e\uff0cT1 \u4e0a\u670910 \u4e2arun\u800cT3 \u4e0a\u67092 \u4e2arun\u3002<code>\u6b64\u65f6\uff0c\u8fdb\u5c55\u7684\u901f\u5ea6\u6162\u4e86\u4e0b\u6765\uff0c\u56e0\u4e3a\u5728T3 \u7528\u5b8c\u4e4b\u524d\u6211\u4eec\u53ea\u80fd\u5408\u5e76\u4e24\u7ec4run\u3002</code>\u8fd9\u65f6T1 \u67098 \u4e2arun\u800cT2 \u67092 \u4e2arun\u3002\u540c\u6837\uff0c\u6211\u4eec\u53ea\u80fd\u5408\u5e76\u4e24\u7ec4run\uff0c\u7ed3\u679cT1 \u67096 \u4e2arun\u4e14T3 \u67092 \u4e2arun\u3002\u518d\u7ecf\u8fc7\u4e09\u8d9f\u5408\u5e76\u4e4b\u540e\uff0cT2 \u8fd8\u67092 \u4e2arun\u800c\u5176\u4f59\u78c1\u5e26\u5747\u5df2\u6ca1\u6709\u4efb\u4f55\u5185\u5bb9\u3002\u6211\u4eec\u5fc5\u987b\u5c06\u4e00\u4e2arun\u62f7\u8d1d\u5230\u53e6\u5916\u4e00\u76d8\u78c1\u5e26\u4e0a\uff0c\u7136\u540e\u7ed3\u675f\u5408\u5e76\uff0c\u6240\u4ee5\u975e\u5e38\u590d\u6742\u3002</li> </ul> <p>\u5982\u4f55\u4e00\u4e2arun\u7684\u957f\u5ea6\u662f\u6590\u6ce2\u90a3\u5951\u6570\\(F_n\\)\uff0c\u90a3\u4e48\u5206\u914d\u8fd9\u4e9brun\u7684\u6700\u597d\u7684\u65b9\u5f0f\u5c31\u662f\u628a\u5b83\u4eec\u5206\u88c2\u6210\u4e24\u4e2a\u6590\u6ce2\u90a3\u5951\u6570\\(F_{n-1}, F_{n-2}\\)\u200b, <code>\u5bf9\u4e8e\u4e0d\u662f\u6590\u6ce2\u90a3\u5951\u6570\u7684run\u6570\uff0c\u53ef\u4ee5\u6dfb\u52a0\u65e0\u7a77\u5927\u8865\u6210\u6590\u6ce2\u90a3\u5951\u6570</code></p> <p>\u73b0\u5728\u6269\u5145\u5230k\u8def\u5408\u5e76\uff0c\u6b64\u65f6\u6211\u4eec\u9700\u8981<code>\u7b2ck \u9636\u6590\u6ce2\u90a3\u5951\u6570</code>\u7528\u4e8e\u5206\u914drun\uff0c\u5176\u4e2dk \u9636\u6590\u6ce2\u90a3\u5951\u6570\u5b9a\u4e49\u4e3a $$ F^{(k)}(n) = F^{(k)}(n-1) + F^{(k)}(n-2) +...+ F^{(k)}(n-k) $$</p>"},{"location":"ADS/15.%20External%20Sorting/#155-\u7f13\u5b58\u5e76\u884c\u5904\u7406","title":"15.5 \u7f13\u5b58\u5e76\u884c\u5904\u7406","text":"<p><code>\u5728\u5b9e\u73b0\u5916\u90e8\u6392\u5e8f\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u662f\u4e00\u5757\u4e00\u5757\u5730\u8bfb\u5165\u6570\u636e\uff0c\u4f46\u662f\u5e76\u4e0d\u662f\u6bcf\u6bd4\u8f83\u4e00\u6b21\u5c31\u5f80\u78c1\u76d8\u4e2d\u5199\u5165\u4e00\u4e2a\u5143\u7d20\u3002\u6240\u4ee5\u6211\u4eec\u662f\u628a\u5185\u5b58\u5212\u5206\u4e3a\u4e24\u4e2a\u8f93\u5165\u7f13\u5b58\u533a(buffer),\u4e00\u4e2a\u8f93\u51fa\u7f13\u5b58\u533a\uff0c\u8f93\u5165\u7f13\u5b58\u533a\u7528\u6765\u5b58\u653e\u4ece\u8f93\u5165\u78c1\u76d8\u8bfb\u5165\u7684\u6570\u636e\uff0c\u7136\u540e\u4e24\u4e2a\u8f93\u5165\u7f13\u5b58\u533a\u7684\u6570\u636e\u6bd4\u8f83\u4e4b\u540e\u7684\u6392\u5e8f\u7ed3\u679c\u5148\u653e\u5230\u8f93\u51fa\u7f13\u5b58\u533a\uff0c\u5f53\u8f93\u51fa\u7f13\u5b58\u533a\u6ee1\u4e86\u4e4b\u540e\u518d\u4e00\u6b21\u6027\u5199\u5165\u8f93\u51fa\u78c1\u76d8\u3002</code></p> <p>\u4e00\u6b21\u8bfb2 * 250\u4e2arecord\uff0c\u7ed3\u679c\u6682\u5b58\u5728\u8f93\u51fa\u7f13\u51b2\u533a\uff0c\u76f4\u5230\u6570\u636e\u79ef\u7d2f\u5230250\uff0c\u624d\u5199\u56de\u5230\u78c1\u76d8\u3002\u80fd\u591f\u51cf\u5c11IO\u6b21\u6570</p> <p><code>\u7136\u800c\uff0c\u8fd9\u6837\u7684\u5b9e\u73b0\u65b9\u5f0f\u4ecd\u7136\u5b58\u5728\u95ee\u9898\u3002</code></p> <p>\u5f53\u8f93\u51fa\u7f13\u5b58\u533a\u5199\u56de\u5230\u78c1\u76d8\u65f6\uff0c\u5185\u5b58\u91cc\u4ec0\u4e48\u4e8b\u60c5\u90fd\u5e72\u4e0d\u4e86\uff0c\u5f71\u54cd\u6392\u5e8f\u6548\u7387\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5c06\u8f93\u51fa\u7f13\u5b58\u533a\u4e5f\u62c6\u5206\u6210\u4e24\u4e2a\uff0c\u5f53\u5176\u4e2d\u4e00\u4e2a\u6ee1\u4e86\u9700\u8981\u5199\u56de\u78c1\u76d8\u65f6\uff0c\u53e6\u5916\u4e00\u4e2a\u8f93\u51fa\u7f13\u5b58\u533a\u63a5\u6536\u6570\u636e\uff0c\u4e5f\u5c31\u5b9e\u73b0\u4e86\u5e76\u884c\u5904\u7406\uff0c\u4e00\u4e2a\u5728\u5185\u5b58\u91cc\u64cd\u4f5c\uff0c\u4e00\u4e2a\u8fdb\u884cI/O\u4ea4\u4e92</p> <p>\u5bf9\u4e8e\u8f93\u5165\u7f13\u5b58\u533a\u540c\u7406\u3002\u5982\u679c\u4ecd\u7136\u662f2 \u4e2a\u8f93\u5165\u7f13\u5b58\uff0c\u5f53\u6240\u6709\u8f93\u5165\u7f13\u5b58\u4e2d\u7684\u6570\u636e\u90fd\u6bd4\u8f83\u5b8c\u4e86\uff0c\u8fd9\u65f6\u6211\u4eec\u4e5f\u8981\u88ab\u8feb\u505c\u6b62\u7b49\u5f85\u65b0\u7684\u6570\u636e\u4ece\u8f93\u5165\u78c1\u76d8\u4e2d\u8bfb\u5165\u3002\u56e0\u6b64\u6211\u4eec\u8981\u8fdb\u4e00\u6b65\u5212\u5206\u4e3a4 \u4e2a\u8f93\u5165\u7f13\u5b58\uff0c\u8fd9\u6837\u5f53\u5176\u4e2d\u4e24\u4e2a\u8f93\u5165\u7f13\u5b58\u4e2d\u7684\u6570\u636e\u6b63\u5728\u6bd4\u8f83\u7684\u65f6\u5019\uff0c\u53e6\u5916\u4e24\u4e2a\u8f93\u5165\u7f13\u5b58\u53ef\u4ee5\u540c\u65f6\u5e76\u884c\u5730\u8bfb\u5165\u65b0\u7684\u6570\u636e</p> <p></p> <p>\u8fd9\u91cc\u89e3\u91ca\u4e3a\u4ec0\u4e48k\u592a\u5927\u65f6\uff0ck\u8def\u5408\u5e76\u5c3d\u7ba1\u51cf\u5c11\u4e86pass\u7684\u6570\u91cf\uff0c\u4f46\u662f\u5e76\u4e0d\u4e00\u5b9a\u66f4\u4f18\u7684\u539f\u56e0</p> <p><code>\u8fd9\u662f\u56e0\u4e3a\uff1a\u7531\u4e8e\u6211\u4eec\u5c06\u5185\u5b58\u533a\u57df\uff0c\u5212\u5206\u4e3a2k\u4e2a\u8f93\u5165\u7f13\u5b58\u533a\u548c2\u4e2a\u8f93\u51fa\u7f13\u5b58\u533a\uff0c\u5f53k\u5f88\u5927\u7684\u65f6\u5019\uff0c\u8f93\u5165\u7f13\u5b58\u5c31\u4f1a\u5212\u5206\u7684\u5f88\u7ec6\uff0c\u4e00\u6b21\u80fd\u591f\u8bfb\u5165\u5230\u8f93\u5165\u7f13\u5b58\u7684\u6570\u636e\u5c31\u4f1a\u5f88\u5c11\uff0cblock\u7684\u5927\u5c0f\u964d\u4f4e\uff0c\u4ece\u800c\u5bfc\u81f4seek\u65f6\u95f4\u5927\u5927\u589e\u591a\uff08I/O\u7684\u6b21\u6570\u589e\u591a\uff09\u3002\u5c3d\u7ba1pass\u7684\u6b21\u6570\u51cf\u5c11\uff0c\u4f46\u662fI/O\u64cd\u4f5c\u6b21\u6570\u589e\u52a0\uff0c\u5f62\u6210\u4e00\u4e2a\u6743\u8861\u3002\u6240\u4ee5\u5bf9\u4e8ek\u5b58\u5728\u4e00\u4e2a\u6700\u4f18\u503c\uff0c\u6839\u636e\u5b9e\u9645\u8fdb\u884c\u9009\u53d6</code></p>"},{"location":"ADS/15.%20External%20Sorting/#156-\u66ff\u6362\u9009\u62e9","title":"15.6 \u66ff\u6362\u9009\u62e9","text":"<p>\u8fc4\u4eca\u6211\u4eec\u5df2\u7ecf\u7528\u5230\u7684\u7b56\u7565\u662f\u6bcf\u4e2arun\u7684\u5927\u5c0f\u90fd\u662f\u5185\u5b58\u7684\u5927\u5c0f\uff0c\u7136\u800c\u4e8b\u5b9e\u4e0a\u8fd9\u4e00\u957f\u5ea6\u8fd8\u53ef\u4ee5\u8fdb\u4e00\u6b65\u6269\u5c55\u3002</p> <p>\u539f\u56e0\u5728\u4e8e\uff0c\u6211\u4eec\u67d0\u4e2a\u5185\u5b58\u4f4d\u7f6e\u4e2d\u7684\u5143\u7d20\u4e00\u65e6\u5199\u5165\u78c1\u76d8\u4e86\uff0c\u8fd9\u4e2a\u5185\u5b58\u4f4d\u7f6e\u5c31\u53ef\u4ee5\u7a7a\u51fa\u6765\u7ed9\u6570\u7ec4\u540e\u7eed\u7684\u5143\u7d20\u4f7f\u7528\u3002<code>\u53ea\u8981\u540e\u7eed\u7684\u5143\u7d20\u6bd4\u73b0\u5728\u5199\u5165\u7684\u66f4\u5927\uff0c\u5c31\u53ef\u4ee5\u7ee7\u7eed\u5f80run\u540e\u9762\u6dfb\u52a0\u8be5\u5143\u7d20</code>\u3002PPT \u7b2c10 \u9875\u7ed9\u51fa\u4e86\u5f88\u6e05\u6670\u7684\u52a8\u6001\u4f8b\u5b50\uff0c\u6211\u4eec\u5728\u5185\u5b58\u4e2d\u7ef4\u62a4\u4e00\u4e2a\u4f18\u5148\u961f\u5217\uff0c<code>\u6bcf\u6b21\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u6bd4\u5f53\u524drun\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u66f4\u5927\u7684\u6700\u5c0f\u7684\u5143\u7d20\u5199\u5165\u78c1\u76d8</code>\uff0c\u7136\u540e\u518d\u4ece\u78c1\u76d8\u4e2d\u8bfb\u5165\u4e00\u4e2a\u5143\u7d20\u653e\u5165\u961f\u5217\u4e2d\uff0c\u76f4\u5230\u961f\u5217\u4e2d\u7684\u5143\u7d20\u90fd\u6bd4run\u7684\u6700\u540e\u4e00\u4e2a\u8981\u5c0f\uff0c\u5c31\u5f00\u542f\u4e00\u4e2a\u65b0\u7684run\u3002</p> <p><code>\u5728\u5e73\u5747\u60c5\u51b5\u4e0b\uff0c\u66ff\u6362\u9009\u62e9\u751f\u6210\u7684run\u7684\u957f\u5ea6\u4e3a2M\uff0c\u5176\u4e2dM\u65f6\u5185\u5b58\u7684\u5927\u5c0f\u3002\u968f\u7740M\u7684\u589e\u5927\uff0c\u610f\u5473\u7740run\u7684\u6570\u91cf\u5c06\u4f1a\u51cf\u5c11\uff08N/2M\uff09\uff0c\u56e0\u6b64\u5408\u5e76\u7684pass\u6b21\u6570\u4e5f\u5c06\u51cf\u5c11\uff0c\u4ece\u800c\u51cf\u5c11I/O\u64cd\u4f5c\u7684\u6b21\u6570</code></p> <p>\u73b0\u5728\u53d8\u6210\u5f52\u5e76\u6bb5\u6709\u957f\u6709\u77ed\uff0c\u9700\u8981\u51b3\u5b9a\u5f52\u5e76\u7684\u6b21\u5e8f</p> <p></p> <p><code>\u5982\u4f55\u51b3\u5b9a\u5f52\u5e76\u7684\u6b21\u5e8f\uff1f\u6700\u4f18\u89e3\u662f\u91c7\u7528huffman\u6811\uff0c\u8ba9\u957f\u7684run\u5c3d\u53ef\u80fd\u5c11\u53c2\u4e0e\u5408\u5e76\uff0c\u90a3\u4e48\u663e\u7136\u8d2a\u5fc3\u5730\u4e0d\u65ad\u9009\u62e9\u6700\u5c0f\u7684\u4e24\u4e2arun\u8fdb\u884c\u5408\u5e76\u662f\u6700\u4f18\u7684\u3002</code></p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\n#define MAXSIZE 100000 + 5\nint main()\n{\n    int n, m;\n    scanf(\"%d %d\", &amp;n, &amp;m);\n    int temp[MAXSIZE];\n    // ans[i]\u8868\u793arun\u7684\u96c6\u5408\uff0ci\u8868\u793a\u7b2ci\u4e2arun\n    // temp1\u4e3afirst run\uff0ctemp2\u4e3asecond run\n    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt; &gt; ans[100000], temp1, temp2;\n    // ans\u7684\u4e0b\u6807\n    int index = 0; \n    for(int i = 0; i &lt; n; i++)\n    {\n        scanf(\"%d\", &amp;temp[i]);\n        if(i &lt; m)\n        {\n            // \u5c06\u524dm\u4e2a\u6570\u653e\u5165first run\u4e2d\n            temp1.push(temp[i]);\n            ans[index].push(temp[i]);\n        }\n        else\n        {\n            // \u5982\u679ctemp[i]\u6bd4first run\u4e2d\u7684\u6700\u5c0f\u503c\u5927\uff0c\u6ee1\u8db3\u5f53\u524d\u96c6\u5408\u7684\u8981\u6c42\n            if(temp[i] &gt; temp1.top())\n            {\n                // \u5220\u9664first run\u4e2d\u7684\u6700\u5c0f\u503c\n                temp1.pop();\n                // \u5c06temp[i]\u653e\u5165first run\u4e2d\u7684\u672b\u5c3e\n                temp1.push(temp[i]);\n                // \u5c06temp[i]\u653e\u5165\u6700\u7ec8\u7ed3\u679cans[cnt]\n                ans[index].push(temp[i]);\n            }\n            else\n            {\n                // \u5426\u5219\uff0c temp[i]\u6bd4first run\u4e2d\u7684\u6700\u5c0f\u503c\u8fd8\u5c0f\uff0c\u65b0\u5efa\u4e00\u4e2aans[cnt + 1]\u96c6\u5408\n                temp1.pop();\n                // \u5c06temp[i]\u653e\u5165second run\u4e2d\n                temp2.push(temp[i]);\n                // \u5c06temp[i]\u653e\u5165\u4e0b\u4e00\u4e2a\u96c6\u5408\u4e2d\n                ans[index + 1].push(temp[i]);\n            }\n\n            // \u5982\u679cfirst run\u4e3a\u7a7a\uff0ctemp1\u4e2d\u6ca1\u6709\u5143\u7d20\n            if(temp1.size() == 0 || i == n - 1 &amp;&amp; temp2.size() != 0)\n            {\n                // \u5c06second run\u4e2d\u7684\u5143\u7d20\u653e\u5165first run\u4e2d\n                temp1 = temp2;\n                // temp2\u6e05\u7a7a\n                temp2 = priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt; &gt;();\n                // index++\u610f\u5473\u7740\u5230\u4e0b\u4e00\u4e2arun\n                index++;\n            }\n        }\n\n    }\n    // \u6253\u5370\u7ed3\u679c\uff0c\u6bcf\u4e00\u884c\u6700\u540e\u4e00\u4e2a\u6570\u540e\u9762\u6ca1\u6709\u7a7a\u683c\n    for(int i = 0; i &lt;= index ; i++)\n    {\n        if(ans[i].size() &gt; 1)\n        {\n            while(ans[i].size() &gt; 1)\n            {\n                printf(\"%d \", ans[i].top());\n                ans[i].pop();\n            }\n        }\n        printf(\"%d\\n\", ans[i].top());\n    }\n}\n</code></pre>"},{"location":"ADS/2.%20Red%20Black%20Tree%20%26%20B%2B%20Tree/","title":"\u4e8c. Red Black Tree &amp; B+ Tree","text":"<p> \u7ea6 3364 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 17 \u5206\u949f</p>"},{"location":"ADS/2.%20Red%20Black%20Tree%20%26%20B%2B%20Tree/#21-red-black-tree","title":"2.1 Red Black Tree","text":"<p>\u7ea2\u9ed1\u6811\u662f\u6ee1\u8db3\u5982\u4e0b\u6027\u8d28\u7684\u4e00\u79cd\u4e8c\u53c9\u641c\u7d22\u6811\uff1a</p> <ol> <li> <p>Every node is either red or black.</p> </li> <li> <p>The root is black.</p> </li> <li> <p>Every leaf (<code>NIL</code>) is black.</p> </li> <li> <p>if a node is red, then both its children are black.</p> </li> <li> <p>For each node, all simple paths from the node to descendant leaves contain the same number of black nodes.</p> </li> </ol> <p>\u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u4ece\u8be5\u7ed3\u70b9\u5230\u540e\u4ee3\u53f6\u5b50\u7684\u6240\u6709\u7b80\u5355\u8def\u5f84\u90fd\u5305\u542b\u76f8\u540c\u6570\u91cf\u7684\u9ed1\u8272\u7ed3\u70b9\u3002</p> <p>\u6ce8\u610f\u70b9\uff1a</p> <p><code>1. \u7ea2\u7ed3\u70b9\u7684\u7236\u7ed3\u70b9\u4e00\u5b9a\u4e3a\u9ed1\u7ed3\u70b9</code></p> <p><code>2. \u6027\u8d283\uff0c\u6240\u6709\u7684NULL leaf \u90fd\u662fblack\uff0c\u4f60\u770b\u5230\u7684leaf\u4e0d\u662fNULL\uff0c\u4f46\u662f\u5b83\u7684\u5de6\u53f3\u7ed3\u70b9\u662fNULL\uff0c\u672a\u663e\u793a\u7684\u5de6\u53f3\u513f\u5b50\u4e5f\u662f\u9ed1\u7ed3\u70b9\u3002</code></p> <p>\u6b64\u5904\u53f6\u5b50\u7ed3\u70b9\u88ab\u91cd\u65b0\u5b9a\u4e49\uff0c\u79f0\u6240\u6709\u4e24\u4e2a\u5b50\u7ed3\u70b9\u90fd\u662fNULL\u7684\u7ed3\u70b9\u4e3a\u672b\u7aef\u7ed3\u70b9\uff08\u4e5f\u5c31\u662f\u4f20\u7edf\u610f\u4e49\u4e0a\u7684leaf\uff09</p> <p><code>3. \u7531\u6027\u8d285\u5f97\uff0c\u5408\u6cd5\u7ea2\u9ed1\u6811\u7684\u7ea2\u8272\u7ed3\u70b9\u7684\u4e24\u4e2a\u5b50\u7ed3\u70b9\uff08\u5b58\u5728\u4e14\u4e3a\u9ed1\u8272\uff09\u4e00\u5b9a\u90fd\u662f\u53f6\u5b50\u6216\u8005\u90fd\u4e0d\u662f\u53f6\u5b50\uff0c\u4e0d\u7136\u4ece\u7ea2\u7ed3\u70b9\u51fa\u53d1\uff0c\u5230\u4e24\u4e2a\u5b50\u7ed3\u70b9\uff0c\u5305\u542b\u4e0d\u540c\u6570\u91cf\u7684\u9ed1\u8272\u7ed3\u70b9</code></p> <p><code>4. \u6211\u4eec\u79f0NIL \u4e3a\u5916\u90e8\u7ed3\u70b9(external)\uff0c\u5176\u4f59\u6709\u952e\u503c\u7684\u7ed3\u70b9\u4e3a\u5185\u90e8\u7ed3\u70b9(internal)\u3002</code></p> <p></p> <p>\u4e0a\u56fe\u7684\u7ea2\u9ed1\u6811\u662f\u5426\u5408\u6cd5\uff1f</p> <p><code>16</code> \u53f7\u7ed3\u70b9\u7684\u53f3\u513f\u5b50\u662f\u4e00\u4e2a\u9ed1\u53f6\u5b50\uff08NULL\uff09\uff0c\u800c\u8fd9\u4e2a\u53f6\u5b50\u5230\u6839\u7684\u8def\u5f84\u4e0a\u53ea\u6709 3 \u4e2a\u9ed1\u7ed3\u70b9\uff0c\u800c\u5176\u4ed6\u53f6\u5b50\u5230\u6839\u90fd\u6709 4 \u4e2a\u9ed1\u7ed3\u70b9\u3002</p> <p><code>black height</code>\u7684\u5b9a\u4e49\uff1a</p> <p>\u7279\u5b9a\u7ed3\u70b9\u7684\u9ed1\u9ad8\uff0c\u7b49\u4e8e\u8be5\u7ed3\u70b9\u5230\u53f6\u7ed3\u70b9(NIL)\u5230\u7b80\u5355\u8def\u5f84\u4e2d\uff08\u4e0d\u5305\u62ec\u81ea\u8eab\uff09\uff0c\u9ed1\u8272\u7ed3\u70b9\u7684\u6570\u91cf\u3002\u8bb0\u4f5c\\(bh(X)\\),\u5176\u4e2d\u6574\u68f5\u7ea2\u9ed1\u6811\u7684\u9ed1\u9ad8\u4e5f\u5c31\u662f\u6839\u7ed3\u70b9\u7684\u9ed1\u9ad8</p> <p>\u3010lemma\u3011\u4e00\u4e2a\u6709 \\(N\\) \u4e2a\u5185\u90e8\u7ed3\u70b9\uff08\u4e0d\u5305\u62ec\u53f6\u5b50\u7ed3\u70b9\uff09\u7684\u7ea2\u9ed1\u6811\uff0c\u5176\u9ad8\u5ea6\u6700\u5927\u4e3a \\(2log_\u20612(N + 1)\\)\u3002</p> <p>\u3010lemma\u3011\\(bh(Tree) &gt;= h(Tree)/2\\) \u9ed1\u7ed3\u70b9\u7684\u6570\u91cf\u81f3\u5c11\u5360\u6811\u9ad8\u7684\u4e00\u534a</p> <p></p> <ol> <li>\u7ea2\u9ed1\u6811\u7ed3\u70b9\u6700\u5c11\u60c5\u51b5\uff0c\u5168\u662f\u9ed1\u7ed3\u70b9\uff0c\u6b64\u65f6\u5c31\u662f\u4e8c\u5206\u641c\u7d22\u6811\uff0c\u4e8c\u5206\u641c\u7d22\u6811\\(sizeof(x) = 2^{h(x)} - 1\\)\u3002<code>\u8bf7\u6ce8\u610f\u6b64\u5904\u4e3a\u5185\u90e8\u7ed3\u70b9</code>\u5927\u4e8e\u662f\u56e0\u4e3a\u6b64\u65f6\u7684\u4e8c\u5206\u641c\u7d22\u6811\u5e76\u4e0d\u4e00\u5b9a\u662f\u5b8c\u5168\u5e73\u8861\u4e8c\u53c9\u6811**</li> <li>\\(bh(child) = bh(x)\\ or \\ bh(x)-1\\), \u5206\u522b\u5bf9\u5e94child\u662f\u5426\u4e3a\u9ed1\u7ed3\u70b9</li> <li>$sizeof(x) = 1 + 2 \\times sizeof(child) &gt;= 1 + 2 \\times (2^{bh(child)}-1) &gt;= 2 \\times 2^{bh(x)-1} -1 = 2^{bh(x)}-1 $</li> <li>\u7ea2\u7ed3\u70b9\u7684\u5b69\u5b50\u4e00\u5b9a\u662f\u9ed1\u7ed3\u70b9\uff0c\u6240\u4ee5\u6709\u7ea2\u5fc5\u6709\u9ed1\uff0c\u4efb\u4f55\u8def\u5f84\u4e0a\u9ed1\u8272\u7ed3\u70b9\u5fc5\u5b9a\u5360\u5230\u81f3\u5c11\u4e00\u534a\u7684\u6570\u91cf</li> </ol>"},{"location":"ADS/2.%20Red%20Black%20Tree%20%26%20B%2B%20Tree/#211-insert","title":"2.1.1 Insert","text":"<p><code>\u524d\u60c5\u63d0\u8981\uff1a</code>\u5982\u679c\u63d2\u5165\u4e00\u4e2a\u7ea2\u8272\u7ed3\u70b9\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2aNULL\u7ed3\u70b9\u88ab\u7ea2\u8272\u7ed3\u70b9\u66ff\u4ee3\uff0c\u6b64\u65f6\u5e76\u4e0d\u4f1a\u6539\u53d8\u9ed1\u9ad8\u3002\u4f46\u662f\u9700\u8981\u6ee1\u8db3\u7ea2\u8272\u7ed3\u70b9\u4e92\u4e0d\u76f8\u90bb\u7684\u6027\u8d28\u3002</p> <p>\u5982\u679c\u63d2\u5165\u7684\u662f\u9ed1\u8272\u7ed3\u70b9\uff0c\u90a3\u4e48\u6027\u8d285\u4e00\u5b9a\u4f1a\u88ab\u6253\u7834\uff0c\u9ed1\u9ad8\u4e00\u5b9a\u4f1a\u52a01</p> <p>\u603b\u4f53\u601d\u8def\u4e3a\uff1a\u5148\u5c06\u7ea2\u9ed1\u6811\u5f53\u4f5c\u666e\u901a\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5c06\u76ee\u6807\u6570\u636e\u63d2\u5165\u5230\u4e66\u4e2d\u7684\u672b\u7aef\uff0c<code>\u5e76\u5c06\u5b83\u67d3\u6210\u7ea2\u8272</code>\uff0c\u518d\u8c03\u6574\u4f7f\u4e4b\u5728\u6ee1\u8db3\u9ed1\u9ad8\u4e0d\u53d8\u7684\u60c5\u51b5\u4e0b\uff0c\u7ea2\u8272\u7ed3\u70b9\u4e0d\u76f8\u90bb</p> <p>\u4e0d\u59a8\u5148\u5047\u8bbe\u6211\u4eec\u63d2\u5165\u7684\u662f\u7ea2\u8272\u7ed3\u70b9\u3002</p> <ul> <li> <p>\u5982\u679c\u63d2\u5728\u9ed1\u8272\u7ed3\u70b9\u4e0b\u9762\uff0c\u6ca1\u6709\u5f71\u54cd</p> </li> <li> <p>\u5982\u679c\u63d2\u5165\u7a7a\u6811\uff0c\u5219\u5c06\u7ea2\u7ed3\u70b9\u76f4\u63a5\u53d8\u4e3a\u9ed1\u7ed3\u70b9</p> </li> <li> <p>\u5982\u679c\u63d2\u5165\u5230\u7ea2\u8272\u7ed3\u70b9\u7684\u4e0b\u9762\uff0c\u6b64\u65f6\u7834\u574f\u4e86\u6027\u8d284</p> </li> <li> <p>case1\uff1a<code>X\u7684\u53d4\u53d4\uff08\u5373\u7236\u4eb2\u7684\u5144\u5f1f\uff09\u662f\u7ea2\u8272\u7684</code></p> <p></p> <p>\u8fd9\u91cc\u6240\u6709\u7684\u7ed3\u70b9\u90fd\u5e26\u5b50\u6811\uff0c\u81f3\u5c11\u4f1a\u6709NULL\u7ed3\u70b9</p> <p><code>\u89e3\u51b3\u65b9\u6cd5\uff1a\u7531\u4e8e\u7236\u7ed3\u70b9P\u548c\u53d4\u53d4\u7ed3\u70b9U\u90fd\u662f\u7ea2\u8272\u7684\uff0c\u5bfb\u6c42\u7237\u7237\u7ed3\u70b9G\u7684\u5e2e\u5fd9\uff0c\u6700\u540e\u5c06\u7236\u7ed3\u70b9P\u548c\u53d4\u53d4\u7ed3\u70b9U\u67d3\u9ed1\uff0c\u7237\u7237\u7ed3\u70b9\u67d3\u7ea2</code></p> <p>\u672c\u8d28\u5728\u4e8e\u5c06\u95ee\u9898\u5411\u4e0a\u63a8\uff0c\u6700\u5dee\u7684\u60c5\u51b5\u4e5f\u5c31\u662f\u5c06\u95ee\u9898\u4e00\u76f4\u63a8\u5230\u6839\u7ed3\u70b9\uff0c\u6b64\u65f6\u53ea\u9700\u8981\u5c06\u6839\u7ed3\u70b9\u67d3\u9ed1\u5373\u53ef</p> <p>\u4f46\u662f\u6240\u6709\u7ed3\u70b9\u4ecd\u7136\u6ee1\u8db3\u6027\u8d28\uff0c\u4ece\u8be5\u7ed3\u70b9\u51fa\u53d1\u5230\u540e\u4ee3\u53f6\u7ed3\u70b9\u7684\u5305\u542b\u76f8\u540c\u6570\u91cf\u7684\u9ed1\u7ed3\u70b9</p> </li> <li> <p>case2\uff1a<code>X\u7684\u53d4\u53d4\u662f\u9ed1\u7ed3\u70b9\uff0c\u4e14X\u662fP\u7684\u53f3\u5b69\u5b50</code></p> </li> <li> <p>case3\uff1a<code>X\u7684\u53d4\u53d4\u662f\u9ed1\u7ed3\u70b9\uff0c\u4e14X\u662fP\u7684\u5de6\u5b69\u5b50</code></p> <p></p> <p></p> <p>\u5bf9\u4e8ecase2\u5230case3\u7684\u8f6c\u53d8\uff0cX\u7ed5P\u70b9\u8fdb\u884c\u53f3\u65cb\uff08RR rotation\uff09</p> <p>\u5bf9\u4e8ecase3\u60c5\u51b5\uff0cG\u70b9\u7ed5X\u70b9\u8fdb\u884c\u5de6\u65cb\uff08LL rotation\uff09\uff0c\u6210\u529f\u89e3\u51b3\u95ee\u9898</p> <p>\u6700\u540e\u8fdb\u884c\u67d3\u8272\uff0c\u6839\u7ed3\u70b9\u4e3a\u9ed1\u8272\uff0c\u7b2c\u4e8c\u5c42\u4e3a\u7ea2\u8272</p> <p>\u5bf9\u4e8ecase2\uff0c\u53ef\u4ee5\u662f\u76f4\u63a5\u4f7f\u7528LR\u65cb\u8f6c\uff0c\u53ea\u9700\u8981\u4fdd\u8bc1\u6700\u7ec8\u6839\u7ed3\u70b9\u4e3a\u9ed1\u8272\uff0c\u7b2c\u4e8c\u5c42\u4e3a\u7ea2\u8272</p> <p></p> <p></p> </li> </ul> <p>\u5373\u5982\u679c\u63d2\u5165\u540e\u76f4\u63a5\u843d\u5165\u60c5\u51b5\u4e09\uff0c\u53ea\u9700\u8981\u4e00\u6b21\u65cb\u8f6c\u67d3\u8272\u5373\u53ef\u89e3\u51b3\u3002\u76f4\u63a5\u843d\u5165\u60c5\u51b5\u4e8c\uff0c\u4e00\u6b21\u65cb\u8f6c\u8fdb\u5165\u60c5\u51b5\u4e09\uff0c\u518d\u4e00\u6b21\u65cb\u8f6c\u67d3\u8272\u5373\u53ef\u89e3\u51b3\u3002\u4f46\u5982\u679c\u843d\u5165\u60c5\u51b5\u4e00\uff0c\u4e00\u6b21\u8c03\u6574\u540e\u53ef\u80fd\u8fd8\u5728\u60c5\u51b5\u4e00\uff0c\u53ef\u80fd\u76f4\u5230\u6700\u540e\u90fd\u662f\u901a\u8fc7\u60c5\u51b5\u4e00\u52a0\u4e0a\u67d3\u9ed1\u6839\u7ed3\u70b9\u89e3\u51b3\uff0c\u4e5f\u53ef\u80fd\u51e0\u6b21\u8c03\u6574\u540e\u8fdb\u5165\u60c5\u51b5\u4e8c\u6216\u4e09\u540e\u89e3\u51b3\u3002</p> <p><code>\u5b9a\u7406\uff1a</code> \u4e00\u68f5\u6709n\u4e2a\u5185\u90e8\u7ed3\u70b9\u7684\u7ea2\u9ed1\u6811\uff0c\u63d2\u5165\u4e00\u4e2a\u7ed3\u70b9\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(logN)\\)</p> <p>\u6839\u636e\u4e0a\u8ff0\u6d41\u7a0b\uff0c\u7ea2\u9ed1\u6811\u63d2\u5165\u6700\u591a\u7684\u65cb\u8f6c\u6b21\u6570\u4e3a2\u6b21\uff08\u56e0\u4e3a\u53ea\u6709\u60c5\u51b52 \u548c3 \u4f1a\u8981\u65cb\u8f6c\u8fdb\u5165\u60c5\u51b52 \u540e1 \u6b21\u65cb\u8f6c\u5fc5\u5b9a\u8fdb\u5165\u60c5\u51b53\uff0c\u8fdb\u5165\u60c5\u51b53 \u540e1 \u6b21\u65cb\u8f6c\u5fc5\u5b9a\u89e3\u51b3\uff09\uff0c\u6539\u53d8\u989c\u8272\u6700\u591a\u662f\\(O(logN)\\)\u6b21\uff0c\u5728\u60c5\u51b52\u30013\u53ea\u9700\u8981\u67d3\u4e00\u6b21\u8272\uff0c\u60c5\u51b51\u6700\u5dee\u4e5f\u662f\u6bcf\u4e24\u5c42\u67d3\u4e00\u6b21\u8272\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u77e5\u7ea2\u9ed1\u6811\u7684\u6700\u5927\u9ad8\u5ea6\u4e3a\\(O(logN)\\)\u3002</p> <p>\u56e0\u6b64\u63d2\u5165\u64cd\u4f5c\uff0c\u9664\u4e86\\(O(logN)\\)\u7684\u641c\u7d22\u65f6\u95f4\u5916\uff0c\u4ec5\u5269\u5e38\u6570\u6b21\u7684\u65cb\u8f6c\u548c\\(O(logN)\\)\u6b21\u7684\u67d3\u8272\uff0c\u6700\u540e\u4ecd\u4e3a\\(O(logN)\\)\u7684\u65f6\u95f4\u590d\u6742\u5ea6</p> <p></p> <p>\u4e00\u5b9a\u4f1a\u6709\u7ea2\u8272\u3002\u6570\u5b66\u5f52\u7eb3\u6cd5\u8fdb\u884c\u8bc1\u660e</p> <ol> <li>\u5f53\\(n=2\\)\u65f6\uff0c\u5728\u9ed1\u8272\u6839\u7ed3\u70b9\u7684\u4e0b\u65b9\u63d2\u5165\u4e00\u4e2a\u7ea2\u7ed3\u70b9\uff0c\u4e0d\u4ea7\u751f\u4efb\u4f55\u8d1f\u9762\u5f71\u54cd\uff0c\u7ea2\u8272\u7ed3\u70b9\u6570+1</li> <li>\u5982\u679c\u4ee5\u540e\u63d2\u5165\u7ea2\u7ed3\u70b9\u540e\u4e0d\u9700\u8981\u8c03\u6574\uff0c\u5219\u7ea2\u8272\u7ed3\u70b9\u6570\u91cf\u589e\u52a0</li> <li>\u5982\u679c\u9700\u8981\u8c03\u6574\uff0c\u4e5f\u5c31\u662f\u5bf9\u5e94\\(case1-3\\)</li> <li>\u5bf9\u4e8ecase1\uff0c\\(X,G\\)\u4e00\u5b9a\u4e3a\u7ea2\u8272\u7ed3\u70b9\uff0c\u5373\u4f7f \u6700\u540e\\(G\\)\u4e0d\u65ad\u5411\u4e0a\u63a8\u79fb\u5230\u6839\u7ed3\u70b9\u540e\u88ab\u67d3\u9ed1\uff0c\\(X\\)\u4f9d\u7136\u4fdd\u6301\u7ea2\u8272</li> <li>\u5bf9\u4e8ecase2\uff0c\u7ecf\u8fc7\u65cb\u8f6c\uff0c\u53d4\u53d4\u7ed3\u70b9\u7684\u8fd1\u4f84\u5b50\u53d8\u4e3a\u8fdc\u4f84\u5b50\uff0c\u7ea2\u8272\u7ed3\u70b9\u6570\u4e0d\u53d8</li> <li>\u5bf9\u4e8ecase3\uff0c\u518d\u6b21\u65cb\u8f6c\u540e\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u6839\u7ed3\u70b9\u4e3a\u9ed1\u8272\uff0c\u7b2c\u4e8c\u5c42\u5747\u4e3a\u7ea2\u7ed3\u70b9</li> </ol>"},{"location":"ADS/2.%20Red%20Black%20Tree%20%26%20B%2B%20Tree/#212-delete","title":"2.1.2 Delete","text":"<p>\u4e0d\u8003\u8651\u7ea2\u9ed1\u6811\uff0cBST\u7ed3\u70b9\u5220\u9664\u7684\u56de\u987e</p> <ul> <li> <p>Delete a leaf node: reset its parent link to NULL \u5982\u679cX\u6ca1\u6709\u5b69\u5b50\uff0c\u76f4\u63a5\u5220\u9664\u5c31\u597d</p> </li> <li> <p>Delete a degree 1 node: replace the node by its single child \u5982\u679cX\u53ea\u6709\u4e00\u4e2a\u5b69\u5b50\uff0c\u90a3\u8ba9\u5b69\u5b50\u63a5\u66ffX\u7684\u4f4d\u7f6e</p> </li> <li> <p>Delete a degree 2 node: </p> </li> <li> <p>Replace the node by the largest one in its left subtree or the smallest one in its right subtree.</p> </li> <li> <p>Delete the replacing node from the subtree.</p> <p>\u5982\u679cX\u6709\u4e24\u4e2a\u5b69\u5b50\uff0c\u90a3\u5c31\u8ba9X\u4e0e\u5de6\u5b50\u6811\u7684\u6700\u5927\u7ed3\u70b9\u4ea4\u6362\uff0c\u7136\u540e\u5220\u9664X</p> <p><code>\u6b64\u65f6X\u6240\u5728\u4f4d\u7f6e\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u5b69\u5b50\u7ed3\u70b9\uff0c\u56e0\u4e3a\u5de6\u5b50\u6811\u7684\u6700\u5927\u503c\u6ca1\u6709\u53f3\u5b69\u5b50\uff0c\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u503c\u6ca1\u6709\u5de6\u5b69\u5b50</code></p> </li> </ul> <p>\u7ea2\u9ed1\u6811\u7684\u5220\u9664\u5728\u6b64\u57fa\u7840\u4e0a\u5c55\u5f00\uff0c\u5bf9\u4e8e\u7b2c\u4e09\u79cd\u60c5\u51b5\uff0cX\u4e0e\u5de6\u5b50\u6811\u7684\u6700\u5927\u503c\u8fdb\u884c\u4ea4\u6362\uff0c<code>\u4ea4\u6362\u7684\u4ec5\u4ec5\u662f\u952e\u503c\uff0c\u989c\u8272\u5e76\u6ca1\u6709\u4ea4\u6362</code>\uff0c\u5426\u5219\u7ea2\u7ed3\u70b9\u53ef\u80fd\u6362\u5230\u6839\u7ed3\u70b9\uff08\u867d\u7136\u53ef\u4ee5\u67d3\u9ed1\uff09\uff0c\u9ed1\u7ed3\u70b9\u6362\u5230\u4e0b\u65b9\uff0c\u6781\u6709\u53ef\u80fd\u9020\u6210\u6027\u8d285\u88ab\u7834\u574f\u3002</p> <p>\u5e76\u4e14\u7b2c\u4e09\u79cd\u60c5\u51b5\u7ecf\u8fc7\u4ea4\u6362\u540e\uff0c\u4f1a\u76f4\u63a5\u8f6c\u5316\u4e3a\u7b2c\u4e00\u3001\u7b2c\u4e8c\u79cd\u60c5\u51b5\u3002</p> <p>\u5bf9\u4e8e\u60c5\u51b5\u4e00\uff0c\u63a5\u66ff\u88ab\u5220\u9664\u7ed3\u70b9\u7684\u662fNULL</p> <p>\u5bf9\u4e8e\u60c5\u51b5\u4e8c\uff0c\u88ab\u5220\u9664\u7ed3\u70b9\u7684\u5b50\u7ed3\u70b9\u63a5\u66ff\u4f4d\u7f6e\u3002\u5982\u679c\u88ab\u5220\u9664\u7ed3\u70b9\u4e3a\u7ea2\u7ed3\u70b9\uff08\u4f3c\u4e4e\u4e0d\u592a\u53ef\u80fd\uff0c\u6027\u8d285\uff0c\u7ea2\u7ed3\u70b9\u7684\u4e24\u4e2a\u5b50\u7ed3\u70b9\u90fd\u4e3a\u9ed1\u8272\uff0c\u8981\u4e48\u90fd\u4e3a\u53f6\u5b50\uff0c\u8981\u4e48\u90fd\u4e0d\u4e3a\uff09\u3002\u5982\u679c\u5220\u9664\u7684\u662f\u9ed1\u8272\uff0c<code>\u63a5\u66ff\u4e0a\u6765\u662f\u7ea2\u8272\uff0c\u67d3\u9ed1\u5373\u53ef\uff0c\u6027\u8d285\u4ecd\u7136\u6ee1\u8db3\u3002</code> <code>\u63a5\u66ff\u4e0a\u6765\u662f\u9ed1\u8272\uff0c\u8fd9\u8be5\u5982\u4f55\u5904\u7406\uff0c\u663e\u7136\u6cbf\u7740\u5b50\u6811\u7684\u8def\u5f84\uff0c\u9ed1\u8272\u7ed3\u70b9\u6570\u5c11\u4e86\u4e00</code></p> <p>\u4e3a\u4e86\u89e3\u51b3\u5220\u9664\u9ed1\u8272\uff0c\u63a5\u66ff\u7ed3\u70b9\u4e3a\u9ed1\u8272\uff0c\u6cbf\u5b50\u6811\u8def\u5f84\u9ed1\u8272\u7ed3\u70b9\u6570\u51cf\u4e00 Must add 1 black to the path of the replacing node.<code>\u76f4\u63a5\u7ed9\u66ff\u6362\u4e0a\u6765\u7684\u9ed1\u8272\u518d\u52a0\u4e00\u91cd\u9ed1\u8272\uff0c\u53d8\u6210\u53cc\u9ed1</code> </p> <p>\u4ee5\u4e0bX \u5728\u6b64\u5904\u5219\u8868\u793a\u53cc\u9ed1\u7ed3\u70b9\uff0c\u56fe\u4e2d\u7528\u9ed1\u8272\u5706\u5708\u548c\u5706\u65c1\u8fb9\u7684\u52a0\u53f7\u8868\u793a\u53cc\u9ed1\uff0c\u84dd\u8272\u8868\u793a\u989c\u8272\u65e0\u6240\u8c13\uff0c\u53ef\u7ea2\u53ef\u9ed1\u3002</p> <ul> <li>case1\uff1aX\u7684\u5144\u5f1f\u662f\u7ea2\u8272\u7684</li> </ul> <p></p> <p>   $$   \u7236\u5144\u6362\u8272 + \u53f3\u65cb   $$   \u7531\u4e8e\u539f\u5148\u7684\u6811\u6ee1\u8db3\u7ea2\u9ed1\u6811\u5b9a\u4e49\u7b2c\u56db\u6761\uff0c\u56e0\u6b64\u6b64\u65f6\u7236\u7ed3\u70b9\u4e00\u5b9a\u662f\u9ed1\u8272\u3002\u6211\u4eec\u7684\u60f3\u6cd5\u5f88\u7b80\u5355\uff0c\u5144\u5f1f\u662f\u7ea2\u8272\uff0c\u90a3\u5c31\u5e0c\u671b\u5144\u5f1f\u80fd\u4e24\u808b\u63d2\u5200\uff0c\u628a\u5144\u5f1f\u8f6c\u4e0a\u53bb\uff0c\u4e3a\u4e86\u4fdd\u6301\u7ea2\u9ed1\u6811\u6027\u8d28\uff0c\u5f88\u53ef\u60dc\u53ea\u80fd\u628a\u7236\u4eb2\u67d3\u7ea2\uff0c\uff0c\u81ea\u5df1\u8fd8\u627f\u53d7\u53cc\u9ed1debuff\u3002\u4f46\u662f\u597d\u5904\u5728\u4e8e\uff0c\u8fd9\u4e2a\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86\u63a5\u4e0b\u6765\u7684\u60c5\u51b5\u4e8c\u4e09\u56db\u4e2d\u7684\u4e00\u79cd\uff0c\u6211\u4eec\u6765\u770b\u5982\u4f55\u89e3\u51b3\u3002</p> <ul> <li>case2\uff1aX\u7684\u5144\u5f1f\u662f\u9ed1\u8272\u7684\uff0c\u4e14\u5144\u5f1f\u7684\u4e24\u4e2a\u5b69\u5b50\uff08\u6839\u636e\u8fdc\u8fd1\u5212\u5206\u4e3a\u8fdc\u4f84\u5b50\u548c\u8fd1\u4f84\u5b50\uff09\u90fd\u662f\u9ed1\u8272\u7684</li> </ul> <p></p> <p></p> <p>\u73b0\u5728\u8fd9\u4e2a\u60c5\u51b5\u4eceP\u89c6\u89d2\u51fa\u53d1\uff0c\u6ee1\u8db3\u6027\u8d285\u3002\u6240\u4ee5\u4e3a\u4e86\u7f13\u51cf\u53cc\u9ed1\u8fd9\u4e2adebuff\uff0c\u6211\u5c06\u53cc\u9ed1\u63a8\u7ed9\u7236\u4eb2\uff0c\u8fd9\u65f6\u6027\u8d285\u88ab\u6253\u7834\u4e86\uff0c\u5144\u5f1f\u88ab\u8feb\u53d8\u4e3a\u7ea2\u8272</p> <ul> <li>\u5982\u679c\u7236\u7ed3\u70b9\u672c\u8eab\u4e3a\u7ea2\u8272\uff0c<code>\u5728\u53cc\u9ed1\u52a0\u6301\u4e0b\uff0c\u53d8\u4e3a\u9ed1\u8272\uff0c\u6070\u597d\u5f25\u8865\u9ed1\u8272\u5c11\u4e00\u7684\u60c5\u51b5\uff0c\u95ee\u9898\u89e3\u51b3</code></li> <li>\u5982\u679c\u7236\u7ed3\u70b9\u672c\u8eab\u4e3a\u9ed1\u8272\uff0c\u90a3\u5c31\u53d8\u4e3a\u53cc\u9ed1\uff0c\u95ee\u9898\u5411\u6839\u7ed3\u70b9\u9760\u8fd1</li> <li> <p>\u5047\u5982\u4ececase1\u53d8\u4e3acase2\uff0c\u7236\u7ed3\u70b9\u4e00\u5b9a\u4e3a\u7ea2\u8272\uff0c\u90a3\u4e48\u95ee\u9898\u76f4\u63a5\u89e3\u51b3</p> </li> <li> <p>case3 \uff1a X\u7684\u5144\u5f1f\u7ed3\u70b9\u662f\u9ed1\u8272\uff0c\u4f46\u662f\u8fd1\u4f84\u5b50\u662f\u7ea2\u8272\u7684\uff0c\u8fdc\u4f84\u5b50\u662f\u9ed1\u8272\u7684</p> </li> </ul> <p></p> <p></p> <p>\u6b64\u65f6\u7684\u7ea2\u8272\u5728\u7236\u4eb2\\(P\\)\u7684\\(RL\\)\u4f4d\u7f6e\u4e0a\uff0c\u56e0\u6b64\u5b9e\u73b0double rotation\u4e2d\u7684\u4e00\u4e2asingle rotation\uff08\u5de6\u65cb\uff09\u5c31\u80fd\u5f97\u5230\\(RR\\)\u60c5\u51b5</p> <p>\u5e76\u4e14\u6b64\u5904\u5b58\u5728\u989c\u8272\u53d8\u6362</p> <ul> <li>case4 : X \u7684\u5144\u5f1f\u662f\u9ed1\u8272\u7684\uff0c\u4e14\u8fdc\u4f84\u5b50\u662f\u7ea2\u8272\u7684\uff0c\u8fd1\u4f84\u5b50\u989c\u8272\u4efb\u610f</li> </ul> <p></p> <p></p> <p>\u6b64\u65f6\u5bf9\u5e94AVL\u6811\u7684RR\uff0c\u4e8e\u662f\u518d\u4e00\u6b21single rotation\u5373\u53ef\u628a\u53cc\u9ed1\u7684\u4e00\u91cd\u9ed1\u4e22\u7ed9\u7ea2\u8272\u8fdc\u4f84\u5b50\uff08\u5373\\(X,N_2\\)\u90fd\u53d8\u6210\u9ed1\u8272\uff09\uff0c\u4f46\u4e3a\u4e86\u4fdd\u8bc1\u7ea2\u9ed1\u6811\u6027\u8d28\u7684\u989c\u8272\u53d8\u6362\uff0cP\u548cS\u8fd8\u8981\u4ea4\u6362\u989c\u8272</p> <p></p> <p><code>\u5b9a\u7406</code>: \u4e00\u68f5\u6709n\u4e2a\u5185\u90e8\u7ed3\u70b9\u7684\u7ea2\u9ed1\u6811\u5220\u9664\u4e00\u4e2a\u7ed3\u70b9\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(logN)\\)</p> <ol> <li>\u6211\u4eec\u6700\u591a\u4f7f\u7528\\(O(logN)\\)\u7684\u65f6\u95f4\u627e\u5230\u5220\u9664\u7ed3\u70b9\uff0c\u8fdb\u884c\u4e00\u6b21\u4ea4\u6362\uff0c\u540e\u7eed\u8fdb\u884c\u5220\u9664\u64cd\u4f5c</li> <li>\u6700\u574f\u8fdb\u5165\u5220\u9664\u9ed1\u8272\uff0c\u63a5\u66ff\u70b9\u4e3a\u9ed1\u8272\u7684\u60c5\u51b5\uff0c\u5bf9\u4e8ecase1\uff0c\u5982\u679c\u8fdb\u5165case3\uff0ccase4\u80fd\u5feb\u901f\u89e3\u51b3\uff0c\u56e0\u4e3a4 \u53ef\u4ee5\u76f4\u63a5\u89e3\u51b3\uff0c3 \u76f4\u63a5\u8fdb\u51654 \u7136\u540e\u89e3\u51b3\u3002\u5982\u679c\u8fdb\u5165case2\uff0c\u4e5f\u56e0\u4e3a\u7236\u7ed3\u70b9\u4e3a\u7ea2\u8272\u76f4\u63a5\u89e3\u51b3\u3002</li> <li>\u5bf9\u4e8ecase2\uff0c\u53ef\u4ee5\u56e0\u4e3a\u7236\u7ed3\u70b9\u4e3a\u7ea2\u8272\u76f4\u63a5\u89e3\u51b3\uff0c\u4e5f\u80fd\u591a\u6b21\u591a\u6b21\u8fdb\u5165case2\uff0c\u6bcf\u6b21\u5411\u4e0a\u63a8\u4e00\u683c\uff0c\u7531\u4e8e\u6811\u9ad8\u4e3a\\(O(logN)\\),\u6240\u4ee5\u6700\u591a\u8fdb\u884c\\(O(logN)\\)\u6b21</li> <li>\u5bf9\u4e8ecase3\uff0ccase4\uff0c\u5747\u80fd\u5feb\u901f\u89e3\u51b3\u3002</li> </ol> <p></p>"},{"location":"ADS/2.%20Red%20Black%20Tree%20%26%20B%2B%20Tree/#22-b-tree","title":"2.2 B+ Tree","text":"<p>B+ \u6811\u662f\u4e00\u79cd\u7528\u6811\u72b6\u5f62\u5f0f\u7ef4\u62a4\u6709\u5e8f\u6570\u5217\u6bd4\u8f83\u4fe1\u606f\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5176\u589e\u6539\u64cd\u4f5c\u62e5\u76f8\u5bf9\u4e8e\u4e8c\u53c9\u6811\u7ed3\u6784\u66f4\u52a0\u7a33\u5b9a\u7684\u5bf9\u6570\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u901a\u5e38\u7528\u4e8e\u6570\u636e\u5e93\u548c\u64cd\u4f5c\u7cfb\u7edf\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\u3002</p> <p></p> <p>A B+ tree of order M is a tree with the following structural properties:</p> <ol> <li>The root is either a leaf or has between 2 and \\(M\\) children.    \u6839\u8981\u4e48\u662f\u53f6\u5b50\uff0c\u8981\u4e48\u5177\u6709 2 \u548c\\(M\\) \u5b50\u7ea7\u3002</li> <li>All nonleaf nodes (except the root) have between$ \u2308M/2\u2309$and M children.    \u6240\u6709\u975e\u53f6\u7ed3\u70b9\uff08\u6839\u9664\u5916\uff09\u90fd\u6709 \u2308M/2\u2309 \u548c M \u4e2a\u5b50\u7ed3\u70b9\u3002</li> <li>All leaves are at the same depth.    \u6240\u6709\u53f6\u5b50\u90fd\u5904\u4e8e\u76f8\u540c\u7684\u6df1\u5ea6\u3002</li> </ol> <p><code>\u6240\u6709\u771f\u5b9e\u7684\u6570\u636e\u90fd\u88ab\u5b58\u50a8\u5728\u53f6\u5b50\u7ed3\u70b9\u4e2d\uff0c\u5f62\u6210\u4e00\u4e2a\u6709\u5e8f\u7684\u6570\u5217\u3002\u800c\u975e\u53f6\u5b50\u7ed3\u70b9\uff08\u4e0d\u5305\u542broot\uff09\u4e2d\u7b2c$i$\u4e2a\u503c\u7b49\u4e8e\u7b2c$i+1$\u9897\u5b50\u6811\u7684\u6700\u5c0f\u503c\u3002\u5982\u4e0a\u56fe\u6240\u793a\u8868\u73b0\u4e3a\u989c\u8272\u76f8\u540c\u7684\u4e00\u5bf9\u4e0a\u4e0b\u7ed3\u70b9\u3002\u56e0\u6b64\u975e\u53f6\u7ed3\u70b9\u6700\u591a\u5b58 $M-1$\u4e2a\u503c\u3002</code></p> <p>\u62bd\u8c61\u5730\u6765\u8bf4\u5c31\u662f\uff0c\u6211\u4eec\u628a\u4e00\u4e2a\u6570\u5217\u76f8\u5bf9\u5747\u5300\u7684\u5206\u4e3a \\(m\\)\u5757\uff0c\u7136\u540e\u628a\u5206\u754c\u7684\u6570\u62ff\u51fa\u6765\u3002\u5f53\u6211\u4eec\u53bb\u67e5\u627e\u6216\u63d2\u5165\u65f6\uff0c\u53ea\u9700\u8981\u548c\u8fd9\u4e9b\u8fb9\u754c\u6570\u8fdb\u884c\u6bd4\u8f83\uff0c\u5c31\u77e5\u9053\u5b83\u5e94\u8be5\u653e\u5728\u54ea\u4e00\u5757\u91cc\u3002\u518d\u4e0d\u65ad\u7ec6\u5316\u7c92\u5ea6\uff0c\u7528\u7c7b\u4f3c\u4e8e\\(m\\)\u5206\u201d\u7684\u601d\u60f3\u6765\u627e\u5230\u76ee\u6807\u4f4d\u7f6e\u3002</p> <p>\u7531\u4e8e\u5b83\u5728\u7a7a\u95f4\u6700\u6d6a\u8d39\u7684\u60c5\u51b5\u4e0b\u662f\u4e00\u68f5 \\(\\lceil M/2 \\rceil\\) \u53c9\u6811\uff0c\u6240\u4ee5 B+ \u6811\u7684\u6df1\u5ea6\u662f \\(O(\\lceil \\log_{\\lceil M/2 \\rceil} N \\rceil)\\)\u3002</p>"},{"location":"ADS/2.%20Red%20Black%20Tree%20%26%20B%2B%20Tree/#221-\u67e5\u627e","title":"2.2.1 \u67e5\u627e","text":"<p>\u4f8b\u5982\uff0c\u6211\u4eec\u5728\u4e0a\u9762\u8fd9\u68f5\u6811\u4e2d\u627e <code>43</code> \u8fd9\u4e2a\u503c\uff0c\u6a59\u8272\u90e8\u5206\u8868\u793a\u6211\u4eec\u7684\u7126\u70b9\u3002</p> <p></p> <p>\u6211\u4eec\u53d1\u73b0\u6709 21\u226443&lt;48\uff0c\u6240\u4ee5\u987a\u7740\u6807\u8bc6\u7684\u6a59\u8272\u6307\u9488\u5411\u4e0b\u3002</p> <p></p> <p>\u6211\u4eec\u53d1\u73b0\u6709 41\u226443\uff0c\u6240\u4ee5\u987a\u7740\u6807\u8bc6\u7684\u6a59\u8272\u6307\u9488\u5411\u4e0b</p> <p></p> <p>\u5df2\u7ecf\u8d70\u5230\u53f6\u5b50\u7ed3\u70b9\uff0c\u6700\u540e\u53d1\u73b0\u6211\u4eec\u8981\u627e\u7684 <code>43</code>\u3002</p>"},{"location":"ADS/2.%20Red%20Black%20Tree%20%26%20B%2B%20Tree/#222-\u63d2\u5165","title":"2.2.2 \u63d2\u5165","text":"<p>Insert(46), no split</p> <p></p> <p></p> <p></p> <p>\u627e\u5230\u8981\u585e\u7684\u4f4d\u7f6e\u4e86\uff0c\u53d1\u73b0\u8981\u585e\u7684\u5730\u65b9\u662f <code>45</code> \u7684\u540e\u9762\uff0c\u63d2\u5165\u4ee5\u540e\u53d1\u73b0\u4e00\u5171 4 \u4e2a\u6570\uff0c\u800c \ufffd=4M=4\uff0c\u4e0d\u9700\u8981\u5206\u88c2\u3002</p> <p>Insert(44), split</p> <p></p> <p></p> <p></p> <p>\u627e\u5230\u8981\u585e\u7684\u4f4d\u7f6e\u4e86\uff0c\u53d1\u73b0\u8981\u585e\u7684\u5730\u65b9\u662f <code>45</code> \u7684\u524d\u9762\uff0c\u63d2\u5165\u4ee5\u540e\u53d1\u73b0\u4e00\u5171 5 \u4e2a\u6570\uff0c\u800c \ufffd=4M=4\uff0c\u9700\u8981\u5206\u88c2\uff01</p> <p></p> <p>\u5411\u4e0a\u9012\u5f52\uff0c\u6211\u4eec\u60b2\u75db\u5730\u53d1\u73b0\uff0c\u8fd9\u4e2a\u8282\u70b9\u5728\u5206\u88c2\u540e\u6709\u4e86 <code>5</code> \u4e2a\u5b50\u8282\u70b9\uff0c\u4e0d\u5f97\u4e0d\u518d\u6b21\u5206\u88c2\u3002</p> <p></p> <p>\u5411\u4e0a\u9012\u5f52\uff0c\u6211\u7684\u8001\u5929\u7237\u5440\uff0c\u600e\u4e48\u8fd8\u6ca1\u5230\u5934\uff01\u8fd9\u4e0b\u6211\u4eec\u8981\u5206\u88c2\u6839\u90e8\u4e86\uff01</p> <p></p> <p>\u7531\u4e8e\u6839\u90e8\u88ab\u88c2\u5f00\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u6839\uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u6811\u7684\u5c42\u6570\u589e\u9ad8\u4e86\u3002</p> <p>\u73b0\u5728\uff0c\u6211\u4eec\u7ec8\u4e8e\u5b8c\u6210\u4e86\u63d2\u5165\u3002</p>"},{"location":"ADS/3.%20Inverted%20File%20Index/","title":"\u4e09.Inverted File Index","text":"<p> \u7ea6 2671 \u4e2a\u5b57  35 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 14 \u5206\u949f</p>"},{"location":"ADS/3.%20Inverted%20File%20Index/#31-\u5012\u6392\u7d22\u5f15","title":"3.1 \u5012\u6392\u7d22\u5f15","text":"<p>\u5012\u6392\u7d22\u5f15\uff08inverted file index\uff09\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u6587\u672c\u68c0\u7d22\u6280\u672f\uff0c\u7528\u4e8e\u5feb\u901f\u67e5\u627e\u5305\u542b\u7279\u5b9a\u5355\u8bcd\u6216\u77ed\u8bed\u7684\u6587\u6863\u3002\u5b83\u901a\u8fc7\u5c06\u5355\u8bcd\u6216\u77ed\u8bed\u4f5c\u4e3a\u5173\u952e\u5b57\uff0c\u5e76\u5c06\u5b83\u4eec\u51fa\u73b0\u5728\u6587\u6863\u4e2d\u7684\u4f4d\u7f6e\u8bb0\u5f55\u5728\u4e00\u4e2a\u7d22\u5f15\u4e2d\uff0c\u4ece\u800c\u652f\u6301\u5feb\u901f\u7684\u6587\u672c\u68c0\u7d22\u3002\u5728\u641c\u7d22\u8fc7\u7a0b\u4e2d\uff0c\u7cfb\u7edf\u53ef\u4ee5\u5feb\u901f\u5730\u5b9a\u4f4d\u5305\u542b\u6307\u5b9a\u5355\u8bcd\u6216\u77ed\u8bed\u7684\u6587\u6863\uff0c\u5e76\u8fd4\u56de\u5b83\u4eec\u7684\u76f8\u5173\u4fe1\u606f\u3002\u5012\u6392\u7d22\u5f15\u5e7f\u6cdb\u5e94\u7528\u4e8e\u641c\u7d22\u5f15\u64ce\u3001\u6570\u636e\u5e93\u7cfb\u7edf\u548c\u4fe1\u606f\u68c0\u7d22\u7b49\u9886\u57df\u3002</p> <p>\u2014\u2014 ChatGPT</p> <p>\u200b    Wiki: https://en.wikipedia.org/wiki/Inverted_index</p> <p>Definition: Inverted file contains a list of pointers(e.g. the number of a page) to all occurrences of that term in the text.</p> <p>\u6240\u8c13\u7684\u5012\u6392\u7d22\u5f15\uff0c\u6240\u6709\u7684\u601d\u60f3\u90fd\u51dd\u7ed3\u5728\u4e86\u201c\u5012\u201d\uff0c\u4e5f\u5c31\u662f inverted\u3002\u5982\u679c\u53ef\u4ee5\uff0c\u6211\u89c9\u5f97\u7528\u201c\u9006\u201d\u66f4\u5408\u9002\u3002\u8fd9\u91cc\u7684\u7d22\u5f15\u5bf9\u8c61\u6307\u7684\u662f\u201c\u6587\u6863\u201d\u548c\u201c\u5355\u8bcd\u201d\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u800c\u5012\u6392\u7d22\u5f15\u7684\u610f\u601d\u662f\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5355\u8bcd\uff0c\u6211\u4eec\u8bb0\u5f55\u5b83\u51fa\u73b0\u5728\u54ea\u4e9b\u6587\u6863\u4e2d\uff0c\u4ee5\u53ca\u8bb0\u5f55\u4ed6\u4eec\u51fa\u73b0\u7684\u6b21\u6570\uff08\u9891\u7387\uff09\u3002</p> <p>\u641c\u7d22\u5f15\u64ce\u662f\u4e00\u4e2a\u975e\u5e38\u5e38\u89c1\u7684\uff0c\u5012\u6392\u7d22\u5f15\u7684\u5e94\u7528\u6848\u4f8b\uff0c\u6211\u4eec\u901a\u8fc7\u8f93\u5165\u6211\u4eec\u5173\u6ce8\u7684\u8bcd\u8bed\uff0c\u6765\u7d22\u5f15\u5305\u542b\u8fd9\u4e2a\u8bcd\u7684\u6240\u6709\u6587\u6863\u3002 \u5f53\u7136\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u8003\u8651\u7684\u662f\u82f1\u6587\u3002</p> <p><code>\u533a\u5206TF \u548c DF</code></p> <ul> <li>\\(TF\\)\uff08term frequency\uff09\uff1a\u4e00\u4e2a\u5355\u8bcd\u5728\u67d0\u4e00\u4e2a\u6587\u6863\u4e2d\u51fa\u73b0\u7684\u9891\u7387\uff0c\\(TF\\)\u503c\u8d8a\u5927\uff0c\u533a\u5206\u80fd\u529b\u8d8a\u5f3a</li> <li>\\(DF\\)\uff08document frequency\uff09\uff1a\u4e00\u4e2a\u5355\u8bcd\u5728\u591a\u5c11\u6587\u6863\u4e2d\u51fa\u73b0\u8fc7\uff0c\\(DF\\)\u8d8a\u5927\uff0c\u8868\u660e\u8fd9\u4e2a\u5355\u8bcd\u5728\u5f88\u591a\u6587\u6863\u4e2d\u90fd\u51fa\u73b0\u8fc7\uff0c\u533a\u5206\u6587\u6863\u7684\u80fd\u529b\u8d8a\u5f31</li> </ul>"},{"location":"ADS/3.%20Inverted%20File%20Index/#311-\u5012\u6392\u7d22\u5f15\u7684\u5b9e\u73b0","title":"3.1.1 \u5012\u6392\u7d22\u5f15\u7684\u5b9e\u73b0","text":"<p>\u77e5\u9053\u4e86\u5012\u6392\u7d22\u5f15\u7684\u601d\u60f3\u4e4b\u540e\uff0c\u5176\u5b9e\u73b0\u5c31\u53d8\u5f97\u975e\u5e38\u76f4\u89c2\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u5b57\u5178\u6765\u63cf\u8ff0\u4e00\u7c7b\u5173\u7cfb\uff0c\u5176\u4e3b\u952e\u4e3a\u5355\u8bcd\uff0c\u952e\u503c\u4e3a\u8fd9\u4e2a\u5355\u8bcd\u51fa\u73b0\u7684\u6240\u6709\u4f4d\u7f6e\u3002</p> <p>\u6700\u6734\u7d20\u7684\u7248\u672c\u5c31\u662f\u8ba9\u952e\u503c\u4e3a\u5355\u8bcd\u51fa\u73b0\u8fc7\u7684\u6587\u6863\u7684\u5e8f\u53f7\u5e8f\u5217\uff0c\u800c\u5982\u679c\u6211\u4eec\u8fd8\u9700\u8981\u77e5\u9053\u8bcd\u6c47\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5219\u53ef\u4ee5\u8ba9\u952e\u503c\u662f\u4e00\u4e2a\u4e8c\u5143\u7ec4\u7684\u5e8f\u5217\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u6587\u6863\u7684\u5e8f\u53f7\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f\u5355\u8bcd\u5728\u6587\u6863\u4e2d\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002</p> <pre><code>\u4f8b\u5982\u6211\u4eec\u6709\u5982\u4e0b\u6587\u4ef6\u96c6\uff1a\n\n!!! summary \"\u6587\u6863\u96c6\"\n    | Doc   | Text                                              |\n    |:-----:|:--------------------------------------------------|\n    | 1     | Gold silver truck                                 |\n    | 2     | Shipment of gold damaged in a fire                |\n    | 3     | Delivery of silver arrived in a silver truck      |\n    | 4     | Shipment of gold arrived in a truck               |\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u7684\u5012\u6392\u7d22\u5f15\uff1a\n\n!!! summary \"\u5012\u6392\u7d22\u5f15\"\n    | No.| Term       | Times; (Doc ID: Places) |\n    |:--:|:-----------|:------------------------|\n    | 1  | a          | {3; (2;6),(3;6),(4;6)}  |\n    | 2  | arrived    | {2; (3;4),(4;4)}        |\n    | 3  | damaged    | {1; (2;4)}              |\n    | 4  | delivery   | {1; (3;1)}              |\n    | 5  | fire       | {1; (2;7)}              |\n    | 6  | gold       | {3; (1;1),(2;3),(4;3)}  |\n    | 7  | of         | {3; (2;2),(3;2),(4;2)}  |\n    | 8  | in         | {3; (2;5),(3;5),(4;5)}  |\n    | 9  | shipment   | {2; (2;1),(4;1)}        |\n    | 10 | silver     | {2; (1;2),(3;3,7)}      |\n    | 11 | truck      | {3; (1;3),(3;8),(4;7)}  |\n</code></pre> <p>\u524d\u8005\u4e3aTerm Dictionary\uff0c \u540e\u8005\u4e3a Posting List</p> <p>\u6240\u4ee5\u5b9e\u9645\u4e0a\u975e\u5e38\u7b80\u5355\uff0c\u6211\u4eec\u53ea\u9700\u8981\u626b\u63cf\u6587\u6863\uff0c\u7136\u540e\u5b58\u4e0b\u6bcf\u4e00\u4e2a\u6587\u4ef6\u5728\u54ea\u91cc\u51fa\u73b0\u8fc7\u5373\u53ef\u3002</p> <pre><code>while(read a document D)\n{\n    while(read a term T in D)\n    {\n        if(Find(Dictionary, T) == False)\n        {\n            // \u78b0\u5230\u65b0\u5355\u8bcd\n            Insert(Dictionary, T);\n        }\n        get T's posting list;\n        // \u63d2\u5165\u7d22\u5f15\n        Insert a node to T's posting list;\n    }\n}\nWrite the inverted index to disk;\n</code></pre>"},{"location":"ADS/3.%20Inverted%20File%20Index/#32-\u6539\u8fdb","title":"3.2 \u6539\u8fdb","text":"<p>\u90a3\u4e48\u5230\u6b64\u4e3a\u6b62\u4e86\u5417\uff1f\u975e\u4e5f\u3002\u5018\u82e5\u6beb\u65e0\u8282\u5236\u7684\u5c06\u6240\u6709\u8bcd\u90fd\u5b58\u5230\u5012\u6392\u7d22\u5f15\u4e2d\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u5012\u6392\u7d22\u5f15\u5c31\u4f1a\u53d8\u5f97\u975e\u5e38\u5927\uff0c\u5176\u4e2d\u5fc5\u7136\u6709\u5f88\u591a\u5197\u4f59\u4fe1\u606f\u5b58\u5728\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5bf9\u5012\u6392\u7d22\u5f15\u8fdb\u884c\u4e00\u4e9b\u6539\u8fdb\u3002</p> <p>\u6587\u4ef6\u5012\u6392\u7d22\u5f15\u5efa\u7acb\u7684\u8fc7\u7a0b\u4e3b\u8981\u662f\uff1a</p> <ol> <li> <p>\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u8bcd</p> </li> <li> <p>\u5c06\u8be5\u8bcd\u63d0\u53d6\u4e3a\u8bcd\u5e72(word stemming)\uff0c\u5373\u53bb\u9664\u7b2c\u4e09\u4eba\u79f0\u5f62\u5f0f\u3001\u8fc7\u53bb\u5f0f\u3001\u8fdb\u884c\u65f6\u7b49\u5f62\u5f0f\uff0c\u7559\u4e0b\u8bcd\u5e72\uff09\uff0c\u5e76\u53bb\u9664\u5206\u8bcd(stop word)\uff0c\u5373\u201da\u201d, \u201cis\u201d\u7b49\u6ca1\u6709\u610f\u4e49\u7684\u8bcd\u3002</p> </li> <li>\u68c0\u67e5\u8be5\u8bcd\u662f\u5426\u5df2\u7ecf\u5728\u8bcd\u5178\u4e4b\u4e2d\u3002</li> <li>\u82e5\u4e0d\u5728\uff0c\u5219\u5c06\u8be5\u8bcd\u6dfb\u52a0\u5165\u8bcd\u5178\u4e4b\u4e2d\u3002\u66f4\u65b0\u7d22\u5f15\u4fe1\u606f\u3002</li> <li>\u5efa\u7acb\u5b8c\u6bd5\u540e\uff0c\u5c06\u7d22\u5f15\u6587\u4ef6\u5b58\u5165\u78c1\u76d8\u3002</li> </ol> <p>\u7d22\u5f15\u4fe1\u606f\u5305\u62ec\uff1a\u8bcd\u8bed\uff0c\u8bcd\u8bed\u51fa\u73b0\u7684\u603b\u6b21\u6570\uff0c\uff08\u6587\u4ef6\u53f7\uff0c\u5728\u6587\u4ef6\u4e2d\u8be5\u8bcd\u7684\u4f4d\u7f6e\uff09</p> <p>example\uff1a\u5012\u6392\u7d22\u5f15\u4fe1\u606f\u5b9e\u4f8b           </p>"},{"location":"ADS/3.%20Inverted%20File%20Index/#321-\u505c\u7528\u8bcd","title":"3.2.1 \u505c\u7528\u8bcd","text":"<p>\u6211\u4eec\u89c2\u5bdf\u5230\uff0c\u6211\u4eec\u5b58\u4e0b\u6765\u7684\u8fd9\u4e9b\u5185\u5bb9\u4e2d\uff0c\u6709\u4e00\u4e9b\u4e1c\u897f\u9891\u7e41\u5730\u51fa\u73b0\u5728\u6240\u6709\u6587\u6863\u4e2d\uff0c\u5728\u7279\u5b9a\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u8bcd\u53ef\u80fd\u5e76\u4e0d\u4f1a\u6210\u4e3a\u4e00\u4e2a\u7d22\u5f15\uff0c\u4f8b\u5982\u6b63\u5e38\u7684\u82f1\u6587\u6587\u7ae0\u4e2d\u7684 <code>a</code>\uff0c<code>the</code> \u7b49\u3002\u6240\u4ee5\uff0c\u5bf9\u4e8e\u8fd9\u4e00\u7c7b\u8bcd\u2014\u2014\u6211\u4eec\u79f0\u4e4b\u4e3a\u505c\u7528\u8bcd(stop words)\uff0c\u5bf9\u4e8e\u505c\u7528\u8bcd\uff0c\u6211\u4eec\u5c31\u4e0d\u9700\u8981\u5c06\u4ed6\u4eec\u5b58\u4e0b\u4e86\u3002</p> <p>question \"\u54ea\u4e9b\u8bcd\u4f1a\u6210\u4e3a\u505c\u7528\u8bcd\uff1f\"</p> <p>\u4e00\u822c\u4e00\u4e2a\u8bcd\u6210\u4e3a\u505c\u7528\u8bcd\uff0c\u662f\u56e0\u4e3a\u5b83\u65e0\u6cd5\u6210\u4e3a\u4e00\u4e2a\u6709\u6548\u7684\u68c0\u7d22\u5173\u952e\u5b57\uff0c\u5b83\u53ef\u80fd\u662f\u5728\u5927\u91cf\u8d44\u6599\u4e2d\u5927\u91cf\u51fa\u73b0\uff0c\u5bfc\u81f4\u6211\u4eec\u65e0\u6cd5\u5229\u7528\u5b83\u627e\u51fa\u6211\u4eec\u60f3\u8981\u7684\u8d44\u6599\u3002\u6362\u53e5\u8bdd\u6765\u8bf4\uff0c\u4e00\u4e2a\u5171\u901a\u70b9\u662f\u5b83\u4eec\u901a\u5e38\u90fd\u6709\u7740\u76f8\u5f53\u9ad8\u7684\u51fa\u73b0\u9891\u7387\u3002</p>"},{"location":"ADS/3.%20Inverted%20File%20Index/#322-\u8bcd\u5e72\u5206\u6790","title":"3.2.2 \u8bcd\u5e72\u5206\u6790","text":"<p>\u8bcd\u5e72\u5206\u6790(word stemming)\u662f\u4e00\u79cd\u5c06\u5355\u8bcd\u8f6c\u6362\u4e3a\u5176\u8bcd\u5e72\u7684\u6280\u672f\u3002\u4f8b\u5982\uff0c\u8bcd\u5e72\u5206\u6790\u53ef\u4ee5\u5c06\u5355\u8bcd <code>trouble</code>\uff0c<code>troubled</code>\uff0c<code>troubles</code>\uff0c<code>troubling</code> \u90fd\u8f6c\u6362\u4e3a <code>trouble</code>\uff08\u751a\u81f3\u662f <code>troubl</code>\uff0c\u6838\u5fc3\u76ee\u7684\u662f\u8ba9\u5b83\u4eec\u53d8\u6210\u540c\u4e00\u4e2a\u5355\u8bcd\uff09\u3002\u76f8\u540c\u8bcd\u5e72\u7684\u8bcd\u6709\u7740\u7c7b\u4f3c\u7684\u542b\u4e49\uff0c\u5728\u68c0\u7d22 <code>troubled</code> \u7684\u65f6\u5019\uff0c\u5f53\u7136\u4e5f\u53ef\u80fd\u60f3\u627e\u5230\u5305\u542b <code>trouble</code> \u7684\u6587\u6863\u3002\u8fd9\u79cd\u6280\u672f\u4e5f\u53ef\u4ee5\u8ba9\u591a\u4e2a\u5355\u8bcd\u5171\u4eab\u540c\u4e00\u6761\u7d22\u5f15\u8bb0\u5f55\uff0c\u5728\u5b58\u548c\u627e\u7684\u8fc7\u7a0b\u4e2d\u90fd\u80fd\u4f18\u5316\u6548\u679c\u3002</p> <p>\u4e0d\u8fc7\u5728\u5177\u4f53\u64cd\u4f5c\u65b9\u9762\uff0c\u8fd9\u4e2a\u4e1c\u897f\u5c31\u663e\u5f97\u6bd4\u8f83\u7e41\u6742\u548c\u66b4\u529b\u4e86\uff0c\u6211\u4eec\u53ea\u80fd\u6839\u636e\u8bed\u6cd5\u89c4\u8303\u8fdb\u884c\u66b4\u529b\u5339\u914d\u548c\u5224\u65ad\uff0c\u8fd9\u91cc\u6211\u4eec\u5c31\u4e0d\u5c55\u5f00\u4e86\u3002</p>"},{"location":"ADS/3.%20Inverted%20File%20Index/#323-\u5206\u5e03\u5f0f","title":"3.2.3 \u5206\u5e03\u5f0f","text":"<p>\u5206\u5757\u6700\u540emerge</p> <pre><code>BlockCnt = 0; \nwhile ( read a document D )\n{\n  while ( read a term T in D ) \n  {\n      if ( out of memory ) \n      {\n          Write BlockIndex[BlockCnt] to disk;\n          BlockCnt ++;\n          FreeMemory;\n      }\n      if ( Find( Dictionary, T ) == false )\n          Insert( Dictionary, T );\n      Get T\u2019s posting list;\n      Insert a node to T\u2019s posting list;\n  }\n}\nfor ( i=0; i&lt;BlockCnt; i++ )\n    Merge( InvertedIndex, BlockIndex[i] );\n</code></pre> <p>\u5f53\u5012\u6392\u7d22\u5f15\u6587\u4ef6\u8f83\u5927\u65f6\uff0c\u6ca1\u6709\u8db3\u591f\u7684\u5185\u5b58\uff0c\u65e0\u6cd5\u5b58\u5728\u4e00\u53f0\u4e3b\u673a\u4e0a\uff0c\u6b64\u65f6\u9700\u8981\u5012\u6392\u7d22\u5f15\u5206\u5e03\u5f0f\u5b58\u50a8\u6280\u672f\u3002</p> <ul> <li>\u672f\u8bed\u533a\u5206\u7d22\u5f15\uff08term-partitioned index\uff09</li> </ul> <p>\u6309\u7167\u5173\u952e\u8bcd\u5c06\u6587\u4ef6\u5b58\u5728\u4e8e\u4e0d\u540c\u7684\u4e3b\u673a\u4e0a\uff0c\u5168\u5c40\u5efa\u7acb\u7d22\u5f15</p> <ul> <li>\u6587\u6863\u533a\u5206\u7d22\u5f15\uff08Document-partitioned index\uff09</li> </ul> <p>\u6309\u7167\u6587\u4ef6\u53f7\u5c06\u6587\u4ef6\u5b58\u5728\u4e0d\u540c\u4e3b\u673a\u4e0a\uff0c\u5728\u6bcf\u53f0\u4e3b\u673a\u4e0a\u5efa\u7acb\u5c40\u90e8\u7d22\u5f15</p> <p>\u800c\u8fd9\u91cc\u6709\u4e24\u79cd\u5206\u5e03\u5f0f\u7684\u7b56\u7565\uff0c\u5176\u4e00\u662f\u6839\u636e\u5355\u8bcd\u7684\u5b57\u5178\u5e8f\u8fdb\u884c\u5206\u5e03\u5f0f\uff0c\u5176\u4e8c\u662f\u6839\u636e\u6587\u6863\u8fdb\u884c\u5206\u5e03\u5f0f\u3002</p> <p></p> <p>\u663e\u7136\u6839\u636e\u5355\u8bcd\u7684\u5185\u5bb9\u8fdb\u884c\u5206\u5e03\u5f0f\uff0c\u80fd\u591f\u63d0\u9ad8\u7d22\u5f15\u6548\u7387\uff0c\u4f46\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u9700\u8981\u5c06\u6240\u6709\u5f62\u5f0f\u63a5\u8fd1\u7684\u5355\u8bcd\u90fd\u5b58\u50a8\u5728\u4e00\u4e2a\u5730\u65b9\uff0c\u8fd9\u6837\u5c31\u4f1a\u9020\u6210\u5355\u70b9\u6545\u969c\uff0c\u5bb9\u707e\u80fd\u529b\u5f88\u5dee\uff0c\u6240\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u5e76\u4e0d\u662f\u5f88\u597d\u3002</p> <p>\u800c\u7b2c\u4e8c\u79cd\u529e\u6cd5\u5219\u6709\u8f83\u5f3a\u7684\u5bb9\u707e\u6027\u80fd\u3002\u5373\u4f7f\u4e00\u53f0\u673a\u5668\u65e0\u6cd5\u5de5\u4f5c\uff0c\u4e5f\u4e0d\u4f1a\u5267\u70c8\u5f71\u54cd\u5230\u6574\u4e2a\u7cfb\u7edf\u7684\u5de5\u4f5c\u3002</p>"},{"location":"ADS/3.%20Inverted%20File%20Index/#324-dynamic-indexing-\u52a8\u6001\u7d22\u5f15","title":"3.2.4 Dynamic indexing \u52a8\u6001\u7d22\u5f15","text":"<p><code>\u5f53\u524d\u60c5\u51b5\uff0c\u6700\u7d22\u5f15\u7684\u6587\u6863\u96c6\u53ef\u80fd\u662f\u52a8\u6001\u53d8\u5316\u7684\uff0c\u4f8b\u5982\u6dfb\u52a0\u65b0\u6587\u6863\u3001\u5220\u9664\u73b0\u6709\u6587\u6863</code></p> <p>\u7d22\u5f15\u9700\u8981\u5b9a\u65f6\u66f4\u65b0\uff0c\u5e76\u5efa\u7acb\u4e3b\u7d22\u5f15\u548c\u8f85\u52a9\u7d22\u5f15</p> <p>\u89e3\u51b3\u65b9\u6cd5\uff1a\u5468\u671f\u6027\u5730\u5bf9\u6587\u6863\u96c6\u4ece\u5934\u5f00\u59cb\u8fdb\u884c\u7d22\u5f15\u91cd\u6784</p> <ul> <li>\u4e00\u4e2a\u5927\u7684\u4e3b\u7d22\u5f15\uff0c\u4fdd\u5b58\u5728\u78c1\u76d8\u4e2d\uff0c\u53e6\u4e00\u4e2a\u5c0f\u7684\u8f85\u52a9\u7d22\u5f15\uff0c\u7528\u4e8e\u5b58\u50a8\u65b0\u6587\u6863\u4fe1\u606f\uff0c\u5b58\u50a8\u5728\u5185\u5b58\u4e2d</li> <li>\u68c0\u7d22\u65f6\u53ef\u4ee5\u540c\u65f6\u904d\u5386\u4e24\u4e2a\u7d22\u5f15\uff0c\u5e76\u5c06\u7ed3\u679c\u8fdb\u884c\u5408\u5e76</li> <li>\u6587\u6863\u7684\u5220\u9664\u8bb0\u5f55\u5728\u4e00\u4e2a\u65e0\u6548\u4f4d\u5411\u91cf\uff0c\u5728\u8fd4\u56de\u68c0\u7d22\u7ed3\u679c\u4e4b\u524d\uff0c\u53ef\u4ee5\u5229\u7528\u5b83\u8fc7\u6ee4\u5df2\u7ecf\u5220\u9664\u7684\u6587\u6863\u3002</li> <li>\u6bcf\u5f53\u8f85\u52a9\u7d22\u5f15\u5f88\u5927\u65f6\uff0c\u5c31\u5c06\u5b83\u5408\u5e76\u5230\u4e3b\u7d22\u5f15</li> </ul> <p></p>"},{"location":"ADS/3.%20Inverted%20File%20Index/#325-compression-\u7d22\u5f15\u6587\u4ef6\u538b\u7f29","title":"3.2.5 compression \u7d22\u5f15\u6587\u4ef6\u538b\u7f29","text":"<p>\u4e00\u822c\u6765\u8bf4\uff0c\u5bf9\u7d22\u5f15\u6587\u4ef6\u8fdb\u884c\u538b\u7f29\u4e0d\u4f46\u53ef\u4ee5\u51cf\u5c0f\u7a7a\u95f4\uff0c\u5e76\u4e14\u53ef\u4ee5\u63d0\u9ad8\u7d22\u5f15\u6548\u7387\u3002\u8fd9\u662f\u56e0\u4e3a\uff0c\u91c7\u7528\u9ad8\u6548\u7684\u538b\u7f29\u7b97\u6cd5\uff0c\u867d\u7136\u5c06\u8017\u8d39\u4e00\u5b9a\u65f6\u95f4\u5728\u5185\u5b58\u4e2d\u8fdb\u884c\u89e3\u538b\uff0c\u4f46\u56e0\u4e3a\u80fd\u63d0\u9ad8cache\u7684\u5229\u7528\u7387\uff0c\u5e76\u80fd\u63d0\u9ad8\u4ece\u78c1\u76d8\u5230\u5185\u5b58\u7684\u8bfb\u53d6\u6548\u7387\uff0c\u6240\u4ee5\u603b\u4f53\u6765\u8bf4\u6548\u7387\u5c06\u5f97\u5230\u63d0\u5347\u3002</p> <p><code>\u91c7\u7528\u5dee\u5206\u538b\u7f29\u7684\u65b9\u6cd5\u2014\u2014$docID$\u7684\u5b58\u50a8\u53ea\u8bb0\u5f55\u4e0e\u4e0a\u4e00\u9879$docID$\u7684\u5dee\u503c\u6765\u51cf\u5c11$docID$\u5b58\u50a8\u957f\u5ea6</code></p> <p>posting list \u8fc7\u5927\uff0c\u540e\u4e00\u9879\u51cf\u53bb\u524d\u4e00\u9879</p> <p></p>"},{"location":"ADS/3.%20Inverted%20File%20Index/#326-threshold-\u9608\u503c","title":"3.2.6 Threshold \u9608\u503c","text":"<p>\u4ec5\u68c0\u7d22\u6587\u6863\u6309\u6743\u91cd\u6392\u540d\u7684\u524d X \u4e2a\u6587\u6863</p> <ul> <li>\u4f1a\u56e0\u4e3a\u622a\u65ad\u800c\u9519\u8fc7\u4e00\u4e9b\u76f8\u5173\u6587\u6863</li> </ul> <p>\u5bf9\u641c\u7d22\u5173\u952e\u8bcd\u8fdb\u884c\u6392\u5e8f</p> <ul> <li>\u6309\u67e5\u8be2\u8bcd\u7684\u9891\u7387\u6309\u5347\u5e8f\u5bf9\u67e5\u8be2\u8bcd\u8fdb\u884c\u6392\u5e8f;\u4ec5\u6839\u636e\u539f\u59cb\u67e5\u8be2\u8bcd\u7684\u4e00\u5b9a\u767e\u5206\u6bd4\u8fdb\u884c\u641c\u7d22</li> </ul>"},{"location":"ADS/3.%20Inverted%20File%20Index/#33-\u6027\u80fd\u8bc4\u4f30","title":"3.3 \u6027\u80fd\u8bc4\u4f30","text":"<p>\u8861\u91cf\u4e0e\u8bc4\u4ef7\u6587\u4ef6\u5012\u6392\u7d22\u5f15\u7cfb\u7edf\u7684\u6027\u80fd\uff1a</p> <p>\u533a\u5206Data Retrieval \u548cInformation Retrieval;</p> <p></p> <p>\u4e3b\u8981\u4ece\u7cbe\u786e\u5ea6\uff08Precision\uff09\u4e0e\u53ec\u56de\u5ea6\uff08Recall\uff09\u8fdb\u884c\u8861\u91cf\u3002</p> <ul> <li> <p>\u7cbe\u5ea6\u9ad8\uff1a\u8fd4\u56de\u76f8\u5173\u6587\u6863\uff0c\u4f46\u4e5f\u9057\u6f0f\u4e86\u8bb8\u591a\u6709\u7528\u7684\u6587\u6863</p> </li> <li> <p>\u7cbe\u5ea6\u4f4e\uff1a\u8fd4\u56de\u6700\u76f8\u5173\u7684\u6587\u6863\uff0c\u4f46\u662f\u5305\u542b\u4e86\u5f88\u591a\u5783\u573e</p> </li> </ul> <p></p> <p><code>Retrieved \u53ec\u56de\u7684   Relevant \u76f8\u5173\u7684</code></p> <p>\u76f8\u5173\u7684\uff0c\u53ec\u56de\u7684\u90e8\u5206\uff1a\\(R_R\\)</p> <p>\u76f8\u5173\u7684\uff0c\u672a\u53ec\u56de\u7684\u90e8\u5206\uff1a\\(R_N\\)</p> <p>\u4e0d\u76f8\u5173\u7684\uff0c\u53ec\u56de\u7684\u90e8\u5206\uff1a\\(I_R\\)</p> <p>\u4e0d\u76f8\u5173\u7684\uff0c\u672a\u53ec\u56de\u7684\u90e8\u5206\uff1a\\(I_N\\)</p> <p><code>\u7cbe\u786e\u5ea6precision \u8868\u793a\u6240\u6709\u53ec\u56de\u7684\u90e8\u5206\u91cc\u9762\uff0c\u76f8\u5173\u7684\u6240\u5360\u7684\u6bd4\u91cd\u3002</code> $$ precision  P = R_R / (R_R + I_R)  $$ <code>\u53ec\u56de\u5ea6recall\u8868\u793a\u6240\u6709\u76f8\u5173\u7684\u90e8\u5206\u4e2d\u53ec\u56de\u7684\u6240\u5360\u7684\u6bd4\u91cd</code> $$ recall  R = R_R / (R_R + R_N) $$</p>"},{"location":"ADS/3.%20Inverted%20File%20Index/#34-\u4e60\u9898\u8bad\u7ec3","title":"3.4 \u4e60\u9898\u8bad\u7ec3","text":"<p><code>In distributed indexing, document-partitioned strategy is to store on each node all the documents that contain the terms in a certain range.</code></p> <ul> <li> <p>False : \u8fd9\u662f term-partitioned \u7b56\u7565</p> </li> <li> <p>\u56e0\u4e3a\u5206\u5e03\u5f0f\u7d22\u5f15\u7684\u65b9\u5f0f\u662f\u6309\u6587\u6863\u5e8f\u53f7\u6392\u5e8f\u7684\uff0c\u5982\u679c\u6309\u5305\u542b\u7684terms\u5206\u7c7b\uff0c\u5728\u50a8\u5b58\u6545\u969c\u65f6\uff0c\u5173\u4e8e\u8fd9\u4e2aterms\u7684\u6587\u6863(in a certain range)\u5168\u6ca1\u4e86\uff0c\u4e0d\u6297\u98ce\u9669\u3002 </p> </li> </ul> <p><code>When evaluating the performance of data retrieval, it is important to measure the relevancy of the answer set.</code></p> <ul> <li>False : \u53ec\u56de\u7387\u548c\u6574\u4e2a\u7b54\u6848\u96c6\u7684\u76f8\u5173\u6027\u65e0\u5173\u3002</li> <li>\u8fd9\u4e2a\u8bf4\u7684\u662fdata retrieval\uff0c\u9519\u3002Information retrieval\u624d\u9700\u8981measure the relevancy of the answer set\u3002</li> </ul> <p></p> <ul> <li>data \u6570\u636e\u66f4\u4e3a\u5bbd\u6cdb\uff0c\u8bc4\u4ef7\u6307\u6807\u662f \u54cd\u5e94\u65f6\u95f4\u548c\u7d22\u5f15\u8303\u56f4</li> <li>information \u53ef\u4ee5\u7406\u89e3\u4e3a\u7ecf\u8fc7\u7b5b\u9009\u540e\u7684\u4fe1\u606f\uff0c\u7ec6\u5316\uff0c\u6d4b\u91cf\u7b54\u6848\u96c6\u7684\u76f8\u5173\u5ea6</li> </ul> <p><code>1. Precision is more important than recall when evaluating the explosive detection in airport security.</code></p> <ul> <li>False\uff1a \u5b89\u5168\u4e4b\u4e0a.\u673a\u573a\u5b89\u5168\uff0c\u5e94\u8be5\u662f\u8fd4\u56de\u7684\u5168\u9762\u5ea6\u66f4\u91cd\u8981\uff0c\u7cbe\u786e\u6027\u4e0d\u7b97\u91cd\u8981</li> </ul> <p><code>2. While accessing a term by hashing in an inverted file index, range searches are expensive.</code></p> <ul> <li>True,\u8fd9\u4e2a\u662f\u548cB+\u6811\u6bd4\u7684\uff0c\u5bf9</li> </ul> <p><code>3. \u3010\u4e60\u9898\u3011While accessing a term, hashing is faster than search trees.</code></p> <ul> <li>\u7b54\uff1aTrue\uff0c\u56e0\u4e3ahash\u8868\u662f\u76f4\u63a5\u4f7f\u7528hash\u51fd\u6570\u5b9a\u4f4d\u7684\u65f6\u95f4\u662f\u5e38\u6570\u7684\uff0c\u800c\u4f7f\u7528\u641c\u7d22\u6811\u5219\u662fO(logn)\u7684\u3002\u4f46\u662fhash\u8868\u7684\u50a8\u5b58\u4e0d\u7075\u6d3b\u6709\u7f3a\u70b9\u3002</li> </ul> <p></p> <ul> <li> <p>\u7cbe\u5ea6\u9ad8\uff1a\u8fd4\u56de\u76f8\u5173\u6587\u6863\uff0c\u4f46\u4e5f\u9057\u6f0f\u4e86\u8bb8\u591a\u6709\u7528\u7684\u6587\u6863</p> </li> <li> <p>\u7cbe\u5ea6\u4f4e\uff1a\u8fd4\u56de\u6700\u76f8\u5173\u7684\u6587\u6863\uff0c\u4f46\u662f\u5305\u542b\u4e86\u5f88\u591a\u5783\u573e</p> </li> </ul> <p></p> <p></p> <p>\u53ec\u56de\u7387\u662f\u76f8\u5173\u7684\u90e8\u5206\u4e2d\uff0c\u53ec\u56de\u7684\u5360\u6bd4</p> <p>\u51c6\u786e\u7387\u662f\u53ec\u56de\u7684\u90e8\u5206\u4e2d\uff0c\u51c6\u786e\u7684\u5360\u6bd4</p> <p>\\(recall=4000/(4000+8000)=33%\\)</p>"},{"location":"ADS/4.%20Leftist%20Heaps%20and%20Skew%20Heaps/","title":"Lecture 4 | Leftist Heap &amp; Skew Heap","text":"<p> \u7ea6 5341 \u4e2a\u5b57  166 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 29 \u5206\u949f</p> <p><code>\u4ec0\u4e48\u662f\u5806heap\uff1f</code></p> <p>\u6ee1\u8db3\u4ee5\u4e0b\u6027\u8d28\uff1a</p> <ol> <li>\u7ed3\u6784\u6027\u8d28\uff1a\u5806\u662f\u4e00\u68f5\u5b8c\u5168\u4e8c\u53c9\u6811\u3002\u5e76\u4e14\u7531\u4e8e\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u6545\u6811\u9ad8h \u548c\u603b\u7ed3\u70b9\u6570\u4e4b\u95f4\u7684\u5173\u7cfb\u663e\u7136\u4e3a\\(h = O(log n)\\)\u3002</li> <li>\u5e8f\u6027\u8d28\uff1a\u5bf9\u4e8e\u6700\u5927\u5806\uff0c\u6839\u7ed3\u70b9\u5c31\u662f\u6700\u5927\u5143\u7d20\uff0c\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u7684\u5b69\u5b50\u90fd\u5fc5\u987b\u5c0f\u4e8e\u7b49\u4e8e\u672c\u8eab\u3002\u53cd\u4e4b\u5bf9\u4e8e\u6700\u5c0f\u5806\uff0c\u6839\u7ed3\u70b9\u662f\u6700\u5927\u5143\u7d20\uff0c\u5b69\u5b50\u5e94\u5f53\u5927\u4e8e\u7b49\u4e8e\u7236\u4eb2\u3002</li> </ol> <p>\u57fa\u4e8e\u6570\u7ec4\u7684\u4e8c\u53c9\u5806\u5b9e\u73b0\uff0c\u4e8b\u5b9e\u4e0a\u662f\u5229\u7528\u6570\u7ec4\u6784\u9020\u4e86\u4e00\u68f5\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6570\u7ec4\u7d22\u5f15\u9664\u4ee52 \u627e\u5230\u7ed3\u70b9\u7684\u7236\u4eb2\uff0c\u4e58\u4ee52 \u548c\u4e58\u4ee52 \u52a01 \u83b7\u5f97\u7ed3\u70b9\u7684\u5de6\u53f3\u5b69\u5b50\uff0c\u56e0\u6b64\u975e\u5e38\u65b9\u4fbf\uff0c\u76f8\u6bd4\u4e8e\u6307\u9488\u9700\u8981\u5bfb\u5740\uff0c\u8fd9\u6837\u7684\u5b9e\u73b0\u663e\u7136\u66f4\u52a0\u9ad8\u6548\u3002</p> <p>\u5806(\u6700\u5c0f\u5806)\u7684\u57fa\u672c\u64cd\u4f5c\uff1a</p> <ol> <li>Insert : \u76f4\u63a5\u63d2\u5728\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7a7a\u4f4d\u4e0a\uff0c\u7136\u540epercolate up \u627e\u5230\u5b83\u5e94\u5f53\u5728\u7684\u4f4d\u7f6e\uff0c\u663e\u7136\u6700\u574f\u60c5\u51b5\u4e5f\u4e0e\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\u6210\u6b63\u6bd4\uff0c\u5373\\(O(log n)\\)\u3002</li> <li>FindMin : \u76f4\u63a5\u8fd4\u56de\u6839\u7ed3\u70b9\uff0c \\(O(1)\\)</li> <li>DeleteMin\uff1a \u76f4\u63a5\u7528\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u9876\u66ff\u6839\u7ed3\u70b9\uff0c\u7136\u540epercolate down \u627e\u5230\u65b0\u6839\u7ed3\u70b9\u7684\u5f52\u5bbf\uff0c\u65f6\u95f4\\(O(log n)\\)</li> <li>BuildHeap: \u5bf9n \u4e2a\u5143\u7d20\u5efa\u5806\u5b58\u50a8\u3002</li> <li>\u65b9\u6cd5\u4e00\uff1a\u8fde\u7eed\u63d2\u5165n\u6b21\uff0c\u4f46\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(n log n)\\)</li> <li>\u65b9\u6cd5\u4e8c\uff1a\u65e0\u9700\u7ba1\u5e8f\u6027\u8d28\uff0c\u76f4\u63a5\u4efb\u610f\u63d2\u5165\u8fd9n \u4e2a\u503c\uff0c\u7136\u540e\u4ece\u5b8c\u5168\u4e8c\u53c9\u6811\u5012\u6570\u7b2c\u4e8c\u6392\u6709\u5b69\u5b50\u7684\u7ed3\u70b9\u5f00\u59cb\uff0c\u5f80\u524d\u4f9d\u6b21\u68c0\u67e5\u662f\u5426\u6709\u8fdd\u53cd\u5e8f\u6027\u8d28\u7684\uff0c\u6709\u5c31percolate down \u5230\u6b63\u786e\u7684\u4f4d\u7f6e\uff0c\u5faa\u73af\u76f4\u5230\u6839\u7ed3\u70b9\u4e5f\u8c03\u6574\u5b8c\u6bd5\u4e3a\u6b62\uff0c\u53ef\u4ee5\u9a8c\u8bc1\u8fd9\u6837\u7684\u7b97\u6cd5\u590d\u6742\u5ea6\u4e3a\\(O(n)\\)</li> </ol> <p>\u5728\u57fa\u4e8e\u6570\u7ec4\u7684\u5b9e\u73b0\u4e2d\u6211\u4eec\u80fd\u60f3\u5230\u7684\u6700\u597d\u7684\u65b9\u6cd5\u4e5f\u53ea\u80fd\u662f\u76f4\u63a5\u5408\u5e76\u4e24\u4e2a\u6570\u7ec4\uff0c\u7136\u540e\u8c03\u7528BuildHeap \u5728O(n) \u65f6\u95f4\u5185\u5b8c\u6210\u3002</p>"},{"location":"ADS/4.%20Leftist%20Heaps%20and%20Skew%20Heaps/#41-leftist-heap","title":"4.1 Leftist Heap","text":""},{"location":"ADS/4.%20Leftist%20Heaps%20and%20Skew%20Heaps/#411-\u6982\u5ff5","title":"4.1.1 \u6982\u5ff5","text":"<p>\u5de6\u504f\u5806\uff0c\u6216\u8005\u8bf4\u5de6\u504f\u5806(Leftist Heap)\uff0c\u5b83\u76f8\u6bd4\u4e8e\u666e\u901a\u7684\u5806\uff0c\u66f4\u597d\u7684\u4e00\u70b9\u5728\u4e8e\u5b83\u652f\u6301\u5feb\u901f\u7684\u5806\u5408\u5e76\u64cd\u4f5c(speed up merging in O(N))\u3002</p> <p>\u201c\u5de6\u504f\u201d\uff0c\u5e76\u4e0d\u65ad\u5c06\u65b0\u7684\u4e1c\u897f\u5f80\u53f3\u4fa7\u5408\u5e76\uff0c\u6765\u5b9e\u73b0\u6bcf\u6b21\u90fd\u662f\u5f80\u76f8\u5bf9\u5c0f\u7684\u90a3\u4e00\u4fa7\u585e\u8fdb\u4e1c\u897f\uff0c\u8fdb\u800c\u4fdd\u76f8\u5bf9\u8bc1\u4e86\u8fd9\u4e2a</p> <p>\u7531\u4e8e\u5de6\u504f\u5806\u4e0d\u518d\u662f\u4e00\u4e2a\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u518d\u50cf\u7ef4\u62a4\u5927\u6839\u5806\u5c0f\u6839\u5806\u90a3\u6837\u7528\u6570\u7ec4\u6765\u7ef4\u62a4\u5b83\u4e86\u3002</p> <pre><code>// struct LeftistHeapNode {\n    // ElementType val;\n    // int Npl;\n    // LeftistHeapNode * ls, * rs;\n// };\nstruct TreeNode\n{\n    ElementType     val;\n    PriorityQueue   Left;\n    PriorityQueue   Right;\n    int             Npl;\n};\n</code></pre> <p>definition \u201cNpl\u201d in leftist heap\"</p> <p>The null path length , Npl(X), of any node X is <code>the length of the shortest path from X to a node without two children</code>.  </p> <p>Npl(x) \u8868\u793a\u4ecex\u5f00\u59cb\u5230\u6ca1\u6709\u5b69\u5b50\u7ed3\u70b9\u7684\u7ed3\u70b9\uff08\u53ef\u80fd\u662fx\u672c\u8eab\uff09\u7684\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6</p> <p>Define Npl(NULL) = \u20131.</p> <p></p> <ol> <li>\u5982\u679c\u4e00\u4e2a\u7ed3\u70b9\u7684\u5de6\u5b69\u5b50\u6216\u53f3\u5b69\u5b50\u4e3a\u7a7a\u7ed3\u70b9\uff0c\u5219\u8be5\u7ed3\u70b9\u7684 Npl \u4e3a \\(0\\)\uff0c\u8fd9\u79cd\u7ed3\u70b9\u88ab\u79f0\u4e3a\u5916\u7ed3\u70b9\uff1b</li> <li>\u5982\u679c\u4e00\u4e2a\u7ed3\u70b9\u7684\u5de6\u5b69\u5b50\u548c\u53f3\u5b69\u5b50\u90fd\u4e0d\u4e3a\u7a7a\uff0c\u5219\u8be5\u7ed3\u70b9\u7684 Npl \u4e3a \\(\\min{(npl_\\text{left child}, npl_\\text{right child})} + 1\\)\uff1b</li> </ol> <p> </p> <p>\u800c\u5de6\u504f\u5806\u5c31\u5efa\u7acb\u5728\u8fd9\u4e9b\u6027\u8d28\u4e0a\uff1a</p> <p>definition \"Leftist Heap\"</p> <p>\u200b    \u5de6\u504f\u5806\u7684\u6027\u8d28</p> <ol> <li>\u7ed3\u70b9\u7684value\u5e94\u5f53\u4e0d\u5927\u4e8e\uff08\u4e0d\u5c0f\u4e8e\uff09\u5176\u5b69\u5b50\u7ed3\u70b9\u7684value\u7684\u4e8c\u53c9\u6811\uff08\u5373\u5806\u7684\u6027\u8d28\uff09</li> <li>\u4e14\u6ee1\u8db3\u300c\u5de6\u504f\u300d\u6027\u8d28\u2014\u2014<code>\u7ed3\u70b9\u7684\u5de6\u5b69\u5b50\u7684 Npl \u4e0d\u5c0f\u4e8e\u53f3\u5b69\u5b50\u7684 Npl</code>\u3002</li> </ol> <p></p> <p>\u867d\u7136\u5c40\u90e8\u5b58\u5728\u53f3\u5b50\u6811\u7ed3\u70b9\u6570\u5927\u4e8e\u5de6\u5b50\u6811\uff0c\u4f46\u662f\u53ef\u80fd\u4f9d\u7136\u4e0d\u5f71\u54cd\u5de6\u503e\u5806\u7684\u6027\u8d28</p> <p>\u56e0\u6b64\uff0c\u56de\u987e Npl \u7684\u5b9a\u4e49\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u6269\u5c55\u6027\u8d28\uff1a</p> <ol> <li>A leftist tree with r nodes on the right path must have at least \\(2^r -1\\) nodes</li> </ol> <p>\u5728\u53f3\u8def\u5f84\u4e0a\u6709r \u4e2a\u7ed3\u70b9\u7684\u5de6\u5f0f\u5806\u5fc5\u7136\u81f3\u5c11\u67092r \u22121 \u4e2a\u7ed3\u70b9\uff08\u53f3\u8def\u5f84\u6307\u4ece\u6839\u7ed3\u70b9\u51fa\u53d1\u4e00\u8def\u627e\u53f3\u5b69\u5b50\u76f4\u5230\u627e\u5230\u53f6\u5b50\u7684\u8def\u5f84\uff09\u3002</p> <p>\u8bc1\u660e\uff1a \u4f7f\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\u8fdb\u884c\u8bc1\u660e</p> <ul> <li> <p>\u82e5\\(r = 1\\),\u663e\u7136\u5b58\u5728\u81f3\u5c11\u4e00\u4e2a\u7ed3\u70b9</p> </li> <li> <p>\u5047\u8bbe\u5b9a\u7406\u5bf9\u53f3\u8def\u5f84\u4e0a\u5c0f\u4e8e\u7b49\u4e8e\\(r\\)\u4e2a\u7ed3\u70b9\u7684\u60c5\u51b5\u90fd\u6210\u7acb\u3002\u73b0\u5728\u8003\u8651\u5728\u53f3\u8def\u5f84\u4e0a\u6709\\(r+1\\)\u4e2a\u7ed3\u70b9\u7684\u5de6\u503e\u5806\u3002</p> </li> <li>\u6839\u7684\u53f3\u5b50\u6811\u6070\u597d\u5728\u53f3\u8def\u5f84\u4e0a\u6709\\(r\\)\u4e2a\u7ed3\u70b9\uff0c\u56e0\u6b64\u53f3\u5b50\u6811\u81f3\u5c11\u6709\\(2^r - 1\\)\u4e2a\u7ed3\u70b9</li> <li>\u518d\u8003\u8651\u5de6\u5b50\u6811\u3002\u5de6\u503e\u5806\u7684\u6027\u8d28\uff0c\u5de6\u5b50\u6811\u7684\\(Npl\\)\u5fc5\u987b\u5927\u4e8e\u7b49\u4e8e\u53f3\u5b50\u6811\u7684\\(Npl\\)\uff0c\u800c\u53f3\u5b50\u6811\u7684\\(Npl\\)\u4e3a\\(n-1\\),\u90a3\u4e48\u5de6\u5b50\u6811\u7ed3\u70b9\u5230\u53f6\u7ed3\u70b9\u7684\u8ddd\u79bb\u81f3\u5c11\u4e3a\\(n-1\\)</li> <li>\u5229\u7528\u5b50\u6811\u4e5f\u6709\u5de6\u503e\u7684\u6027\u8d28\uff0c\u53f3\u8def\u5f84\\(Npl\\)\u66f4\u77ed\uff0c\u6240\u4ee5\u53f3\u8def\u5f84\u81f3\u5c11\u6709\\(r\\)\u4e2a\u7ed3\u70b9\uff0c\u56e0\u6b64\u5de6\u5b50\u6811\u7684\u5927\u5c0f\u4e5f\u4e3a\\(2^r -1\\)</li> <li>\u6240\u4ee5\u6574\u68f5\u6811\u7684\u7ed3\u70b9\u6570\u81f3\u5c11\u4e3a\\(1 + 2^r-1 + 2^r -1 = 2 ^ {r+1} -1\\)</li> </ul> <p><code>\u6839\u636e\u6027\u8d281\uff0c\u53ef\u4ee5\u5f97\u5230\u5171\u6709N\u4e2a\u7ed3\u70b9\u7684\u5de6\u503e\u5806\u7684\u53f3\u8def\u5f84\u6700\u591a\u542b\u6709log\uff08N+1\uff09\u4e2a\u7ed3\u70b9\u3002</code></p> <p></p> <p>\u6ce8\u610f\uff0c\u5728\u793a\u610f\u56fe\u4e2d\u6211\u4eec\u7701\u7565\u4e86\u7ed3\u70b9\u81ea\u8eab\u952e\u503c\u7684\u6807\u8bb0\uff0c\u4f46\u65e2\u7136\u4f5c\u4e3a\u4e00\u4e2a\u5806\uff0c\u5b83\u5c31\u9700\u8981\u6ee1\u8db3\u5806\u7684\u6027\u8d28\uff0c\u5373\u7ed3\u70b9\u7684\u952e\u503c\u4e0d\u5927\u4e8e\uff08\u4e0d\u5c0f\u4e8e\uff09\u5176\u5b69\u5b50\u7ed3\u70b9\u7684\u952e\u503c\u3002\u5728\u5b9e\u9645\u4f7f\u7528\u8fc7\u7a0b\u4e2d\uff0c\u952e\u503c\u5f88\u53ef\u80fd\u4e0d\u518d\u662f\u5355\u7eaf\u7684\u6570\uff0c\u5927\u5c0f\u5173\u7cfb\u53ef\u80fd\u8f6c\u5316\u4e3a\u504f\u5e8f\u5173\u7cfb\u3002</p> <p>\u7b80\u5355\u601d\u8003\u4e00\u4e0b\uff0c\u4e3a\u4ec0\u4e48\u5de6\u504f\u5806\u4f1a\u8fd9\u4e48\u8bbe\u8ba1\u5462\uff1f\u5b9e\u9645\u4e0a\uff0c\u5408\u5e76\u5806\u9700\u8981\u8003\u8651\u7684\u975e\u5e38\u91cd\u8981\u7684\u4e00\u4e2a\u70b9\u5c31\u662f\u8981\u80fd\u5728\u4e4b\u540e\u7684\u64cd\u4f5c\u4e2d\u5c3d\u53ef\u80fd\u5730\u7ef4\u62a4\u5806\u7684\u201c\u5e73\u8861\u201d\uff0c\u5426\u5219\u6211\u4eec\u628a\u5806\u7ef4\u62a4\u6210\u4e86\u4e00\u4e2a\u94fe\uff0c\u90a3\u663e\u7136\u662f\u975e\u5e38\u7cdf\u7cd5\u7684\u3002</p> <p>\u800c\u5de6\u504f\u5806\u901a\u8fc7\u7ef4\u62a4\u6574\u4e2a\u5806\u201c\u5de6\u504f\u201d\uff0c\u5e76\u4e0d\u65ad\u5f80\u53f3\u4fa7\u5408\u5e76\uff0c\u6765\u5b9e\u73b0\u6bcf\u6b21\u90fd\u662f\u5f80\\(Npl\\)\u76f8\u5bf9\u5c0f\u7684\u90a3\u4e00\u4fa7\u585e\u8fdb\u4e1c\u897f\uff0c\u8fdb\u800c\u4fdd\u8bc1\u4e86\u8fd9\u4e2a\u5806\u7684\u76f8\u5bf9\u5e73\u8861\u6027\u3002</p>"},{"location":"ADS/4.%20Leftist%20Heaps%20and%20Skew%20Heaps/#412-merge","title":"4.1.2 Merge","text":"<p>\u5de6\u504f\u5806\u7684\u6838\u5fc3\u64cd\u4f5c\u5c31\u662f\u5408\u5e76\u3002\u800c\u5176\u5b83\u64cd\u4f5c\u90fd\u53ef\u4ee5\u770b\u4f5c\u662f\u5408\u5e76\u7684\u7279\u6b8a\u60c5\u51b5\u3002</p> <ul> <li>Insert\uff1a \u53ef\u4ee5\u770b\u4f5c\u4e00\u4e2a\u5806\u548c\u4e00\u4e2a\u5355\u7ed3\u70b9\u7684\u5806\u7684Merge</li> <li>Delete Min\uff1a\u9996\u5148\u5220\u9664\u6839\u7ed3\u70b9\uff0c\u7136\u540e\u5c06\u6839\u7ed3\u70b9\u7684\u4e24\u4e2a\u5b50\u6811\u8fdb\u884cMerge\u5373\u53ef</li> </ul> <p>\u4f5c\u4e3a\u5de6\u504f\u5806\u7684\u6838\u5fc3\u64cd\u4f5c\uff0c\u5408\u5e76\u64cd\u4f5c\u81ea\u7136\u5c31\u662f\u8981\u5728\u6ee1\u8db3\u6027\u8d28\u7684\u6761\u4ef6\u4e0b\uff0c\u5408\u5e76\u4e24\u4e2a\u5de6\u504f\u5806\u3002\u5927\u81f4\u601d\u8def\u5c31\u662f\u5148\u7ef4\u62a4\u5806\u7684\u6027\u8d28\uff0c\u5728\u56de\u6eaf\u65f6\u7ef4\u62a4\u5de6\u504f\u6027\u8d28\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u5b83\u662f\u4e00\u4e2a\u5148\u81ea\u4e0a\u800c\u4e0b\u518d\u81ea\u4e0b\u800c\u4e0a\u7684\u8fc7\u7a0b\u3002</p> <p>\u6309\u7167\u5b9e\u73b0\u65b9\u6cd5\uff0c\u5de6\u504f\u5806\u7684\u5408\u5e76\u53ef\u4ee5\u5206\u4e3a\u9012\u5f52\u5f0f\u548c\u8fed\u4ee3\u5f0f\u4e24\u79cd\u3002</p> <p></p> <p>\u9876\u5c0f\u7684\u6811\u8bb0\u4e3aH1\uff0c\u9876\u5927\u7684\u6811\u8bb0\u4e3aH2</p>"},{"location":"ADS/4.%20Leftist%20Heaps%20and%20Skew%20Heaps/#4121-\u9012\u5f52\u5f0f","title":"4.1.2.1 \u9012\u5f52\u5f0f","text":"<pre><code>PriorityQueue Merge(PriorityQueue H1, PriorityQueue H2)\n{\n    if (H1 == NULL &amp;&amp; H2 == NULL)\n        return NULL;\n    else if (H1 &amp;&amp; H2 == NULL)\n        return H1;\n    else if (H2 &amp;&amp; H1 == NULL)\n        return H2;\n    else\n    {\n        if (H1-&gt;value &lt; H2-&gt;value)\n            return Merge1(H1, H2);\n        else\n            return Merge1(H2, H1);\n    }\n}\nPriorityQueue Merge1(PriorityQueue H1, PriorityQueue H2)\n{\n    // Merge1 \u5df2\u5c06\u6392\u9664H1\uff0cH2\u4e3a\u7a7a\u7684\u60c5\u51b5\n    // \u76ee\u524d H1\u7684value\u5c0f\u4e8eH2\u7684value\n    if (H1-&gt;Left == NULL)\n    {\n        H1-&gt;Left = H2;\n    }\n    else\n    {\n        H1-&gt;Right = Merge(H1-&gt;Right, H2);\n        if (H1-&gt;Left-&gt;Npl &lt; H1-&gt;Right-&gt;Npl)\n        {\n            PriorityQueue temp = H1-&gt;Left;\n            H1-&gt;Left = H1-&gt;Right;\n            H1-&gt;Right = temp;\n        }\n    }\n    if (!H1-&gt;Left || !H1-&gt;Right)\n        H1-&gt;Npl = 0;\n    else\n        H1-&gt;Npl = H1-&gt;Right-&gt;Npl + 1;\n    return H1;\n}\n\n\nPriorityQueue Merge_Recursive(PriorityQueue H1, PriorityQueue H2)\n{\n    if (H1 == NULL &amp;&amp; H2 == NULL)\n        return NULL;\n    else if (H1 &amp;&amp; H2 == NULL)\n        return H1;\n    else if (H2 &amp;&amp; H1 == NULL)\n        return H2;\n    else\n    {\n        if(H1-&gt;value &lt; H2-&gt;value)\n        {\n            if(!H1-&gt;Left)\n            {\n                H1-&gt;Left = H2;\n            }\n            else\n            {\n                H1-&gt;Right = Merge_Recursive(H1-&gt;Right, H2);\n                if (H1-&gt;Left-&gt;Npl &lt; H1-&gt;Right-&gt;Npl)\n                {\n                    PriorityQueue temp = H1-&gt;Left;\n                    H1-&gt;Left = H1-&gt;Right;\n                    H1-&gt;Right = temp;\n                }\n            }\n            if (!H1-&gt;Left || !H1-&gt;Right)\n                H1-&gt;Npl = 0;\n            else\n                H1-&gt;Npl = H1-&gt;Right-&gt;Npl + 1;\n            return H1;\n        }\n        else\n        {\n            if(!H2-&gt;Left)\n            {\n                H2-&gt;Left = H1;\n            }\n            else\n            {\n                H2-&gt;Right = Merge_Recursive(H2-&gt;Right, H1);\n                if (H2-&gt;Left-&gt;Npl &lt; H2-&gt;Right-&gt;Npl)\n                {\n                    PriorityQueue temp = H2-&gt;Left;\n                    H2-&gt;Left = H2-&gt;Right;\n                    H2-&gt;Right = temp;\n                }\n            }\n            if (!H2-&gt;Left || !H2-&gt;Right)\n                H2-&gt;Npl = 0;\n            else\n                H2-&gt;Npl = H2-&gt;Right-&gt;Npl + 1;\n            return H2;\n        }\n    }\n}\n</code></pre> <ol> <li>\u5982\u679c\u4e24\u4e2a\u5806\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u4e3a\u7a7a\uff0c\u76f4\u63a5\u8fd4\u56de\u53e6\u4e00\u4e2a\u5373\u53ef</li> <li>\u5982\u679c\u4e24\u4e2a\u5806\u90fd\u975e\u7a7a\uff0c\u6211\u4eec\u6bd4\u8f83\u4e24\u4e2a\u5806\u7684\u6839\u7ed3\u70b9value\u7684\u5927\u5c0f\uff0cvalue\u5c0f\u7684\u662f\\(H1\\),value\u5927\u7684\u662f\\(H2\\)</li> <li>\u5982\u679cH1\u53ea\u6709\u4e00\u4e2a\u9876\u70b9\uff08\u6839\u636e\u5de6\u503e\u5806\u7684\u5b9a\u4e49\uff0c\u53ea\u8981\u6ca1\u6709\u5de6\u5b69\u5b50\uff0c\u5c31\u4e00\u5b9a\u53ea\u6709\u4e00\u4e2a\u6839\u7ed3\u70b9\uff09\uff0c\u76f4\u63a5\u628aH2\u653e\u5728H1\u7684\u5de6\u5b50\u6811\u5373\u53ef</li> <li>\u5982\u679cH1\u4e0d\u53ea\u6709\u4e00\u4e2a\u6839\u7ed3\u70b9\uff0c\u5219\u5c06H1\u7684\u53f3\u5b50\u6811\u548cH2merge\uff08\u6b64\u5904\u662f\u9012\u5f52\uff0c\u53ea\u8981basecase\u6b63\u786e\uff0c\u4fbf\u80fd\u5f97\u5230\u6b63\u786e\u7684\u7ed3\u679c\uff09\uff0c\u6210\u4e3aH1\u7684\u65b0\u53f3\u5b50\u6811</li> <li>\u5982\u679cH1\u7684Npl\u6027\u8d28\u88ab\u8fdd\u53cd\uff0c\u5c31\u4ea4\u6362\u4e24\u4e2a\u5b50\u6811</li> <li>\u66f4\u65b0H1\u7684Npl\uff0c\u7ed3\u675f\u4efb\u52a1</li> </ol> <p>another example:</p> <p></p> <p>\u73b0\u5728\u6211\u4eec\u6a21\u62df\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u73b0\u5728\u6211\u4eec\u6709\u4e0b\u9762\u4e24\u4e2a\u5de6\u504f\u5806\uff0c\u5c1d\u8bd5\u5408\u5e76\u5b83\u4eec\u3002</p> <p></p> <p>\u6211\u4eec\u53d1\u73b0\uff0c\u7ecf\u8fc7\u6bd4\u8f83\uff0c\u2776 \u66f4\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u5c06 \u2776 \u4f5c\u4e3a\u5408\u5e76\u540e\u7684\u6839\u7ed3\u70b9\uff0c\u5de6\u5b50\u6811\u4e0d\u53d8\uff0c\u53f3\u5b50\u6811\u66f4\u65b0\u4e3a\u300c\u7eff\u6811\u53f3\u5b50\u6811\u548c\u84dd\u6811\u7684\u5408\u5e76\u7ed3\u679c\u300d\u3002</p> <p></p> <p>\u7ecf\u8fc7\u6bd4\u8f83\uff0c\u2777 \u66f4\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u5c06 \u2777 \u4f5c\u4e3a\u5408\u5e76\u540e\u7684\u6839\u7ed3\u70b9\uff0c\u5de6\u5b50\u6811\u4e0d\u53d8\uff0c\u53f3\u5b50\u6811\u66f4\u65b0\u4e3a\u300c\u84dd\u6811\u53f3\u5b50\u6811\u548c\u7eff\u6811\u7684\u5408\u5e76\u7ed3\u679c\u300d\u3002</p> <p></p> <p>\u6700\u540e\u8fd8\u5269\u4e0b\u4e24\u4e2a\u7ed3\u70b9\u5566\uff01\u5b9e\u9645\u4e0a\u8fd9\u91cc\u76f4\u63a5\u6a21\u62df\u4e86\u4e24\u4e2a\u6b65\u9aa4\uff0c\u9996\u5148\u662f\u6bd4\u8f83 \u277a \u548c \u277b\uff0c\u5e76\u9009\u62e9\u4e86 \u277a \u4f5c\u4e3a\u65b0\u6839\uff1b\u63a5\u4e0b\u6765\u5728\u9012\u5f52\u7684\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u9700\u8981\u5408\u5e76 <code>NULL</code> \u548c \u277b\uff0c\u6240\u4ee5\u76f4\u63a5\u8fd4\u56de\u4e86 \u277b\u3002</p> <p>\u7136\u800c\u8fd8\u6ca1\u6709\u7ed3\u675f\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5904\u7406\u5de6\u53f3\u5b50\u6811 Npl \u5927\u5c0f\u5173\u7cfb\u95ee\u9898\u3002</p> <p></p> <p>\u6211\u4eec\u53d1\u73b0 \u277a \u7684\u5de6\u5b69\u5b50\u4e3a <code>NULL</code>\uff0c\u6211\u4eec\u8bb0 \\(Npl_\\text{NULL} = -1\\)\uff0c\u53f3\u5b69\u5b50 \u277b \u6709 \\(Npl_\\text{right child}=0\\)\uff0c\u6240\u4ee5\u9700\u8981\u4ea4\u6362\u4e24\u4e2a\u5b69\u5b50\u3002</p> <p></p> <p>\u8fd9\u91cc\u4e5f\u8df3\u8fc7\u4e86\u4e24\u4e2a\u6b65\u9aa4\uff1a</p> <p>\u5f80\u56de\u8d70\uff0c\u53d1\u73b0 \u277a \u7684 Npl \u5c0f\u4e8e \u2779 \u7684 Npl\uff0c\u6ee1\u8db3\u6027\u8d28\uff0c\u4e0d\u9700\u8981\u6539\u53d8\u3002</p> <p>\u7ee7\u7eed\u5f80\u56de\u8d70\uff0c\u53d1\u73b0 \u2777 \u548c \u2778 \u7684 Npl \u76f8\u540c\uff0c\u6ee1\u8db3\u6027\u8d28\uff0c\u4e5f\u4e0d\u9700\u8981\u6539\u53d8\u3002</p> <p>\u4ece\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u5e76\u4e0d\u662f\u770b\u4e0a\u53bb\u66f4\u5927\u7684\u5b50\u6811\u4e00\u5b9a\u5728\u5de6\u4fa7\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff1a</p> <ol> <li> <p>\u9012\u5f52\u7684\u6700\u5927\u6df1\u5ea6\u662f\u591a\u5c11\uff1f\u6211\u4eec\u53d1\u73b0\uff0c\u5728\u9012\u5f52\u8fc7\u7a0b\u4e2d\uff0c<code>\u4ea7\u751f\u7684\u9012\u5f52\u5c42\u6570\u4e0d\u4f1a\u8d85\u8fc7\u4e24\u4e2a\u5de6\u503e\u5806\u53f3\u8def\u5f84\u957f\u5ea6\u4e4b\u548c</code>\uff0c\u56e0\u4e3a\u6bcf\u4e00\u6b21\u9012\u5f52\u90fd\u4f1a\u4f7f\u4e24\u4e2a\u5806\u5176\u4e2d\u4e4b\u4e00\uff08value\u66f4\u5c0f\u7684\uff09\u5411\u7740\u53f3\u8def\u5f84\u4e0a\u4e0b\u4e00\u4e2a\u53f3\u5b69\u5b50\u63a8\u8fdb\uff0c\u77e5\u9053\u5176\u4e2d\u4e00\u4e2a\u63a8\u5230\u4e86NULL\u7ed3\u70b9\u3002</p> </li> <li> <p>\u52a0\u6df1\u4e00\u5c42\u7684\u8fc7\u7a0b\u4e2d\uff0c\u64cd\u4f5c\u90fd\u662f\u5e38\u6570\u7ea7\u522b\u7684\uff0c\u56e0\u4e3a\u53ea\u9700\u8981\u6bd4\u5927\u5c0f\u548c\u627e\u5b69\u5b50</p> </li> <li> <p>\u5047\u8bbeH1\u7684\u7ed3\u70b9\u603b\u6570\u4e3aN1\uff0cH2\u7684\u7ed3\u70b9\u603b\u6570\u4e3aN2\uff0c\u53f3\u8def\u5f84\u5c0f\u4e8e\u7b49\u4e8elog\uff08N+1),\u6240\u4ee5\u4e24\u8005\u53f3\u8def\u5f84\u4e4b\u548c\u4e3a    $$    O(logN_1 + logN_2) = O(logN_1N_2) = O(log\\sqrt{N_1N_2} = O(log(N_1+N_2))    $$    \u4e0a\u9762\u63a8\u5bfc\u4f7f\u7528\u57fa\u672c\u4e0d\u7b49\u5f0f\\(a + b &gt;= 2\\sqrt{ab}\\),\u4e24\u4e2a\u5806\u53f3\u8def\u5f84\u957f\u5ea6\u4e4b\u548c\u4f9d\u7136\u662f\u4e24\u4e2a\u5806\u5927\u5c0f\u7684\u5bf9\u6570\u7ea7\u522b</p> </li> </ol>"},{"location":"ADS/4.%20Leftist%20Heaps%20and%20Skew%20Heaps/#4122\u8fed\u4ee3\u5f0f","title":"4.1.2.2\u8fed\u4ee3\u5f0f","text":"<p>3 -&gt; 6 -&gt; 7 -&gt; 8 -&gt; 18</p> <p>\u4e0a\u8ff0\u9012\u5f52\u7684\u8fc7\u7a0b\u5c31\u7b49\u4ef7\u4e8e\u8fed\u4ee3\u7684\u8fc7\u7a0b\uff1a\u6bcf\u4e00\u6b21\u9012\u5f52\u5411\u4e0b\u5bf9\u5e94\u5f97\u5e26\u4e2d\u4fdd\u7559\u6839\u7ed3\u70b9\u66f4\u5c0f\u7684\u5806\u7684\u5de6\u5b50\u6811\uff0c\u76f4\u5230\u6700\u540e\u4e00\u6b21\u4e0eNULL\u5408\u5e76\u5e76\u76f4\u63a5\u63a5\u4e0a\u3002</p> <p>\u9012\u5f52\u8fd4\u56de\u7684\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u5c31\u662f\u9010\u4e2a\u68c0\u67e5\u65b0\u7684\u53f3\u8def\u5f84\u4e0a\u7684\u7ed3\u70b9\u662f\u5426\u6709\u8fdd\u53cdNpl\u6027\u8d28\uff0c\u5e76\u4e14\u66f4\u65b0Npl\u3002</p> <p>\u5728\u8fed\u4ee3\u6cd5\u7684\u8fd0\u7b97\u4e2d\uff0c\u5728\u9012\u5f52\u5411\u4e0b\u540e\uff0c\u4ea4\u6362\u5b69\u5b50\u8c03\u6574\u5de6\u503e\u5806\u6027\u8d28\u4e4b\u524d\uff0c<code>\u5408\u5e76\u540e\u7684\u5806\u7684\u53f3\u8def\u5f84\u5c31\u662f\u539f\u6765\u4e24\u4e2a\u5806\u7684\u53f3\u8def\u5f84\u5408\u5e76\u6392\u5e8f\u7684\u7ed3\u679c</code>\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u6bcf\u6b21\u90fd\u5728\u6bd4\u8f83\u4e24\u4e2a\u5806\u7684\u53f3\u8def\u5f84\u4e0a\u7684\u4e24\u4e2a\u70b9\u7684\u5927\u5c0f\uff0c\u5c06\u5c0f\u7684\u4f5c\u4e3a\u6839\u7ed3\u70b9\u63d2\u5165\u3002\u53ea\u9700\u8981\u628a\u4e24\u6761\u53f3\u8def\u5f84\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u5e26\u7740\u5de6\u5b50\u6811\u63a5\u5165\u5230\u65b0\u7684\u53f3\u8def\u5f84\u5373\u53ef\uff08\u4f46\u8981\u6ce8\u610f\u5728\u6b64\u4e4b\u540e\u8fd8\u9700\u8981\u8c03\u6574\u4f7f\u5f97\u6ee1\u8db3\u5de6\u5f0f\u5806\u7ed3\u6784\u6027\u8d28\uff09</p> <p>\u9996\u5148\uff0c\u6211\u4eec\u5bf9\u56fe\u7247\u7684\u6392\u7248\u7a0d\u5fae\u505a\u4e00\u4e9b\u6539\u53d8\uff0c\u6211\u4eec\u4e0d\u518d\u6309\u7167\u4e4b\u524d\u753b\u5806\u7684\u65b9\u5f0f\u53bb\u753b\uff0c\u800c\u662f\u201c\u5de6\u504f\u201d\u5730\u53bb\u753b\uff1a</p> <p></p> <p>\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u8c03\u6574\u4e4b\u524d</p> <p></p> <p>\u7eff\u8272\u548c\u84dd\u8272\u7684\u7bad\u5934\u5206\u522b\u8868\u793a\u4e24\u4e2a\u5f85\u5408\u5e76\u5b50\u6811\u5c1a\u672a\u5408\u5e76\u7684\u5b50\u6811\u7684\u6839\uff0c\u7d2b\u8272\u7bad\u5934\u8868\u793a\u6700\u8fd1\u7684\u5408\u5e76\u53d1\u751f\u7684\u4f4d\u7f6e\u3002</p> <p></p> <p>\u6bd4\u8f83 \u2776 \u548c \u2777\uff0c\u53d1\u73b0 \u2776 \u66f4\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u5c06 \u2776 \u4f5c\u4e3a\u5408\u5e76\u540e\u7684\u6839\u7ed3\u70b9\uff0c\u5de6\u5b50\u6811\u968f\u4e4b\u5408\u5e76\u8fdb\u53bb\uff0c\u540c\u65f6\u66f4\u65b0\u7eff\u8272\u7bad\u5934\u6307\u5411\u5c1a\u672a\u5408\u5e76\u8fdb\u53bb\u7684 \u277a\u3002</p> <p></p> <p>\u548c\u4e0a\u4e00\u6b65\u7c7b\u4f3c\u7684\uff0c\u6bd4\u8f83 \u277a \u548c \u2777\uff0c\u53d1\u73b0 \u2777 \u66f4\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u5c06 \u2777 \u4f5c\u4e3a\u5408\u5e76\u540e\u7684\u6839\u7ed3\u70b9\uff0c\u5de6\u5b50\u6811\u968f\u4e4b\u5408\u5e76\u8fdb\u53bb\uff0c\u540c\u65f6\u66f4\u65b0\u84dd\u8272\u7bad\u5934\u6307\u5411\u5c1a\u672a\u5408\u5e76\u8fdb\u53bb\u7684 \u277b\u3002</p> <p></p> <p>\u4f9d\u7136\u7c7b\u4f3c\u5730\uff0c\u6bd4\u8f83 \u277a \u548c \u277b\uff0c\u53d1\u73b0 \u277a \u66f4\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u5c06 \u277a \u4f5c\u4e3a\u5408\u5e76\u540e\u7684\u6839\u7ed3\u70b9\uff0c\u5de6\u5b50\u6811\u968f\u4e4b\u5408\u5e76\u8fdb\u53bb\uff0c\u540c\u65f6\u66f4\u65b0\u7eff\u8272\u7bad\u5934\u6307\u5411 <code>NULL</code>\u3002</p> <p></p> <p>\u8fd9\u65f6\u5019\u6211\u4eec\u53d1\u73b0\u5df2\u7ecf\u6709\u4e00\u4e2a\u6307\u9488\u7a7a\u4e86\uff0c\u4e5f\u5c31\u662f\u7eff\u8272\u6307\u9488\u5df2\u7ecf\u6307\u5411\u4e86 <code>NULL</code>\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u53ea\u9700\u8981\u6309\u987a\u5e8f\u628a\u84dd\u8272\u6307\u9488\u6307\u5411\u7684\u5185\u5bb9\u90fd\u63a8\u8fdb\u53bb\u5373\u53ef\u3002</p> <p></p> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u8fd8\u9700\u8981\u7ef4\u62a4 Npl \u4fe1\u606f\u5e76\u6839\u636e\u6027\u8d28\u4ea4\u6362\u5de6\u53f3\u5b50\u6811\u3002\u8fd9\u4e00\u90e8\u5206\u548c\u4e4b\u524d\u4e00\u6837\uff0c\u5c31\u4e0d\u518d\u8d58\u8ff0\u4e86\u3002</p> <p>\u5728\u8fed\u4ee3\u6cd5\u7684\u8fd0\u7b97\u4e2d\uff0c\u5728\u9012\u5f52\u5411\u4e0b\u540e\uff0c\u4ea4\u6362\u5b69\u5b50\u8c03\u6574\u5de6\u503e\u5806\u6027\u8d28\u4e4b\u524d\uff0c<code>\u5408\u5e76\u540e\u7684\u5806\u7684\u53f3\u8def\u5f84\u5c31\u662f\u539f\u6765\u4e24\u4e2a\u5806\u7684\u53f3\u8def\u5f84\u5408\u5e76\u6392\u5e8f\u7684\u7ed3\u679c</code>\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u6bcf\u6b21\u90fd\u5728\u6bd4\u8f83\u4e24\u4e2a\u5806\u7684\u53f3\u8def\u5f84\u4e0a\u7684\u4e24\u4e2a\u70b9\u7684\u5927\u5c0f\uff0c\u5c06\u5c0f\u7684\u4f5c\u4e3a\u6839\u7ed3\u70b9\u63d2\u5165\u3002\u53ea\u9700\u8981\u628a\u4e24\u6761\u53f3\u8def\u5f84\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u5e26\u7740\u5de6\u5b50\u6811\u63a5\u5165\u5230\u65b0\u7684\u53f3\u8def\u5f84\u5373\u53ef\uff08\u4f46\u8981\u6ce8\u610f\u5728\u6b64\u4e4b\u540e\u8fd8\u9700\u8981\u8c03\u6574\u4f7f\u5f97\u6ee1\u8db3\u5de6\u5f0f\u5806\u7ed3\u6784\u6027\u8d28\uff09</p> <p></p> <p>\u540c\u6837\u4ece\u8fd9\u5f20\u56fe\u5f00\u59cb\uff0c\u7531\u4e8e\u6211\u4eec\u4e4b\u524d\u63d0\u5230\u7684\uff0c\u5b83\u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u9012\u5f52\u6392\u5e8f\u7684\u540e\u534a\u90e8\u5206\uff0c\u5177\u4f53\u6765\u8bf4\u662f\u6307\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u5217\u7684\u8fc7\u7a0b\u3002</p> <p>\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e24\u4e2a\u5de6\u504f\u5806\u6539\u5199\u6210\u4e24\u4e2a\u6709\u5e8f\u6570\u5217\uff01</p> <p></p> <p>\u7531\u4e8e\u6211\u4eec\u5728\u5408\u5e76\u8fc7\u7a0b\u4e2d\u603b\u662f\u627e\u53f3\u5b69\u5b50\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u6cbf\u7740\u6700\u53f3\u6cbf\u8def\u5f84\u628a\u6ca1\u4e2a\u5de6\u504f\u5806\u62c6\u6210\u8fd9\u79cd\u201c\u60ac\u540a\u201d\u7684\u5e26\u72b6\u5f62\u5f0f\uff0c\u6bcf\u4e00\u201c\u6761\u201d\u7684\u503c\u53d6\u51b3\u4e8e\u6839\u7684\u952e\u503c\uff0c\u4e5f\u5c31\u662f\u8fd9\u4e00\u201c\u6761\u201d\u7684\u6700\u9876\u90e8\u3002</p> <p>\u5728\u8fd9\u5f20\u56fe\u4e2d\uff0c\u6211\u4eec\u5f97\u5230\u7684\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u5206\u522b\u662f [1, 5] \u548c [2, 6]\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u5b83\u4eec\u8fdb\u884c\u6392\u5e8f\u3002</p> <p></p> <p>\u7ecf\u8fc7\u6392\u5e8f\uff0c\u5c31\u4f1a\u53d1\u73b0\u5b83\u4eec\u521a\u597d\u7b26\u5408\u6211\u4eec\u5728\u4e0a\u9762\u6b65\u9aa4\u5f97\u5230\u7684\u7ed3\u679c\uff08\u53ef\u4ee5\u5bf9\u6bd4\u7740\u4e0a\u9762\u7684 Frame 4 \u770b\uff09\u3002\u5b9e\u9645\u4e0a\uff0c\u53ea\u8981\u4f60\u56de\u987e\u4e00\u4e0b\u5f52\u5e76\u6392\u5e8f\u7684\u8fc7\u7a0b\uff0c\u518d\u5bf9\u6bd4\u7740\u770b\u4e0a\u9762\u7684\u8fc7\u7a0b\uff0c\u5c31\u4f1a\u53d1\u73b0\u4e00\u6a21\u4e00\u6837\u3002</p>"},{"location":"ADS/4.%20Leftist%20Heaps%20and%20Skew%20Heaps/#413-\u5355\u70b9\u63d2\u5165","title":"4.1.3 \u5355\u70b9\u63d2\u5165","text":"<p>\u63d2\u5165\u7ed3\u70b9\u53ef\u4ee5\u770b\u4f5c\u5408\u5e76\u4e00\u4e2a\u53ea\u6709\u4e00\u4e2a\u7ed3\u70b9\u7684\u5de6\u504f\u5806\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u590d\u7528\u5408\u5e76\u8fc7\u7a0b\u3002</p> <pre><code>PriorityQueue Insert(int x, PriorityQueue H)\n{\n    PriorityQueue temp = (PriorityQueue)malloc(sizeof(TreeNode));\n    temp-&gt;value = x;\n    temp-&gt;Left = temp-&gt;Right = NULL;\n    temp-&gt;Npl = 0;\n    H = Merge_Recursive(temp, H);\n    LevelOrder(H);\n    return H;\n}\n</code></pre>"},{"location":"ADS/4.%20Leftist%20Heaps%20and%20Skew%20Heaps/#414-\u5355\u70b9\u5220\u9664","title":"4.1.4 \u5355\u70b9\u5220\u9664","text":"<p>\u53ea\u9700\u8981\u5408\u5e76\u9700\u8981\u88ab\u5220\u9664\u7684\u7ed3\u70b9\u7684\u4e24\u4e2a\u5b50\u7ed3\u70b9\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a\u65b0\u7684\u6811\u7684\u6839\u4ee3\u66ff\u88ab\u5220\u9664\u7684\u7ed3\u70b9\uff0c\u518d\u5728\u56de\u6eaf\u7684\u8fc7\u7a0b\u4e2d bottom-up \u5730\u66f4\u65b0 Npl \u5373\u53ef\u3002</p> <pre><code>PriorityQueue Deletemin(PriorityQueue H)\n{\n    if (IsEmpty(H))\n    {\n        printf(\"Error! Priority Queue is empty!\");\n        return H;\n    }\n    PriorityQueue LeftHeap = H-&gt;Left;\n    PriorityQueue RightHeap = H-&gt;Right;\n    free(H);\n    return Merge_Recursive(LeftHeap, RightHeap);\n}\n</code></pre>"},{"location":"ADS/4.%20Leftist%20Heaps%20and%20Skew%20Heaps/#42-skew-heap","title":"4.2 Skew Heap","text":"<p>\u659c\u5806(Skew Heap)\u662f\u6bd4\u5de6\u504f\u5806\u66f4\u4e3a\u4e00\u822c\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u540c\u6837\u6709\u7740\u80fd\u591f\u5feb\u901f\u5408\u5e76\u7684\u6027\u8d28\u3002</p> <p>\u659c\u5806\u4e0e\u5de6\u503e\u5806\u7684\u5173\u7cfb\u5c31\u50cf\u662fsplay tree \u4e0e AVL tree \u7684\u5173\u7cfb\u3002splay tree \u4e0d\u518d\u7ef4\u62a4AVL tree\u7684bf\u5c5e\u6027\uff0c\u53ea\u9700\u8981\u5728\u8bbf\u95ee\u4e00\u4e2a\u7ed3\u70b9\u4e4b\u540e\u5c31\u65e0\u8111\u5730\u5229\u7528zig/zig-zig/zig-zag\u7ffb\u8f6c\u5230\u6839\u7ed3\u70b9</p> <p>\u659c\u5806\u5219\u662f\u4e0d\u518d\u7ef4\u62a4Npl\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728\u9012\u5f52\u8fc7\u7a0b\u4e2d\u5de6\u5f0f\u5806\u6240\u6709\u7ef4\u62a4\u7ed3\u6784\u6027\u8d28\u4ee5\u53ca\u66f4\u65b0Npl\u7684\u64cd\u4f5c\u4e0d\u518d\u9700\u8981\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u4ee5\u4e0b\u64cd\u4f5c</p> <ol> <li>\u5728base case \u5904\u7406H\u4e0eNULL\u8fde\u63a5\u7684\u60c5\u51b5\u65f6\uff0c\u5de6\u503e\u5806\u76f4\u63a5\u8fd4\u56deH\u3002\u4f46\u662f\u659c\u5806\u5fc5\u987b\u770bH\u7684\u53f3\u8def\u5f84\uff0c\u6211\u4eec\u8981\u6c42H\u53f3\u8def\u5f84\u4e0a\u9664\u6700\u5927\u7ed3\u70b9\u540e\u90fd\u5fc5\u987b\u4ea4\u6362\u5176\u5de6\u53f3\u5b69\u5b50\u3002</li> <li>\u5728\u975ebase case\u65f6\uff0c\u82e5 H1\u7684\u6839\u7ed3\u70b9\u5c0f\u4e8eH2\uff0c\u5982\u679c\u662f\u5de6\u503e\u5806\uff0c\u6211\u4eec\u5408\u5e76H1\u7684\u53f3\u5b50\u6811\u548cH2\u4f5c\u4e3aH1\u65b0\u7684\u53f3\u5b50\u6811\uff0c\u6700\u540e\u5224\u65ad\u8fd9\u6837\u662f\u5426\u8fdd\u53cd\u6027\u8d28Npl\u6765\u51b3\u5b9a\u662f\u5426\u4ea4\u6362\u5b69\u5b50\u3002\u800c\u659c\u5806\u5219\u662f\u65e0\u8111\u4ea4\u6362\uff0c\u4e5f\u5c31\u662f\u8bf4\u6bcf\u6b21\u8fd9\u79cd\u60c5\u51b5\uff0c\u90fd\u628aH1\u7684\u5de6\u5b69\u5b50\u6362\u5230\u53f3\u5b69\u5b50\uff0c\u7136\u540e\u628a\u65b0\u5408\u5e76\u7684\u63d2\u5165\u5230H1\u7684\u5de6\u5b50\u6811\u4e0a\u3002</li> </ol> <p>\u200b    </p> <p></p> <p></p> <pre><code>SkewHeap Merge(SkewHeap H1, SkewHeap H2)\n{\n    // \u5f53\u4e00\u8005\u4e3aNULL\u7ed3\u70b9\u65f6\uff0c\u4e0d\u8fdb\u884c\u4ea4\u6362\u5b69\u5b50\uff0c\u76f4\u63a5\u8fd4\u56de\uff0c\u5bf9\u5e94\u8def\u5f84\u7684\u6700\u5927\u503c\n    if(H1 == NULL)\n        return H2;\n    if(H2 == NULL)\n        return H1;\n    if(H1-&gt;value &lt; H2-&gt;value)\n    {\n        H1-&gt;Right = Merge(H1-&gt;Right, H2);\n        // Mer\n        SkewHeap temp = H1-&gt;Left;\n        H1-&gt;Left = H1-&gt;Right;\n        H1-&gt;Right = temp;\n        return H1;\n    }\n    else\n    {\n        H2-&gt;Right = Merge(H2-&gt;Right, H1);\n        SkewHeap temp = H2-&gt;Left;\n        H2-&gt;Left = H2-&gt;Right;\n        H2-&gt;Right = temp;\n\n        return H2;\n    }\n}\n\nSkewHeap Insert(int x, SkewHeap H)\n{\n    SkewHeap SingleNode = Initialize(x);\n    SkewHeap temp = Merge(SingleNode, H);\n    LevelOrder(temp);\n    return temp;\n}\n</code></pre>"},{"location":"ADS/4.%20Leftist%20Heaps%20and%20Skew%20Heaps/#421-\u5408\u7406\u6027\u5206\u6790","title":"4.2.1 \u5408\u7406\u6027\u5206\u6790","text":"<p>\u4ee5\u6bcf\u6b21\u53ea\u63d2\u5165\u4e00\u4e2a\u70b9\u4e3a\u4f8b\u5b50\u8bf4\u660e\u95ee\u9898\u3002</p> <p>\u8fdb\u4e00\u6b65\u5bf9\u9012\u5f52\u65cb\u8f6c\u5230\u5de6\u4fa7\u505a\u89e3\u91ca\uff0c\u9012\u5f52\u6027\u5730\u8f6c\u5230\u5de6\u4fa7\uff0c\u4f7f\u5f97\u672c\u6765\u6700\u53f3\u4fa7\u7684\u8def\u5f84\u53d8\u5230\u6700\u5de6\u4fa7\uff0c\u5373\u4f7f\u4e4b\u540e\u4ea4\u6362\u4f1a\u91cd\u65b0\u8bbf\u95ee\u5230\u8fd9\u4e2a\u5b50\u6811\uff0c\u4f46\u6b64\u65f6\u9664\u4e86\u6839\uff0c\u5176\u4ed6\u90e8\u5206\u4f9d\u7136\u662f\u6700\u5de6\u4fa7\u7684\u8def\u5f84\uff0c\u4e5f\u4e0d\u4f1a\u518d\u8f7b\u6613\u5730\u8bbf\u95ee\u5230\u8fd9\u6b21\u8def\u5f84\u3002</p> <p>\u8ba8\u8bba2\uff1a\u5224\u65ad\u4ee5\u4e0b\u4e24\u4e2a\u8bf4\u6cd5\u662f\u5426\u6b63\u786e\uff0c\u82e5\u6b63\u786e\uff0c\u8bf7\u7ed9\u51fa\u8be6\u7ec6\u7684\u8bc1\u660e\uff1b\u82e5\u4e0d\u6b63\u786e\uff0c\u8bf7\u4e3e\u51fa\u53cd\u4f8b\uff1a 1. \u6309\u987a\u5e8f\u5c06\u542b\u6709\u952e\u503c1, 2, \u00b7 \u00b7 \u00b7 , 2k \u2212 1 \u7684\u7ed3\u70b9\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u63d2\u5165\u5de6\u5f0f\u5806\uff0c\u90a3\u4e48\u7ed3\u679c\u5c06\u5f62\u6210\u4e00\u68f5\u5b8c\u5168\u5e73\u8861\u7684\u4e8c\u53c9\u6811\u3002</p> <p></p> <ol> <li>\u6309\u987a\u5e8f\u5c06\u542b\u6709\u952e\u503c1, 2, \u00b7 \u00b7 \u00b7 , 2k \u2212 1 \u7684\u7ed3\u70b9\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u63d2\u5165\u659c\u5806\uff0c\u90a3\u4e48\u7ed3\u679c\u5c06\u5f62\u6210\u4e00\u68f5\u5b8c\u5168\u5e73\u8861\u7684\u4e8c\u53c9\u6811\u3002</li> </ol>"},{"location":"ADS/4.%20Leftist%20Heaps%20and%20Skew%20Heaps/#422-\u644a\u8fd8\u5206\u6790","title":"4.2.2 \u644a\u8fd8\u5206\u6790","text":"<p>\u52bf\u80fd\u5206\u6790\u65b9\u6cd5\u56de\u987e</p> <p>\\(D_i\\):\u8868\u793a\u6267\u884c\u7b2c\\(i\\)\u904d\u4e4b\u540e\u7684\u6570\u636e\u7ed3\u6784</p> <p>\\(c_i\\):\u8868\u793a\u4ece\\(D_{i-1}\\)\u5230\\(D_i\\)\u7684\u5b9e\u9645\u6210\u672c</p> <p>\\(\\hat c_i\\):\u8868\u793a\u4ece\\(D_{i-1}\\)\u5230\\(D_i\\)\u7684\u5747\u644a\u6210\u672c\uff0c\\(\\hat c_i = c_i + \\Phi(D_i) - \\Phi(D_{i-1})\\)</p> <p>\u603b\u5747\u644a\u6210\u672c\u4e3a\uff1a\\(\\sum \\hat c_i = \\sum c_i + \\Phi(D_n) - \\Phi(D_0)\\)</p> <p>\u5206\u6790 skew heap \u7684\u5747\u644a\u590d\u6742\u5ea6\uff0c\u4e3b\u8981\u5c31\u662f\u5206\u6790\u5408\u5e76\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\uff0c\u56e0\u4e3a\u5176\u4ed6\u64cd\u4f5c\u90fd\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5408\u5e76\u64cd\u4f5c\u3002</p> <p><code>\u5f15\u7406\uff1a</code>\u5bf9\u4e8e\u53f3\u8def\u5f84\u4e0a\u6709\\(l\\)\u4e2a\u8f7b\u7ed3\u70b9\u7684\u659c\u5806\uff0c\u6574\u4e2a\u659c\u5806\u81f3\u5c11\u6709\\(2^l - 1\\)\u4e2a\u7ed3\u70b9\uff0c\u8fd9\u610f\u5473\u7740\u4e00\u4e2an\u7ed3\u70b9\u7684\u659c\u5806\u53f3\u8def\u5f84\u4e0a\u7684\u8f7b\u7ed3\u70b9\u4e2a\u6570\u4e3a\\(O(log \\ n)\\)</p> <p><code>\u8bc1\u660e\uff1a</code></p> <p>\u200b   1. \u5bf9$ l = 1$\u663e\u7136\u6210\u7acb</p> <ol> <li>\u5047\u8bbe\u5bf9\u5c0f\u4e8e\u7b49\u4e8e\\(l\\)\u90fd\u6210\u7acb\u3002\u5bf9\u4e8e\\(l+1\\)\u60c5\u51b5\uff0c\u6211\u4eec\u627e\u5230\u53f3\u8def\u5f84\u4e0a\u7684\u7b2c\u4e8c\u4e2a\u8f7b\u7ed3\u70b9\uff0c\u4ee5\u5b83\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u81f3\u5c11\u6709\\(2^l -1\\)\u4e2a\u7ed3\u70b9\u3002</li> </ol> <p>\u73b0\u5728\u8003\u8651\u7b2c\u4e00\u4e2a\u8f7b\u7ed3\u70b9\uff0c\u6839\u636e\u5b9a\u4e49\uff0c\u8f7b\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u66f4\u5927\uff0c\u800c\u53f3\u8def\u5f84\u4e0a\u7684\u7b2c\u4e8c\u4e2a\u8f7b\u7ed3\u70b9\u5728\u53f3\u5b50\u6811\u4e2d\u3002\u6240\u4ee5\u7b2c\u4e00\u4e2a\u8f7b\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u81f3\u5c11\u6709\\(2^l -1\\)\u4e2a\u7ed3\u70b9\u3002</p> <p>\u6240\u4ee5\u6574\u4e2a\u5806\u6709\\(1 + 2^l -1 + 2^l -1 = 2^{l+1}-1\\)\u4e2a\u7ed3\u70b9</p> <p><code>\u5b9a\u7406\uff1a</code>\u82e5\u6211\u4eec\u6709\u4e24\u4e2a\u659c\u5806H1\u548cH2\uff0c \u5b83\u4eec\u5206\u522b\u7531n1\u548cn2\u4e2a\u7ed3\u70b9\uff0c\u5219\u5408\u5e76H1\u548cH2\u7684\u644a\u8fd8\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(log n), n = n1 + n2</p> <p>definition \"\u52bf\u80fd\u51fd\u6570\"</p> <p>\u6211\u4eec\u5b9a\u4e49 \\(\\Phi(Heap) = \\text{number of heavy node in } Heap\\)</p> <p>\u5176\u4e2d\uff0c\u989d\u5916\u9700\u8981\u5b9a\u4e49 heavy node \u548c light node\uff1a</p> <p>definition \"heavy node &amp; light node\"</p> <p>\u5bf9\u4e8e\u4e00\u4e2a\u5b50\u5806 \\(H\\)\uff0c\u5982\u679c \\(size(H.\\text{right\\_descendant}) \\geq \\frac{1}{2}size(H)\\)\uff0c\u5219 \\(H\\) \u662f heavy node\uff0c\u5426\u5219\u662f light node\u3002 </p> <p>A node p is heavy if the number of descendants of p\u2019s right subtree is at least half of the number of descendants of p, and light otherwise.  Note that the number of descendants of a node <code>includes the node itself</code>.</p> <p>\u4ee4\\(H_3\\)\u4e3a\u5408\u5e76\u540e\u7684\u65b0\u5806\uff0c\u8bbe\\(H_i(i = 1,2)\\)\u7684\u53f3\u8def\u5f84\u4e0a\u7684\u8f7b\u7ed3\u70b9\u6570\u91cf\u4e3a\\(l_i\\),\u91cd\u7ed3\u70b9\u6570\u91cf\u4e3a\\(h_i\\)</p> <p>\u771f\u5b9e\u7684\u5408\u5e76\u64cd\u4f5c\u6700\u574f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(\\sum c_i = l_1 + l_2 + h_1+h_2\\)\uff0c\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u5728\u53f3\u8def\u5f84\u4e0a\u5b8c\u6210</p> <p>\u644a\u8fd8\u65f6\u95f4\u6210\u672c\u4e3a\\(\\sum \\hat c_i = \\sum c_i + \\Phi(H_3) - \\Phi(H_1) - \\Phi(H_2)\\)</p> <p>\u5c06\\(h_i^0\\)\u8bb0\u4e3a\u4e0d\u5728\u53f3\u8def\u5f84\u4e0a\u7684\u91cd\u7ed3\u70b9\u7684\u6570\u91cf\\(\\Phi(H_i) = h_i + h_i^0\\) $$ \\left{     \\begin{aligned}         c &amp;= l_1 + h_1 + l_2 + h_2 &amp;(1)\\         \\Phi(H_{3}) &amp;\\leq l_1 + h^0_1 + l_2 + h^0_2 &amp;(2)\\         \\Phi(H_1) &amp;= h_1 + h^0_{1} &amp;(3)\\         \\Phi(H_2) &amp;= h_2 + h^0_{2} &amp;(4)     \\end{aligned} \\right. $$</p> <p><code>\u6027\u8d28\uff1a</code></p> <ol> <li>\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u662f <code>heavy node</code>\uff0c\u5e76\u4e14\u5728\u5176\u53f3\u5b50\u6811\u53d1\u751f\u4e86\u5408\u5e76\uff08\u5305\u62ec\u7ffb\u8f6c\uff09\uff0c\u90a3\u4e48\u5b83\u4e00\u5b9a\u53d8\u4e3a\u4e00\u4e2a <code>light node</code>\uff1b</li> <li>\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u662f <code>light node</code>\uff0c\u5e76\u4e14\u5728\u5176\u53f3\u5b50\u6811\u53d1\u751f\u4e86\u5408\u5e76\uff08\u5305\u62ec\u7ffb\u8f6c\uff09\uff0c\u90a3\u4e48\u5b83\u53ef\u80fd\u53d8\u4e3a\u4e00\u4e2a heavy node\uff1b</li> <li>\u5408\u5e76\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u7684 heavy/light \u53d1\u751f\u53d8\u5316\uff0c\u90a3\u4e48\u5b83\u539f\u5148\u4e00\u5b9a\u5728\u5806\u7684\u6700\u53f3\u4fa7\u8def\u5f84\u4e0a;\u56e0\u4e3a\u5176\u5b83\u7ed3\u70b9\u5408\u5e76\u524d\u540e\u5b50\u6811\u662f\u5b8c\u5168\u88ab\u590d\u5236\u7684\uff0c\u6240\u4ee5\u4e0d\u53ef\u80fd\u6539\u53d8\u8f7b\u91cd\u72b6\u6001</li> </ol> <p>\u5408\u5e76\u540e\u539f\u672c\u4e0d\u5728\u53f3\u8def\u5f84\u4e0a\u7684\\(h_i^0\\)\u4e2a\u91cd\u7ed3\u70b9\u4ecd\u7136\u662f\u91cd\u7ed3\u70b9\uff0c\u5728\u53f3\u8def\u5f84\u4e0a\u7684\\(h1 + h2\\)\u4e2a\u91cd\u7ed3\u70b9\u5168\u90e8\u53d8\u6210\u8f7b\u7ed3\u70b9\uff0c\\(l1 + l2\\) \u4e2a\u8f7b\u7ed3\u70b9\u4e0d\u4e00\u5b9a\u90fd\u53d8\u91cd\u3002 $$ \\begin{aligned} \\Phi(H_3) &amp;&lt;= h_1^0 +h_2^0 + l_1 + l_2 \\ \\ \\sum \\hat c_i &amp;= \\sum c_i + \\Phi(H_3) - \\Phi(H_1) -\\phi(H_2) \\ &amp; &lt;= l_1 + l_2 +h_1+h_2 + (l_1 + l_2 + h_1^0 + h_2^0) - (h_1 + h_1^0 + h_2 + h_2^0)\\ &amp; = 2(l_1 + l_2) = O(log   n_1 + log  n_2) = O(log(n_1 + n_2)) \\end{aligned} $$</p>"},{"location":"ADS/4.%20Leftist%20Heaps%20and%20Skew%20Heaps/#43-\u4e60\u9898\u96c6","title":"4.3 \u4e60\u9898\u96c6","text":"<ol> <li>The result of inserting keys 1 to \\(2^k -1\\) for any \\(k&gt;4\\) in order into an initially empty skew heap is always a full binary tree.</li> </ol> <p><code>True</code></p> <p>\u6570\u5b66\u5f52\u7eb3\u6cd5\u8bc1\u660e\uff0c\u9996\u5148\u5bf9\u4e8ek=4\uff0c\u6ee1\u4e8c\u53c9\u6811\u6210\u7acb</p> <p>\u5bf9\u4e8ek=5\uff0c\u5de6\u53f3\u5b50\u6811\u7684</p> <ol> <li>The right path of a skew heap can be arbitrarily long. </li> </ol> <p><code>True</code></p> <p>\u76f8\u5bf9\u800c\u8a00\uff0cleftist heap \u5c31\u4e0d\u80fd\u8fd9\u4e48\u4efb\u610f\u4e86\uff0c\u5b83\u53d7$ logN$ \u9650\u5236\u3002</p> <ol> <li>A skew heap is a heap data structure implemented as a binary tree. Skew heaps are advantageous because of their ability to merge more quickly than balanced binary heaps. The worst case time complexities for Merge, Insert, and DeleteMin are all \\(O(N)\\), while the amorited time complexities for Merge, Insert, and DeleteMin are all \\(O(logN)\\).</li> </ol> <p>True</p> <p><code>\u659c\u5806\u6267\u884cmerge\uff0cinsert\uff0cdelete\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO\uff08N\uff09\uff0c\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO\uff08logN\uff09</code></p> <ol> <li>Merge the two leftist heaps in the following figure.  Which one of the following statements is FALSE?</li> </ol> <p></p> <ul> <li> <p>A. 2 is the root with 11 being its right child</p> </li> <li> <p>B. the depths of 9 and 12 are the same</p> </li> <li> <p>C. 21 is the deepest node with 11 being its parent</p> </li> <li> <p><code>D. the null path length of 4 is less than that of 2</code></p> <p></p> </li> <li> <p>We can perform BuildHeap for leftist heaps by considering each element as a one-node leftist heap, placing all these heaps on a queue, and performing the following step: Until only one heap is on the queue, dequeue two heaps, merge them, and enqueue the result.  Which one of the following statements is FALSE?</p> </li> <li> <p>A. in the \\(k\\)-th run, \\(\\lceil N/2^k \\rceil\\) leftist heaps are formed, each contains \\(2^k\\) nodes</p> </li> <li> <p>B. the worst case is when \\(N=2^K\\) for some integer \\(K\\)</p> </li> <li> <p>C. the time complexity \\(T(N) = O(\\frac{N}{2}log 2^0 + \\frac{N}{2^2}log 2^1 + \\frac{N}{2^3}log 2^2 + \\cdots + \\frac{N}{2^K}log 2^{K-1})\\) for some integer \\(K\\) so that \\(N=2^K\\)</p> </li> <li> <p>D. the worst case time complexity of this algorithm is \\(\\Theta (NlogN)\\)</p> </li> </ul> <p>C\u9009\u9879\u5f97\u5230\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N), \u4e0eD\u9009\u9879\u77db\u76fe</p> <p></p> <ol> <li> <p>Insert keys 1 to 15 in order into an initially empty skew heap.  Which one of the following statements is FALSE?</p> </li> <li> <p>A. the resulting tree is a complete binary tree</p> </li> <li> <p>B. there are 6 leaf nodes</p> </li> <li> <p>C. 6 is the left child of 2</p> </li> <li> <p>D. 11 is the right child of 7</p> </li> </ol> <p></p> <p></p> <p>\u663e\u7136\uff0cAB\u9009\u9879\u77db\u76fe\uff0c\u524d\u9762\u5f97\u5230\uff0c\u7ed3\u679c\u80af\u5b9a\u662f\u6ee1\u4e8c\u53c9\u6811</p> <ol> <li>Merge the two skew heaps in the following figure.  Which one of the following statements is FALSE?</li> </ol> <p></p> <ul> <li> <p>A. 15 is the right child of 8</p> </li> <li> <p>B. 14 is the right child of 6</p> </li> <li> <p>C. 1 is the root</p> </li> <li> <p>D. 9 is the right child of 3</p> </li> </ul> <p></p> <p><code>\u5177\u4f53\u601d\u8def\u4e3a\uff1a\u5148\u5bf9\u53f3\u8def\u5f84\u7ed3\u70b9\u8fdb\u884c\u5927\u5c0f\u6392\u5e8f\uff0c\u5206\u522b\u4e3a1\uff0c3\uff0c5\uff0c6\uff0c13</code></p> <p>\u5bf9\u5e94\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u76f4\u63a5\u79fb\u52a8\u5230\u53f3\u5b50\u6811\u5373\u53ef</p>"},{"location":"ADS/5.%20Binomial%20Queue/","title":"\u4e94. Binomial Queue","text":"<p> \u7ea6 2632 \u4e2a\u5b57  337 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 17 \u5206\u949f</p> <p>\u4e3a\u4ec0\u4e48\u9700\u8981\u4e8c\u9879\u5806\uff1f</p> <p>\u4e8c\u9879\u5806\u7684\u5f15\u5165\u6765\u6e90\u4e8e\u6211\u4eec\u5e0c\u671b\u63d2\u5165\u5efa\u5806\u7684\u64cd\u4f5c\u6709\u5e38\u6570\u7684\u5e73\u5747\u65f6\u95f4\u3002\u56e0\u4e3a<code>\u4e8c\u9879\u5806\u80fd\u591f\u5b9e\u73b0\u5728$O(N)$\u7684\u65f6\u95f4\u5185\u5b9e\u73b0$n$\u4e2a\u7ed3\u70b9\u7684\u63d2\u5165\u64cd\u4f5c\u3002</code></p>"},{"location":"ADS/5.%20Binomial%20Queue/#51-\u6982\u5ff5","title":"5.1 \u6982\u5ff5","text":"<p>A binomial queue is not a heap-ordered tree, but rather a collection of heap-ordered trees, known as a<code>forest</code>. Each heap-ordered tree is a binomial tree.</p> <p>\u4e8c\u9879\u5f0f\u961f\u5217\u4e0d\u662f\u5806\u6709\u5e8f\u6811\uff0c\u800c\u662f\u5806\u6709\u5e8f\u6811\u7684\u96c6\u5408\uff0c\u79f0\u4e3a\u68ee\u6797\u3002\u6bcf\u4e2a\u5806\u6392\u5e8f\u6811\u90fd\u662f\u4e00\u4e2a\u4e8c\u9879\u5f0f\u6811\u3002</p> <p>A binomial tree of height 0 is a one-node tree.</p> <p>A binomial tree, \\(B_k\\), of height k is formed by attaching a binomial tree, \\(B_{k \u2013 1}\\), to the root of another binomial tree,\\(B_{k \u2013 1}\\).</p> <p>\u4e8c\u9879\u5806\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <ol> <li> <p>\u7ed3\u6784\u6027\u8d28</p> </li> <li> <p>\u4e8c\u9879\u5806\u4e0d\u518d\u662f\u4e00\u68f5\u6811\uff0c\u800c\u662f\u591a\u68f5\u6811\u6784\u6210\u7684\u68ee\u6797\uff0c\u5176\u4e2d\u6bcf\u4e00\u68f5\u6811\u90fd\u662f\u4e8c\u9879\u6811</p> </li> <li>\u4e00\u4e2a\u4e8c\u9879\u5806\u4e2d\u7684\u6bcf\u4e00\u68f5\u4e8c\u9879\u6811\u90fd\u5177\u6709\u4e0d\u540c\u7684\u9ad8\u5ea6\uff0c\u5373\u6bcf\u4e00\u9ad8\u5ea6\u6700\u591a\u5bf9\u5e94\u4e00\u9897\u4e8c\u9879\u6811</li> <li> <p>\u9ad8\u5ea6\u4e3a0\u7684\u4e8c\u9879\u6811\u662f\u4e00\u4e2a\u5355\u8282\u70b9\u6811\u3002\u9ad8\u5ea6\u4e3ak\u7684\u4e8c\u9879\u6811\\(B_k\\)\u901a\u8fc7\u5c06\u4e00\u68f5\u4e8c\u9879\u6811\\(B_{k-1}\\)\u8fde\u63a5\u5230\u53e6\u4e00\u68f5\u4e8c\u9879\u6811\\(B_{k-1}\\)\u7684\u6839\u4e0a\u5f62\u6210\u3002</p> </li> <li> <p>\u5e8f\u6027\u8d28\uff1a</p> </li> </ol> <p>\u6bcf\u4e00\u68f5\u4e8c\u9879\u6811\u90fd\u4fdd\u6301\u5806\u7684\u5e8f\u6027\u8d28\uff08\u6709\u5e8f\u5806\uff09\uff0c\u5bf9\u4e8e\u6700\u5c0f\u5806\u2014\u2014\u5b69\u5b50\u7ed3\u70b9\u5927\u4e8e\u7236\u4eb2\u7ed3\u70b9</p> <p></p> <p> $$ (a+b)^n = \\sum_{i= 1} ^n C_n ^i a<sup>{n-i}b</sup>i $$</p> <p>\u4ece\u56fe\u4e2d\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u51fa\u4e8c\u9879\u6811\\(B_k\\)\u5b9e\u9645\u4e0a\u662f\u7531\u4e00\u4e2aroot\u52a0\u4e0a\\(B_0,B_1,...B_{k-1}\\)\u7ec4\u6210</p> <p>\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\u8bc1\u660e \\(B_k\\) \u6709 \\(2^k\\)\u4e2a\u7ed3\u70b9</p> <ol> <li> <p>\u5f53k=0\u65f6\uff0c\u663e\u7136\u4e00\u4e2a\u7ed3\u70b9\u6210\u7acb</p> </li> <li> <p>\u5f53k=m\u65f6\uff0c\u5047\u8bbe\u6761\u4ef6\u6210\u7acb\u3002\u90a3\u4e48\u5f53k=m+1\u65f6\uff0c</p> </li> </ol> <p>\\(B_{m+1}\\)\u7684\u7ed3\u70b9\u6570\u662f\\(2^0+2^1+...+2^m + 1 = 2 ^{m+1} - 1 + 1 = 2 ^{m+1}\\)</p> <p>\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\u8bc1\u660e\u5728\u6df1\u5ea6\u4e3a\\(d\\)\u7684\u7ed3\u70b9\u6570\u6070\u597d\u662f\u4e8c\u9879\u7cfb\u6570\\(C_n ^d\\)</p> <p><code>\u6839\u636e\u4e8c\u9879\u6811\u7684\u5b9a\u4e49\uff1aB_k\u662f\u7531\u4e24\u4e2aB_{k-1}\u5f62\u6210\u7684\uff0c\u4e14\u4e24\u68f5\u6811\u5b58\u5728\u6df1\u5ea6\u5dee1</code> $$  \\begin{aligned}  &amp;C_{n}^0 = C_{n+1}^0 = 1\\  &amp;C_{n}^1 + C_{n}^0 = C_{n+1}^1 = n+1\\  &amp;....\\  &amp;C_n^i + C_n^{i-1} = C_{n+1}^i \\end{aligned} $$</p> <p>\\(B_k\\) structure + heap order + one binomial tree for each height</p> <p>A priority queue of any size can be uniquely represented by a collection of binomial trees.</p> <p></p>"},{"location":"ADS/5.%20Binomial%20Queue/#52-\u64cd\u4f5c","title":"5.2 \u64cd\u4f5c","text":""},{"location":"ADS/5.%20Binomial%20Queue/#521-findmin","title":"5.2.1 FindMin","text":"<p>The minimum key is in one of the roots.</p> <p>There are at most \\(logN\\) roots, hence $ Tp$ =$ O(logN)$.</p> <p>\u6700\u5c0f\u503c\u5728\u4e8c\u9879\u961f\u5217\u7684\u67d0\u4e00\u4e2a\u6839\u7ed3\u70b9\uff0c\u53ea\u9700\u904d\u5386\u6240\u6709\u7684root</p> <p>We can remember the minimum and update whenever it is changed. Then this operation will take O(1).</p> <p>\u8bbe\u7f6e\u4e13\u95e8\u8bb0\u5f55\u6700\u5c0f\u6839\u7ed3\u70b9\u7684\u7ed3\u70b9\uff0c\u53ea\u9700\u8981\u5728DeleteMin\u6216\u5219Insert \u4e00\u4e2a\u65b0\u7684\u6700\u5c0f\u503c\u540e\u66f4\u65b0\u8fd9\u4e2a\u4e34\u65f6\u7ed3\u70b9\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(1)\\)</p>"},{"location":"ADS/5.%20Binomial%20Queue/#522-merge","title":"5.2.2 Merge","text":"<p>\u6bcf\u4e00\u4e2a\u4e8c\u9879\u5806\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u6570\u3002\u90a3\u4e48\u5408\u5e76\u4e8c\u9879\u5806\u5b9e\u9645\u4e0a\u53ef\u4ee5\u7b49\u4ef7\u4e8e\u4e8c\u8fdb\u5236\u6570\u7684\u52a0\u6cd5\u3002</p> <p>\u4ece\u6700\u5c0f\u7684\u4e8c\u9879\u6811\u5f00\u59cb\uff08\u4e5f\u5c31\u662f\u4e8c\u8fdb\u5236\u7684\u6700\u4f4e\u4f4d\uff09\uff0c\u5982\u679c\u65e0\u9700\u8fdb\u4f4d\uff080+1\uff0c1+0\uff09\u5219\u76f4\u63a5\u7559\u4e0b\u4f5c\u4e3a\u65b0\u5806\u7684\u4e00\u90e8\u5206\u3002\u5982\u679c\u9700\u8981\u8fdb\u4f4d(1+1)\uff0c\u5728\u5408\u5e76\u540e\u4e0e\u4e0b\u4e00\u4f4d\u505a\u52a0\u6cd5\uff0c\u5982\u6b64\u5faa\u73af\u5230\u6700\u9ad8\u4f4d\u5b8c\u6210\u64cd\u4f5c\u3002</p> <p>\u5728\u4fdd\u8bc1\u5806\u7684\u5b58\u50a8\u987a\u5e8f\u662f\u6309\u9ad8\u5ea6\u4ece\u5c0f\u5230\u5927\u6392\u5217\u7684\u524d\u63d0\uff08\u8fd9\u6837\u5c31\u4e0d\u7528\u5148\u904d\u5386\u6240\u6709\u7684\u5806\uff0c\u627e\u5230\u6700\u5c0f\u7684\u5806\u3002\u800c\u662f\u76f4\u63a5\u4ece\u5f00\u5934\u8fdb\u884c\u5408\u5e76\uff09\u4e0b\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5f88\u663e\u7136\u5c31\u662f\\(O(log n)\\)\uff0c\u56e0\u4e3a\u5c31\u662f\u4e8c\u8fdb\u5236\u9010\u4f4d\u505a\u64cd\u4f5c,<code>\u53ea\u9700\u8981\u8ba1\u7b97\u4e00\u5171\u6709\u591a\u5c11\u4e8c\u8fdb\u5236\u4f4d\u5373\u53ef\uff0cO\uff08logN\uff09</code></p> <p>Must keep the trees in the binomial queue sorted by height.</p> <p>\u76f8\u5e94\\(B_k\\) merge\u7684\u65f6\u5019\uff0c\u9700\u8981\u6ee1\u8db3heap\u4e0a\u5c0f\u4e0b\u5927\u7684\u8981\u6c42\u3002root\u5927\u7684\u4f5c\u4e3aroot\u5c0f\u7684\u5b50\u6811</p> <pre><code>// \u4e8c\u9879\u6811\u7684\u5408\u5e76\nBinTree MergeTrees(BinTree T1, BinTree T2)\n{\n    // merge equal size trees\n    // attach the larger one to the smaller one\n    if(T1-&gt;Element &gt; T2-&gt;Element)\n        return MergeTrees(T2, T1);\n    // T2 is larger, attach T2 to T1\n    T2-&gt;NextSibling = T1-&gt;LeftChild;\n    T1-&gt;LeftChild = T2;\n    return T1;\n}\n// \u4e8c\u9879\u961f\u5217\u7684\u5408\u5e76\nBinQueue Merge(BinQueue H1, BinQueue H2)\n{\n    BinTree T1, T2, Carry = NULL;\n    if(H1-&gt;currentsize + H2-&gt;currentsize &gt; 100)\n        cout &lt;&lt; \"Merge would exceed max tree capacity!\" &lt;&lt; endl;\n    H1-&gt;currentsize += H2-&gt;currentsize;\n    for(int i = 0, j = 1; j &lt;= H1-&gt;currentsize; i++, j *= 2)\n    {\n        T1 = H1-&gt;TheTrees[i];\n        T2 = H2-&gt;TheTrees[i];\n        switch(4 * !!Carry + 2 * !!T2 + !!T1)\n        {\n            // Carry T2 T1\n            case 0: // 000 no tree\n                break;\n            case 1: // 001 only T1\n                break;\n            case 2: // 010 only T2\n                H1-&gt;TheTrees[i] = T2;\n                H2-&gt;TheTrees[i] = NULL;\n                break;\n            case 3: // 011 T1 and T2\n                Carry = MergeTrees(T1, T2);\n                H1-&gt;TheTrees[i] = H2-&gt;TheTrees[i] = NULL;\n                break;\n            case 4: // 100 only Carry\n                H1-&gt;TheTrees[i] = Carry;\n                Carry = NULL;\n                break;\n            case 5: // 101 Carry and T1;\n                Carry = MergeTrees(Carry, T1);\n                H1-&gt;TheTrees[i] = NULL;\n                break;\n            case 6: // 110 Carry and T2\n                Carry = MergeTrees(Carry, T2);\n                H2-&gt;TheTrees[i] = NULL;\n                break;\n            case 7: // 111 all three\n                H1-&gt;TheTrees[i] = Carry;\n                Carry = MergeTrees(T1, T2);\n                H2-&gt;TheTrees[i] = NULL;\n                break;\n        }\n    }\n    return H1;\n}\n</code></pre> <ol> <li> <p>\u8fd9\u91cc\u4f7f\u7528<code>!!</code>\u7684\u76ee\u7684\u662f\u5c06\u6307\u9488<code>bool\u5316</code>\uff0c\u5982\u679cT1\u5b58\u5728\uff0c!!T1\u5c31\u7b49\u4e8e1\uff0c\u5982\u679cT2\u4e0d\u5b58\u5728\uff0c\u90a3\u4e48!!T2\u5c31\u7b49\u4e8e0</p> </li> <li> <p>\u7136\u540e\u6211\u4eec\u5c31\u80fd\u7406\u89e3\\(4\\times !!Carry + 2\\times !!T2+!!T1\\) \u7684\u542b\u4e49\u4e86\uff0c\u4e8b\u5b9e\u4e0a\u8fd9\u5c31\u662f\u4e00\u4e2a\u4e09\u4f4d\u4e8c\u8fdb\u5236\u6570\uff08\u5f53\u7136case \u7684    \u6807\u53f7\u8fd8\u662f\u5341\u8fdb\u5236\u7684\uff0c\u4f46\u6211\u4eec\u5fc3\u91cc\u8981\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\u6765\u5206\u6790\uff09\uff0c\u6700\u9ad8\u4f4d\u8868\u793a\u662f\u5426\u6709carry\uff0c\u5373<code>\u4e4b\u524d\u7684\u5408\u5e76\u662f\u5426\u5e26\u6765\u4e86\u8fdb\u4f4d\uff08\u4ece\u5806\u7684\u89d2\u5ea6\u770b\u4e5f\u5c31\u662f\u4e4b\u524d\u5408\u5e76\u51fa\u4e86\u4e00\u68f5\u65b0\u7684\u66f4\u9ad8\u7684\u4e8c\u9879\u6811\uff09</code>\uff0c\u7b2c\u4e8c\u4f4d\u4ee3\u8868\u7b2c\u4e8c\u4e2a\u5806H2\u662f\u5426\u6709\u9ad8\u5ea6\u4e3ai \u7684\u4e8c\u9879\u6811\uff0c\u6700\u540e\u4e00\u4f4d\u4ee3\u8868H1 \u662f\u5426\u6709\u9ad8\u5ea6\u4e3ai \u7684\u4e8c\u9879\u6811\u3002</p> </li> <li> <p>\u4e0d\u540ccase\u5bf9\u5e94\u7684\u60c5\u51b5</p> </li> <li> <p>000\uff1a\u4ec0\u4e48\u90fd\u4e0d\u7528\u505a</p> </li> <li>001\uff1a\\(T1\\)\u5b58\u5728\uff0c\u65e2\u7136\u8fd4\u56de\u7684\u5c31\u662f\\(H1\\)\uff0c\u6240\u4ee5\u4ec0\u4e48\u90fd\u4e0d\u7528\u505a</li> <li>010\uff1a\\(T2\\)\u5b58\u5728\uff0c\u4f46\u662f\u7531\u4e8e\u8fd4\u56de\u7684\u662f\\(H1\\)\uff0c\u9700\u8981\u5c06\\(H2\\)\u4e2d\u7684\u6811\u8f6c\u79fb\u5230\\(H1\\)\u4e2d\u5bf9\u5e94\u7684\u6811\uff0c\u540c\u65f6\\(H2\\)\u5bf9\u5e94\u7684\u6811\u9700\u8981\u7f6e\u4e3aNULL</li> <li>011\uff1a\\(T1\\)\uff0c\\(T2\\)\u90fd\u5b58\u5728\uff0c\u6b64\u65f6\u4f1a\u4ea7\u751fcarry\uff0c\\(H1\\) \u548c \\(H2\\) \u5f53\u524d\u4f4d\u53d8\u4e3aNULL\uff0c\u8fdb\u4f4d\u7b49\u4e8e\u4e24\u4e2a\u5806\u8be5\u9ad8\u5ea6\u7684\u4e8c\u9879\u6811\u5408\u5e76\u540e\u7684\u7ed3\u679c</li> <li>100\uff1a\u4ec5\u4ec5carry\u5b58\u5728\uff0c\u7c7b\u6bd4010</li> <li>101\uff1a\\(H1\\) \u5f53\u524d\u4f4d\u53d8\u4e3aNULL\uff0c\u65b0\u7684carry \u7b49\u4e8e\\(T1\\) \u548c\u5f53\u524d\u7684carry \u5408\u5e76\u7684\u7ed3\u679c</li> <li>110\uff1a\\(H2\\) \u5f53\u524d\u4f4d\u53d8\u4e3aNULL\uff0c\u65b0\u7684carry \u7b49\u4e8e\\(T2\\) \u548c\u5f53\u524d\u7684carry \u5408\u5e76\u7684\u7ed3\u679c</li> <li>111\uff1a\u6b64\u8ba9\\(H1\\) \u5f53\u524d\u4f4d\u53d8\u4e3acarry\uff0c\u65b0\u7684carry \u7b49\u4e8e\\(T1\\) \u548c\\(T2 \\(\u5408\u5e76\u7684\u7ed3\u679c\uff0c\u6700\u540e\u7ed9\\)H2\\) \u5f53\u524d\u4f4d\u53d8\u4e3aNULL \u5373\u53ef\u3002</li> </ol>"},{"location":"ADS/5.%20Binomial%20Queue/#523-insert","title":"5.2.3 Insert","text":"<p>\u770b\u4f5c\u662fmerge\u7684special case</p> <p>\u3010Example\u3011Insert 1, 2, 3, 4, 5, 6, 7 into an initially empty queue.</p> <ul> <li>1\uff0c2 \u5f62\u6210\u4e00\u4e2a\\(B_1\\)</li> <li>3\uff0c4\u5f62\u6210\u4e00\u4e2a\\(B_1\\)\uff0c\u4e0e\u524d\u9762\u76841\uff0c2 merge \u5f62\u6210\\(B_2\\)</li> <li>5\uff0c6\u5f62\u6210\u4e00\u4e2a\\(B_1\\)</li> <li>7\u5f62\u6210\u4e00\u4e2a\\(B_0\\)</li> </ul> <p></p> <p></p> <pre><code>BinQueue Insert(BinQueue H1, int x)\n{\n    BinQueue OneItem;\n    BinTree T;\n    OneItem = Initialize();\n    T = new BinNode;\n    if(T == NULL)\n        cout &lt;&lt; \"Out of space!\" &lt;&lt; endl;\n    T-&gt;Element = x;\n    T-&gt;LeftChild = T-&gt;NextSibling = NULL;\n    OneItem-&gt;TheTrees[0] = T;\n    OneItem-&gt;currentsize = 1;\n    return Merge(H1, OneItem);\n}\n</code></pre>"},{"location":"ADS/5.%20Binomial%20Queue/#524-deletemin","title":"5.2.4 DeleteMin","text":"<p>\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(log N)\\)</p> <p>\u5728\u6839\u7ed3\u70b9\u627e\u5230\u6700\u5c0f\u503c\uff0c\u7136\u540e\u628a\u6700\u5c0f\u503c\u6240\u5728\u7684\u6811\u5355\u72ec\u62ff\u51fa\u5206\u88c2\u4e3a\u4e8c\u9879\u961f\u5217\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u65b0\u7684\u4e8c\u9879\u961f\u5217\u4e0e\u539f\u4e8c\u9879\u961f\u5217\u8fdb\u884c\u5408\u5e76\u3002\u6bcf\u4e00\u4e2a\u8fc7\u7a0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(logN)\\)\u3002\u6545\u52a0\u8d77\u6765\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u4e3a\\(O(logN)\\)\u3002</p> <p></p> <p></p> <pre><code>int DeleteMin(BinQueue H)\n{\n    BinQueue DeletedQueue;\n    Position DeletedTree, OldRoot;\n    int MinItem = 1000000;\n    int i, j, MinTree;\n    // MinTree is the index of thr tree with the minimum item\n    if(Isempty(H))\n    {\n        cout &lt;&lt; \"Empty binomial queue!\" &lt;&lt; endl;\n        return -1;\n    }\n    // 1. find the tree with the minimum item\n    for(i = 0; i &lt; MaxTrees; i++)\n    {\n        if(H-&gt;TheTrees[i] &amp;&amp; H-&gt;TheTrees[i]-&gt;Element &lt; MinItem)\n        {\n            MinItem = H-&gt;TheTrees[i]-&gt;Element;\n            MinTree = i;\n        }\n    }\n    DeletedTree = H-&gt;TheTrees[MinTree];\n    // 2. remove the MinTree from H\n    H-&gt;TheTrees[MinTree] = NULL;\n    // 3. remove the MinItem from the MinTree\n    // and store the rest of the MinTree in DeletedQueue\n    OldRoot = DeletedTree;\n    DeletedTree = DeletedTree-&gt;LeftChild;\n    delete OldRoot;\n    DeletedQueue = Initialize();\n    // \u5bf9\u4e8e\u7d22\u5f15\u4e3ai\u7684\u6811\uff0c\u5176\u5305\u542b\u7684\u8282\u70b9\u6570\u4e3a2^i\n    DeletedQueue-&gt;currentsize = (2 ^ MinTree) - 1;\n    for(j = MinTree - 1; j &gt;= 0; j--)\n    {\n        DeletedQueue-&gt;TheTrees[j] = DeletedTree;\n        DeletedTree = DeletedTree-&gt;NextSibling;\n        DeletedQueue-&gt;TheTrees[j]-&gt;NextSibling = NULL;\n    }\n    H-&gt;currentsize -= DeletedQueue-&gt;currentsize + 1;\n    H = Merge(H, DeletedQueue);\n    return MinItem;\n}\n</code></pre>"},{"location":"ADS/5.%20Binomial%20Queue/#53-\u4e8c\u9879\u961f\u5217\u7684\u5b9e\u73b0","title":"5.3 \u4e8c\u9879\u961f\u5217\u7684\u5b9e\u73b0","text":"<p>\u4e3a\u4ec0\u4e48\u4f7f\u7528\u5de6\u513f\u5b50\u53f3\u5144\u5f1f\u6a21\u578b\uff1f</p> <p>\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u7684\u5b69\u5b50\u6570\u91cf\u53ef\u80fd\u5927\u4e8e2\u4e2a</p> <p></p> <p>\u8981\u4ece\u6839\u7ed3\u70b912\u5f00\u59cb\u5feb\u901f\u904d\u5386\u4e09\u4e2a\u5b50\u6811\uff0821\uff0c24\uff0c23\uff09\uff0c\u8981\u7528\u201c\u5de6\u5b69\u5b50\u53f3\u5144\u5f1f\u7684\u5b9e\u73b0\u65b9\u5f0f\uff0c\u5bf9\u5e9412-&gt;23-&gt;24-&gt;21</p> <p>\u56fe(b)\\(B_3\\)\u662f\u4e24\u68f5\\(B_2\\)\u7684\u5408\u5e76\u7ed3\u679c\uff0c\u4e3a\u4ec0\u4e48\u5408\u5e76\u4e4b\u540e\u9700\u8981\u6309\u7167\u5b50\u6811\u7684\u5927\u5c0f\uff08\u7ed3\u70b9\u6570\uff09\u964d\u5e8f\u6392\u5217\u5462\uff1f</p> <p>\u6839\u7ed3\u70b9\u4e3a12\u548c23\u7684\u4e24\u68f5\u6811\u5408\u5e76\u65f6\uff0c23\u4f1a\u6210\u4e3a12\u7684\u5b50\u6811\u3002\u6309\u7167\u5de6\u513f\u5b50\u53f3\u5144\u5f1f\u7684\u6a21\u578b\uff0c\u5e94\u8be5\u5c0623\u63d2\u5165\u5230\u5b50\u6811\u7684\u94fe\u8868\u3002</p> <p>\u5982\u679c\u6309\u7167\u5347\u5e8f\u7684\u8bdd\uff0c\u9700\u8981\u5148\u904d\u5386\u6240\u6709\u7684\u5b50\u7ed3\u70b9(21,24),\u624d\u80fd\u5c06\u6700\u5927\u5b50\u6811\\(B_2\\)\u52a0\u4e0a\uff0c\u591a\u51fa\u6765\u904d\u5386\u7684\u5f00\u652f\u3002</p> <pre><code>#include \"BinTree.h\"\n\nusing namespace std;\n\n// #define MaxTrees 10\n\n// typedef struct BinNode\n// {\n//     int Element;\n//     // \u5de6\u513f\u5b50\u53f3\u5144\u5f1f\n//     Position LeftChild;\n//     Position NextSibling;\n// }*BinTree, *Position;\n\n// typedef struct Collection\n// {\n//     // total number of nodes\n//     int currentsize;\n//     BinTree TheTrees[MaxTrees];\n// }*BinQueue;\n\n// int IsEmpty(BinQueue H);\n// BinQueue Initialize();\n// BinTree MergeTrees(BinTree T1, BinTree T2);\n// BinQueue Insert(BinQueue H1, int x);\n// BinQueue DeleteMin(BinQueue H);\n// void PrintQueue(BinQueue H);\n\n\nint Isempty(BinQueue H)\n{\n    return H-&gt;currentsize == 0 || H == NULL;\n}\n\nBinQueue Initialize()\n{\n    BinQueue H = new Collection;\n    if(H == NULL)\n        cout &lt;&lt; \"Out of space!\" &lt;&lt; endl;\n    H-&gt;currentsize = 0;\n    for(int i = 0; i &lt; MaxTrees; i++)\n        H-&gt;TheTrees[i] = NULL;\n    return H;\n}\n\nBinTree MergeTrees(BinTree T1, BinTree T2)\n{\n    // merge equal size trees\n    // attach the larger one to the smaller one\n    if(T1-&gt;Element &gt; T2-&gt;Element)\n        return MergeTrees(T2, T1);\n    // T2 is larger, attach T2 to T1\n    T2-&gt;NextSibling = T1-&gt;LeftChild;\n    T1-&gt;LeftChild = T2;\n    return T1;\n}\n\nBinQueue Merge(BinQueue H1, BinQueue H2)\n{\n    BinTree T1, T2, Carry = NULL;\n    if(H1-&gt;currentsize + H2-&gt;currentsize &gt; 100)\n        cout &lt;&lt; \"Merge would exceed max tree capacity!\" &lt;&lt; endl;\n    H1-&gt;currentsize += H2-&gt;currentsize;\n    for(int i = 0, j = 1; j &lt;= H1-&gt;currentsize; i++, j *= 2)\n    {\n        T1 = H1-&gt;TheTrees[i];\n        T2 = H2-&gt;TheTrees[i];\n        switch(4 * !!Carry + 2 * !!T2 + !!T1)\n        {\n            // Carry T2 T1\n            case 0: // 000 no tree\n                break;\n            case 1: // 001 only T1\n                break;\n            case 2: // 010 only T2\n                H1-&gt;TheTrees[i] = T2;\n                H2-&gt;TheTrees[i] = NULL;\n                break;\n            case 3: // 011 T1 and T2\n                Carry = MergeTrees(T1, T2);\n                H1-&gt;TheTrees[i] = H2-&gt;TheTrees[i] = NULL;\n                break;\n            case 4: // 100 only Carry\n                H1-&gt;TheTrees[i] = Carry;\n                Carry = NULL;\n                break;\n            case 5: // 101 Carry and T1;\n                Carry = MergeTrees(Carry, T1);\n                H1-&gt;TheTrees[i] = NULL;\n                break;\n            case 6: // 110 Carry and T2\n                Carry = MergeTrees(Carry, T2);\n                H2-&gt;TheTrees[i] = NULL;\n                break;\n            case 7: // 111 all three\n                H1-&gt;TheTrees[i] = Carry;\n                Carry = MergeTrees(T1, T2);\n                H2-&gt;TheTrees[i] = NULL;\n                break;\n        }\n    }\n    return H1;\n}\nBinQueue Insert(BinQueue H1, int x)\n{\n    BinQueue OneItem;\n    BinTree T;\n    OneItem = Initialize();\n    T = new BinNode;\n    if(T == NULL)\n        cout &lt;&lt; \"Out of space!\" &lt;&lt; endl;\n    T-&gt;Element = x;\n    T-&gt;LeftChild = T-&gt;NextSibling = NULL;\n    OneItem-&gt;TheTrees[0] = T;\n    OneItem-&gt;currentsize = 1;\n    return Merge(H1, OneItem);\n}\nint DeleteMin(BinQueue H)\n{\n    BinQueue DeletedQueue;\n    Position DeletedTree, OldRoot;\n    int MinItem = 1000000;\n    int i, j, MinTree;\n    // MinTree is the index of thr tree with the minimum item\n    if(Isempty(H))\n    {\n        cout &lt;&lt; \"Empty binomial queue!\" &lt;&lt; endl;\n        return -1;\n    }\n    // 1. find the tree with the minimum item\n    for(i = 0; i &lt; MaxTrees; i++)\n    {\n        if(H-&gt;TheTrees[i] &amp;&amp; H-&gt;TheTrees[i]-&gt;Element &lt; MinItem)\n        {\n            MinItem = H-&gt;TheTrees[i]-&gt;Element;\n            MinTree = i;\n        }\n    }\n    DeletedTree = H-&gt;TheTrees[MinTree];\n    // 2. remove the MinTree from H\n    H-&gt;TheTrees[MinTree] = NULL;\n    // 3. remove the MinItem from the MinTree\n    // and store the rest of the MinTree in DeletedQueue\n    OldRoot = DeletedTree;\n    DeletedTree = DeletedTree-&gt;LeftChild;\n    delete OldRoot;\n    DeletedQueue = Initialize();\n    // \u5bf9\u4e8e\u7d22\u5f15\u4e3ai\u7684\u6811\uff0c\u5176\u5305\u542b\u7684\u8282\u70b9\u6570\u4e3a2^i\n    DeletedQueue-&gt;currentsize = (2 ^ MinTree) - 1;\n    for(j = MinTree - 1; j &gt;= 0; j--)\n    {\n        DeletedQueue-&gt;TheTrees[j] = DeletedTree;\n        DeletedTree = DeletedTree-&gt;NextSibling;\n        DeletedQueue-&gt;TheTrees[j]-&gt;NextSibling = NULL;\n    }\n    H-&gt;currentsize -= DeletedQueue-&gt;currentsize + 1;\n    H = Merge(H, DeletedQueue);\n    return MinItem;\n}\nvoid PrintTree(BinTree T)\n{\n    // \u5173\u4e8e\u5de6\u513f\u5b50\u53f3\u5144\u5f1f\u7684\u904d\u5386\n    // \u4e00\u884c\u4e00\u884c\u7684\u8f93\u51fa\n    queue&lt;BinTree&gt; line1;\n    queue&lt;BinTree&gt; line2;\n    line1.push(T);\n    while(!line1.empty())\n    {\n        BinTree temp = line1.front();\n        line1.pop();\n        cout &lt;&lt; temp-&gt;Element &lt;&lt; \" \";\n        if(temp-&gt;LeftChild)\n            line2.push(temp-&gt;LeftChild);\n        while(temp-&gt;NextSibling)\n        {\n            cout &lt;&lt; temp-&gt;NextSibling-&gt;Element &lt;&lt; \" \";\n            if(temp-&gt;NextSibling-&gt;LeftChild)\n                line2.push(temp-&gt;NextSibling-&gt;LeftChild);\n            temp = temp-&gt;NextSibling;\n        }\n        if(line1.empty())\n        {\n            cout &lt;&lt; endl;\n            swap(line1, line2);\n        }\n    }\n}\nvoid PrintQueue(BinQueue H)\n{\n    for(int i = 0; i &lt; MaxTrees; i++)\n    {\n        if(H-&gt;TheTrees[i])\n        {\n            cout &lt;&lt; \"Tree \" &lt;&lt; i &lt;&lt; \": \"&lt;&lt; endl;\n            PrintTree(H-&gt;TheTrees[i]);\n        }\n    }\n    cout &lt;&lt; \"--------------------------\\n\";\n}\n\nint main()\n{\n    BinQueue H1 = Initialize();\n    H1 = Insert(H1, 12);\n    H1 = Insert(H1, 21);\n    H1 = Insert(H1, 24);\n    H1 = Insert(H1, 65);\n    H1 = Insert(H1, 23);\n    H1 = Insert(H1, 51);\n    H1 = Insert(H1, 24);\n    H1 = Insert(H1, 65);\n    H1 = Insert(H1, 14);\n    H1 = Insert(H1, 26);\n    H1 = Insert(H1, 16);\n    H1 = Insert(H1, 18);\n    H1 = Insert(H1, 13);\n    PrintQueue(H1);\n    int MinItem = DeleteMin(H1);\n    PrintQueue(H1);\n    cout &lt;&lt; \"MinItem: \" &lt;&lt; MinItem &lt;&lt; endl;\n}\n</code></pre>"},{"location":"ADS/5.%20Binomial%20Queue/#54-\u644a\u8fd8\u5206\u6790","title":"5.4 \u644a\u8fd8\u5206\u6790","text":"<p>A binomial queue of N elements can be built by N successive insertions in O(N) time.</p> <p>\u63d2\u5165\u6700\u574f\u7684\u60c5\u51b5\u662f\\(O(log N)\\),\u4f46\u662f\u574f\u64cd\u4f5c\u5e26\u6765\u8fdb\u4f4d\u7684\u540c\u65f6\uff0c\u540e\u7eed\u4f1a\u5e26\u6765\u5f88\u591a\u76840\uff0c\u4e5f\u5c31\u6ca1\u6709\u8fdb\u4f4d</p>"},{"location":"ADS/5.%20Binomial%20Queue/#541-\u805a\u5408\u6cd5","title":"5.4.1 \u805a\u5408\u6cd5","text":"<p>\u805a\u5408\u6cd5\u9700\u8981\u6bcf\u4e00\u6b65\u7684\u64cd\u4f5c\u590d\u6742\u5ea6\u3002\u5173\u4e8e\u5408\u5e76\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5b9e\u9645\u4e0a\u4e0e\u4e8c\u8fdb\u5236\u7684\u52a0\u6cd5\u6709\u5bf9\u5e94\u5173\u7cfb\u3002\u5305\u542b\u52a0\u6cd5\u548c\u8fdb\u4f4d\uff0c\u5bf9\u5e94\u5c31\u662f\u63d2\u5165\u548cmerge\u3002\u8fd9\u4e24\u79cd\u60c5\u51b5\u90fd\u5bf9\u5e94\u5e38\u6570\u65f6\u95f4\u590d\u6742\u5ea6\u3002</p> <p>\u4ece\u7a7a\u6811\u8fde\u7eed\u63d2\u5165n\u4e2a\u9876\u70b9\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a n + \u8fdb\u4f4d\u7684\u6b21\u6570\u3002</p> <p>\u6700\u4f4e\u4f4d\u6bcf\u6b21\u52a01\u90fd\u4f1amerge(\u5bf9\u5e94\u5355\u7eaf\u7684\u63d2\u5165)\uff0c\u6b21\u4f4e\u4f4d\u6bcf\u4e24\u6b21\u63d2\u5165\u4f1amerge\uff08\u5bf9\u5e94\u8fdb\u4f4d\uff09\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u8ba1\u7b97n\u6b21\u63d2\u5165\u9020\u6210\u7684merge\u6b21\u6570 $$ n + \\dfrac{n}{2} + \\dfrac{n}{4}+...+\\dfrac{n}{2^{logn +1}} $$ \u6839\u636e\u7b49\u6bd4\u6570\u5217\u7684\u6c42\u548c\uff0c\u663e\u7136\u4e0a\u8ff0\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u4f1a\u8d85\u8fc72n\uff0c\u6240\u4ee5\u5355\u6b65\u64cd\u4f5c\u7684\u644a\u8fd8\u65f6\u95f4\u6210\u672c\u5c31\u662f\u5e38\u6570\u7ea7\u7684\u3002</p> <p></p> <p>\u6b64\u5904\u7684total link\u53ef\u4ee5\u7406\u89e3\u4e3a\uff1a</p> <p>\u6bcf\u4e24\u6b21\u53d1\u751f\u4e00\u6b21\\(B_0-&gt;B_1\\)\u7684link\uff0c\u6bcf\u56db\u6b21\u53d1\u751f\u4e00\u6b21\\(B_1-&gt;B_2\\)\u7684link\uff0c\u4f9d\u6b21\u7c7b\u63a8\\(N(\\dfrac{1}{2}+\\dfrac{1}{4}+\\dfrac{1}{8}+....)\\)</p>"},{"location":"ADS/5.%20Binomial%20Queue/#542-\u52bf\u80fd\u6cd5","title":"5.4.2 \u52bf\u80fd\u6cd5","text":"<p>\u5206\u6790\u5f97\u5230</p> <ul> <li> <p>link=1\uff0c\u4e0d\u4f1a\u9020\u6210\u4e8c\u9879\u6811\u7684\u589e\u52a0\uff08\\(B_0 \\rightarrow B_1\\)\uff09\u3002</p> </li> <li> <p>link=2\uff0c\u4f1a\u9020\u6210\u4e8c\u9879\u6811\u6570\u91cf\u51cf1(\\(B_0\\rightarrow B_1 \\rightarrow B_2\\)),\u539f\u5148\u7684\\(B_0,B_1\\)\u88ab\u8f6c\u5316\u4e3a\\(B_2\\)</p> </li> <li>\u4f9d\u6b21\u7c7b\u63a8\uff0clink=3\uff0c\u4f1a\u9020\u6210\u4e8c\u9879\u6811\u7684\u6570\u91cf\u51cf2</li> </ul> <p><code>\u6bcf\u4e00\u6b65\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3astep+link\uff0c\u5f97\u5230\u5982\u679c\u4e00\u6b21\u63d2\u5165\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3ak\uff0c\u90a3\u4e48\u4e8c\u9879\u961f\u5217\u4e2d\u7684\u4e8c\u9879\u6811\u5c06\u51cf\u5c11$\uff08k-2\uff09$</code></p> <p></p> <p>\u8bb0\\(c_i\\)\u8868\u793a\u5b9e\u9645\u4e0a\u6bcf\u4e00\u6b65\u63d2\u5165\u7684\u6210\u672c</p> <p>\u8bb0\\(\\Phi_i\\)\u8868\u793a\u5728\u7b2ci\u6b21\u63d2\u5165\u5b8c\u6210\u540e\uff0c\u4e8c\u9879\u961f\u5217\u4e2d\u4e8c\u9879\u6811\u7684\u6570\u91cf</p> <p>\u90a3\u4e48\u6bcf\u6b21\u7684\u644a\u8fd8\u6210\u672c\u5c31\u662f $$ \\widehat c_i = c_i + \\Phi_i - \\Phi_{i-1} = c_i + (2-c_i) = 2 $$</p>"},{"location":"ADS/5.%20Binomial%20Queue/#55-\u4e60\u9898\u96c6","title":"5.5 \u4e60\u9898\u96c6","text":"<ol> <li>Delete the minimum number from the given binomial queues in the following figure.  Which one of the following statements must be FALSE?</li> </ol> <ul> <li> <p>A. there are two binomial trees after deletion, which are \\(B_1\\) and \\(B_2\\)</p> </li> <li> <p>B. 11 and 15 can be the children of 4</p> </li> <li> <p><code>C. 29 can never be the root of any resulting binomial tree</code></p> </li> <li> <p>D. if 29 is a child of 4, then 15 must be the root of \\(B_1\\)</p> </li> </ul> <p>\u6b64\u5904\u8bf4\u660e\u8fdb\u4f4dcarry\u548cH1\uff0cH2\u7684\u8ba1\u7b97\u65b9\u5f0f\u662f\u4e0d\u56fa\u5b9a\u7684\uff0c\u53ef\u4ee5\u81ea\u7531\u7ec4\u5408\uff0c\u5f97\u5230\u4e0d\u540c\u7684\u7ed3\u679c</p> <ol> <li>Merge the two binomial queues in the following figure.  Which one of the following statements must be FALSE?</li> </ol> <p></p> <ul> <li> <p>A. there are two binomial trees after merging, which are \\(B_2\\) and \\(B_4\\)</p> </li> <li> <p>B. 13 and 15 are the children of 4</p> </li> <li> <p>C. if 23 is a child of 2, then 12 must be another child of 2</p> </li> <li> <p><code>D. if 4 is a child of 2, then 23 must be another child of 2</code></p> </li> <li> <p>Inserting a number into a binomial heap with 15 nodes costs less time than inserting a number into a binomial heap with 19 nodes.</p> </li> </ul> <p><code>False</code></p> <p>\\(15 = 1111_2, 19 = 10011_2\\)</p> <p>\u663e\u7136\u63d2\u5165\u523019\u4e2anode\u7684\u4e8c\u9879\u5806\u53d1\u751f\u7684\u8fdb\u4f4d\u6b21\u6570\u5c11</p> <ol> <li>To implement a binomial queue, the subtrees of a binomial tree are linked in increasing sizes.</li> </ol> <p><code>False</code></p> <p>\u6309\u7167\u5b50\u6811\u5927\u5c0f\uff08\u7ed3\u70b9\u6570\uff09\u964d\u5e8f\u6392\u5217</p> <ol> <li> <p>The potential function Q of a binomial queue is the number of the trees. After merging two binomial queues \\(H1\\) with 12 nodes and \\(H2\\) with 13 nodes\uff0cwhat is the potential change \\(Q(H1+H2)\u2212(Q(H1)+Q(H2))\\) ?    $$    12 = 1100_2\\    13 = 1101_2\\    12 + 12 = 11001\\    \\Delta Q = 3 - 2 -3 = -2    $$</p> </li> <li> <p>Making N insertions into an initally empty binomial queue takes$ \u0398(NlogN)$ time in the worst case.    <code>False</code></p> </li> </ol> <p>\u63d2\u5165\u7684\u6700\u574f\u60c5\u51b5\u662f\\(logN,\\) \u8fd9\u662f\u56e0\u4e3a\u9700\u8981\u4e00\u76f4\u8fdb\u4f4d\u4e0a\u53bb\u3002\u800cN\u7ec4\u6570\u636e\u4e0d\u53ef\u80fd\u6bcf\u63d2\u5165\u4e00\u4e2a\u5c31\u8fdb\u4f4d\uff0c\u56e0\u6b64\u662fO(N)</p> <ol> <li>After deleting number 14 from a binomial queue of 5 numbers { 12, 13, 14, 23, 24 }, which of the followings is impossible?    <code>A.the LeftChild link of the node 12 is NULL;</code></li> </ol> <p>B. the NextSibling link of the node 12 is NULL;</p> <p>C. the NextSibling link of node 13 may point to node 23;</p> <p>D. the LeftChild link of node 24 is NULL;</p> <p>\u4f18\u5148\u961f\u5217\u91cc\u9762\uff0c\u53ea\u6709\u4e0a\u4e0b\u7684\u5927\u5c0f\u9650\u5236\uff0c\u5de6\u53f3\u8c01\u5927\u8c01\u5c0f\u6ca1\u6709\u8981\u6c42\u3002\u56e0\u6b64\uff0c12\u4e00\u5b9a\u662f\u6839\uff0c24\u4e00\u5b9a\u662f\u6700\u4e0b\u9762\u7684\u90a3\u4e2a\uff0cA12\u4e00\u5b9a\u662f\u6709\u5b69\u5b50\u7684\uff0c\u9519\u3002</p> <p></p>"},{"location":"ADS/6.%20backtracking/","title":"\u516d. Backtracking","text":"<p> \u7ea6 1313 \u4e2a\u5b57  477 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 13 \u5206\u949f</p>"},{"location":"ADS/6.%20backtracking/#61-basic-idea","title":"6.1 basic idea","text":"<p>\u627e\u5230\u95ee\u9898\u7b54\u6848\u7684\u4e00\u4e2a\u53ef\u9760\u65b9\u6cd5\u662f\u5217\u51fa\u6240\u6709\u5019\u9009\u7b54\u6848\uff0c\u56de\u6eaf\u4f7f\u6211\u4eec\u80fd\u591f\u6d88\u9664\u5bf9\u5927\u91cf\u5019\u9009\u8005\u7684\u663e\u5f0f\u68c0\u67e5(\u526a\u679d\u64cd\u4f5c)\uff0c\u540c\u65f6\u4ecd\u7136\u4fdd\u8bc1\u5728\u7b97\u6cd5\u8fd0\u884c\u5230\u7ec8\u6b62\u65f6\u4f1a\u627e\u5230\u7b54\u6848\u3002</p> <p>basic idea\uff1a\u56de\u6eaf\u7684\u5386\u7a0b</p> <p>\u751f\u6210\u89e3\uff0c\u5df2\u7ecf\u751f\u6210\u4e86\u524di\u4e2a\u89e3\\(((x_1,x_2,...,x_i)),(x_k\u2208S_k(\u89e3\u7a7a\u95f4))\\)</p> <p>\u8981\u6dfb\u52a0\u65b0\u5143\u7d20\\((x_{i+1}^{(1)}\u2208X_{i+1}(\u7b2ci\u4e2a\u89e3\u96c6))\\)</p> <p>\u68c0\u67e5\u662f\u5426\u6ee1\u8db3\u8981\u6c42,\u82e5\u6ee1\u8db3\u8981\u6c42\u5219\u751f\u6210\u89e3\\(((x_1,x_2,...,x_i,x_{i+1}))\\)</p> <p>\u82e5\u4e0d\u6ee1\u8db3\u5219\u627e\u53e6\u4e00\u4e2a\\((x_{i+1}),\u82e5\u6240\u6709\u7684(x_{i+1})\\)\u90fd\u4e0d\u6ee1\u8db3\u6761\u4ef6,\u90a3\u4e48\u8fdb\u884c\u56de\u6eaf</p> <p>\u89e3\u53d8\u4e3a\\(((x_1,x_2,...,x_{i-1}))\\)\u5e76\u4e14\u6807\u8bb0\u5f53\u524d\u7684\\((x_i)\\)\u4e3a\u65e0\u6548\u89e3\u6362\u4e0b\u4e00\u4e2a\\((x_i),\\)\u4ee5\u6b64\u7c7b\u63a8</p> <p></p>"},{"location":"ADS/6.%20backtracking/#62-\u516b\u7687\u540e\u95ee\u9898","title":"6.2 \u516b\u7687\u540e\u95ee\u9898","text":"<ul> <li>\u3010\u63cf\u8ff0\u3011\u5728\u68cb\u76d8\u4e2d\u627e\u5230\u516b\u4e2a\u4f4d\u7f6e\u653e\u7f6e\u7687\u540e\uff0c\u4f7f\u5f97\u5b83\u4eec\u90fd\u4e0d\u540c\u884c\u4e14\u4e0d\u540c\u5217\uff0c\u4e5f\u4e0d\u80fd\u540c\u65f6\u4f4d\u4e8e\u5bf9\u89d2\u7ebf\u4e0a</li> </ul> <p>\\(Q_i\\) \u8868\u793a queue in the i th row</p> <p>\\(x_i\\) \u8868\u793a the column index in which \\(Q_i\\) is $$ solution = (x_1, x_2, x_3, ... x_8) = (4,6,8,2,7,1,3,5) $$ \u9650\u5236\u6761\u4ef6\uff1a</p> <ol> <li> <p>\\(S_i\\) = { 1,2,3,4,5,6,7,8 } for 1 &lt;=i &lt;= 8</p> </li> <li> <p>\\(x_i != x_j \\ if i \\ != j\\)</p> </li> </ol> <p>\u4e0d\u80fd\u5728\u540c\u4e00\u884c\u548c\u540c\u4e00\u5217</p> <p>This implies that the solution must be a permutation of 1, 2, ... , 8. Thus the number of candidates in the solution space is reduced to 8!.</p> <ol> <li>\\((x_i - x_j) / (i - j) != |1|\\)</li> </ol> <p>\u4e0d\u80fd\u5728\u5bf9\u89d2\u7ebf\u548c\u53cd\u5bf9\u89d2\u7ebf\u4e0a</p> <p>Method: \u4ee54\u4e2a\u7687\u540e\u4e3a\u4f8b</p> <p>step 1\uff1a \u5efa\u7acb\u4e00\u68f5game tree</p> <p></p> <p>Each path from the root to a leaf defines an element of the solution space.</p> <p>step 2\uff1a\u6267\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d20\uff0c\u6765\u68c0\u67e5\u8def\u5f84\u662f\u5426\u6b63\u786e</p> <ol> <li>\u5047\u8bbex1\u5728\u7b2c\u4e00\u5217\uff0c\u987a\u5e8f\u5411\u4e0b\uff0cx2 = 2\uff0c\u663e\u7136\u5728\u5bf9\u89d2\u7ebf\u4e0a\uff0c\u56de\u6eaf\u81f3x1 = 1</li> <li>\u540e\u7eed\u5411\u4e0b\uff0cx2 = 3\uff0c \u663e\u7136\u540e\u7eed\u4e0d\u7ba1x3\u662f\u5728\u7b2c\u4e8c\u5217\u8fd8\u662f\u7b2c\u56db\u5217\u90fd\u4f1a\u4e0ex2\u5728\u5bf9\u89d2\u7ebf\u4e0a\u3002\u56de\u6eaf\u81f3x1 = 1</li> <li>\u5411\u4e0b x2 =4\uff0c \u5982\u679c\u540e\u7eedx3 = 2\uff0c x4 =3,\u5728\u5bf9\u89d2\u7ebf\u4e0a\u3002\u5982\u679cx3 = 3\uff0cx3\u4f1a\u4e0ex2\u5728\u5bf9\u89d2\u7ebf\u4e0a\u3002</li> <li>x1 = 1\u6240\u6709\u7684\u60c5\u51b5\u5747\u65e0\u6cd5\u6ee1\u8db3\u6761\u4ef6\uff0c\u7ee7\u7eed\u5411\u4e0a\u56de\u6eaf\uff0c\u8f6c\u5316\u4e3ax1 = 2</li> </ol> <pre><code>#include&lt;iostream&gt;\n#include&lt;vector&gt;\n#include&lt;cmath&gt;\n\nusing namespace std;\n\n// \u7528\u4e8e\u63a7\u5236\u7687\u540e\u7684\u6570\u91cf\uff0c\u68cb\u76d8\u7684\u89c4\u6a21\nconst int n = 8;\n\nbool Is_safe(vector&lt;int&gt; &amp;board, int row, int col)\n{\n    // check if there is a queen in the same column\n    // or in the same diagonal\n    // or in the same anti-diagonal\n    // row means the row we are going to put a queen\n    // col means the column we are going to put a queen\n    // \u6b64\u65f6\u9700\u8981\u7528\u5f53\u524d\u7684queue\u7684\u4f4d\u7f6e\u548c\u4e4b\u524d\u7684queue\u7684\u4f4d\u7f6e\u8fdb\u884c\u6bd4\u8f83\n    for(int i = 0; i &lt; row; i++)\n    {\n        if(board[i] == col || abs(board[i] - col) == abs(i - row))\n        {\n            return false;\n        }\n    }\n    return true;\n}\n\nvoid SolveNQueens(int row, vector&lt;int&gt; &amp;board, vector&lt;vector&lt;int&gt;&gt; &amp;solutions)\n{\n    // row\u8868\u793a\u5f53\u524d\u8981\u653e\u7f6e\u7687\u540e\u7684\u884c\u6570\n    if(row == n)\n    {\n        // \u8bf4\u660e\u5df2\u7ecf\u627e\u5230\u4e86\u4e00\u4e2a\u89e3\n        solutions.push_back(board);\n        return;\n    }\n    // \u6bcf\u4e00\u884c\u7684\u7687\u540e\u7684\u4f4d\u7f6e\u90fd\u662f\u4ece0\u5230n-1\n    // \u5224\u65ad\u5f53\u524d\u7684\u4f4d\u7f6e\u662f\u5426\u5408\u6cd5\n    for(int col = 0; col &lt; n; col++)\n    {\n        if(Is_safe(board, row, col))\n        {\n            board[row] = col;\n            SolveNQueens(row + 1, board, solutions);\n        }\n    }\n}\nint main()\n{\n    // \u521d\u59cb\u5316\u68cb\u76d8\uff0c-1\u8868\u793a\u6ca1\u6709\u7687\u540e\n    // board[i] = j \u8868\u793a\u5728(i, j)\u7684\u4f4d\u7f6e\u6709\u4e00\u4e2a\u7687\u540e\n    vector&lt;int&gt; board(n, -1);\n    // \u7528\u4e8e\u5b58\u50a8\u6240\u6709\u7684\u89e3\n    vector&lt;vector&lt;int&gt;&gt; solutions;\n    // \u6267\u884c\u56de\u6eaf\u7b97\u6cd5\n    SolveNQueens(0, board, solutions);\n    // \u8f93\u51fa\u6240\u6709\u7684\u89e3\n    for(auto solution : solutions)\n    {\n        for(auto pos: solution)\n        {\n            cout &lt;&lt; pos &lt;&lt; \" \";\n        }\n        cout &lt;&lt; endl;\n    }\n    cout &lt;&lt; \"Total solutions: \" &lt;&lt; solutions.size() &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"ADS/6.%20backtracking/#63-\u9ad8\u901f\u516c\u8def\u6536\u8d39\u95ee\u9898","title":"6.3 \u9ad8\u901f\u516c\u8def\u6536\u8d39\u95ee\u9898","text":"<ul> <li>\u3010\u63cf\u8ff0\u3011\u5728\u4e00\u6761\u76f4\u7ebf\u4e0a\u627e\u5230n\u4e2a\u5730\u65b9\u5efa\u7acb\u52a0\u6cb9\u7ad9\uff0c\u5df2\u77e5\u5b83\u4eec\u4e24\u4e24\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u6c42\u51fa\u6240\u6709\u52a0\u6cb9\u7ad9\u7684\u4f4d\u7f6e\uff0c\u5047\u5b9a\u7b2c\u4e00\u4e2a\u52a0\u6cb9\u7ad9\u7684\u5750\u6807\u662f0</li> </ul> <p>Given N points on the x-axis with coordinates \\(x1 &lt; x2 &lt; \u2026&lt; xN\\) . Assume that \\(x1 = 0\\). There are \\(N( N \u2013 1 ) / 2\\) distances between every pair of points.</p> <ul> <li>\u3010Solution\u3011</li> <li>\u901a\u8fc7n(n-1)/2\u4e2a\u8ddd\u79bb\u7b97\u51fan</li> <li>0\u548c\u6700\u5927\u8ddd\u79bb\u8bf4\u660e\u90fd\u90fd\u6709\u52a0\u6cb9\u7ad9</li> <li>\u4eceD\u96c6\u5408\u4e2d\u627e\u6700\u5927\u7684\u8fdb\u884c\u6784\u5efa,\u627e\u4e86\u5c31\u4eceD\u4e2d\u5220\u9664\u8ddd\u79bb,\u5931\u8d25\u7684\u8bdd\u5c31\u56de\u5230\u4e0a\u4e00\u79cd\u60c5\u51b5.<ul> <li>\u6bcf\u6b21\u68c0\u9a8c\u5206\u6210\u9760\u5de6\u8fb9\u548c\u9760\u53f3\u8fb9\u4e24\u4e2a\u60c5\u51b5</li> </ul> </li> </ul> <p></p> <ol> <li> <p>\u9996\u5148\u6839\u636e15\u4e2a\u8ddd\u79bb\uff0c\u7b97\u51fa\u4e00\u5171\u67096\u4e2a\u6536\u8d39\u7ad9</p> </li> <li> <p>\u8ba1\u7b97\u9996\u5c3e\u4e24\u4e2a\u6536\u8d39\u7ad9\u7684\u5750\u6807 \\(x1 = 0, x6 = 10\\)</p> </li> <li> <p>find the next largest distance and check</p> </li> </ol> <p>\u5bf9\u4e8e\u957f\u5ea68\uff0c\u4ec5\u53ef\u80fd\u51fa\u73b0\u5728\\(x1\\)\u5230\\(x5\\)\u6216\u8005\\(x2\\)\u5230\\(x6\\)</p> <ul> <li>\\(x5 - x1 = 8\\) \u8bf4\u660e\\(x5 = 8\\)</li> <li>\\(x6 - x2 = 8\\) \u8bf4\u660e\\(x2 = 2\\)</li> </ul> <p>\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u9009\u53d6\\(x5 =8\\)\uff0c \u540e\u7eed\u7684\u6700\u5927\u503c\u53d8\u4e3a7\uff0c\u4ec5\u53ef\u80fd\u51fa\u73b0\u5728\\(x1\\)\u5230\\(x4\\)\u6216\u8005\\(x2\\)\u5230\\(x6\\)</p> <ul> <li>\\(x4 - x1 = 7\\) \u8bf4\u660e \\(x4 = 7\\)</li> <li>\\(x6 - x2 = 7\\) \u8bf4\u660e$ x2 = 3$</li> </ul> <p>\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u9009\u53d6\\(x4 = 7\\)\uff0c\u540e\u7eed\u7684\u6700\u5927\u503c\u53d8\u4e3a6\uff0c\u5c3d\u53ef\u80fd\u51fa\u73b0\u5728\\(x1\\)\u5230\\(x3\\)\u548c\\(x2\\)\u5230\\(x6\\)</p> <ul> <li>\\(x3 - x1 = 6\\) \u8bf4\u660e\\(x3 = 6\\).\u4f46\u662f\\(x3\\)\u4e0e\\(x4\\)\u8ddd\u79bb\u4e3a1\uff0c\\(x4\\)\u4e0e\\(x5\\)\u8ddd\u79bb\u4e3a1\uff0c\u8ddd\u79bb\u8868\u4e2d\u6ca1\u6709\u4e24\u4e2a1\uff0c\u77db\u76fe</li> <li>\\(x6 - x2 = 6\\) \u8bf4\u660e$ x2 = 4\\(\u3002**\u4f46\u662f\\)x1\\(\u548c\\)x2\\(\u8ddd\u79bb\u4e3a4\uff0c\\)x2\\(\u4e0e\\)x5$\u8ddd\u79bb\u4e3a4\uff0c\u8ddd\u79bb\u8868\u4e2d\u6ca1\u6709\u4e24\u4e2a4\uff0c\u77db\u76fe**</li> </ul> <p><code>x4 = 7\u7684\u9053\u8def\u4e0d\u540c\uff0c\u56de\u6eaf\u5230x5 = 8\uff0c \u5411\u4e0b\u9009\u53d6\u53e6\u4e00\u6761\u9053\u8defx2 = 3</code></p> <p>\u540e\u7eed\u7684\u6700\u5927\u503c\u53d8\u4e3a6\uff0c\u5c3d\u53ef\u80fd\u51fa\u73b0\u5728\\(x1\\)\u5230\\(x4\\)\u548c\\(x3\\)\u5230\\(x6\\)\uff0c\u5f97\u5230\u4e24\u4e2a\u60c5\u51b5\\(x4 = 6\\)\u6216\u8005\\(x3 = 4\\)</p> <p>\u5bf9\u4e8e\\(x3 = 4\\),\\(x1\\)\u5230\\(x3\\)\u7684\u8ddd\u79bb\uff0c\\(x3\\)\u5230\\(x5\\)\u7684\u8ddd\u79bb\u90fd\u662f4\uff0c\u77db\u76fe</p> <p>\u53ea\u5269\u4e0b\\(x4 = 6\\)\uff0c\u540e\u7eed\u53ea\u53ef\u80fd\u51fa\u73b0 x3 = 5</p> <p>\u6700\u7ec8\u5f97\u5230\u7ed3\u679c\uff080\uff0c3\uff0c5\uff0c6\uff0c8\uff0c10\uff09</p> <p>\u4ee3\u7801\u5b9e\u73b0\uff1a</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;vector&gt;\n#include&lt;set&gt;\n\nusing namespace std;    \n#define MAX 200\n\nint Get_num(int n)\n{\n    for(int i = 1; i &lt;= n; i++)\n    {\n        if(n == i* (i-1) / 2)\n        {\n            return i;\n        }\n    }\n    return -1;\n}\nbool Reconstruct1(vector&lt;int&gt; &amp;path, vector&lt;vector&lt;int&gt;&gt; &amp;solutions, multiset&lt;int&gt; &amp;distances, int n, int left, int right)\n{\n    // path\u662f\u5b58\u653e\u6536\u8d39\u7ad9\u4f4d\u7f6e\u7684\u6570\u7ec4\n    // path[1], path[2],...path[left - 1]\u5df2\u77e5\n    // path[right + 1], ... path[n]\u5df2\u77e5\n\n    bool Found = false;\n    // \u5148\u5224\u65addistances\u662f\u5426\u4e3a\u7a7a\uff0c\u4e3a\u7a7a\u5219\u627e\u5230\u6700\u540e\u7684\u7ed3\u679c\n    if(distances.empty())\n    {\n        Found = true;\n        solutions.push_back(path);\n        return Found;\n    }\n    multiset&lt;int&gt;::iterator iter;\n    // \u5148\u627e\u5230\u76ee\u524ddistances\u4e2d\u7684\u6700\u5927\u503c\n    int max_distance = *distances.rbegin();\n    // \u9009\u62e9\u4e00\uff1apath[right] = max_distance\n    // \u6b64\u65f6max_distance \u662f \u6536\u8d39\u7ad9 path[0]\u548cpath[right]\u7684\u8ddd\u79bb\n    path[right] = max_distance;\n    int distance;\n    // \u8ba1\u7b97\u5f53\u524dright\u6536\u8d39\u7ad9\u4e0e\u5df2\u77e5\u6536\u8d39\u7ad9\u4e4b\u95f4\u7684\u8ddd\u79bb\n    // \u5c06\u5b83\u4eec\u4ecemultiset distances \u4e2d\u5220\u9664\n    int i;\n    for(i = 1; i &lt; left; i++)\n    {\n        distance = path[right] - path[i];\n        iter = distances.find(distance);\n        if(iter != distances.end())\n        {\n            distances.erase(iter);\n        }\n        else\n        {\n            // \u6062\u590d\u539f\u72b6\uff0c\u5c06\u5df2\u7ecf\u5220\u9664\u7684\u91cd\u65b0\u63d2\u5165\n            for(int j = 1; j &lt; i; j++)\n            {\n                distances.insert(path[right] - path[j]);\n            }\n            Found = false;\n            break;\n        }\n    }\n    if(i == left)\n    {\n        for(i = right + 1; i &lt;= n; i++)\n        {\n            distance = path[i] - path[right];\n            iter = distances.find(distance);\n            if(iter != distances.end())\n            {\n                distances.erase(iter);\n            }\n            else\n            {\n                // \u6062\u590d\u539f\u72b6\uff0c\u5c06\u5df2\u7ecf\u5220\u9664\u7684\u91cd\u65b0\u63d2\u5165\n                for(int j = 1; j &lt; left; j++)\n                {\n                    distances.insert(path[right] - path[j]);\n                }\n                for(int j = right + 1; j &lt; i; j++)\n                {\n                    distances.insert(path[j] - path[right]);\n                }\n                Found = false;\n                break;\n            }\n        }\n        if(i == n + 1)\n        {\n            // \u8fdb\u5165\u4e0b\u4e00\u8f6e\u7684\u9012\u5f52\n            Found = Reconstruct1(path, solutions, distances, n, left, right - 1);\n            if(!Found)\n            {\n                for(int k = 1; k &lt; left; k++)\n                    distances.insert(path[right] - path[k]);\n                for(int k = right + 1; k &lt;= n; k++)\n                    distances.insert(path[k] - path[right]);\n            }\n            else\n                Found = true;\n        }\n    }\n    if(Found == false)\n    {\n        // \u9009\u62e9\u4e8c\uff1apath[n] - path[left] = max_distance\n        // path[left] = path[n] - max_distance\n        path[left] = path[n] - max_distance;\n        // \u5982\u4e0a\u5220\u9664\u65b0\u7684distance\n        for(i = 1; i &lt; left; i++)\n        {\n            iter = distances.find(path[left] - path[i]);\n            if(iter != distances.end())\n            {\n                distances.erase(iter);\n            }\n            else\n            {\n                for(int j = 1; j &lt; i; j++)\n                {\n                    distances.insert(path[left] - path[j]);\n                }\n                Found = false;\n                break;\n            }\n        }\n        if(i == left)\n        {\n            for(i = right + 1; i &lt;= n; i++)\n            {\n                iter = distances.find(path[i] - path[left]);\n                if(iter != distances.end())\n                {\n                    distances.erase(iter);\n                }\n                else\n                {\n                    for(int j = 1; j &lt; left; j++)\n                    {\n                        distances.insert(path[left] - path[j]);\n                    }\n                    for(int j = right + 1; j &lt; i; j++)\n                    {\n                        distances.insert(path[j] - path[left]);\n                    }\n                    Found = false;\n                    break;\n                }\n            }\n            if(i == n + 1)\n            {\n                Found = Reconstruct1(path, solutions, distances, n, left + 1, right);\n                if(!Found)\n                {\n                    for(int k = 1; k &lt; left; k++)\n                        distances.insert(path[left] - path[k]);\n                    for(int k = right + 1; k &lt;= n; k++)\n                        distances.insert(path[k] - path[left]);\n                }\n                else\n                    Found = true;\n            }\n        }\n    }\n\n    return Found;\n}\nbool Reconstruct2(vector&lt;int&gt; &amp;path, vector&lt;vector&lt;int&gt;&gt; &amp;solutions, multiset&lt;int&gt; &amp;distances, int n, int left, int right)\n{\n// path\u662f\u5b58\u653e\u6536\u8d39\u7ad9\u4f4d\u7f6e\u7684\u6570\u7ec4\n    // path[1], path[2],...path[left - 1]\u5df2\u77e5\n    // path[right + 1], ... path[n]\u5df2\u77e5\n\n    bool Found = false;\n    // \u5148\u5224\u65addistances\u662f\u5426\u4e3a\u7a7a\uff0c\u4e3a\u7a7a\u5219\u627e\u5230\u6700\u540e\u7684\u7ed3\u679c\n    if(distances.empty())\n    {\n        Found = true;\n        solutions.push_back(path);\n        return Found;\n    }\n    multiset&lt;int&gt;::iterator iter;\n    // \u5148\u627e\u5230\u76ee\u524ddistances\u4e2d\u7684\u6700\u5927\u503c\n    int max_distance = *distances.rbegin();\n    int i;\n    // \u9009\u62e9\u4e8c\uff1apath[n] - path[left] = max_distance\n    // path[left] = path[n] - max_distance\n    path[left] = path[n] - max_distance;\n    // \u5982\u4e0a\u5220\u9664\u65b0\u7684distance\n    for(i = 1; i &lt; left; i++)\n    {\n        iter = distances.find(path[left] - path[i]);\n        if(iter != distances.end())\n        {\n            distances.erase(iter);\n        }\n        else\n        {\n            for(int j = 1; j &lt; i; j++)\n            {\n                distances.insert(path[left] - path[j]);\n            }\n            Found = false;\n            break;\n        }\n    }\n    if(i == left)\n    {\n        for(i = right + 1; i &lt;= n; i++)\n        {\n            iter = distances.find(path[i] - path[left]);\n            if(iter != distances.end())\n            {\n                distances.erase(iter);\n            }\n            else\n            {\n                for(int j = 1; j &lt; left; j++)\n                {\n                    distances.insert(path[left] - path[j]);\n                }\n                for(int j = right + 1; j &lt; i; j++)\n                {\n                    distances.insert(path[j] - path[left]);\n                }\n                Found = false;\n                break;\n            }\n        }\n        if(i == n + 1)\n        {\n            Found = Reconstruct1(path, solutions, distances, n, left + 1, right);\n            if(!Found)\n            {\n                for(int k = 1; k &lt; left; k++)\n                    distances.insert(path[left] - path[k]);\n                for(int k = right + 1; k &lt;= n; k++)\n                    distances.insert(path[k] - path[left]);\n            }\n            else\n                Found = true;\n        }\n    }\n\n    if(Found == false)\n    {\n        // \u9009\u62e9\u4e00\uff1apath[right] = max_distance\n        // \u6b64\u65f6max_distance \u662f \u6536\u8d39\u7ad9 path[0]\u548cpath[right]\u7684\u8ddd\u79bb\n        path[right] = max_distance;\n        int distance;\n        // \u8ba1\u7b97\u5f53\u524dright\u6536\u8d39\u7ad9\u4e0e\u5df2\u77e5\u6536\u8d39\u7ad9\u4e4b\u95f4\u7684\u8ddd\u79bb\n        // \u5c06\u5b83\u4eec\u4ecemultiset distances \u4e2d\u5220\u9664\n        int i;\n        for(i = 1; i &lt; left; i++)\n        {\n            distance = path[right] - path[i];\n            iter = distances.find(distance);\n            if(iter != distances.end())\n            {\n                distances.erase(iter);\n            }\n            else\n            {\n                // \u6062\u590d\u539f\u72b6\uff0c\u5c06\u5df2\u7ecf\u5220\u9664\u7684\u91cd\u65b0\u63d2\u5165\n                for(int j = 1; j &lt; i; j++)\n                {\n                    distances.insert(path[right] - path[j]);\n                }\n                Found = false;\n                break;\n            }\n        }\n        if(i == left)\n        {\n            for(i = right + 1; i &lt;= n; i++)\n            {\n                distance = path[i] - path[right];\n                iter = distances.find(distance);\n                if(iter != distances.end())\n                {\n                    distances.erase(iter);\n                }\n                else\n                {\n                    // \u6062\u590d\u539f\u72b6\uff0c\u5c06\u5df2\u7ecf\u5220\u9664\u7684\u91cd\u65b0\u63d2\u5165\n                    for(int j = 1; j &lt; left; j++)\n                    {\n                        distances.insert(path[right] - path[j]);\n                    }\n                    for(int j = right + 1; j &lt; i; j++)\n                    {\n                        distances.insert(path[j] - path[right]);\n                    }\n                    Found = false;\n                    break;\n                }\n            }\n            if(i == n + 1)\n            {\n                // \u8fdb\u5165\u4e0b\u4e00\u8f6e\u7684\u9012\u5f52\n                Found = Reconstruct1(path, solutions, distances, n, left, right - 1);\n                if(!Found)\n                {\n                    for(int k = 1; k &lt; left; k++)\n                        distances.insert(path[right] - path[k]);\n                    for(int k = right + 1; k &lt;= n; k++)\n                        distances.insert(path[k] - path[right]);\n                }\n                else\n                    Found = true;\n            }\n        }\n        // \u9009\u62e9\u4e8c\uff1apath[n] - path[left] = max_distance\n        // path[left] = path[n] - max_distance\n        path[left] = path[n] - max_distance;\n        // \u5982\u4e0a\u5220\u9664\u65b0\u7684distance\n        for(i = 1; i &lt; left; i++)\n        {\n            iter = distances.find(path[left] - path[i]);\n            if(iter != distances.end())\n            {\n                distances.erase(iter);\n            }\n            else\n            {\n                for(int j = 1; j &lt; i; j++)\n                {\n                    distances.insert(path[left] - path[j]);\n                }\n                Found = false;\n                break;\n            }\n        }\n        if(i == left)\n        {\n            for(i = right + 1; i &lt;= n; i++)\n            {\n                iter = distances.find(path[i] - path[left]);\n                if(iter != distances.end())\n                {\n                    distances.erase(iter);\n                }\n                else\n                {\n                    for(int j = 1; j &lt; left; j++)\n                    {\n                        distances.insert(path[left] - path[j]);\n                    }\n                    for(int j = right + 1; j &lt; i; j++)\n                    {\n                        distances.insert(path[j] - path[left]);\n                    }\n                    Found = false;\n                    break;\n                }\n            }\n            if(i == n + 1)\n            {\n                Found = Reconstruct1(path, solutions, distances, n, left + 1, right);\n                if(!Found)\n                {\n                    for(int k = 1; k &lt; left; k++)\n                        distances.insert(path[left] - path[k]);\n                    for(int k = right + 1; k &lt;= n; k++)\n                        distances.insert(path[k] - path[left]);\n                }\n                else\n                    Found = true;\n            }\n        }\n    }\n\n    return Found;\n}\nint main()\n{\n    int n;\n    cin &gt;&gt; n;\n    multiset&lt;int&gt; distances1;\n    multiset&lt;int&gt; distances2;\n    int x;\n    for(int i = 0; i &lt; n; i++)\n    {\n        cin &gt;&gt; x;\n        distances1.insert(x);\n        distances2.insert(x);\n    }\n    // \u5229\u7528distances\u7684\u6570\u91cf\u8ba1\u7b97\u6536\u8d39\u7ad9\u7684\u6570\u91cf\n    int num = Get_num(n);\n    vector&lt;int&gt; path1(num + 1, -1);\n    vector&lt;int&gt; path2(num + 1, -1);\n    vector&lt;vector&lt;int&gt;&gt; solutions;\n    path1[1] = 0;\n    path1[num] = *distances1.rbegin();\n    path2[1] = 0;\n    path2[num] = *distances2.rbegin();\n    distances1.erase(path1[num]);\n    distances2.erase(path2[num]);\n    Reconstruct1(path1, solutions, distances1, num, 2, num - 1);\n    Reconstruct2(path2, solutions, distances2, num, 2, num - 1);\n    for(int i = 0; i &lt; solutions.size(); i++)\n    {\n        for(int j = 1; j &lt;= num; j++)\n        {\n            cout &lt;&lt; solutions[i][j] &lt;&lt; \" \";\n        }\n        cout &lt;&lt; endl;\n    }\n    cout &lt;&lt; \"Total number of solutions : \" &lt;&lt; solutions.size() &lt;&lt; endl;\n\n}\n</code></pre> <p>\u56de\u6eaf\u7b97\u6cd5\u7684\u6a21\u677f</p> <p></p>"},{"location":"ADS/6.%20backtracking/#63-\u4e95\u5b57\u68cb","title":"6.3 \u4e95\u5b57\u68cb","text":"<ul> <li> <p>AI\u4e0b\u68cb\u95ee\u9898:\u9700\u8981\u63a8\u7b97\u51fa\u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5\u5e76\u4e14\u9009\u62e9\u5f53\u524d\u80dc\u7387\u6700\u9ad8\u7684\u60c5\u51b5\u5f80\u4e0b\u8d70</p> </li> <li> <p>MinMax Strategy\u95ee\u9898(\u6700\u5927\u6700\u5c0f\u7b56\u7565):</p> </li> <li> <p>goodness\u51fd\u6570\\((f(P)=W_{AI}-W_{Human})\\)\uff0cW\u662f\u5f53\u524d\u60c5\u51b5\u4e0b\u67d0\u4e00\u65b9\u53ef\u80fd\u8d62\u7684\u6240\u6709\u7ed3\u679c\uff0c\u4e0d\u9700\u8981\u8003\u8651\u53e6\u4e00\u65b9\u540e\u9762\u4f1a\u600e\u4e48\u4e0b\uff0c\u53ea\u8981\u8ba1\u7b97\u81ea\u5df1\u5728\u5f53\u524d\u5c40\u52bf\u4e0b\u7684\u4efb\u4f55\u53ef\u4ee5\u8d62\u7684\u65b9\u6cd5.</p> </li> <li> <p>The human is trying to minimize the value of the position P, while the computer is trying to maximize it.</p> </li> </ul> <p></p> <p>X\u8868\u793a\u673a\u5668\u4e0b\u7684\u4f4d\u7f6e\uff0c O\u8868\u793a\u4eba\u4e0b\u7684\u4f4d\u7f6e</p> <p>\u6700\u5f00\u59cb\u6a21\u62df\u6700\u521d\u7684\u4e24\u6b65\uff0cAI\u5148\u624b\uff0c\u9009\u62e9\u5bf9\u81ea\u5df1\u6700\u6709\u5229\uff0c\u4e5f\u5c31\u662fmax\u7684\u60c5\u51b5</p> <p>\u673a\u5668\u4f1a\u6700\u5927\u5316\\(f(P)\\),\u6240\u4ee5\u7b2c\u4e00\u8f6e\u673a\u5668\u4f1a\u4e0b\u5728\u4e2d\u5fc3\u70b9</p> <p>\u7b2c\u4e8c\u8f6e\uff0c\u4eba\u4e3a\u4e86\u6700\u5c0f\u5316\\(f(P)\\),\u5c06\u4e0b\u5728\u89d2\u843d</p>"},{"location":"ADS/6.%20backtracking/#64-alpha-beta\u526a\u679d\u641c\u7d22","title":"6.4 \\(\\alpha \\beta\\)\u526a\u679d\u641c\u7d22","text":"<p>AI\u5728max\u5904\u7684\u9009\u62e9\uff0c\u4e0d\u9700\u8981\u8003\u8651\u95ee\u53f7\u5904\u7684value\u3002</p> <p>\u56e0\u4e3a min\u5c42\u4f1a\u9009\u62e9\u5c0f\u4e8e\u7b49\u4e8e\u7684\u6570\u4f5c\u4e3a\u7ed3\u679c\uff0cmax\u5fc5\u7136\u4f1a\u9009\u62e9\u5927\u4e8e\u7b49\u4e8e44\u7684\u7ed3\u679c\uff0c\u4e5f\u5c31\u6ca1\u5fc5\u8981\u8ba1\u7b97\u95ee\u53f7\u4e86</p> <p></p>"},{"location":"ADS/6.%20backtracking/#65-\u4e60\u9898\u96c6","title":"6.5 \u4e60\u9898\u96c6","text":"<ol> <li>In the 4-queens problem,$ (x1, x2, x3, x4)$ correspond to the 4 queens\u2019 column indices. During backtracking, (1, 3, 4, ?) will be checked before (1, 4, 2, ?), and none of them has any solution in their branches.</li> </ol> <p><code>T</code></p> <p>\u9996\u5148\u68c0\u67e51\uff0c3\uff0c4\uff0c\u53d1\u73b0\u4e0d\u6ee1\u8db3\u3002\u7136\u540e\u68c0\u67e51\uff0c4\uff0c\u5f00\u5934\u76841\uff0c2\uff0c3\uff0c4\uff0c5\uff0c6\u2026\u3002\u9996\u5148\u4ece\u7b2c\u4e00\u884c\u5f80\u4e0b\u68c0\u67e5\uff0c\u4ece\u5de6\u5f80\u53f3\u904d\u5386\u3002\u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u4e0d\u8fdb\u884c\u4e0b\u4e00\u884c\u7684\u68c0\u67e5\u3002</p> <ol> <li>In a Turnpike Reconstruction Problem, given distance set \\(D = { 2, 2, 4, 4, 6, 8 }\\),$ x1~x4 = ( 0, 2, 4, 8 )$ is the only solution provided that \\(x1 = 0.\\)    0\uff0c4\uff0c6\uff0c8\u4e5f\u662f\u53ef\u4ee5\u7684\u3002\u6309\u7167\u90a3\u4e2a\u7b97\u6cd5\uff1a\u9996\u5148\\(x4=8\\)</li> </ol> <p>\u7136\u540e\u627e\u51faD\u6700\u5927\u7684\u4e3a6\uff0c\u5c1d\u8bd5\\(x3=6\\)\uff0c\u53d1\u73b08-6\u5728D\u4e2d\u3002\u5c062\u4eceD\u4e2d\u5220\u9664</p> <p>\u7136\u540e\u627eD\u6700\u5927\u7684\u4e3a4\uff0c\u5c1d\u8bd5\\(x2=4\\)\uff0c\u53d1\u73b08-4=4\uff0c6-4=2\u5728D\u4e2d\uff0c\u5c062,4\u5220\u9664\u3002</p> <p>\u6700\u540eD\u4e3a\u7a7a\uff0c\u8bf4\u660e\u89e3\u51b3\u95ee\u9898\u3002</p> <p>\u6709\u4e00\u79cd\u89e3\u6cd5\uff0c\u6839\u636e\u955c\u50cf\u5c31\u5b58\u5728\u7b2c\u4e8c\u79cd\u89e3\u6cd5</p> <ol> <li>Given the following game tree, the red node will be pruned with \u03b1-\u03b2 pruning algorithm if and only if __.</li> </ol> <p></p> <p>\u526a\u679d\u53d1\u751f\u7684\u60c5\u51b5\uff1a\u5176\u5144\u5f1f\u8282\u70b9\u6bd4\u5b83\u7684\u8282\u70b9\u66f4\u4f18\u3002\u5b83\u7684\u53e6\u5916\u4e00\u4e2a\u5b50\u8282\u70b9\u88ab\u526a\u679d\u3002</p> <p>\u6b64\u65f6\uff0cmin\u9009\u62e9\u4e869\uff0c\u5219\u4e3a\u4e86\u6bd49\u66f4\u4f18\uff0cx\u5fc5\u987b\u5927\u4e8e9\uff0c\u624d\u80fd\u4f7f\u5f97\u4e2d\u95f4\u4e00\u4e2a\u8282\u70b9\u65e0\u8bba\u5982\u4f55\u5927\u4e8e9\uff0c\u5219Max\u4e0d\u4f1a\u9009\u62e9\u6700\u53f3\u8fb9\u8282\u70b9\u3002D</p> <ol> <li>In the Tic-tac-toe game, a \"goodness\" function of a position is defined as \\(f(P) = W_{computer} - W_{human}\\)where \\(W\\) is the number of potential wins at position \\(P\\).In the following figure, O represents the computer and X the human. What is the goodness of the position of the figure?</li> </ol> <p></p> <ul> <li> <p>A. -1</p> </li> <li> <p>B. 0</p> </li> <li> <p>C. 4</p> </li> <li> <p>D. 5</p> </li> </ul> <p>X\u53ef\u4ee5\u5355\u8d70\u4e00\u6b65\u5c31\u662f\u8d62\uff0cX\u8d70\u4e24\u6b65\u8d62\u7684\u65b9\u6cd5\u6709\u4e24\u79cd</p> <p>O\u8d70\u4e24\u6b65\u8d62\u7684\u65b9\u6cd5\u67093\u79cd</p> <p>3 - 3 = 0</p> <ol> <li>Given the following game tree, which node is the first one to be pruned with \u03b1-\u03b2 pruning algorithm?</li> </ol> <p></p> <ul> <li> <p>A. a</p> </li> <li> <p>B. b</p> </li> <li> <p><code>C. c</code></p> </li> <li> <p>D. d</p> </li> </ul> <p>\u641c\u7d22\u5230 b \u7b49\u4e8e 86 \u65f6\uff0ca\u5904\u7684\u503c\u4f1a\u5927\u4e8e86\uff0c\u800cmin\u5c42\u4f1a\u9009\u62e9\u5c0f\u4e8e\u7b49\u4e8e68\u7684\u7ed3\u70b9\uff0c\u6240\u4ee5c\u70b9\u4e0d\u9700\u8981\u518d\u68c0\u6d4b\u3002</p> <p>\u5373 \u03b2 \u526a\u679d\u3002</p> <p></p> <p></p>"},{"location":"ADS/7.%20Divide%20%26%20Conquer/","title":"\u4e03. Divide &amp; Conquer","text":"<p> \u7ea6 3637 \u4e2a\u5b57  7 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 18 \u5206\u949f</p>"},{"location":"ADS/7.%20Divide%20%26%20Conquer/#71-\u6982\u8ff0","title":"7.1 \u6982\u8ff0","text":"<p>\u5957\u7528 Wiki \u4e0a\u7684\u8bf4\u6cd5\uff0c\u5206\u6cbb\u6cd5(Divide-and-conquer algorithm)\u5c5e\u4e8e\u4e00\u79cd\u7b97\u6cd5\u8303\u578b\uff0c\u5b83\u7684\u57fa\u672c\u601d\u60f3\u662f<code>\u5c06\u4e00\u4e2a\u95ee\u9898\u5206\u89e3\u4e3a\u82e5\u5e72\u4e2a\u89c4\u6a21\u8f83\u5c0f\u7684\u76f8\u540c\u95ee\u9898\uff0c\u7136\u540e\u9012\u5f52\u5730\u89e3\u51b3\u8fd9\u4e9b\u5b50\u95ee\u9898\uff0c\u6700\u540e\u5c06\u8fd9\u4e9b\u5b50\u95ee\u9898\u7684\u89e3\u5408\u5e76\u5f97\u5230\u539f\u95ee\u9898\u7684\u89e3</code>\uff0c\u4e00\u4e2a\u6bd4\u8f83\u7ecf\u5178\u7684\u6848\u4f8b\u5c31\u662f\u5f52\u5e76\u6392\u5e8f\u3002</p> <p>\u5f52\u5e76\u6392\u5e8f\u53ef\u4ee5\u8bf4\u662f\u5206\u6cbb\u6cd5\u6700\u7ecf\u5178\u7684\u4f53\u73b0\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6709n\u4e2a\u5143\u7d20\u7684\u5e8f\u5217\uff0c\u4e0d\u65ad\u5730\u5c06\u5b83\u4ece\u4e2d\u95f4\u5206\u5f00\u4e3a\u4e24\u4e2a\u5b50\u5e8f\u5217\uff0c\u6700\u7ec8\u5f62\u6210n\u4e2a\u5206\u522b\u53ea\u67091\u4e2a\u5143\u7d20\u7684\u5b50\u5e8f\u5217\u3002\u53ea\u67091\u4e2a\u5143\u7d20\u7684\u5b50\u5e8f\u5217\u81ea\u7136\u662f\u6709\u5e8f\u7684\uff0c\u7136\u540e\u518d\u5c06\u5b83\u4eec\u4e24\u4e24\u5408\u5e76\u8d77\u6765\uff0c\u5e76\u5728\u5408\u5e76\u8fc7\u7a0b\u4e2d\u5c06\u5b50\u5e8f\u5217\u6392\u5e8f\uff0c\u6700\u7ec8\u8fd4\u56de\u7684n\u4e2a\u5143\u7d20\u7684\u5408\u5e76\u5e8f\u5217\u5373\u4e3a\u6709\u5e8f\u3002\u5176\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\u3002</p> <p></p> <pre><code>void merge_sort(vector&lt;T&gt; a, int front, int end) {\n  if (front &gt;= end) return;\n  int mid = front + (end - front) / 2;\n  merge_sort(a, front, mid);\n  merge_sort(a, mid + 1, end);\n  merge(a, front, mid, end);\n}\n</code></pre>"},{"location":"ADS/7.%20Divide%20%26%20Conquer/#72-closet-points-problem","title":"7.2 Closet Points Problem","text":"<p>\u4e8c\u7ef4\u6700\u8fd1\u70b9\u95ee\u9898(Closet Points Problem)\uff0c\u6307\u7684\u662f\u7ed9\u5b9a\u5e73\u9762\u4e0a\u7684 n \u4e2a\u70b9\uff0c\u627e\u51fa\u5176\u4e2d\u8ddd\u79bb\u6700\u8fd1\u7684\u4e24\u4e2a\u70b9\u3002</p>"},{"location":"ADS/7.%20Divide%20%26%20Conquer/#721-\u6734\u7d20\u65b9\u6cd5","title":"7.2.1 \u6734\u7d20\u65b9\u6cd5","text":"<p>\u6700\u6734\u7d20\u7684\u505a\u6cd5\u5f53\u7136\u662f\u679a\u4e3e\u6240\u6709\u7684\u70b9\u5bf9\uff0c\u4e00\u5171\u9700\u8981 \\(C_{N}^{2} = {{N}\\choose{2}} = \\frac{N(N-1)}{2}\\) \u5373\u590d\u6742\u5ea6\u4e3a \\(O(N^2)\\)\u3002</p>"},{"location":"ADS/7.%20Divide%20%26%20Conquer/#722-\u5206\u6cbb\u65b9\u6cd5","title":"7.2.2 \u5206\u6cbb\u65b9\u6cd5","text":"<p>\u73b0\u5728\u6211\u4eec\u7c7b\u6bd4\u6700\u5927\u5b50\u5e8f\u5217\u548c\u95ee\u9898\u7684\u5206\u6cbb\u505a\u6cd5\u3002</p> <p></p> <p>\u6700\u5927\u5b50\u5e8f\u5217\u548c\u7684\u5206\u6cbb\u505a\u6cd5\"</p> <ol> <li> <p>\u5c06\u5e8f\u5217\u5206\u4e3a\u5de6\u53f3\u4e24\u90e8\u5206\uff0c\u5206\u522b\u6c42\u89e3\u6700\u5927\u5b50\u5e8f\u5217\u548c\uff1b</p> </li> <li> <p><code>\u6c42\u89e3\u8de8\u8d8a\u4e2d\u70b9\u7684\u6700\u5927\u5b50\u5e8f\u5217\u548c</code>\uff1b</p> </li> <li> <p>\u6bd4\u8f83\u4e09\u8005\u7684\u5927\u5c0f\uff0c\u53d6\u6700\u5927\u503c\uff1b</p> </li> </ol> <p>\u6211\u4eec\u53ef\u4ee5\u5c06\u6574\u4e2a\u5e73\u9762\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u5373\u5982\u56fe\u4e2d\u7eff\u8272\u7ebf\u5c06\u70b9\u5bf9\u5212\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\u3002</p> <p></p> <p>\u4e3a\u89e3\u51b3\u4e8c\u7ef4\u6700\u8fd1\u70b9\u95ee\u9898\uff0c\u6211\u4eec\u540c\u6837\u5206\u4e3a\u8fd9\u4e48\u4e09\u6b65\uff1a</p> <ol> <li>\u5c06\u70b9\u5bf9\u5206\u4e3a\u5de6\u53f3\u4e24\u90e8\u5206\uff0c\u5206\u522b\u6c42\u89e3\u6700\u8fd1\u70b9\u5bf9\uff1b</li> <li><code>\u5bfb\u627e\u8de8\u8d8a\u5206\u754c\u7ebf\u7684\u70b9\u5bf9\uff0c\u4ece\u4e2d\u5bfb\u627e\u6700\u8fd1\u70b9\u5bf9</code>\uff1b</li> <li>\u6bd4\u8f83\u4e09\u8005\u7684\u5927\u5c0f\uff0c\u53d6\u6700\u5c0f\u503c\uff1b</li> </ol> <p></p> <ol> <li> <p>\u5148\u8ba1\u7b97\u5de6\u53f3\u4e24\u90e8\u5206\u6700\u8fd1\u70b9\u5bf9\u7684\u8ddd\u79bb\uff0c\u8fdb\u884c\u6bd4\u8f83\u540e\uff0c\u9009\u62e9\u6700\u5c0f\u8ddd\u79bb\u4e2d\u8f83\u5c0f\u7684\u4e3a\\(\\delta\\)</p> </li> <li> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u4ec5\u9700\u8981\u5bfb\u627e\u8de8\u8d8a\u5206\u754c\u7ebf\u7684\u70b9\u5bf9\u4e2d\u6700\u5c0f\u8ddd\u79bb\u5c0f\u4e8e\\(\\delta\\)\u7684\u90e8\u5206\u3002</p> </li> <li> <p>\u4e3a\u4e86\u51cf\u5c11\u6b65\u9aa4\u4e8c\u7684\u8ba1\u7b97\u91cf\uff0c\u6211\u4eec\u9700\u8981pass\u6389\u4e00\u4e9b\u663e\u7136\u662f\u4e0d\u53ef\u80fd\u7684\u70b9\u5bf9\u3002\u6b65\u9aa4\u4e8c\u4e2d\u88ab\u62ff\u51fa\u7684\u70b9\uff0c\u4e00\u5b9a\u4e00\u4e2a\u5728\u5206\u754c\u70b9\u5de6\u4fa7\uff0c\u4e00\u4e2a\u5728\u5206\u754c\u70b9\u53f3\u4fa7\uff0c\u5bf9\u4e8e\u8ddd\u79bb\u5206\u754c\u7ebf\\(\\delta\\)\u4ee5\u5916\u7684\u70b9\uff0c\u4e0d\u53ef\u80fd\u5f62\u6210\u6700\u5c0f\u8ddd\u79bb\u5c0f\u4e8e\\(\\delta\\)(<code>\u6c34\u5e73\u8ddd\u79bb\u5c31\u5927\u4e8e\u03b4</code>)\u3002\u6240\u4ee5\u6211\u4eec\u4ec5\u8003\u8651\u8ddd\u79bb\u5206\u754c\u7ebf\\(\\delta\\)\u4ee5\u5185\u7684\u70b9\u3002</p> <p>\u5982\u56fe\uff0c\u73b0\u5728\u6211\u4eec\u77e5\u9053\uff0c\u53ea\u6709\u843d\u5728\u4e24\u6761\u6df1\u7eff\u8272\u4e4b\u95f4\u7684\u70b9\u624d\u53ef\u80fd\u4f1a\u66f4\u65b0\u7b54\u6848\u3002</p> </li> <li> <p>\u521a\u521a\u662f\u5bf9x\u8f74\u4e0a\u7684\u8ddd\u79bb\u8fdb\u884c\u9650\u5236\uff0c\u540c\u7406\u6211\u4eec\u4e5f\u53ef\u4ee5\u5728y\u8f74\u4e0a\u5bf9\u8ddd\u79bb\u8fdb\u884c\u9650\u5236</p> <p>\u5bf9\u4e8e\u9009\u5b9a\u70b9 \\(p_{l_i}\\)\uff0c\u5176\u6240\u6709\u53ef\u80fd\u5bfc\u81f4\u7b54\u6848\u66f4\u65b0\u7684\u70b9\u90fd\u88ab\u6846\u5b9a\u5728\u4e00\u4e2a \\(2\\delta \\times \\delta\\) \u7684\u77e9\u5f62\u4e2d\u3002</p> <p><code>\u4e3a\u4ec0\u4e48y\u65b9\u5411\u4e0a\u9650\u5236\u4ec5\u4ec5\u662f\u03b4\u5462\uff1f\u56e0\u4e3a\u6211\u4eec\u4ec5\u8003\u8651\u5f53\u524d\u6240\u5728\u7684\u70b9\uff0c\u4e0e\u4e0a\u9762\u7684\u70b9\u7684\u8ddd\u79bb\uff0c\u8fd9\u6837\u5207\u6362\u5230\u4e0b\u65b9\u7684\u70b9\u65f6\u5019\uff0c\u4e0d\u4f1a\u4e0e\u4e0a\u65b9\u7684\u70b9\u9020\u6210\u6700\u5c0f\u8ddd\u79bb\u7684\u91cd\u590d\u8ba1\u7b97\uff0c\u53ef\u4ee5\u6709\u6548\u7684\u9632\u6b62\u70b9\u5bf9\u7684\u91cd\u590d</code></p> <p></p> </li> <li> <p>\u5728\u8fd9\u6837\u4e00\u4e2a\u533a\u57df\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u7ea6\u675f\u6240\u6709\u843d\u5728 \\(\\delta \\times \\delta\\) \u7684 L \u533a\u57df\u4e2d\u7684\u70b9\uff0c\u4e92\u76f8\u7684\u8ddd\u79bb\u90fd\u5927\u4e8e\u7b49\u4e8e \\(\\delta\\)\uff0c\u5bf9 R \u533a\u57df\u4e2d\u7684\u70b9\u4e5f\u6709\u76f8\u540c\u7684\u7ea6\u675f\u3002</p> <p><code>\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u65e6\u5728\u5de6\u4fa7\u9009\u4e2d\u4e00\u4e2a\u70b9\uff08\u4e0d\u5728\u8fb9\u754c\uff09\u540e\uff0c\u5728 \u03b4 x \u03b4 \u7684 L \u533a\u57df\u4e2d\uff0c\u5de6\u4fa7\u8303\u56f4\u5185\u4e0d\u4f1a\u51fa\u73b0\u7b2c\u4e8c\u4e2a\u70b9\uff0c\u56e0\u4e3a\u5de6\u8fb9\u70b9\u5bf9\u7684\u6700\u5c0f\u8ddd\u79bb\u5c31\u662f\u03b4</code></p> <p><code>\u5bf9\u4e8e\u5728\u8fb9\u754c\u4e0a\u7684\u70b9\uff0c\u663e\u7136\u4f4d\u4e8e\u56db\u4e2a\u89d2\u7684\u60c5\u51b5\uff0c\u9700\u8981\u8ba1\u7b97\u7684\u6b21\u6570\u6700\u591a\uff0c\u5bf9\u5e94worse case\uff0c\u6700\u6b63\u5e38\u7684case \u5c31\u662f\u5de6\u53f3\u5404\u4e00\u4e2a\u70b9</code></p> <p>worse case \u5bf9\u5e94\u5728\u6700\u7406\u60f3\u6700\u7406\u60f3\u7684\u60c5\u51b5\u4e0b\u2014\u2014\u95ed\u533a\u95f4\u3001\u5141\u8bb8\u70b9\u91cd\u5408\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u77e9\u5f62\u6700\u591a\u4e5f\u53ea\u80fd\u653e\u516b\u4e2a\u70b9\uff08\u4e24\u8fb9\u5404\u56db\u4e2a)\uff1a\u672c\u8d28\u4e0a\u662f\u516d\u4e2a\u70b9\uff08\u53bb\u91cd\uff09</p> </li> </ol> <p></p> <ul> <li> <p>\u4e8e\u662f\u6211\u4eec\u80fd\u591f\u5f97\u5230\u7ed3\u8bba\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u9009\u5b9a\u7684 \\(p_{l_i}\\)\uff0c\u5bfb\u627e\u5176\u53ef\u80fd\u5bfc\u81f4\u7b54\u6848\u66f4\u65b0\u7684\u70b9\u7684\u590d\u6742\u5ea6\u90fd\u662f\u5e38\u6570\u7ea7\u7684\u3002</p> <p>\u800c\u679a\u4e3e\u8fd9\u4e9b\u201c\u9009\u5b9a\u70b9\u201d\uff0c\u4e5f\u5c31\u662f\u679a\u4e3e \\(p_{l_i}\\)\uff0c\u5176\u590d\u6742\u5ea6\uff08\u6491\u6b7b\uff09\u662f \\(O(N)\\)\u3002</p> </li> </ul> <p>\u4e8e\u662f\u6211\u4eec\u80fd\u5f97\u5230\u8fd9\u4e2a\u5206\u6cbb\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u8ba1\u7b97\u9012\u63a8\u516c\u5f0f\uff1a    $$    T(N) = \\underbrace{2\\; T(\\frac{N}{2})}{\\text{Step 1. divide}} + \\underbrace{O(N)}} = O(N\\log N)    $$</p> <p></p>"},{"location":"ADS/7.%20Divide%20%26%20Conquer/#73-\u590d\u6742\u5ea6\u5206\u6790","title":"7.3 \u590d\u6742\u5ea6\u5206\u6790","text":"<p>\u5728\u5f00\u59cb\u63a5\u4e0b\u6765\u7684\u5185\u5bb9\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u7ed9\u51fa\u66f4\u4e00\u822c\u7684\uff0c\u6211\u4eec\u60f3\u8981\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u5373\u6c42\u89e3\u65f6\u95f4\u590d\u6742\u5ea6\u9012\u63a8\u516c\u5f0f\u5f62\u5982\u4e0b\u5f0f\u7684\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a</p> \\[ T(N) = aT(\\frac{N}{b}) + f(N) \\;\\;\\;\\; a,b \\in Z^+ \\] <p>\u4f8b\u5982\uff0c\u4e0a\u9762\u7684\u6700\u8fd1\u70b9\u5bf9\u95ee\u9898\uff0c\u5c31\u662f \\(a = 2,\\; b = 2,\\; f(N) = O(N)\\) \u7684\u60c5\u51b5\u3002</p>"},{"location":"ADS/7.%20Divide%20%26%20Conquer/#731-\u4ee3\u6362\u6cd5","title":"7.3.1 \u4ee3\u6362\u6cd5","text":"<p>\u4ee3\u6362\u6cd5(substitution method)\u7684\u601d\u8def\u975e\u5e38\u76f4\u767d\uff0c\u9996\u5148\u6211\u4eec\u901a\u8fc7\u67d0\u4e9b\u624b\u6bb5\uff08\u6bd4\u5982\u5927\u773c\u89c2\u5bdf\u6cd5\ud83d\udc40\uff09\u6765\u5f97\u5230\u4e00\u4e2a\u9884\u8bbe\u7684\u7ed3\u679c\uff0c\u63a5\u4e0b\u6765\u901a\u8fc7\u4ee3\u5165\u3001\u5f52\u7eb3\u7684\u65b9\u6cd5\u6765\u8bc1\u660e\u8fd9\u4e2a\u7ed3\u679c\u3002</p> <p>\u6c42\u89e3\u590d\u6742\u5ea6\uff1a $$ T(N) = 2\\; T(\\frac{N}{2}) + N $$ guess\uff1a $$ T(N) = O(N\\log N) $$</p> <p>\u4ee3\u5165\uff1a</p> <ul> <li>\u5229\u7528\\(T(N) = O(NlogN)\\)\uff0c\u5bf9\u4e8e\u8db3\u591f\u5c0f\u7684 \\(m &lt; N\\)\uff0c\u6709\uff1a</li> </ul> \\[ T(\\frac{m}{2}) = O(\\frac{m}{2}\\log \\frac{m}{2}) \\leq c \\frac{m}{2}\\log \\frac{m}{2} \\] <ul> <li>\u5c06\u4e0a\u5f0f\u4ee3\u5165\uff1a</li> </ul> \\[ T(m) = 2\\; T(\\frac{m}{2}) + m \\] <ul> <li>\u5f97\uff1a</li> </ul> \\[ T(m) \\leq 2\\; c \\frac{m}{2}\\log \\frac{m}{2} + m =  cm(logm - log 2) + m \\leq c m \\log m \\ \\ \\ \\ \\ \\text{ for } c \\geq 1 \\] <p>\u5bf9\u4e8e\u8db3\u591f\u5c0f\u7684 \\(m = 2\\) \u5f0f\u5b50\u5c31\u53ef\u4ee5\u6210\u7acb\uff0c\u7531\u5f52\u7eb3\u6cd5\u5f97\u7ed3\u8bba\u6210\u7acb\u3002</p> \\[ \\begin{aligned} &amp;\u5047\u5982\u6211\u4eec\u5047\u8bbe\u9519\u8bef\uff0c\u8ba4\u4e3aT(N) = O(N)\\\\ &amp;\u5bf9\u4e8e\u8db3\u591f\u5c0f\u7684m&lt;N,\u6709T(\\dfrac{m}{2}) &lt;= c\\dfrac{m}{2}\\\\ &amp;T(m) = 2T(\\dfrac{m}{2})+ m = cm + m = O(m) ?????\\\\ &amp;\u611f\u89c9\u5f88\u5bf9\u52b2\uff0c\u8bf4\u4e0d\u4e0a\u54ea\u91cc\u6709\u9519\u8bef\\\\ &amp;\u5047\u8bbe\u6211\u4eec\u7ee7\u7eed\u8ba1\u7b97\\\\ &amp;T(m) = 2T(\\dfrac{m}{2})+ m \\\\ &amp;= 2(2T(\\dfrac{m}{4}) + \\frac{m}{2}) + m = 4T(\\dfrac{m}{4})+2m\\\\ &amp;= 4(2T(\\dfrac{m}{8})+\\dfrac{m}{4})+2m = 8T(\\frac{m}{8})+3m\\\\ &amp;= .....\\\\ &amp;= 2^kT(\\frac{m}{2^k})+km\\\\ &amp;= cm + mlog_2m = m(c+log_2m)\\\\ &amp; \u53d1\u73b0\u4e0d\u518d\u662fO(N) \\end{aligned} \\]"},{"location":"ADS/7.%20Divide%20%26%20Conquer/#732-\u9012\u5f52\u6811\u6cd5","title":"7.3.2 \u9012\u5f52\u6811\u6cd5","text":"<p>\u9012\u5f52\u6811\u6cd5(recursion-tree method)\u7684\u601d\u8def\u662f\uff0c\u6211\u4eec\u901a\u8fc7\u753b\u51fa\u9012\u5f52\u6811\u6765\u5206\u6790\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c $$ a^{\\log_b N} = \\exp^{\\frac{\\ln N}{\\ln b} \\ln a} = \\exp^{\\frac{\\ln a}{\\ln b} \\ln N} = N^{\\log_b a} $$ \u5bf9\u4e8e\u4e00\u4e2a\u9012\u63a8\u5f0f\uff0c\u6211\u4eec\u5c06\u5b83\u4e0d\u65ad\u5c55\u5f00\u4ee5\u540e\uff0c\u5176\u5f62\u5f0f\u5927\u6982\u4f1a\u662f\u8fd9\u6837\uff1a</p> \\[ T(N) = ... =  \\underbrace{\\sum_{leaf_i}^{leaves}T(N_{leaf_i})}_{conquer} +  \\underbrace{\\sum_{node_i}^{non-leaf-nodes}f(N_{node_i})}_{combine} \\] <p>\u5176\u4e2d\uff0c\u7531\u4e8e\u672b\u7aef\u5b50\u95ee\u9898\u7684\u89c4\u6a21\u4e00\u822c\u90fd\u8db3\u591f\u5c0f\uff0c\u53ef\u4ee5\u8ba4\u4e3a \\(T(N_{leaf_i})\\) \u90fd\u662f\u5e38\u6570\uff0c\u4e8e\u662f\u4e0a\u5f0f\u53c8\u53ef\u4ee5\u53d8\u5316\u4e3a\uff1a</p> \\[ T(N) = ... =  \\underbrace{c\\; N_{leaves}}_{conquer} +  \\underbrace{\\sum_{node_i}^{non-leaf-nodes}f(N_{node_i})}_{combine} \\] <p>\u5177\u4f53\u6765\u8bf4\u89e3\u91ca\u5176\u542b\u4e49\uff0ccombine \u90e8\u5206\u5c31\u662f\u5728\u6bcf\u4e00\u6b21\u201c\u5206\u6cbb\u201d\u7684\u5904\u7406\u65f6\u95f4\uff0c\u5982\u5408\u5e76\u5f53\u524d\u7684\u5b50\u95ee\u9898\u5206\u6cbb\u540e\u7684\u7ed3\u679c\uff0c\u4f53\u73b0\u5728\u9012\u63a8\u5f0f\u7684 \\(f(N)\\) \u90e8\u5206\uff1b\u800c conquer \u90e8\u5206\u6307\u7684\u662f\u5f53\u201c\u5206\u6cbb\u201d\u7684\u201c\u6cbb\u201d\u5728\u201c\u5206\u201d\u7684\u672b\u7aef\u7684\u4f53\u73b0\uff0c\u5373\u5bf9\u4e8e\u8db3\u591f\u5c0f\u7684\u89c4\u6a21\u7684\u95ee\u9898\uff0c\u4e0d\u518d\u9700\u8981\u7ee7\u7eed\u201c\u5206\u201d\u7684\u65f6\u5019\uff0c\u5bf9\u5176\u5904\u7406\u7684\u5f00\u9500\u3002</p> <p></p> <p>\u53ef\u4ee5\u53d1\u73b0\uff0c\u6b64\u60c5\u51b5\u4e0b \\(a = 3,\\; b = 4,\\; f(N) = \\Theta(N^2)\\)\uff0c\u4e5f\u5c31\u662f\u8bf4\u6bcf\u6b21\u5206\u4e3a \\(3\\) \u4e2a\u5b50\u95ee\u9898\uff0c\u5b50\u95ee\u9898\u7684\u89c4\u6a21\u662f \\(\\frac{N}{4}\\)\uff0c\u800c\u5408\u5e76\u5f00\u9500\u4e3a \\(\\Theta(N^2)\\)\u3002</p> <p>\u6b64\u65f6\u7531\u4e8e\u5206\u6cbb\u7684\u7b56\u7565\u662f\u76f8\u5bf9\u5747\u5300\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u5f97\u5230\u7684\u662f\u4e00\u4e2a<code>\u5b8c\u7f8e\u4e09\u53c9\u6811(full binary tree)</code>\u3002</p> <p>\u663e\u7136\uff0c\u6811\u9ad8\u4e3a \\(\\log_4 N\\)\uff0c\u6839\u8bb0\u4e3a \\(0\\)\uff0c\u6bcf\u4e2a\u5206\u6cbb\u8282\u70b9\u7684 <code>combine \u5f00\u9500</code>\u5df2\u7ecf\u6807\u6ce8\u5728\u56fe\u7684\u8282\u70b9\u4f4d\u7f6e\uff0c<code>\u6a2a\u5411\u7bad\u5934\u6807\u8bb0\u7684\u662f\u5bf9\u8be5\u5c42\u6240\u6709\u8282\u70b9\u7684\u5f00\u9500\u7684\u6c42\u548c</code>\u3002</p> <p>\u5f53\u524d\u60c5\u51b5\u4e0b\uff0c\u7b2c0\u5c42\u5bf9\u5e94\u7684\u7ed3\u70b9\u6570\u662f1\uff0c\u7b2c1\u5c42\u5bf9\u5e94\u7684\u7ed3\u70b9\u65703\uff0c\u7b2c2\u5c42\u5bf9\u5e94\u7684\u7ed3\u70b9\u6570\u4e3a\\(3^2 = 9\\),\u4f9d\u6b21\u7c7b\u63a8\uff0c\u7b2ci\u5c42\u7684\u7ed3\u70b9\u6570\\(3^i\\)</p> <p>\u7b2c0\u5c42\u7684\u7ed3\u70b9\u5408\u5e76\u5f00\u9500\u4e3a\\(cN^2\\), \u7b2c1\u5c42\u7684\u7ed3\u70b9\u5408\u5e76\u5f00\u9500\u4e3a\\(c(\\dfrac{N}{4})^2\\),\u4f9d\u6b21\u7c7b\u63a8\u7b2ci\u5c42\u7684\u5408\u5e76\u5f00\u9500\u4e3a\\(c(\\dfrac{N}{4^i})^2\\)</p> <p>\u5c06\u6240\u6709\u7684\u5408\u5e76\u5f00\u9500\u548c\u6700\u540e\u4e00\u5c42\u7684\u5e38\u6570\u5f00\u9500\u8ba1\u7b97\u5728\u4e00\u8d77 $$ \\begin{aligned} T(N) &amp; = \\sum_{i=0}<sup>{log_4N-1}3</sup>i \\times c(\\dfrac{N}{4<sup>i})</sup>2 + 3^{log_4N}T(1)\\ &amp; = \\sum_{i=0}^{log_4N-1} (\\dfrac{3}{16})^i cN^2 + N^{log_43} \\times T(1)\\ &lt; &amp; = \\dfrac{1}{1-\\frac{3}{16}}cN^2 +  O(N^{log_4 3}) = O(N^2) \\end{aligned} $$</p>"},{"location":"ADS/7.%20Divide%20%26%20Conquer/#733-\u4e3b\u65b9\u6cd5","title":"7.3.3 \u4e3b\u65b9\u6cd5","text":"<p>\u4e3b\u65b9\u6cd5(master method)\u4e4b\u6240\u4ee5\u53eb\u201c\u4e3b\u201d\uff0c\u662f\u56e0\u4e3a\u5b83\u5206\u6790\u7684\u662f combine \u548c conquer \u90e8\u5206\u5b70\u4e3a\u4e3b\u5bfc\u3002</p>"},{"location":"ADS/7.%20Divide%20%26%20Conquer/#\u5f62\u5f0f\u4e00","title":"\u5f62\u5f0f\u4e00","text":"<p>definition \"Form 1\"</p> <p>\u200b    \u5bf9\u4e8e\u5f62\u5982 \\(T(N)=aT(N/b)+f(N)\\) \u7684\u9012\u63a8\u5f0f\uff0c\u5176\u4e2d\\(a&gt;=1, b&gt;1\\)\uff1a</p> <ol> <li>\u82e5 \\(f(N)=O(N^{(\\log_b{a})-\\varepsilon}), \\text{ for }\\varepsilon&gt;0\\)\uff0c\u90a3\u4e48 \\(T(N)=\\Theta(N^{\\log_b{a}})\\)\uff1b</li> <li>\u82e5 \\(f(N)=\\Theta(N^{\\log_b{a}})\\)\uff0c\u90a3\u4e48 \\(T(N)=\\Theta(N^{\\log_b{a}}\\log{N})\\)\uff1b</li> <li>\u82e5 \\(f(N)=\\Omega(N^{(\\log_b{a})+\\varepsilon}), \\text{ for }\\varepsilon&gt;0\\) \u4e14 \\(af(\\frac{N}{b})&lt;cf(N), \\text{ for } c&lt;1 \\text{ and } \\forall N &gt; N_0\\)\uff0c\u90a3\u4e48 \\(T(N)=\\Theta(f(N))\\)\uff1b</li> </ol> <p>\u60c5\u51b5\u4e09\u7684\u540e\u9762\u90a3\u4e2a\u6761\u4ef6\u53c8\u53eb regularity condition\u3002</p> <p>\u56de\u987e\u6211\u4eec\u5728\u524d\u9762\u8bf4\u7684\u90a3\u53e5\u8bdd\uff0c\u4e3b\u65b9\u6cd5(master method)\u4e4b\u6240\u4ee5\u53eb\u201c\u4e3b\u201d\uff0c<code>\u662f\u56e0\u4e3a\u5b83\u5206\u6790\u7684\u662f combine \u548c conquer \u90e8\u5206\u5b70\u4e3a\u4e3b\u5bfc</code>\uff0c\u89c2\u5bdf\u4e09\u79cd\u60c5\u51b5\u7684\u533a\u5206\u6761\u4ef6\u90fd\u662f\u6bd4\u8f83 \\(f(N)\\)\uff08\u6bcf\u4e00\u6b21\u7684 combine \u5f00\u9500\uff09 \u548c \\(N^{\\log_b{a}}\\)\uff08\u5373\u6c42\u548c\u5f0f\u4e2d\u7684 conquer \u7684\u5f00\u9500\uff09.</p> <p><code>\u4e3a\u4ec0\u4e48\u8981\u6bd4\u8f83\u8fd9\u4e24\u4e2a\u5462\uff1f\u4e14\u770b\u9012\u63a8\u6811\u5f97\u5230\u7684\u7ed3\u8bba\uff0c\u5206\u4e3a\u6240\u6709\u7684\u53f6\u5b50\u7ed3\u70b9\u7684\u5e38\u6570\u5f00\u9500\u548c\u975e\u53f6\u5b50\u7ed3\u70b9\u7684\u5408\u5e76\u5f00\u9500\uff0c\u5206\u522b\u5bf9\u5e94 cf(N) \u548c N^{log_b a}\uff0c\u89c2\u5bdf\u6bd4\u8f83\u5f97\u51fa\u54ea\u4e00\u4e2a\u5360\u4e3b\u5bfc</code></p> <p>\u5f53 \\(f(N)\\) \u8db3\u591f\u5c0f\u65f6\uff0c\u4ee5 conquer \u5f00\u9500\u4e3a\u4e3b\uff08i.e. case 1\uff09\uff1b\u5f53\u8db3\u591f\u5927\u65f6\uff0c\u4ee5 combine \u4e3a\u4e3b\uff08i.e. case 3\uff09\uff1b\u800c\u5176\u4e2d\u8fd8\u6709\u4e00\u4e2a\u4e2d\u95f4\u72b6\u6001\uff08i.e. case 2\uff09\u3002</p> <ul> <li>\u3010eg1\u3011\\(a = b = 2,\\; f(N) = N\\)</li> <li>\\(f(N) = N = \\Theta(N^{\\log_2{2}})\\)\uff0c\u9002\u7528\u4e8e\u60c5\u51b5 2</li> <li>\u56e0\u6b64\u5f97\u5230\u7ed3\u679c \\(T(N) = \\Theta(N \\log N)\\)</li> <li>\u3010eg2\u3011\\(a = b = 2,\\; f(N) = N \\log N\\)<ul> <li>\\(f(N) = N \\log N\\)\uff0c\u867d\u7136 \\(N \\log N = \\Omega(N^{\\log_2{2}})\\)\uff0c\u4f46\u662f \\(N \\log N \\neq \\Omega(N^{(\\log_2{2}) + \\varepsilon})\\)\uff0c\u6240\u4ee5\u4e0d\u9002\u7528\u4e8e\u60c5\u51b5 3\uff1b</li> <li><code>\u867d\u7136\u4f60\u7684f(N)\u6bd4N^{log_b a}\u8981\u5927\uff0c\u4f46\u662f\u8fbe\u4e0d\u5230 $N \\log N \\neq \\Omega(N^{(\\log_2{2}) + \\varepsilon})$\u3002\u6240\u4ee5\u4e0d\u6ee1\u8db3\u6761\u4ef6</code></li> <li>\u5177\u4f53\u6765\u8bf4\uff0c\\(\\lim \\limits_{N\\to \\infty} \\frac{N \\log N}{N^{1+\\varepsilon}}=\\lim \\limits_{N\\to \\infty} \\frac{\\log N}{N^{\\varepsilon}} = 0 \\text{ for fixed } \\varepsilon &gt; 0\\)\uff1b       \u51fa\u4e86 \\(\\varepsilon\\) \u7684\u4e00\u5b9a\u4f5c\u7528\uff1b</li> </ul> </li> </ul>"},{"location":"ADS/7.%20Divide%20%26%20Conquer/#\u8bc1\u660e","title":"\u8bc1\u660e","text":"<p>proof \"proof for form 1\"</p> <p>\u5bf9\u4e8e\u5f62\u5982 \\(T(N)=aT(N/b)+f(N)\\) \u7684\u9012\u63a8\u5f0f\uff0c\u6211\u4eec\u9700\u8981\u4f9d\u6b21\u8bc1\u660e\uff0c\u6b64\u5904\u6211\u4eec\u4f7f\u7528\u9012\u5f52\u6811\u6cd5\u8fdb\u884c\u8bc1\u660e\u3002</p> <p></p> <p>section \"\u60c5\u51b5\u4e00\"</p> <p>\ud83c\udfaf \u76ee\u6807\uff1a\u82e5 \\(f(N)=O(N^{(\\log_b{a})-\\varepsilon}), \\text{ for }\\varepsilon&gt;0\\)\uff0c\u90a3\u4e48 \\(T(N)=\\Theta(N^{\\log_b{a}})\\)\uff1b</p> <p>\ud83e\udea7 \u8bc1\u660e\uff1a\u6211\u4eec\u9996\u5148\u9700\u8981\u7ed8\u5236\u51fa\u5bf9\u5e94\u7684\u9012\u5f52\u6811\uff0c\u6216\u8005\u641e\u6e05\u695a\u5c55\u5f00\u540e\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u61d2\u5f97\u753b\u56fe\u6240\u4ee5\u6211\u8fd9\u91cc\u91c7\u7528\u6587\u5b57\u53d9\u8ff0\u3002</p> <p>\u6811\u9ad8 \\(\\log_b{N}\\)\uff0c\u5171 \\(\\log_b{N} + 1\\) \u5c42\uff0c\u5219\u6709\uff1a</p> <ul> <li>\u7b2c \\(0\\) \u5c42\uff08\u6839\uff09\u4e00\u5171 \\(1\\) \u9879\uff0ccombine \u7684\u5f00\u9500\u4e3a \\(f(N)\\)\uff1b</li> <li>\u7b2c \\(1\\) \u5c42\u4e00\u5171 \\(a\\) \u9879\uff0ccombine \u7684\u5f00\u9500\u4e3a \\(a\\times f(\\frac{N}{b})\\)\uff1b</li> <li>\u7b2c \\(2\\) \u5c42\u4e00\u5171 \\(a^2\\) \u9879\uff0ccombine \u7684\u5f00\u9500\u4e3a \\(a^2 \\times f(\\frac{N}{b^2})\\)\uff1b</li> <li>......</li> <li>\u7b2c \\(j\\) \u5c42\u4e00\u5171 \\(a^j\\) \u9879\uff0ccombine \u7684\u5f00\u9500\u4e3a \\(a^j \\times f(\\frac{N}{b^j})\\)\uff1b</li> <li>......</li> <li>\u7b2c \\((\\log_b{N}) - 1\\) \u5c42\u4e00\u5171 \\(a^{(\\log_b{N}) - 1}\\) \u9879\uff0ccombine \u7684\u5f00\u9500\u4e3a \\(a^{(\\log_b{N}) - 1} \\times f(\\frac{N}{b^{(\\log_b{N}) - 1}})\\)\uff1b</li> <li>\u7b2c \\(\\log_b{N}\\) \u5c42\uff0c\u5373\u4e3a\u53f6\u5b50\u5c42\uff0c\u4e00\u5171 \\(a^{\\log_b{N}} = N^{\\log_b{a}}\\) \u9879\uff0cconquer \u7684\u5f00\u9500\u4e3a \\(N^{\\log_b{a}} \\times \\Theta(1) = \\Theta(N^{\\log_b{a}})\\)\uff1b</li> </ul> <p>\u5f97\u5230\u6c42\u548c\u5f0f\uff1a</p> \\[ T(N) = \\Theta(N^{\\log_b{a}}) + \\sum_{j = 0}^{(\\log_b{N})-1} a^j f(\\frac{N}{b^j}) \\] <p>\u800c\u6211\u4eec\u6709\u6761\u4ef6 \\(f(N)=O(N^{(\\log_b{a})-\\varepsilon}), \\text{ for }\\varepsilon&gt;0\\)\uff0c\u5c06\u5b83\u4ee3\u5165\u5230\u4e0a\u5f0f\u4e2d\u5f97\u5230\uff1a</p> \\[ \\begin{aligned} T(N)  &amp;= \\Theta(N^{\\log_b{a}}) + \\sum_{j = 0}^{(\\log_b{N})-1} a^j O\\left(\\left(\\frac{N}{b^j}\\right)^{(\\log_b{a})-\\varepsilon}\\right)\\\\ &amp;= \\Theta(N^{\\log_b{a}}) + O\\left(     N^{(\\log_b{a}) - \\varepsilon}     \\times     \\sum_{j = 0}^{(\\log_b{N})-1} \\left(\\frac{a}{b^{(\\log_b{a})-\\varepsilon}}\\right)^j \\right) \\\\ &amp;= \\Theta(N^{\\log_b{a}}) + O\\left(     N^{(\\log_b{a}) - \\varepsilon}     \\times     \\sum_{j = 0}^{(\\log_b{N})-1} (b^{\\varepsilon})^j \\right) \\\\ &amp;= \\Theta(N^{\\log_b{a}}) + O\\left(     N^{(\\log_b{a}) - \\varepsilon}     \\times     \\frac{1\\times(1-(b^\\varepsilon)^{\\log_b{N}})}{1-b^\\varepsilon} \\right) \\\\ &amp;= \\Theta(N^{\\log_b{a}}) + O\\left(     N^{(\\log_b{a}) - \\varepsilon}     \\times     \\frac{N^\\varepsilon-1}{b^\\varepsilon-1} \\right) \\\\ &amp;= \\Theta(N^{\\log_b{a}}) + O\\left(     N^{(\\log_b{a}) - \\varepsilon}     \\times     N^\\varepsilon \\right) \\\\ &amp;= \\Theta(N^{\\log_b{a}}) + O\\left(     N^{\\log_b{a}} \\right) \\\\ &amp;= \\Theta(N^{\\log_b{a}}) \\end{aligned} \\] <p>\u81f3\u6b64\uff0c\u60c5\u51b5\u4e00\u8bc1\u660e\u5b8c\u6bd5\u3002</p> <p>section \"\u60c5\u51b5\u4e8c\"</p> <p>\ud83c\udfaf \u76ee\u6807\uff1a\u82e5 \\(f(N)=\\Theta(N^{\\log_b{a}})\\)\uff0c\u90a3\u4e48 \\(T(N)=\\Theta(N^{\\log_b{a}}\\log{N})\\)\uff1b</p> <p>\ud83e\udea7 \u8bc1\u660e\uff1a\u524d\u9762\u7684\u90e8\u5206\u548c\u60c5\u51b5\u4e00\u7684\u7c7b\u4f3c\uff0c\u6211\u4eec\u901a\u8fc7\u76f8\u540c\u7684\u6b65\u9aa4\u5f97\u5230\u76f8\u540c\u7684\u6c42\u548c\u5f0f\uff1a</p> \\[ T(N) = \\Theta(N^{\\log_b{a}}) + \\sum_{j = 0}^{(\\log_b{N})-1} a^j f(\\frac{N}{b^j}) \\] <p>\u800c\u6211\u4eec\u6709\u6761\u4ef6 \\(f(N)=\\Theta(N^{\\log_b{a}})\\)\uff0c\u5c06\u5b83\u4ee3\u5165\u5230\u4e0a\u5f0f\u4e2d\u5f97\u5230\uff1a</p> \\[ \\begin{aligned} T(N) &amp;= \\Theta(N^{\\log_b{a}}) + \\sum_{j=0}^{(\\log_b{N})-1}a^j\\Theta\\left(\\left(\\frac{N}{b^j}\\right)^{\\log_b{a}}\\right) \\\\ &amp;= \\Theta(N^{\\log_b{a}}) + \\Theta\\left(     N^{\\log_b{a}} \\times     \\sum_{j=0}^{(\\log_b{N})-1}\\left(\\frac{a}{b^{\\log_b{a}}}\\right)^j \\right) \\\\ &amp;= \\Theta(N^{\\log_b{a}}) + \\Theta\\left(     N^{\\log_b{a}} \\times     \\log_b{N} \\right) \\\\ &amp;= \\Theta(N^{\\log_b{a}}\\log{N}) \\end{aligned} \\] <p>\u81f3\u6b64\uff0c\u60c5\u51b5\u4e8c\u8bc1\u660e\u5b8c\u6bd5\u3002</p> <p>section \"\u60c5\u51b5\u4e09\"</p> <p>\ud83c\udfaf \u76ee\u6807\uff1a\u82e5 \\(f(N)=\\Omega(N^{(\\log_b{a})+\\varepsilon}), \\text{ for }\\varepsilon&gt;0\\) \u4e14 \\(af(\\frac{N}{b})&lt;cf(N), \\text{ for } c&lt;1 \\text{ and } \\forall N &gt; N_0\\)\uff0c\u90a3\u4e48 \\(T(N)=\\Theta(f(N))\\)\uff1b</p> <p>\ud83e\udea7 \u8bc1\u660e\uff1a\u60c5\u51b5\u4e09\u7684\u8bc1\u660e\uff0c\u4ece\u6761\u4ef6\u7684\u53d8\u5316\u5c31\u53ef\u4ee5\u770b\u51fa\u6765\u548c\u524d\u9762\u7a0d\u8bb8\u6709\u4e9b\u4e0d\u540c\u4e86\u3002\u4e0d\u8fc7\u6c42\u548c\u5f0f\u7684\u5f97\u5230\u8fd8\u662f\u4e00\u6837\uff0c\u901a\u8fc7\u548c\u4e4b\u524d\u4e00\u6837\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u9996\u5148\u5f97\u5230\u6c42\u548c\u5f0f\uff1a</p> \\[ T(N) = \\Theta(N^{\\log_b{a}}) + \\sum_{j = 0}^{(\\log_b{N})-1} a^j f(\\frac{N}{b^j}) \\] <p>\u63a5\u4e0b\u6765\u7684\u6b65\u9aa4\u548c\u4e4b\u524d\u4e0d\u540c\u3002\u5728\u7ee7\u7eed\u4e4b\u524d\uff0c\u6211\u4eec\u9996\u5148\u89c2\u5bdf\u4e0d\u7b49\u5f0f \\(af(\\frac{N}{b})&lt;cf(N)\\)\uff0c\u5728\u6211\u4eec\u7684\u6c42\u548c\u5f0f\u4e2d\uff0c\u6211\u4eec\u89c2\u5bdf\u5230\u6211\u4eec\u6709\u5927\u91cf\u7684\u5f62\u5982 \\(a^jf(\\frac{N}{b^j})\\) \u7684\u9879\uff0c\u800c\u8fd9\u4e9b\u9879\u90fd\u53ef\u4ee5\u901a\u8fc7\u8fed\u4ee3\u4e0a\u9762\u90a3\u4e2a\u4e0d\u7b49\u5f0f\u6765\u5b9e\u73b0\uff0c\u5373\uff1a</p> \\[ a^jf(\\frac{N}{b^j}) &lt; c\\times a^{j-1}f(\\frac{N}{b^{j-1}}) &lt; ... &lt; c^j f(N) \\] <p>\u5c06\u8fd9\u4e2a\u4e0d\u7b49\u5f0f\u5e94\u7528\u4e8e\u6c42\u548c\u5f0f\u4e2d\uff0c\u6211\u4eec\u80fd\u591f\u5f97\u5230\uff1a</p> \\[ \\begin{aligned}     T(N)      &amp;&lt; \\Theta(N^{\\log_b{a}}) + \\sum_{j=0}^{(\\log_b{N})-1}c^j f(N) \\\\     &amp;= \\Theta(N^{\\log_b{a}}) + f(N) \\sum_{j=0}^{(\\log_b{N})-1}c^j \\\\     &amp;= \\Theta(N^{\\log_b{a}}) + f(N) \\times \\frac{{1-c^{\\log_b{N}}}}{1-c} \\\\     &amp;= \\Theta(N^{\\log_b{a}}) + f(N) \\times \\frac{1-N^{\\log_b{c}}}{1-c} \\end{aligned} \\] <p>\u800c\u7531\u4e8e \\(c&lt;1\\)\uff0c\u6240\u4ee5 \\(\\log_b{c} &lt; 0\\)\uff1b\u800c \\(N &gt; 0\\)\uff0c\u800c\u4e14\u4e00\u822c\u975e\u5e38\u5927\uff0c\u6240\u4ee5 \\(N^{\\log_b{c}} \\in (0,1)\\)\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u786e\u5b9a\u7684\u5e38\u6570 \\(c\\)\uff0c\u6211\u4eec\u6709 \\(\\frac{1-N^{\\log_b{c}}}{1-c} \\in \\left(0, \\frac{1}{1-c}\\right)\\)\uff1b</p> <p>\u56e0\u6b64\uff0c\u4e0a\u5f0f\u4fbf\u80fd\u6539\u53d8\u4e3a\uff1a</p> \\[ \\begin{aligned}     T(N)      &amp;&lt; \\Theta(N^{\\log_b{a}}) + f(N) \\times \\frac{1-N^{\\log_b{c}}}{1-c} \\\\     &amp;&lt; \\Theta(N^{\\log_b{a}}) + f(N) \\times \\frac{1}{1-c} \\end{aligned} \\] <p>\u5e76\u4e14\uff0c\u7531\u4e8e \\(f(N)=\\Omega(N^{(\\log_b{a})+\\varepsilon}), \\text{ for }\\varepsilon&gt;0\\)\uff0c\u6240\u4ee5\u6839\u636e\u7b26\u53f7\u5b9a\u4e49\u53ef\u4ee5\u5f97\u5230 \\(T(N) = O(f(N))\\)\u3002</p> <p>\u800c\u6211\u4eec\u77e5\u9053\uff0c\u8981\u8bc1\u660e \\(T(N) = \\Theta(f(N))\\) \u8fd8\u9700\u8981\u8bc1\u660e \\(T(N) = \\Omega(f(N))\\)\uff1a</p> \\[ \\begin{aligned} T(N) &amp;= \\Theta(N^{\\log_b{a}}) + \\sum_{j = 0}^{(\\log_b{N})-1} a^j f(\\frac{N}{b^j}) &amp;\\geq \\sum_{j = 0}^{(\\log_b{N})-1} a^j f(\\frac{N}{b^j}) &amp;\\geq f(N) \\end{aligned} \\] <p>\u7531\u6b64\u5f97\u5230 \\(T(N) = \\Omega(f(N))\\)\uff0c\u6700\u7ec8\u8bc1\u5f97 \\(T(N) = \\Theta(f(N))\\)\uff0c\u81f3\u6b64\uff0c\u60c5\u51b5\u4e09\u8bc1\u660e\u5b8c\u6bd5\u3002</p>"},{"location":"ADS/7.%20Divide%20%26%20Conquer/#\u5f62\u5f0f\u4e8c","title":"\u5f62\u5f0f\u4e8c","text":"<p>definition \"Form 2\"</p> <p>\u5bf9\u4e8e\u5f62\u5982 \\(T(N) = aT(\\frac{N}{b}) + f(N)\\) \u7684\u9012\u63a8\u5f0f\uff1a</p> <ol> <li>\u82e5 \\(af(\\frac{N}{b}) = \\kappa f(N) \\text{ for fixed } \\kappa &lt; 1\\)\uff0c\u90a3\u4e48 \\(T(N) = \\Theta(f(N))\\)\uff1b</li> <li>\u82e5 \\(af(\\frac{N}{b}) = \\Kappa f(N) \\text{ for fixed } \\Kappa &gt; 1\\)\uff0c\u90a3\u4e48 \\(T(N) = \\Theta(N^{\\log_b{a}}) = \\Theta(a^{\\log_b{N}})\\)\uff08\u4e2a\u4eba\u611f\u89c9\u540e\u9762\u90a3\u4e2a\u5f0f\u5b50\u66f4\u65b9\u4fbf\u76f4\u89c2\u8bb0\u5fc6\uff09\uff1b</li> <li>\u82e5 \\(af(\\frac{N}{b}) = f(N)\\)\uff0c\u90a3\u4e48 \\(T(N) = \\Theta(f(N) \\log_b N)\\)\uff1b</li> </ol>"},{"location":"ADS/7.%20Divide%20%26%20Conquer/#\u8bc1\u660e_1","title":"\u8bc1\u660e","text":"<p>proof \"proof for form 2\"</p> <p>\u200b    \u5bf9\u4e8e\u5f62\u5982 \\(T(N)=aT(N/b)+f(N)\\) \u7684\u9012\u63a8\u5f0f\uff0c\u57fa\u4e8e\u7ebf\u6027\u5173\u7cfb\u7684\u5f62\u5f0f\u4e8c\u7684\u8bc1\u660e\u5b9e\u9645\u4e0a\u548c\u5f62\u5f0f\u4e00\u7684\u7b2c\u4e09\u79cd\u60c5\u51b5\u7684\u8bc1\u660e\u975e\u5e38\u76f8\u50cf\u3002</p> <p>\u5047\u8bbe\u6211\u4eec\u6709 \\(af(\\frac{N}{b}) = c f(N)\\)\uff0c\u53ea\u9700\u8981\u8ba8\u8bba \\(c\\) \u7684\u53d6\u503c\u8303\u56f4\u5bf9\u7ed3\u679c\u7684\u5f71\u54cd\uff0c\u5c31\u53ef\u4ee5\u4e00\u6b21\u6027\u5f97\u5230\u7ed3\u679c\u3002</p> <p>\u7c7b\u4f3c\u4e8e\u5f62\u5f0f\u4e00\u7684\u7b2c\u4e09\u79cd\u60c5\u51b5\u7684\u8bc1\u660e\uff0c\u6211\u4eec\u8fed\u4ee3\u8be5\u5173\u7cfb\u5f0f\uff0c\u5f97\u5230\u5173\u7cfb\uff1a</p> \\[ a^j f(\\frac{N}{b^j}) = c^j f(N) \\] <p>\u4e8e\u662f\uff0c\u6211\u4eec\u6709\uff1a</p> \\[ \\begin{aligned}     T(N)     &amp;= \\Theta(N^{\\log_b{a}}) + \\sum_{j = 0}^{(\\log_b{N})-1} a^j f(\\frac{N}{b^j}) \\\\     &amp;= \\Theta(N^{\\log_b{a}}) + \\sum_{j = 0}^{(\\log_b{N})-1} c^j f(N) \\\\     &amp;= \\Theta(N^{\\log_b{a}}) + f(N) \\sum_{j = 0}^{(\\log_b{N})-1} c^j \\\\     &amp;= \\Theta(N^{\\log_b{a}}) + f(N) \\times \\frac{1-N^{\\log_b{c}}}{1-c} \\\\ \\end{aligned} \\] <p><code>\u63a5\u4e0b\u6765\uff0c\u53c8\u56de\u5230\u4e86f(N)\u4e0eN^{log_b a}\u6bd4\u5927\u5c0f\u7684\u73af\u8282\uff0c\u4f46\u662f\u6211\u4eec\u53ea\u6709</code>\\(af(\\frac{N}{b}) = c f(N)\\) $$ c f(N) \\sim a f(\\frac{N}{b}) \\sim ... \\sim a^L f(\\frac{N}{b^L}) $$</p> <p>\u6211\u4eec\u5047\u8bbe \\(\\frac{N}{b^L}\\) \u8db3\u591f\u5c0f\uff08\u5373\u9012\u5f52\u5230\u6700\u672b\u7aef\uff0c\u53ea\u9700\u8981\u8fdb\u884c conquer \u7684\u65f6\u5019\uff09\uff0c\u5373 \\(\\frac{N}{b^L} = \\Theta(1)\\)\uff0c\u90a3\u4e48\u5c31\u6709 \\(L = \\Theta(\\log_b{N})\\)\u3002\u4e8e\u662f\uff0c\u6211\u4eec\u6709\uff1a</p> \\[ f(N) \\sim \\Theta(a^{\\log_b{N}}) = \\Theta(N^{\\log_b{a}}) \\] <ul> <li>\u5f53 \\(c &lt; 1\\) \u65f6\uff0c\u5b9e\u9645\u4e0a\u6709 \\(f(N) &gt; af(\\frac{N}{b})\\)\uff1b\u5bf9\u5e94\u7684\\(f(N) &gt; N^{log _b a}\\)</li> <li>\u5f53 \\(c = 1\\) \u65f6\uff0c\u5b9e\u9645\u4e0a\u6709 \\(f(N) = af(\\frac{N}{b})\\)\uff1b\u5bf9\u5e94\u7684\\(f(N) = N^{log _b a}\\)</li> <li>\\(c &gt; 1\\) \u65f6\uff0c\u5b9e\u9645\u4e0a\u6709 \\(f(N) &lt; af(\\frac{N}{b})\\)\uff1b\u5bf9\u5e94\u7684\\(f(N) &lt; N^{log _b a}\\)</li> </ul>"},{"location":"ADS/7.%20Divide%20%26%20Conquer/#\u5f62\u5f0f\u4e09","title":"\u5f62\u5f0f\u4e09","text":"<p>definition \"Form 3\"</p> <p>\u200b    \u7b2c\u4e09\u79cd\u5f62\u5f0f\u662f\u5bf9\u4e8e \\((N)\\) \u7684\u7279\u522b\u5f62\u5f0f\uff0c\u5f53\u9012\u63a8\u5173\u7cfb\u6ee1\u8db3\uff1a $$ \\begin{aligned} &amp; T(N) = a T(\\frac{n}{b}) + \\Theta(N^k \\log^p{N}) &amp; \\text{Where } a \\geq 1,\\; b &gt; 1,\\; p \\geq 0 \\end{aligned} $$</p> <p>\u5176\u590d\u6742\u5ea6\u6709\u7ed3\u8bba\uff1a</p> \\[ T(N) = \\left\\{     \\begin{aligned}         &amp; O(N^{\\log_b{a}}) &amp; \\text{if } a &gt; b^{k} \\\\         &amp; O(N^k \\log^{p+1}{N}) &amp; \\text{if } a = b^{k} \\\\         &amp; O(N^k \\log^{p}{N}) &amp; \\text{if } a &lt; b^{k}     \\end{aligned} \\right. \\] <p>\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u5f0f\u5b50\u4e5f\u975e\u5e38\u597d\u8ba4\uff0c\u5c5e\u4e8e\u5f62\u5f0f\u4e8c\u7684\u4e00\u79cd\u7279\u6b8a\u5f62\u5f0f\u3002\u53ef\u4ee5\u5bf9\u7167\u7740\u770b\uff0c\u975e\u5e38\u5bb9\u6613\u770b\u51fa\u5173\u7cfb\u3002</p> <p>\u4f9d\u7136\u91c7\u7528\u9012\u63a8\u6811\u7684\u65b9\u6cd5</p> <p>\u7b2c i \u5c42\uff0c\u7ed3\u70b9\u6570 \\(a ^ i\\), \u6bcf\u4e2a\u7ed3\u70b9\u7684\u5408\u5e76\u5f00\u9500 \\(\\Theta ((\\dfrac{N}{b^i})^klog^p \\frac{N}{b^i}\\) $$ \\begin{aligned}  &amp;\\sum_{i=0}^{log_b N -1}\\Theta (a ^ i \\times (\\dfrac{N}{b<sup>i})</sup>klog^p \\frac{N}{b^i}) + N^{log_b a} \\  &amp; = \\sum_{i=0}^{log_b N -1}\\Theta (  (\\dfrac{a}{b^k}) ^ i \\times (N)<sup>klog</sup>p \\frac{N}{b^i}) + N^{log_b a} \\end{aligned} $$</p> <ul> <li>\u5f53 \\(a &gt; b^k\\)\u65f6\uff0c\\(N^{log_ba} &gt; N^k\\),\u663e\u7136\u662f\u540e\u9762\u5927</li> </ul> <p></p>"},{"location":"ADS/7.%20Divide%20%26%20Conquer/#74-\u4e60\u9898","title":"7.4 \u4e60\u9898","text":"<ol> <li>\\(T(N) = 2T(\\sqrt N) + log N\\)</li> </ol> <p>Which one of the following is the lowest upper bound of \\(T(n)\\) for the following recursion  \\(T(n) = 2T(\\sqrt{n}) + \\log n\\)?</p> <ul> <li> <p>A. \\(O(\\log n\\log \\log n)\\)</p> </li> <li> <p>B. \\(O(\\log^2 n)\\)</p> </li> <li> <p>C. \\(O(n\\log n)\\)</p> </li> <li> <p>D. \\(O(n^2)\\)</p> </li> <li> <p>\u5148\u91c7\u7528\u8fd8\u539f\u6cd5\uff0c\u4ee4\\(m = log N\\)\uff0c \u90a3\u4e48\u539f\u5f0f\u8f6c\u5316\u4e3a\\(T(2^m) = 2(T^{m/2})+m\\)</p> </li> <li>\u518d\u4f7f\u7528\u6362\u5143\u6cd5\uff0c\u4ee4\\(S(m) = T(2^m)\\),\u90a3\u4e48\u539f\u5f0f\u8f6c\u5316\u4e3a\\(S(m) = 2S(m/2) + m\\)</li> <li><code>\u53d1\u73b0\u8fd9\u5c31\u662f\u9012\u5f52\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u5f97\u5230</code>\\(S(m) = mlogm\\)</li> <li> <p>\u8fd8\u539f\uff0c\u4ee4\\(2^m = N\\),\u5219 \\(m = log N\\),\u6700\u7ec8\\(T(N) = S(m) = logN log(logN)\\)</p> </li> <li> <p></p> </li> <li> <p>When solving a problem with input size \\(N\\) by divide and conquer, if at each stage the problem is divided into 8 sub-problems of equal size \\(N/3\\), and the conquer step takes \\(O(N^2 logN)\\) to form the solution from the sub-solutions, then the overall time complexity is __.</p> </li> <li> <p>A. \\(O(N^2 logN)\\)</p> </li> <li> <p>B. \\(O(N^2 log^2 N)\\)</p> </li> <li> <p>C. \\(O(N^3 logN)\\)</p> </li> <li> <p>D. \\(O(N^{log8/log3})\\)</p> </li> </ul> <p><code>\u8fd0\u7528\u5f62\u5f0f\u4e09\uff0ca = 8\uff0c b = 3, p = 1, k = 2, a &lt; b ^ k</code></p> <p>\u6700\u7ec8\u7b54\u6848\u662fA</p> <ol> <li> <p>To solve a problem with input size \\(N\\) by divide and conquer algorithm, among the following methods, __ is the worst.</p> </li> <li> <p>A. divide into 2 sub-problems of equal complexity \\(N/3\\) and conquer in \\(O(N)\\)</p> </li> <li> <p>B. divide into 2 sub-problems of equal complexity \\(N/3\\) and conquer in \\(O(NlogN)\\)</p> </li> <li> <p>C. divide into 3 sub-problems of equal complexity \\(N/2\\) and conquer in \\(O(N)\\)</p> </li> <li> <p>D. divide into 3 sub-problems of equal complexity \\(N/3\\) and conquer in \\(O(NlogN)\\)</p> </li> </ol> <p>A. \\(T(N) = 2T(N/3) + O(N), N^{log_3 2} &lt; N\\),\u6700\u7ec8\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(T(N) = O(N)\\)</p> <p>B.\\(T(N) = 2T(N/3) + O(NlogN),a = 2, b= 3, k = 1, p =1, a &lt; b^k \\(,\u6700\u7ec8\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\)T(N) = O(NlogN)\\)</p> <p>C.\\(T(N) = 3T(N/2)+O(N), N^{log_2 3 &gt; N}\\)\u6700\u7ec8\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(T=O(N^{log_2 3)}\\)</p> <p>D.\\(T(N) = 3(T/3) + O(NlogN), a = 3, b= 3, k =1, p= 1, a = b^k \\(,\u6700\u7ec8\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\)T=O(Nlog^2N)\\)</p> <ol> <li> <p>3-way-mergesort : Suppose instead of dividing in two halves at each step of the mergesort, we divide into three one thirds, sort each part, and finally combine all of them using a three-way-merge.  What is the overall time complexity of this algorithm ?</p> </li> <li> <p>A. \\(O(n(\\log^2 n))\\)</p> </li> <li> <p>B. \\(O(n^2 \\log n)\\)</p> </li> <li> <p>C. \\(O(n\\log n)\\)</p> </li> <li> <p>D. \\(O(n)\\)</p> </li> </ol> <p>\\(T(N) = 3T(N/3)+O(N), N^{log_3 3} = N\\),\u6700\u7ec8\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(O(NlogN)\\)</p> <ol> <li></li> </ol>"},{"location":"ADS/8.%20Dynamic%20Programming/","title":"\u516b. Dynamic Programming","text":"<p> \u7ea6 3828 \u4e2a\u5b57  164 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 21 \u5206\u949f</p>"},{"location":"ADS/8.%20Dynamic%20Programming/#71-\u52a8\u6001\u89c4\u5212\u7b80\u4ecb","title":"7.1. \u52a8\u6001\u89c4\u5212\u7b80\u4ecb","text":"<ol> <li>\u52a8\u6001\u89c4\u5212\u7684\u5b9a\u4e49</li> </ol> <p>\u52a8\u6001\u89c4\u5212\uff08Dynamic Programming\uff09\uff1a\u7b80\u79f0 DP\uff0c\u662f\u4e00\u79cd\u6c42\u89e3\u591a\u9636\u6bb5\u51b3\u7b56\u8fc7\u7a0b\u6700\u4f18\u5316\u95ee\u9898\u7684\u65b9\u6cd5\u3002\u5728\u52a8\u6001\u89c4\u5212\u4e2d\uff0c\u901a\u8fc7\u628a\u539f\u95ee\u9898\u5206\u89e3\u4e3a\u76f8\u5bf9\u7b80\u5355\u7684\u5b50\u95ee\u9898\uff0c\u5148\u6c42\u89e3\u5b50\u95ee\u9898\uff0c\u518d\u7531\u5b50\u95ee\u9898\u7684\u89e3\u800c\u5f97\u5230\u539f\u95ee\u9898\u7684\u89e3\u3002</p> <ol> <li>\u52a8\u6001\u89c4\u5212\u7684\u6838\u5fc3\u601d\u60f3</li> </ol> <p>\u52a8\u6001\u89c4\u5212\u7684\u6838\u5fc3\u601d\u60f3\uff1a</p> <ol> <li>\u628a\u300c\u539f\u95ee\u9898\u300d\u5206\u89e3\u4e3a\u300c\u82e5\u5e72\u4e2a\u91cd\u53e0\u7684\u5b50\u95ee\u9898\u300d\uff0c\u6bcf\u4e2a\u5b50\u95ee\u9898\u7684\u6c42\u89e3\u8fc7\u7a0b\u90fd\u6784\u6210\u4e00\u4e2a \u300c\u9636\u6bb5\u300d\u3002\u5728\u5b8c\u6210\u4e00\u4e2a\u9636\u6bb5\u7684\u8ba1\u7b97\u4e4b\u540e\uff0c\u52a8\u6001\u89c4\u5212\u65b9\u6cd5\u624d\u4f1a\u6267\u884c\u4e0b\u4e00\u4e2a\u9636\u6bb5\u7684\u8ba1\u7b97\u3002</li> <li>\u5728\u6c42\u89e3\u5b50\u95ee\u9898\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6309\u7167\u300c\u81ea\u9876\u5411\u4e0b\u7684\u8bb0\u5fc6\u5316\u641c\u7d22\u65b9\u6cd5\u300d\u6216\u8005\u300c\u81ea\u5e95\u5411\u4e0a\u7684\u9012\u63a8\u65b9\u6cd5\u300d\u6c42\u89e3\u51fa\u300c\u5b50\u95ee\u9898\u7684\u89e3\u300d\uff0c\u628a\u7ed3\u679c\u5b58\u50a8\u5728\u8868\u683c\u4e2d\uff0c\u5f53\u9700\u8981\u518d\u6b21\u6c42\u89e3\u6b64\u5b50\u95ee\u9898\u65f6\uff0c\u76f4\u63a5\u4ece\u8868\u683c\u4e2d\u67e5\u8be2\u8be5\u5b50\u95ee\u9898\u7684\u89e3\uff0c\u4ece\u800c\u907f\u514d\u4e86\u5927\u91cf\u7684\u91cd\u590d\u8ba1\u7b97\u3002</li> </ol> <p>\u8fd9\u770b\u8d77\u6765\u5f88\u50cf\u662f\u5206\u6cbb\u7b97\u6cd5\uff0c\u4f46\u52a8\u6001\u89c4\u5212\u4e0e\u5206\u6cbb\u7b97\u6cd5\u7684\u4e0d\u540c\u70b9\u5728\u4e8e\uff1a</p> <ol> <li>\u9002\u7528\u4e8e\u52a8\u6001\u89c4\u5212\u6c42\u89e3\u7684\u95ee\u9898\uff0c\u5728\u5206\u89e3\u4e4b\u540e\u5f97\u5230\u7684\u5b50\u95ee\u9898\u5f80\u5f80\u662f\u76f8\u4e92\u8054\u7cfb\u7684\uff0c\u4f1a\u51fa\u73b0\u82e5\u5e72\u4e2a\u91cd\u53e0\u5b50\u95ee\u9898\u3002</li> <li> <p><code>\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u65b9\u6cd5\u4f1a\u5c06\u8fd9\u4e9b\u91cd\u53e0\u5b50\u95ee\u9898\u7684\u89e3\u4fdd\u5b58\u5230\u8868\u683c\u91cc\uff0c\u4f9b\u968f\u540e\u7684\u8ba1\u7b97\u67e5\u8be2\u4f7f\u7528\uff0c\u4ece\u800c\u907f\u514d\u5927\u91cf\u7684\u91cd\u590d\u8ba1\u7b97\u3002</code></p> </li> <li> <p>\u52a8\u6001\u89c4\u5212\u7684\u7b80\u5355\u4f8b\u5b50</p> </li> </ol> <p>\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff1a\u6570\u5217\u7531 \\(f(0) = 1\uff0cf(1) = 2\\) \u5f00\u59cb\uff0c\u540e\u9762\u7684\u6bcf\u4e00\u9879\u6570\u5b57\u90fd\u662f\u524d\u9762\u4e24\u9879\u6570\u5b57\u7684\u548c\u3002</p> <p>\u901a\u8fc7\u516c\u5f0f \\(f(n) = f(n - 2) + f(n - 1)\\)\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u539f\u95ee\u9898 \\(f(n)\\) \u9012\u5f52\u5730\u5212\u5206\u4e3a \\(f(n - 2)\\) \u548c \\(f(n - 1)\\) \u8fd9\u4e24\u4e2a\u5b50\u95ee\u9898\u3002\u5176\u5bf9\u5e94\u7684\u9012\u5f52\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\uff1a\u5982\u679c\u4f7f\u7528\u4f20\u7edf\u9012\u5f52\u7b97\u6cd5\u8ba1\u7b97 \\(f(5)\\)\uff0c\u9700\u8981\u5148\u8ba1\u7b97 \\(f(3)\\) \u548c \\(f(4)\\)\uff0c\u800c\u5728\u8ba1\u7b97 \\(f(4)\\) \u65f6\u8fd8\u9700\u8981\u8ba1\u7b97 \\(f(3)\\)\uff0c\u8fd9\u6837 \\(f(3)\\) \u5c31\u8fdb\u884c\u4e86\u591a\u6b21\u8ba1\u7b97\u3002\u540c\u7406 \\(f(0)\\)\u3001\\(f(1)\\)\u3001\\(f(2)\\) \u90fd\u8fdb\u884c\u4e86\u591a\u6b21\u8ba1\u7b97\uff0c\u4ece\u800c\u5bfc\u81f4\u4e86\u91cd\u590d\u8ba1\u7b97\u95ee\u9898\u3002</p> <p>\u4e3a\u4e86\u907f\u514d\u91cd\u590d\u8ba1\u7b97\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u4e2d\u7684\u300c\u8868\u683c\u5904\u7406\u65b9\u6cd5\u300d\u6765\u5904\u7406\u3002</p> <p>\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u300c\u81ea\u5e95\u5411\u4e0a\u7684\u9012\u63a8\u65b9\u6cd5\u300d\u6c42\u89e3\u51fa\u5b50\u95ee\u9898 \\(f(n - 2)\\) \u548c \\(f(n - 1)\\) \u7684\u89e3\uff0c\u7136\u540e\u628a\u7ed3\u679c\u5b58\u50a8\u5728\u8868\u683c\u4e2d\uff0c\u4f9b\u968f\u540e\u7684\u8ba1\u7b97\u67e5\u8be2\u4f7f\u7528\u3002\u5177\u4f53\u8fc7\u7a0b\u5982\u4e0b\uff1a</p> <ol> <li>\u5b9a\u4e49\u4e00\u4e2a\u6570\u7ec4 \\(dp\\)\uff0c\u7528\u4e8e\u8bb0\u5f55\u6590\u6ce2\u90a3\u5951\u6570\u5217\u4e2d\u7684\u503c\u3002</li> <li>\u521d\u59cb\u5316 \\(dp[0] = 0\uff0cdp[1] = 1\\)\u3002</li> <li>\u6839\u636e\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u9012\u63a8\u516c\u5f0f \\(f(n) = f(n - 1) + f(n - 2)\\)\uff0c\u4ece \\(dp(2)\\) \u5f00\u59cb\u9012\u63a8\u8ba1\u7b97\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u6bcf\u4e2a\u6570\uff0c\u76f4\u5230\u8ba1\u7b97\u51fa \\(dp(n)\\)\u3002</li> <li>\u6700\u540e\u8fd4\u56de \\(dp(n)\\) \u5373\u53ef\u5f97\u5230\u7b2c \\(n\\) \u9879\u6590\u6ce2\u90a3\u5951\u6570\u3002</li> </ol> <p>\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>int Fibonacci(int N)\n{\n    int i, Last, NextToLast, Answer;\n    if (N &lt;= 1)\n        return 1;\n    Last = NextToLast = 1;\n    /* F(0) = F(1) = 1 */\n    for (i = 2; i &lt;= N; i++)\n    {\n        Answer = Last + NextToLast;\n        /* F(i) = F(i-1) + F(i-2) */\n        NextToLast = Last;\n        Last = Answer;\n        /* update F(i-1) and F(i-2) */\n    } /* end-for */\n    return Answer;\n}\n</code></pre> <p>\u8fd9\u79cd\u4f7f\u7528\u7f13\u5b58\uff08\u54c8\u5e0c\u8868\u3001\u96c6\u5408\u6216\u6570\u7ec4\uff09\u4fdd\u5b58\u8ba1\u7b97\u7ed3\u679c\uff0c\u4ece\u800c\u907f\u514d\u5b50\u95ee\u9898\u91cd\u590d\u8ba1\u7b97\u7684\u65b9\u6cd5\uff0c\u5c31\u662f\u300c\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u300d\u3002</p>"},{"location":"ADS/8.%20Dynamic%20Programming/#72-\u52a8\u6001\u89c4\u5212\u7684\u7279\u5f81","title":"7.2. \u52a8\u6001\u89c4\u5212\u7684\u7279\u5f81","text":"<p>\u7a76\u7adf\u4ec0\u4e48\u6837\u7684\u95ee\u9898\u624d\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u89e3\u51b3\u5462\uff1f</p> <p>\u9996\u5148\uff0c\u80fd\u591f\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u65b9\u6cd5\u89e3\u51b3\u7684\u95ee\u9898\u5fc5\u987b\u6ee1\u8db3\u4ee5\u4e0b\u4e09\u4e2a\u7279\u5f81\uff1a</p> <ol> <li>\u6700\u4f18\u5b50\u7ed3\u6784\u6027\u8d28</li> <li>\u91cd\u53e0\u5b50\u95ee\u9898\u6027\u8d28</li> <li>\u65e0\u540e\u6548\u6027</li> </ol>"},{"location":"ADS/8.%20Dynamic%20Programming/#21-\u6700\u4f18\u5b50\u7ed3\u6784\u6027\u8d28","title":"2.1 \u6700\u4f18\u5b50\u7ed3\u6784\u6027\u8d28","text":"<p>\u6700\u4f18\u5b50\u7ed3\u6784\uff1a\u6307\u7684\u662f\u4e00\u4e2a\u95ee\u9898\u7684\u6700\u4f18\u89e3\u5305\u542b\u5176\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3\u3002</p> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u539f\u95ee\u9898 \\(S = \\lbrace a_1, a_2, a_3, a_4 \\rbrace\\)\uff0c\u5728 \\(a_1\\) \u6b65\u6211\u4eec\u9009\u51fa\u4e00\u4e2a\u5f53\u524d\u6700\u4f18\u89e3\u4e4b\u540e\uff0c\u95ee\u9898\u5c31\u8f6c\u6362\u4e3a\u6c42\u89e3\u5b50\u95ee\u9898 \\(S*{\u5b50\u95ee\u9898} = \\lbrace a_2, a_3, a_4 \\rbrace\\)\u3002\u5982\u679c\u539f\u95ee\u9898 \\(S\\) \u7684\u6700\u4f18\u89e3\u53ef\u4ee5\u7531\u300c\u7b2c \\(a_1\\) \u6b65\u5f97\u5230\u7684\u5c40\u90e8\u6700\u4f18\u89e3\u300d\u548c\u300c \\(S*{\u5b50\u95ee\u9898}\\) \u7684\u6700\u4f18\u89e3\u300d\u6784\u6210\uff0c\u5219\u8bf4\u660e\u8be5\u95ee\u9898\u6ee1\u8db3\u6700\u4f18\u5b50\u7ed3\u6784\u6027\u8d28\u3002</p> <p>\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u539f\u95ee\u9898\u7684\u6700\u4f18\u89e3\u5305\u542b\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3\uff0c\u5219\u8bf4\u660e\u8be5\u95ee\u9898\u6ee1\u8db3\u6700\u4f18\u5b50\u7ed3\u6784\u6027\u8d28\u3002</p> <p></p>"},{"location":"ADS/8.%20Dynamic%20Programming/#22-\u91cd\u53e0\u5b50\u95ee\u9898\u6027\u8d28","title":"2.2 \u91cd\u53e0\u5b50\u95ee\u9898\u6027\u8d28","text":"<p>\u91cd\u53e0\u5b50\u95ee\u9898\u6027\u8d28\uff1a\u6307\u7684\u662f\u5728\u6c42\u89e3\u5b50\u95ee\u9898\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6709\u5927\u91cf\u7684\u5b50\u95ee\u9898\u662f\u91cd\u590d\u7684\uff0c\u4e00\u4e2a\u5b50\u95ee\u9898\u5728\u4e0b\u4e00\u9636\u6bb5\u7684\u51b3\u7b56\u4e2d\u53ef\u80fd\u4f1a\u88ab\u591a\u6b21\u7528\u5230\u3002\u5982\u679c\u6709\u5927\u91cf\u91cd\u590d\u7684\u5b50\u95ee\u9898\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u5bf9\u5176\u6c42\u89e3\u4e00\u6b21\uff0c\u7136\u540e\u7528\u8868\u683c\u5c06\u7ed3\u679c\u5b58\u50a8\u4e0b\u6765\uff0c\u4ee5\u540e\u4f7f\u7528\u65f6\u53ef\u4ee5\u76f4\u63a5\u67e5\u8be2\uff0c\u4e0d\u9700\u8981\u518d\u6b21\u6c42\u89e3\u3002</p> <p></p> <p>\u4e4b\u524d\u6211\u4eec\u63d0\u5230\u7684\u300c\u6590\u6ce2\u90a3\u5951\u6570\u5217\u300d\u4f8b\u5b50\u4e2d\uff0c\\(f(0)\\)\u3001\\(f(1)\\)\u3001\\(f(2)\\)\u3001\\(f(3)\\) \u90fd\u8fdb\u884c\u4e86\u591a\u6b21\u91cd\u590d\u8ba1\u7b97\u3002\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u5229\u7528\u4e86\u5b50\u95ee\u9898\u91cd\u53e0\u7684\u6027\u8d28\uff0c\u5728\u7b2c\u4e00\u6b21\u8ba1\u7b97 \\(f(0)\\)\u3001\\(f(1)\\)\u3001\\(f(2)\\)\u3001\\(f(3)\\) \u65f6\u5c31\u5c06\u5176\u7ed3\u679c\u5b58\u5165\u8868\u683c\uff0c\u5f53\u518d\u6b21\u4f7f\u7528\u65f6\u53ef\u4ee5\u76f4\u63a5\u67e5\u8be2\uff0c\u65e0\u9700\u518d\u6b21\u6c42\u89e3\uff0c\u4ece\u800c\u63d0\u5347\u6548\u7387\u3002</p>"},{"location":"ADS/8.%20Dynamic%20Programming/#23-\u65e0\u540e\u6548\u6027","title":"2.3 \u65e0\u540e\u6548\u6027","text":"<p>\u65e0\u540e\u6548\u6027\uff1a\u6307\u7684\u662f\u5b50\u95ee\u9898\u7684\u89e3\uff08\u72b6\u6001\u503c\uff09\u53ea\u4e0e\u4e4b\u524d\u9636\u6bb5\u6709\u5173\uff0c\u800c\u4e0e\u540e\u9762\u9636\u6bb5\u65e0\u5173\u3002\u5f53\u524d\u9636\u6bb5\u7684\u82e5\u5e72\u72b6\u6001\u503c\u4e00\u65e6\u786e\u5b9a\uff0c\u5c31\u4e0d\u518d\u6539\u53d8\uff0c<code>\u4e0d\u4f1a\u518d\u53d7\u5230\u540e\u7eed\u9636\u6bb5\u51b3\u7b56\u7684\u5f71\u54cd\u3002</code></p> <p>\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u65e6\u67d0\u4e00\u4e2a\u5b50\u95ee\u9898\u7684\u6c42\u89e3\u7ed3\u679c\u786e\u5b9a\u4ee5\u540e\uff0c\u5c31\u4e0d\u4f1a\u518d\u88ab\u4fee\u6539\u3002</p> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4e0b\u56fe\u662f\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u5e26\u6743\u56fe\uff0c\u6211\u4eec\u5728\u6c42\u89e3\u4ece \\(A\\) \u70b9\u5230 \\(F\\) \u70b9\u7684\u6700\u77ed\u8def\u5f84\u95ee\u9898\u65f6\uff0c\u5047\u8bbe\u5f53\u524d\u5df2\u77e5\u4ece \\(A\\) \u70b9\u5230 \\(D\\) \u70b9\u7684\u6700\u77ed\u8def\u5f84\uff08\\(2 + 7 = 11\\)\uff09\u3002\u90a3\u4e48\u65e0\u8bba\u4e4b\u540e\u7684\u8def\u5f84\u5982\u4f55\u9009\u62e9\uff0c\u90fd\u4e0d\u4f1a\u5f71\u54cd\u4e4b\u524d\u4ece \\(A\\) \u70b9\u5230 \\(D\\) \u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u3002\u8fd9\u5c31\u662f\u300c\u65e0\u540e\u6548\u6027\u300d\u3002</p> <p>\u800c\u5982\u679c\u4e00\u4e2a\u95ee\u9898\u5177\u6709\u300c\u540e\u6548\u6027\u300d\uff0c\u5219\u53ef\u80fd\u9700\u8981\u5148\u5c06\u5176\u8f6c\u5316\u6216\u8005\u9006\u5411\u6c42\u89e3\u6765\u6d88\u9664\u540e\u6548\u6027\uff0c\u7136\u540e\u624d\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u3002</p> <p></p>"},{"location":"ADS/8.%20Dynamic%20Programming/#73-\u52a8\u6001\u89c4\u5212\u7684\u57fa\u672c\u601d\u8def","title":"7.3. \u52a8\u6001\u89c4\u5212\u7684\u57fa\u672c\u601d\u8def","text":"<p>\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6211\u4eec\u5728\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u65b9\u6cd5\u89e3\u51b3\u67d0\u4e9b\u6700\u4f18\u5316\u95ee\u9898\u65f6\uff0c\u53ef\u4ee5\u5c06\u89e3\u51b3\u95ee\u9898\u7684\u8fc7\u7a0b\u6309\u7167\u4e00\u5b9a\u987a\u5e8f\uff08\u65f6\u95f4\u987a\u5e8f\u3001\u7a7a\u95f4\u987a\u5e8f\u6216\u5176\u4ed6\u987a\u5e8f\uff09\u5206\u89e3\u4e3a\u82e5\u5e72\u4e2a\u76f8\u4e92\u8054\u7cfb\u7684\u300c\u9636\u6bb5\u300d\u3002\u7136\u540e\u6309\u7167\u987a\u5e8f\u5bf9\u6bcf\u4e00\u4e2a\u9636\u6bb5\u505a\u51fa\u300c\u51b3\u7b56\u300d\uff0c\u8fd9\u4e2a\u51b3\u7b56\u65e2\u51b3\u5b9a\u4e86\u672c\u9636\u6bb5\u7684\u6548\u76ca\uff0c\u4e5f\u51b3\u5b9a\u4e86\u4e0b\u4e00\u9636\u6bb5\u7684\u521d\u59cb\u72b6\u6001\u3002\u4f9d\u6b21\u505a\u5b8c\u6bcf\u4e2a\u9636\u6bb5\u7684\u51b3\u7b56\u4e4b\u540e\uff0c\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a\u6574\u4e2a\u95ee\u9898\u7684\u51b3\u7b56\u5e8f\u5217\u3002</p> <p>\u8fd9\u6837\u5c31\u5c06\u4e00\u4e2a\u539f\u95ee\u9898\u5206\u89e3\u4e3a\u4e86\u4e00\u7cfb\u5217\u7684\u5b50\u95ee\u9898\uff0c\u518d\u901a\u8fc7\u9010\u6b65\u6c42\u89e3\u4ece\u800c\u83b7\u5f97\u6700\u7ec8\u7ed3\u679c\u3002</p> <p></p> <p>\u8fd9\u79cd\u524d\u540e\u5173\u8054\u3001\u5177\u6709\u94fe\u72b6\u7ed3\u6784\u7684\u591a\u9636\u6bb5\u8fdb\u884c\u51b3\u7b56\u7684\u95ee\u9898\u4e5f\u53eb\u505a\u300c\u591a\u9636\u6bb5\u51b3\u7b56\u95ee\u9898\u300d\u3002</p> <p>\u901a\u5e38\u6211\u4eec\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u65b9\u6cd5\u6765\u89e3\u51b3\u95ee\u9898\u7684\u57fa\u672c\u601d\u8def\u5982\u4e0b\uff1a</p> <ol> <li>\u5212\u5206\u9636\u6bb5\uff1a\u5c06\u539f\u95ee\u9898\u6309\u987a\u5e8f\uff08\u65f6\u95f4\u987a\u5e8f\u3001\u7a7a\u95f4\u987a\u5e8f\u6216\u5176\u4ed6\u987a\u5e8f\uff09\u5206\u89e3\u4e3a\u82e5\u5e72\u4e2a\u76f8\u4e92\u8054\u7cfb\u7684\u300c\u9636\u6bb5\u300d\u3002\u5212\u5206\u540e\u7684\u9636\u6bb5\u2f00\u5b9a\u662f\u6709\u5e8f\u6216\u53ef\u6392\u5e8f\u7684\uff0c\u5426\u5219\u95ee\u9898\u2f46\u6cd5\u6c42\u89e3\u3002</li> <li>\u8fd9\u91cc\u7684\u300c\u9636\u6bb5\u300d\u6307\u7684\u662f\u2f26\u95ee\u9898\u7684\u6c42\u89e3\u8fc7\u7a0b\u3002\u6bcf\u4e2a\u2f26\u95ee\u9898\u7684\u6c42\u89e3\u8fc7\u7a0b\u90fd\u6784\u6210\u2f00\u4e2a\u300c\u9636\u6bb5\u300d\uff0c\u5728\u5b8c\u6210\u524d\u2f00\u9636\u6bb5\u7684\u6c42\u89e3\u540e\u624d\u4f1a\u8fdb\u2f8f\u540e\u2f00\u9636\u6bb5\u7684\u6c42\u89e3\u3002</li> <li>\u5b9a\u4e49\u72b6\u6001\uff1a\u5c06\u548c\u5b50\u95ee\u9898\u76f8\u5173\u7684\u67d0\u4e9b\u53d8\u91cf\uff08\u4f4d\u7f6e\u3001\u6570\u91cf\u3001\u4f53\u79ef\u3001\u7a7a\u95f4\u7b49\u7b49\uff09\u4f5c\u4e3a\u4e00\u4e2a\u300c\u72b6\u6001\u300d\u8868\u793a\u51fa\u6765\u3002\u72b6\u6001\u7684\u9009\u62e9\u8981\u6ee1\u2f9c\u2f46\u540e\u6548\u6027\u3002</li> <li>\u4e00\u4e2a\u300c\u72b6\u6001\u300d\u5bf9\u5e94\u4e00\u4e2a\u6216\u591a\u4e2a\u5b50\u95ee\u9898\uff0c\u6240\u8c13\u67d0\u4e2a\u300c\u72b6\u6001\u300d\u4e0b\u7684\u503c\uff0c\u6307\u7684\u5c31\u662f\u8fd9\u4e2a\u300c\u72b6\u6001\u300d\u6240\u5bf9\u5e94\u7684\u5b50\u95ee\u9898\u7684\u89e3\u3002</li> <li>\u72b6\u6001\u8f6c\u79fb\uff1a\u6839\u636e\u300c\u4e0a\u4e00\u9636\u6bb5\u7684\u72b6\u6001\u300d\u548c\u300c\u8be5\u72b6\u6001\u4e0b\u6240\u80fd\u505a\u51fa\u7684\u51b3\u7b56\u300d\uff0c\u63a8\u5bfc\u51fa\u300c\u4e0b\u4e00\u9636\u6bb5\u7684\u72b6\u6001\u300d\u3002\u6216\u8005\u8bf4\u6839\u636e\u76f8\u90bb\u4e24\u4e2a\u9636\u6bb5\u5404\u4e2a\u72b6\u6001\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u786e\u5b9a\u51b3\u7b56\uff0c\u7136\u540e\u63a8\u5bfc\u51fa\u72b6\u6001\u95f4\u7684\u76f8\u4e92\u8f6c\u79fb\u65b9\u5f0f\uff08\u5373\u300c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u300d\uff09\u3002</li> <li>\u521d\u59cb\u6761\u4ef6\u548c\u8fb9\u754c\u6761\u4ef6\uff1a\u6839\u636e\u95ee\u9898\u63cf\u8ff0\u3001\u72b6\u6001\u5b9a\u4e49\u548c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff0c\u786e\u5b9a\u521d\u59cb\u6761\u4ef6\u548c\u8fb9\u754c\u6761\u4ef6\u3002</li> <li>\u6700\u7ec8\u7ed3\u679c\uff1a\u786e\u5b9a\u95ee\u9898\u7684\u6c42\u89e3\u76ee\u6807\uff0c\u7136\u540e\u6309\u7167\u4e00\u5b9a\u987a\u5e8f\u6c42\u89e3\u6bcf\u4e00\u4e2a\u9636\u6bb5\u7684\u95ee\u9898\u3002\u6700\u540e\u6839\u636e\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u7684\u9012\u63a8\u7ed3\u679c\uff0c\u786e\u5b9a\u6700\u7ec8\u7ed3\u679c\u3002</li> </ol>"},{"location":"ADS/8.%20Dynamic%20Programming/#74-\u52a8\u6001\u89c4\u5212\u7684\u5e94\u7528","title":"7.4. \u52a8\u6001\u89c4\u5212\u7684\u5e94\u7528","text":""},{"location":"ADS/8.%20Dynamic%20Programming/#741-ordering-matrix-multiplication","title":"7.4.1 Ordering Matrix Multiplication","text":"<p>\u4ee4\\(b_n\\)\u8868\u793a\u8ba1\u7b97\\(M_1 \\cdot M_2 \\cdots M_n\\)\u4e0d\u540c\u65b9\u6cd5\u7684\u6570\u91cf</p> <p>\u6211\u4eec\u80fd\u591f\u5c06\\(M_1 \\cdot M_2 \\cdots M_n\\)\u5206\u6210\u4e24\u90e8\u5206\uff0c\u8bb0\\(M_{ij} = M_i \\cdots M_j\\)</p> <p>\u90a3\u4e48\u53ea\u9700\u8981\u5728\u77e9\u9635\u5e8f\u5217\u4e2d\u5207\u4e00\u5200\uff0c\u5c31\u5f97\u5230\u4e24\u4e2a\u77e9\u9635\u5e8f\u5217</p> <p>\u6b64\u65f6\u5f97\u5230\\(b_n\\)\u7684\u9012\u63a8\u5173\u7cfb $$ b_n = \\sum_{i=1}^{n-1} b_i b_{n-i}, b_1 =1, b_2 = 1, b_3 = 2 $$ \u63a5\u4e0b\u6765\u6b63\u5f0f\u8ba1\u7b97\\(M_1 \\cdot M_2 \\cdots M_n\\)\uff0c\\(M_i\\)\u662f\u4e00\u4e2a\\(r_{i-1}\\times r_i\\) \u7684\u77e9\u9635.  \u7528\\(m_{ij}\\)\u8868\u793a\u8ba1\u7b97\\(M_{ij}\\)\u7684\u7ed3\u679c</p> <p><code>\u6700\u540e\u8f6c\u5316\u4e3a Mil, Mlj, \u4ee5\u53ca\u4e24\u4e2a\u77e9\u9635\u7684\u76f8\u4e58</code></p> <p></p> <pre><code>// \u5229\u7528\u52a8\u6001\u89c4\u5212\uff0c\u5148\u8ba1\u7b97 m11,m22,....mNN\n// \u518d\u5411\u4e0a\u8ba1\u7b97 m12,m23,...,\u9010\u5c42\u5411\u4e0a\nint Optmatrix(vector&lt;int&gt; &amp;p, vector&lt;vector&lt;int&gt;&gt; &amp;m, int n)\n{\n    int i, j, k;\n    for(i = 1; i &lt;= n; i++) m[i][i] = 0;\n    // \u63a5\u4e0b\u6765\u4f9d\u6b21\u8ba1\u7b97m[i][j]\u7684\u6700\u5c0f\u503c\n    for(i = 1; i &lt;= n -1; i++)\n    {\n        // \u8ba1\u7b97m[i][j]\u7684\u6700\u5c0f\u503c\n        for(j = 1; j &lt;= n - i; j++)\n        {\n            int min = MAX;\n            for(k = j; k &lt;= j + i - 1; k++)\n            {\n                m[j][j+i] = m[j][k] + m[k+1][j+i] + p[j-1]*p[k]*p[j+i];\n                if(m[j][j+i] &lt; min) min = m[j][j+i];\n            }\n            m[j][j+i] = min;\n        }\n    }\n    return m[1][n];\n}\n</code></pre>"},{"location":"ADS/8.%20Dynamic%20Programming/#742-optimal-binary-search-tree","title":"7.4.2 Optimal Binary Search Tree","text":"<p>\\(T(N) = \\sum_{i =1}^N p_i(1+d_i)\\)</p> <p></p> <p>\u4f9d\u7136\u662f\u62c6\u5206\u6210\u4e24\u90e8\u5206</p> <p>\\(C_{ij} = p_k + cost(L) + cost(R) + weight(L) + weight(R)\\)</p> <p>\\(C_{ij} = p_k + C_{i,k-1}+C_{k+1,j} + W_{i.k-1} + W_{k+1,j} = C_{i,k-1} + C_{k+1,j} + W_{ij}\\)</p> <p><code>\u6b64\u5904\u6dfb\u52a0weight(L)\u548cweight(R)\u7684\u539f\u56e0\u662f\uff0cL\u548cR\u6210\u4e3a\u5b50\u6811\u4e4b\u540e\uff0c\u6240\u6709\u7684\u6df1\u5ea6\u90fd\u4f1a\u52a01\uff0c\u5229\u7528pi(1+di)\uff0c\u53ef\u77e5\u5b50\u6811\u6240\u6709\u7ed3\u70b9\u7684\u6743\u91cd\u9700\u8981\u7d2f\u52a0</code></p> <p></p> <p>\u4ece\u5e95\u5230\u9876\uff0c\u5148\u8ba1\u7b97\u957f\u5ea6\u4e3a1\u7684\u6700\u5c0f\u503c\uff0c\u5728\u5229\u7528\u957f\u5ea6\u4e3a1\u7684\u6700\u5c0f\u503c\uff0c\u8ba1\u7b97\u957f\u5ea6\u4e3a2\u7684\u6700\u5c0f\u503c</p> <p>\u7b2c\u4e00\u884c\u957f\u5ea6\u4e3a1\uff0c\u5c31\u662f\u672c\u8eab\u7684weight</p> <p>\u7b2c\u4e8c\u884c\u957f\u5ea6\u4e3a2\uff0c\\(min = (w_ij + min(w_i,w_j))\\)</p> <p>\u7b2c\u4e09\u884c\u957f\u5ea6\u4e3a3\uff0c\u4ee5break\u2026char\u4e3a\u4f8b</p> <ul> <li>break\u4e3a\u6839\u7ed3\u70b9\uff0cbreak-(case..char) = 0.6 + 0.56 = 1.16</li> <li>case\u4e3a\u6839\u7ed3\u70b9\uff0c break - case -char = 0.6 + 0.22 + 0.20 = 1.02</li> <li>char\u4e3a\u6839\u7ed3\u70b9\uff0c \uff08break..case) char = 0.6 + 0.58 = 1.18</li> </ul> <p>\u7b2c\u56db\u884c\u957f\u5ea6\u4e3a4\uff0c\u4ee5break\u2026do\u4e3a\u4f8b</p> <ul> <li>break\u4e3a\u6839\u7ed3\u70b9\uff0cbreak-(case \u2026 do) = 0.65 + 0.66 = 1.31</li> <li>case \u4e3a\u6839\u7ed3\u70b9\uff0c break-case-(char..do) = 0.65 + 0.22 + 0.30 = 1.17</li> <li>char \u4e3a\u6839\u7ed3\u70b9\uff0c (break..case) - char -do = 0.65 + 0.58 + 0.05 = 1.28</li> <li>do\u4e3a\u6839\u7ed3\u70b9\uff0c(break\u2026char) - do = 0.65 + 1.02 = 1.67</li> </ul> <pre><code>// Dynamic programming function to find the minimum cost  \ndouble DP(vector&lt;double&gt; &amp;weight, vector&lt;vector&lt;double&gt;&gt; &amp;cost, int n)  \n{  \n    int i, j, k;  \n    // Initializing the diagonal of the cost matrix  \n    for(i = 1; i &lt;= n; i++) cost[i][i] = weight[i];  \n\n    // Filling up the cost matrix using dynamic programming  \n    for(int len = 1; len &lt;= n-1; len++)  \n    {  \n        for(i = 1; i &lt;= n-len; i++)  \n        {  \n            j = i + len;  \n            double mincost = 1e9;  // Initializing mincost to a very large value  \n\n            // Checking for the base case when len = 1  \n            if(len == 1)  \n            {  \n                cost[i][j] = SumWeight(weight, i, j) + min(weight[i], weight[j]);  \n            }  \n            else  \n            {  \n                // Iterating through possible partitions and finding the minimum cost  \n                for(k = i; k &lt; j; k++)  \n                {  \n                    double temp = cost[i][k-1] + cost[k+1][j] + SumWeight(weight, i, j);  \n                    if(temp &lt; mincost) mincost = temp;  \n                }  \n                cost[i][j] = mincost;  // Assigning the minimum cost for this range  \n            }  \n        }  \n    }  \n    return cost[1][n];  // Returning the minimum cost for the entire range  \n}  \n</code></pre>"},{"location":"ADS/8.%20Dynamic%20Programming/#743-all-pairs-shortest-path","title":"7.4.3 All-Pairs Shortest Path","text":"<ol> <li> <p>\u8fea\u6770\u65af\u7279\u62c9\u7b97\u6cd5\uff08\u6267\u884cn\u6b21\uff09</p> </li> <li> <p>\u52a8\u6001\u89c4\u5212\uff08\u4e5f\u5c31\u662f\u5f17\u6d1b\u4f0a\u5fb7\u7b97\u6cd5\uff09\u3002start from \\(D^{-1}\\),\u4f9d\u6b21\u8ba1\u7b97\u751f\u6210\\(D^0,D^1,....D^n\\)</p> </li> </ol> <p>\u80fd\u591f\u5b58\u5728\u8d1f\u8fb9\uff0c\u4f46\u662f\u4e0d\u80fd\u5b58\u5728\u8d1f\u73af</p> <pre><code>/* A[ ] contains the adjacency matrix with A[ i ][ i ] = 0 */\n/* D[ ] contains the values of the shortest path */\n/* N is the number of vertices */\n/* A negative cycle exists iff D[ i ][ i ] &lt; 0 */\nvoid AllPairs(TwoDimArray A, TwoDimArray D, int N)\n{\n    int i, j, k;\n    for (i = 0; i &lt; N; i++) /* Initialize D */\n        for (j = 0; j &lt; N; j++)\n            D[i][j] = A[i][j];\n    for (k = 0; k &lt; N; k++) /* add one vertex k into the path */\n        for (i = 0; i &lt; N; i++)\n            for (j = 0; j &lt; N; j++)\n                if (D[i][k] + D[k][j] &lt; D[i][j])\n                    /* Update shortest path */\n                    D[i][j] = D[i][k] + D[k][j];\n}\n</code></pre>"},{"location":"ADS/8.%20Dynamic%20Programming/#744-product-assembly","title":"7.4.4 Product Assembly","text":"<ol> <li>\u66b4\u529b\u6cd5\u6c42\u89e3</li> </ol> <ol> <li>\u52a8\u6001\u89c4\u5212</li> </ol> <p>An optimal path to stage is based on an optimal path to stage\u20131</p> <p>\u5f53\u524d\u7684\u6700\u4f18\u89e3\uff0c\u4f9d\u8d56\u4e8e\u524d\u4e00\u6b65\u7684\u6700\u4f18\u89e3</p> <p>\u540c\u4e00\u6761\u4ea7\u54c1\u7ebf\u7ee7\u7eed\u6216\u8005\u4ece\u53e6\u5916\u4e00\u6761\u7ebf\u8fdb\u884c\u8f6c\u79fb</p> <p>O( N ) time + O( N ) space</p> <pre><code>f[0][0]=0; L[0][0]=0;\nf[1][0]=0; L[1][0]=0;\nfor(stage=1; stage&lt;=n; stage++){\n  for(line=0; line&lt;=1; line++){\n    f_stay = f[  line][stage-1] + t_process[  line][stage-1];\n    f_move = f[1-line][stage-1] + t_transit[1-line][stage-1];\n    if (f_stay&lt;f_move){\n      f[line][stage] = f_stay;\n      L[line][stage] = line;\n    }\n    else {\n      f[line][stage] = f_move;\n      L[line][stage] = 1-line;\n    }\n  }\n}\n</code></pre>"},{"location":"ADS/8.%20Dynamic%20Programming/#743-\u4e0d\u540c\u8def\u5f84","title":"7.4.3 \u4e0d\u540c\u8def\u5f84","text":"<p>62. \u4e0d\u540c\u8def\u5f84 - \u529b\u6263</p> <p>\u63cf\u8ff0\uff1a\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570 \\(m\\) \u548c \\(n\\)\uff0c\u4ee3\u8868\u5927\u5c0f\u4e3a \\(m \\times n\\) \u7684\u68cb\u76d8\uff0c \u4e00\u4e2a\u673a\u5668\u4eba\u4f4d\u4e8e\u68cb\u76d8\u5de6\u4e0a\u89d2\u7684\u4f4d\u7f6e\uff0c\u673a\u5668\u4eba\u6bcf\u6b21\u53ea\u80fd\u5411\u53f3\u3001\u6216\u8005\u5411\u4e0b\u79fb\u52a8\u4e00\u6b65\u3002</p> <p>\u8981\u6c42\uff1a\u8ba1\u7b97\u51fa\u673a\u5668\u4eba\u4ece\u68cb\u76d8\u5de6\u4e0a\u89d2\u5230\u8fbe\u68cb\u76d8\u53f3\u4e0b\u89d2\u4e00\u5171\u6709\u591a\u5c11\u6761\u4e0d\u540c\u7684\u8def\u5f84\u3002</p> <pre><code>\u8f93\u5165\uff1am = 3, n = 7\n\u8f93\u51fa\uff1a28\n</code></pre> <pre><code>\u8f93\u5165\uff1am = 3, n = 2\n\u8f93\u51fa\uff1a3\n\u89e3\u91ca\uff1a\n\u4ece\u5de6\u4e0a\u89d2\u5f00\u59cb\uff0c\u603b\u5171\u6709 3 \u6761\u8def\u5f84\u53ef\u4ee5\u5230\u8fbe\u53f3\u4e0b\u89d2\u3002\n1. \u5411\u53f3 -&gt; \u5411\u4e0b -&gt; \u5411\u4e0b\n2. \u5411\u4e0b -&gt; \u5411\u4e0b -&gt; \u5411\u53f3\n3. \u5411\u4e0b -&gt; \u5411\u53f3 -&gt; \u5411\u4e0b\n</code></pre> <p></p> <p>4.3.3 \u89e3\u9898\u601d\u8def</p> <p>\\1. \u5212\u5206\u9636\u6bb5</p> <p>\u6309\u7167\u8def\u5f84\u7684\u7ed3\u5c3e\u4f4d\u7f6e\uff08\u884c\u4f4d\u7f6e\u3001\u5217\u4f4d\u7f6e\u7ec4\u6210\u7684\u4e8c\u7ef4\u5750\u6807\uff09\u8fdb\u884c\u9636\u6bb5\u5212\u5206\u3002</p> <p>\\2. \u5b9a\u4e49\u72b6\u6001</p> <p>\u5b9a\u4e49\u72b6\u6001 \\(dp[i](https://blog.csdn.net/lijunhcn/article/details/132408647?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-132408647-blog-111318003.235^v43^pc_blog_bottom_relevance_base9&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=1#)\\) \u4e3a\uff1a\u4ece\u5de6\u4e0a\u89d2\u5230\u8fbe \\((i, j)\\) \u4f4d\u7f6e\u7684\u8def\u5f84\u6570\u91cf\u3002</p> <p>\\3. \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b</p> <p>\u56e0\u4e3a\u6211\u4eec\u6bcf\u6b21\u53ea\u80fd\u5411\u53f3\u3001\u6216\u8005\u5411\u4e0b\u79fb\u52a8\u4e00\u6b65\uff0c\u56e0\u6b64\u60f3\u8981\u8d70\u5230 \\((i, j)\\)\uff0c\u53ea\u80fd\u4ece \\((i - 1, j)\\) \u5411\u4e0b\u8d70\u4e00\u6b65\u8d70\u8fc7\u6765\uff1b\u6216\u8005\u4ece \\((i, j - 1)\\) \u5411\u53f3\u8d70\u4e00\u6b65\u8d70\u8fc7\u6765\u3002\u6240\u4ee5\u53ef\u4ee5\u5199\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e3a\uff1a\\(dp[i](https://blog.csdn.net/lijunhcn/article/details/132408647?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-132408647-blog-111318003.235^v43^pc_blog_bottom_relevance_base9&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=1#) = dp[i - 1](https://blog.csdn.net/lijunhcn/article/details/132408647?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-132408647-blog-111318003.235^v43^pc_blog_bottom_relevance_base9&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=1#) + dp[i](https://blog.csdn.net/lijunhcn/article/details/132408647?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-132408647-blog-111318003.235^v43^pc_blog_bottom_relevance_base9&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=1#)\\)\uff0c\u6b64\u65f6 \\(i &gt; 0\uff0cj &gt; 0\\)\u3002</p> <p>\\4. \u521d\u59cb\u6761\u4ef6</p> <ul> <li>\u4ece\u5de6\u4e0a\u89d2\u8d70\u5230 \\((0, 0)\\) \u53ea\u6709\u4e00\u79cd\u65b9\u6cd5\uff0c\u5373 \\(dp[0](https://blog.csdn.net/lijunhcn/article/details/132408647?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-132408647-blog-111318003.235^v43^pc_blog_bottom_relevance_base9&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=1#) = 1\\)\u3002</li> <li>\u7b2c\u4e00\u884c\u5143\u7d20\u53ea\u6709\u4e00\u6761\u8def\u5f84\uff08\u5373\u53ea\u80fd\u901a\u8fc7\u524d\u4e00\u4e2a\u5143\u7d20\u5411\u53f3\u8d70\u5f97\u5230\uff09\uff0c\u6240\u4ee5 \\(dp[0](https://blog.csdn.net/lijunhcn/article/details/132408647?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-132408647-blog-111318003.235^v43^pc_blog_bottom_relevance_base9&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=1#) = 1\\)\u3002</li> <li>\u540c\u7406\uff0c\u7b2c\u4e00\u5217\u5143\u7d20\u53ea\u6709\u4e00\u6761\u8def\u5f84\uff08\u5373\u53ea\u80fd\u901a\u8fc7\u524d\u4e00\u4e2a\u5143\u7d20\u5411\u4e0b\u8d70\u5f97\u5230\uff09\uff0c\u6240\u4ee5 \\(dp[i](https://blog.csdn.net/lijunhcn/article/details/132408647?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-132408647-blog-111318003.235^v43^pc_blog_bottom_relevance_base9&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=1#) = 1\\)\u3002</li> </ul> <p>\\5. \u6700\u7ec8\u7ed3\u679c</p> <p>\u6839\u636e\u72b6\u6001\u5b9a\u4e49\uff0c\u6700\u7ec8\u7ed3\u679c\u4e3a \\(dp[m - 1](https://blog.csdn.net/lijunhcn/article/details/132408647?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-132408647-blog-111318003.235^v43^pc_blog_bottom_relevance_base9&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=1#)\\)\uff0c\u5373\u4ece\u5de6\u4e0a\u89d2\u5230\u8fbe\u53f3\u4e0b\u89d2 \\((m - 1, n - 1)\\) \u4f4d\u7f6e\u7684\u8def\u5f84\u6570\u91cf\u4e3a \\(dp[m - 1](https://blog.csdn.net/lijunhcn/article/details/132408647?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-132408647-blog-111318003.235^v43^pc_blog_bottom_relevance_base9&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=1#)\\)\u3002</p> <p>4.3.4 \u4ee3\u7801</p> <pre><code>class Solution:\n    def uniquePaths(self, m: int, n: int) -&gt; int:\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n\n        for j in range(n):\n            dp[0][j] = 1\n        for i in range(m):\n            dp[i][0] = 1\n\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n\n        return dp[m - 1][n - 1]\n1234567891011121314\n</code></pre> <p>4.3.5 \u590d\u6742\u5ea6\u5206\u6790</p> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\\(O(m * n)\\)\u3002\u521d\u59cb\u6761\u4ef6\u8d4b\u503c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(m + n)\\)\uff0c\u4e24\u91cd\u5faa\u73af\u904d\u5386\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(m * n)\\)\uff0c\u6240\u4ee5\u603b\u4f53\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(m * n)\\)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\\(O(m * n)\\)\u3002\u7528\u5230\u4e86\u4e8c\u7ef4\u6570\u7ec4\u4fdd\u5b58\u72b6\u6001\uff0c\u6240\u4ee5\u603b\u4f53\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(m * n)\\)\u3002\u56e0\u4e3a \\(dp[i](https://blog.csdn.net/lijunhcn/article/details/132408647?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-132408647-blog-111318003.235^v43^pc_blog_bottom_relevance_base9&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=1#)\\) \u7684\u72b6\u6001\u53ea\u4f9d\u8d56\u4e8e\u4e0a\u65b9\u503c \\(dp[i - 1](https://blog.csdn.net/lijunhcn/article/details/132408647?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-132408647-blog-111318003.235^v43^pc_blog_bottom_relevance_base9&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=1#)\\) \u548c\u5de6\u4fa7\u503c \\(dp[i](https://blog.csdn.net/lijunhcn/article/details/132408647?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-132408647-blog-111318003.235^v43^pc_blog_bottom_relevance_base9&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=1#)\\)\uff0c\u800c\u6211\u4eec\u5728\u8fdb\u884c\u904d\u5386\u65f6\u7684\u987a\u5e8f\u521a\u597d\u662f\u4ece\u4e0a\u81f3\u4e0b\u3001\u4ece\u5de6\u5230\u53f3\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u957f\u5ea6\u4e3a \\(m\\) \u7684\u4e00\u7ef4\u6570\u7ec4\u6765\u4fdd\u5b58\u72b6\u6001\uff0c\u4ece\u800c\u5c06\u7a7a\u95f4\u590d\u6742\u5ea6\u4f18\u5316\u5230 \\(O(m)\\)\u3002</li> </ul>"},{"location":"ADS/8.%20Dynamic%20Programming/#75-\u4e60\u9898\u96c6","title":"7.5 \u4e60\u9898\u96c6","text":"<ol> <li>Rod-cutting Problem: Given a rod of total length \\(N\\) inches and a table of selling prices \\(P_L\\) for lengths \\(L = 1, 2, \\cdots , M\\).  You are asked to find the maximum revenue \\(R_N\\) obtainable by cutting up the rod and selling the pieces.  For example, based on the following table of prices, if we are to sell an 8-inch rod, the optimal solution is to cut it into two pieces of lengths 2 and 6, which produces revenue \\(R_8 = P_2 +P_6 = 5+17 = 22\\).  And if we are to sell a 3-inch rod, the best way is not to cut it at all.</li> </ol> <p>Which one of the following statements is FALSE?</p> <ul> <li> <p>A. This problem can be solved by dynamic programming</p> </li> <li> <p>B. The time complexity of this algorithm is \\(O(N^2)\\)</p> </li> <li> <p>C. If \\(N\\le M\\), we have \\(R_N = \\max \\lbrace P_N , \\max_{1\\le i &lt; N} \\lbrace R_i + R_{N-i} \\rbrace \\rbrace\\)</p> </li> <li> <p>D. If \\(N&gt;M\\), we have \\(R_N = \\max_{1\\le i &lt; N} \\lbrace R_i + R_{N-M} \\rbrace\\)</p> </li> </ul> <p><code>B\uff1a</code>    $$    \\begin{aligned}    &amp;R1 = P1\\    &amp;R2 = max{P2, R1 + P1}\\    &amp;R3 = max{P3, P2 + R1,  P1 + R2}\\    &amp;....\\    &amp;\u8ba1\u7b97R_n\u9700\u8981 1 + 2 + 3 + 4 + ... + n \u6b65    \\end{aligned}    $$    <code>D:</code>$R_N = max_{1&lt;= i &lt; N}{R_i + R_{N - i} } $</p> <ol> <li> <p>In dynamic programming, we derive a recurrence relation for the solution to one subproblem in terms of solutions to other subproblems. To turn this relation into a bottom up dynamic programming algorithm, we need an order to fill in the solution cells in a table, such that all needed subproblems are solved before solving a subproblem. Among the following relations, which one is impossible to be computed?</p> </li> <li> <p>A. \\(A(i, j) = min (A(i-1,j), A(i,j-1), A(i-1,j-1))\\)</p> </li> <li> <p>B. \\(A(i, j) = F(A(min\\{i, j\\} - 1, min\\{i, j\\} - 1), A(max\\{i, j\\} - 1, max\\{i, j\\} -1))\\)</p> </li> <li> <p>C. \\(A(i, j) = F(A(i, j -1), A(i - 1, j - 1), A(i - 1, j + 1))\\)</p> </li> <li> <p>D. \\(A(i,j) = F(A(i-2, j-2), A(i+2,j+2))\\)</p> </li> </ol> <p><code>\u8981\u5b9e\u73b0\u52a8\u6001\u89c4\u5212\uff0c\u8bb2\u7a76\u4e00\u4e2a\u5148\u6765\u540e\u5230\uff0c\u663e\u7136D\u7684\u8ba1\u7b97\u987a\u5e8f\u6709\u8bef</code></p> <p>\u5bf9\u4e8eC\uff0c\u53ef\u4ee5 for i in 0 to n: for j in 0 to n \u5148\u8ba1\u7b97\uff08i - 1\uff0c \uff09\u6240\u6709\u7684\u7ec4\u5408\uff0c\u8fd9\u6837 \uff08i - 1\uff0c j + 1\uff09\u7684\u7ec4\u5408\u4e5f\u5c31\u63d0\u524d\u8ba1\u7b97\u4e86</p> <ol> <li> <p>Given a recurrence equation \\(f_{i,j,k} =f_{i,j+1,k}+\\min_{0 \\le l \\le k}\\{f_{i-1,j,l}+w_{j,l}\\}\\). To solve this equation in an iterative way, we cannot fill up a table as follows:</p> </li> <li> <p>A. for k in 0 to n: for i in 0 to n: for j in n to 0</p> </li> <li> <p>B. for i in 0 to n: for j in 0 to n: for k in 0 to n</p> </li> <li> <p>C. for i in 0 to n: for j in n to 0: for k in n to 0</p> </li> <li> <p>D. for i in 0 to n: for j in n to 0: for k in 0 to n</p> </li> </ol> <p>j \u4e0d\u80fd\u589e\u5e8f\u7b97\uff0c\u56e0\u4e3a \\(f_{i,j,k}\\) \u4f9d\u8d56\u4e8e \\(f_{i,j+1,k}\\)\u3002</p> <ol> <li>If a problem can be solved by dynamic programming, it must be solved in polynomial time. <code>F</code></li> </ol> <p>0-1\u80cc\u5305\u95ee\u9898\u53ef\u4ee5\u7528DP\u89e3\uff0c\u4f46\u662f\u590d\u6742\u5ea6\u4e0d\u662f\u591a\u9879\u5f0f\u7684, \u539f\u56e0\u662f\u8f93\u5165\u7684\u6570\u636e\u4e0d\u662f\u591a\u9879\u5f0f\u7684</p>"},{"location":"ADS/8.%20Dynamic%20Programming/#\u80cc\u5305\u95ee\u9898","title":"\u80cc\u5305\u95ee\u9898","text":"<ol> <li>\u80cc\u5305\u95ee\u9898\u7684\u80cc\u666f\uff1a</li> </ol> <p>\u7ed9\u5b9a\u80cc\u5305\u7684\u627f\u91cdW, \u4e00\u5806\u7269\u54c1\u7684\u91cd\u91cfweight[]\u548c\u4ef7\u503cvalue[],\u6c42\u80cc\u5305\u80fd\u88c5\u5165\u7269\u54c1\u7684\u6700\u5927\u603bvalue</p> <ol> <li>\u80cc\u5305\u95ee\u9898\u7684\u89e3\u6cd5\uff1a</li> </ol> <p>\u5b9a\u4e49\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4dp</p> <p>\u5176\u4e2d $dp[i] [j] $\u8868\u793a\uff1a\u4ece\u524d i \u4ef6\u7269\u54c1\u4e2d\u627e\u51fa\u4e00\u4e9b\u653e\u5165\u80cc\u5305\uff0c\u5728\u603b\u91cd\u4e0d\u8d85\u8fc7\u627f\u91cdW\u7684\u60c5\u51b5\u4e0b\uff0c\u80fd\u8fbe\u5230\u7684\u6700\u5927value\u3002</p> <p>\u7b2c i \u4ef6\u7269\u54c1\u91cd\u91cf\u4e3a weight[i]\uff0c\u4ef7\u503c\u4e3a value[i]\uff0c\u6839\u636e\u7b2c i \u4ef6\u7269\u54c1\u662f\u5426\u6dfb\u52a0\u5230\u80cc\u5305\u4e2d\uff0c\u53ef\u4ee5\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\uff1a</p> <ul> <li>\u7b2c i \u4ef6\u7269\u54c1\u7684\u91cd\u91cf\u8d85\u8fc7\u80cc\u5305\u627f\u91cd\uff0c\u5373 weight[i] &gt; j\u3002\u6b64\u65f6\u5c31\u7b97\u62ff\u51fa\u80cc\u5305\u4e2d\u7684\u6240\u6709\u7269\u54c1\u4e5f\u65e0\u6cd5\u653e\u4e0b\uff0c\u6240\u4ee5\u5b83\u4e0d\u53ef\u80fd\u88ab\u653e\u5165\u80cc\u5305\uff0c\u56e0\u6b64\u6709\uff1a<code>dp[i][j] = dp[i-1][j]</code></li> <li> <p>\u7b2c i \u4ef6\u7269\u54c1\u53ef\u4ee5\u6dfb\u52a0\u5230\u80cc\u5305\u4e2d\uff08\u53ef\u80fd\u62ff\u51fa\u4e00\u4e9b\u5df2\u6709\u7269\u54c1\uff09\u3002\u6b64\u65f6\u4e5f\u53ef\u4ee5\u6709\u653e\u5165\u4e0e\u4e0d\u653e\u5165\u4e24\u79cd\u60c5\u51b5\uff0c\u5e94\u53d6value\u66f4\u5927\u7684\u90a3\u79cd\u3002</p> <ul> <li>\u82e5\u4e0d\u653e\u5165\uff0c\u6709\uff1a<code>dp[i][j] = dp[i-1][j]</code></li> <li>\u82e5\u653e\u5165\uff0c\u60c5\u51b5\u53d8\u4e3a\u4ece\u67d0\u4e2a\u72b6\u6001\u4e0b\u52a0\u5165\u7b2ci\u4ef6\u7269\u54c1\u5e76\u8fbe\u5230dp[i][j]\u7ed3\u679c\uff0c\u53ef\u77e5\u524d\u4e00\u72b6\u6001\u65f6\u7684\u80cc\u5305\u627f\u91cd\u5e94\u4e3a j-weight[i]\u3002\u56e0\u6b64\u6709\uff1a<code>dp[i][j] = dp[i-1][ j-weight[i] ] + value[i]</code>\u3002</li> </ul> </li> <li> <p>\u5f97\u5230\u9012\u63a8\u5f0f\uff1a</p> </li> </ul> <pre><code>dp[i][j] = max(dp[i-1][j], dp[i-1][j-weight[i]] + value[i])\n</code></pre> <pre><code>int dp[W];\nmemset(dp, 0, sizeof(dp));\nfor(int i = 0; i &lt; n; i++)\n{\n    for(int j =  W; j &gt;= 1; j--)\n    {\n        if(j &gt;= weight[i])\n        {\n            dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);\n        }\n    }\n}\nreturn dp[W];\n</code></pre> <p>For problem <code>i</code>, Bob will need <code>time[i]</code> to solve it and obtains the corresponding <code>score[i]</code>, or he may choose not to solve it at all. Bob will be happy when he obtains a total score no less than <code>happy_score</code>. You are supposed to find the minimum time needed for Bob to be happy. The function <code>need_time</code> must return the minimum time, or <code>-1</code> if it is impossible for Bob to obtain a score no less than <code>happy_score</code>.</p> <p>Format of function:</p> <pre><code>int need_time(const int time[], const int score[], int happy_score, int n);\n</code></pre> <p>Here <code>n</code> (1\u2264<code>n</code>\u2264 <code>MAXN</code>) is the number of problems;</p> <p><code>happy_score</code> (1\u2264 <code>happy_score</code> \u2264 <code>MAXS</code>) is the minimum score for Bob to be happy;</p> <p><code>time[]</code> is the array to store <code>time[i]</code> (1\u2264<code>time[i]</code>\u2264100) which is the time to solve problem <code>i</code>;</p> <p><code>score[]</code> is the array to store <code>score[i]</code> (1\u2264<code>score[i]</code>\u2264100) which is the score Bob gets for solving problem <code>i</code>.</p> <p>PTA\u7684\u9898\u76ee\u8981\u6c42\u662f\uff1a</p> <p>1.\u5f00\u5fc3\u503c\u603b\u548c &gt;= happy_score 2.\u6240\u82b1\u65f6\u95f4\u603b\u548c\u6700\u5c11</p> <p>\u4e0a\u8ff0\u7684\u80cc\u5305\u95ee\u9898\u4e0d\u518d\u9002\u7528\u6070\u597d\u662f\u5176\u53cd\u9762</p> <p><code>\u4ece\u9006\u5411\u601d\u7ef4\u51fa\u53d1\uff1a\u8981\u6c42score\u603b\u548c\u5c0f\u4e8e sum_score - happy_score,\u5e76\u4e14\u603btime\u6700\u5927\uff0c\u7b26\u5408\u80cc\u5305\u7684\u5047\u8bbe.\u6700\u540e\u53ea\u9700\u8981\u7528sum_time-\u9006\u5411\u65f6\u95f4\u7684\u6700\u5927\u503c\u5373\u53ef\u5f97\u5230\u6b63\u5411\u7684\u6700\u5c0f\u65f6\u95f4</code></p> <pre><code>int need_time(const int time[], const int score[], int happy_score, int n)\n{\n    // \u80cc\u5305\u95ee\u9898\n    int sum_score = 0;\n    int sum_time = 0;\n    for (int i = 0; i &lt; n; i++)\n    {\n        sum_score += score[i];\n        sum_time += time[i];\n    }\n    if(sum_score &lt; happy_score) return -1;\n\n    // \u6211\u4eec\u8981\u8ba1\u7b97\uff0c\u4e0d\u8fbe\u5230happy_score\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u591a\u9700\u8981\u591a\u5c11\u65f6\u95f4\n    // \u8fd9\u6837\u5c31\u53ef\u4ee5\u7528\u603b\u65f6\u95f4\u51cf\u53bb\u8fd9\u4e2a\u65f6\u95f4\uff0c\u5c31\u662f\u6700\u5c11\u65f6\u95f4\n    int dp[sum_score];\n    memset(dp, 0, sizeof(dp));\n    for(int i = 0; i &lt; n; i++)\n    {\n        for(int j = sum_score - happy_score; j &gt;= score[i]; j--)\n        {\n            dp[j] = dp[j] &gt; dp[j - score[i]] + time[i] ? dp[j] : dp[j - score[i]] + time[i];\n        }\n    }\n    return sum_time - dp[sum_score - happy_score];\n}\n</code></pre>"},{"location":"ADS/9.%20Greedy%20Algorithms/","title":"\u4e5d.Greedy Algorithms","text":"<p> \u7ea6 5104 \u4e2a\u5b57  13 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 26 \u5206\u949f</p>"},{"location":"ADS/9.%20Greedy%20Algorithms/#91-introduction","title":"9.1 Introduction","text":"<p>Optimization Problems\uff1a</p> <p>Given a set of constraints and an optimization function.  Solutions that satisfy the constrains are called feasible solutions.  A feasible solution for which the optimization function has the best possible value is called an optimal solution.</p> <p>\u7ed9\u5b9a\u4e00\u7ec4\u7ea6\u675f\u548c\u4e00\u4e2a\u4f18\u5316\u51fd\u6570\u3002 \u6ee1\u8db3\u7ea6\u675f\u6761\u4ef6\u7684\u89e3\u79f0\u4e3a\u53ef\u884c\u89e3\u3002 \u4f18\u5316\u51fd\u6570\u5177\u6709\u6700\u4f73\u53ef\u80fd\u503c\u7684\u53ef\u884c\u89e3\u79f0\u4e3a\u6700\u4f18\u89e3\u3002</p> <p>Greedy Method\uff1a</p> <p>Make the best decision at each stage, under some greedy criterion.  A decision made in one stage is not changed in a later stage, so each decision should assure feasibility.</p> <p>\u5728\u67d0\u4e2a\u8d2a\u5fc3\u51c6\u5219\u4e0b\uff0c\u5728\u6bcf\u4e2a\u9636\u6bb5\u505a\u51fa\u6700\u4f73\u51b3\u5b9a\u3002 \u5728\u4e00\u4e2a\u9636\u6bb5\u505a\u51fa\u7684\u51b3\u5b9a\u5728\u4ee5\u540e\u7684\u9636\u6bb5\u4e0d\u4f1a\u6539\u53d8\uff0c\u56e0\u6b64\u6bcf\u4e2a\u51b3\u5b9a\u90fd\u5e94\u786e\u4fdd\u53ef\u884c\u6027\u3002</p> <p><code>\u6ce8\u610f\uff1a</code> \u8d2a\u5a6a\u7b97\u6cd5\u4ec5\u5728\u5c40\u90e8\u6700\u4f18\u503c\u7b49\u4e8e\u5168\u5c40\u6700\u4f18\u503c\u65f6\u624d\u6709\u6548\u3002\u8d2a\u5a6a\u7b97\u6cd5\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u6700\u4f18\u89e3\u3002 \u4f46\u662f\uff0c\u5b83\u901a\u5e38\u751f\u6210\u7684\u89e3\u5728\u503c\uff08\u542f\u53d1\u5f0f\uff09\u4e0a\u975e\u5e38\u63a5\u8fd1\u6700\u4f18\u3002</p>"},{"location":"ADS/9.%20Greedy%20Algorithms/#911-elements-of-the-greedy-stratege","title":"9.1.1 Elements of the Greedy Stratege","text":"<ol> <li>Cast the optimization problem as one in which we make a choice and are left with one subproblem to solve.</li> </ol> <p>\u5c06\u4f18\u5316\u95ee\u9898\u8f6c\u6362\u4e3a:\u6211\u4eec\u505a\u51fa\u8d2a\u5fc3\u9009\u62e9\u540e\uff0c\u5269\u4f59\u4e00\u4e2a\u5b50\u95ee\u9898\u9700\u8981\u89e3\u51b3\u3002</p> <ol> <li>Prove that there is always an optimal solution to the original problem that makes the greedy choice, so that the greedy choice is always safe.</li> </ol> <p>\u8bc1\u660e\u505a\u51fa\u8d2a\u5fc3\u9009\u62e9\u540e\uff0c\u539f\u95ee\u9898\u603b\u662f\u5b58\u5728\u6700\u4f18\u89e3\uff0c\u5373\u8d2a\u5fc3\u9009\u62e9\u603b\u662f\u5b89\u5168\u7684</p> <ol> <li>Demonstrate optimal substructure by showing that, having made the greedy choice, what remains is a subproblem with the property that if we combine an optimal solution to the subproblem with the greedy choice we have made, we arrive at an optimal solution to the original problem. </li> </ol> <p>\u8bc1\u660e\u505a\u51fa\u8d2a\u5fc3\u9009\u62e9\u540e\uff0c<code>\u5269\u4f59\u7684\u5b50\u95ee\u9898\u6ee1\u8db3\u6027\u8d28\uff1a\u5176\u6700\u4f18\u89e3\u4e0e\u8d2a\u5fc3\u9009\u62e9\u7ec4\u5408\u5373\u53ef\u5f97\u5230\u539f\u95ee\u9898\u7684\u6700\u4f18\u89e3</code>\uff0c\u8fd9\u6837\u5c31\u5f97\u5230\u4e86\u6700\u4f18\u5b50\u7ed3\u6784\u3002</p> <p>\u80fd\u7528\u8d2a\u5fc3\u7b97\u6cd5\u89e3\u51b3\u5148\u7528\u8d2a\u5fc3\u89e3\u51b3\uff0c\u4e0d\u80fd\u518d\u7528dp</p>"},{"location":"ADS/9.%20Greedy%20Algorithms/#912-\u8d2a\u5fc3\u9009\u62e9\u6027\u8d28\u548c\u6700\u4f18\u5b50\u7ed3\u6784","title":"9.1.2 \u8d2a\u5fc3\u9009\u62e9\u6027\u8d28\u548c\u6700\u4f18\u5b50\u7ed3\u6784","text":"<p>\u5bf9\u4e8e\u5927\u90e8\u5206\u95ee\u9898\u8d2a\u5fc3\u7b97\u6cd5\u7684\u8bc1\u660e\u800c\u8a00\uff0c\u8d2a\u5fc3\u9009\u62e9\u6027\u8d28\u548c\u6700\u4f18\u5b50\u7ed3\u6784\u662f\u4e24\u4e2a\u5173\u952e\u8981\u7d20</p> <ol> <li> <p>\u8d2a\u5fc3\u9009\u62e9\u6027\u8d28\uff1a(<code>\u8d2a\u5fc3\u9009\u62e9\u7684\u7ed3\u679c\u4e00\u5b9a\u662f\u6700\u4f18\u89e3\u7684\u4e00\u90e8\u5206</code>)\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u505a\u51fa\u5c40\u90e8\u6700\u4f18\uff08\u8d2a\u5fc3\uff09\u9009\u62e9\u6765\u6784\u9020\u5168\u5c40\u6700\u4f18\u89e3\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5f53\u8fdb\u884c\u9009\u62e9\u65f6\uff0c\u6211\u4eec\u76f4\u63a5\u505a\u51fa\u5728\u5f53\u524d\u95ee\u9898\u4e2d\u770b\u6765\u6700\u4f18\u7684\u9009\u62e9\uff0c\u800c\u4e0d\u5fc5\u8003\u8651\u5b50\u95ee\u9898\u7684\u89e3\u3002</p> </li> <li> <p>\u8fd9\u4e5f\u662f\u8d2a\u5fc3\u7b97\u6cd5\u4e0e\u52a8\u6001\u89c4\u5212\u7684\u4e0d\u540c\u4e4b\u5904\u3002\u5728\u52a8\u6001\u89c4\u5212\u65b9\u6cd5\u4e2d\uff0c\u6bcf\u4e2a\u6b65\u9aa4\u90fd\u8981\u8fdb\u884c\u4e00\u6b21\u9009\u62e9\uff0c\u4f46\u9009\u62e9\u901a\u5e38\u4f9d\u8d56\u4e8e\u5b50\u95ee\u9898\u7684\u89e3\u3002</p> </li> <li>\u4f46\u5728\u8d2a\u5fc3\u7b97\u6cd5\u4e2d\uff0c\u6211\u4eec\u603b\u662f\u505a\u51fa\u5f53\u65f6\u770b\u6765\u6700\u4f73\u7684\u9009\u62e9\uff0c\u7136\u540e\u6c42\u89e3\u5269\u4e0b\u7684\u552f\u4e00\u7684\u5b50\u95ee\u9898\u3002\u8d2a\u5fc3\u7b97\u6cd5\u8fdb\u884c\u9009\u62e9\u65f6\u53ef\u80fd\u4f9d\u8d56\u4e4b\u524d\u505a\u51fa\u7684\u9009\u62e9\uff0c\u4f46\u4e0d\u4f9d\u8d56\u4efb\u4f55\u5c06\u6765\u7684\u9009\u62e9\u6216\u662f\u5b50\u95ee\u9898\u7684\u89e3\u3002</li> </ol> <p>\u901a\u8fc7\u5bf9\u8f93\u5165\u8fdb\u884c\u9884\u5904\u7406\u6216\u8005\u4f7f\u7528\u9002\u5408\u7684\u6570\u636e\u7ed3\u6784\uff08\u901a\u5e38\u662f\u4f18\u5148\u961f\u5217\uff09\uff0c\u6211\u4eec\u901a\u5e38\u53ef\u4ee5\u4f7f\u8d2a\u5fc3\u9009\u62e9\u66f4\u5feb\u901f\u3002\u5728\u6d3b\u52a8\u9009\u62e9\u95ee\u9898\u4e2d\uff0c\u5047\u5b9a\u6211\u4eec\u5df2\u7ecf\u5c06\u6d3b\u52a8\u6309\u7ed3\u675f\u65f6\u95f4\u5355\u8c03\u9012\u589e\u987a\u5e8f\u6392\u597d\u5e8f\uff0c\u5219\u5bf9\u6bcf\u4e2a\u6d3b\u52a8\u53ea\u9700\u5904\u7406\u4e00\u6b21\u3002</p> <ol> <li>\u6700\u4f18\u5b50\u7ed3\u6784\uff1a\uff08<code>\u7528\u8d2a\u5fc3\u7b56\u7565\u9009\u62e9$a_1$\u4e4b\u540e\u5f97\u5230\u5b50\u95ee\u9898$S_1$,\u90a3\u4e48$a_1$\u548c\u5b50\u95ee\u9898$S_1$\u7684\u6700\u4f18\u89e3\u5408\u5e76\u4e00\u5b9a\u80fd\u591f\u5f97\u5230\u539f\u95ee\u9898\u7684\u4e00\u4e2a\u6700\u4f18\u89e3</code>\uff09\u4e00\u4e2a\u95ee\u9898\u7684\u6700\u4f18\u89e3\u5305\u542b\u5176\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3\u3002</li> </ol> <p>\u5982\u524d\u6d3b\u52a8\u9009\u62e9\u95ee\u9898\u6240\u8ff0\uff0c\u901a\u8fc7\u5bf9\u539f\u95ee\u9898\u5e94\u7528\u4e00\u6b21\u8d2a\u5fc3\u9009\u62e9\u5373\u53ef\u5f97\u5230\u5b50\u95ee\u9898\uff0c\u90a3\u4e48\u6700\u4f18\u5b50\u7ed3\u6784\u7684\u5de5\u4f5c\u5c31\u662f\u8bba\u8bc1\uff1a\u5c06\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3\u4e0e\u8d2a\u5fc3\u9009\u62e9\u7ec4\u5408\u5728\u4e00\u8d77\u7684\u786e\u80fd\u751f\u6210\u539f\u95ee\u9898\u7684\u6700\u4f18\u89e3\u3002\u8fd9\u79cd\u65b9\u6cd5\u9690\u542b\u5730\u5bf9\u5b50\u95ee\u9898\u4f7f\u7528\u4e86\u6570\u5b66\u5f52\u7eb3\u6cd5\uff0c\u8bc1\u660e\u4e86\u5728\u6bcf\u4e2a\u6b65\u9aa4\u5bf9\u5b50\u95ee\u9898\u8fdb\u884c\u8d2a\u5fc3\u9009\u62e9\uff0c\u4e00\u6b65\u4e00\u6b65\u63a8\u8fdb\u5c31\u4f1a\u751f\u6210\u539f\u95ee\u9898\u7684\u6700\u4f18\u89e3\u3002</p>"},{"location":"ADS/9.%20Greedy%20Algorithms/#92-activity-selection-problem","title":"9.2 Activity Selection Problem","text":"<p>definition \"Activity Selection Problem\"</p> <p>Given a set of activities \\(S = { a_1, a_2, ..., a_n }\\) that wish to use a resouce (e.g. a classroom).  </p> <p>Activities \\(a_i\\) and \\(a_j\\) are compatible if \\(s_i \\geq f_j\\) or \\(s_j \\geq f_i\\) (i.e. their time intervals do not overlap).</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u6d3b\u52a8\u96c6\u5408\\(S = {a1, a2, . . . , an}\\)\uff0c\u5176\u4e2d\u6bcf\u4e2a\u6d3b\u52a8\\(ai \\(\u90fd\u6709\u4e00\u4e2a\u5f00\u59cb\u65f6\u95f4\\)si \\(\u548c\u7ed3\u675f\u65f6\u95f4\\)fi\\)\uff0c\u4e14\\(0 \u2264 s_i &lt; f_i &lt; \u221e\\)\u3002(Each \\(a_i\\) takes place during a time interval \\([s_i, f_i)\\).)\u5982\u679c\u6d3b\u52a8\\(a_i\\) \u548c\\(a_j \\(\u6ee1\u8db3\\)f_i \u2a7d s_j \\(\u6216\u8005\\)f_j \u2a7d s_i\\)\uff0c\u5219\u79f0\u6d3b\u52a8\\(a_i \\(\u548c\\)a_j\\) \u662f\u517c\u5bb9\u7684\uff08\u5373\u4e8c\u8005\u65f6\u95f4\u4e0d\u4f1a\u91cd\u5408\uff09\u3002\u6d3b\u52a8\u9009\u62e9\u95ee\u9898\u5c31\u662f\u8981\u627e\u5230\u4e00\u4e2a\u6700\u5927\u7684\u517c\u5bb9\u6d3b\u52a8\u5b50\u96c6\u3002</p> <p>Goal: Select a maximum-size subset of mutually compatible activities.</p> <p>Assume \\(f_1\\geq f_2 \\geq ... \\geq f_n\\).</p> <p>\u62bd\u8c61\u6765\u8bf4\u5c31\u662f\u4e00\u4e2a\u4e00\u7ef4\u7684\u5bc6\u94fa\u95ee\u9898\u3002\u7ed9\u5b9a\u65f6\u95f4\u7ebf\u4e0a\u7684\u82e5\u5e72\u533a\u95f4 \\([s_i, f_i)\\)\uff0c\u6c42\u51fa\u6700\u591a\u80fd\u4e0d\u91cd\u53e0\u5730\u5728\u8fd9\u4e2a\u65f6\u95f4\u7ebf\u4e0a\u653e\u7f6e\u591a\u5c11\u4e2a\u533a\u95f4\u3002\u9898\u76ee\u989d\u5916\u4fdd\u8bc1\u4e86\u8f93\u5165\u6570\u636e\u662f\u6839\u636e \\(f_i\\) \u6709\u5e8f\u7684</p>"},{"location":"ADS/9.%20Greedy%20Algorithms/#921-\u52a8\u6001\u89c4\u5212","title":"9.2.1 \u52a8\u6001\u89c4\u5212","text":"<p>\u52a8\u6001\u89c4\u5212\uff1a</p> <ol> <li>\u8bbe\\(S_{ij}\\)\u8868\u793a\u6d3b\u52a8\\(a_i,a_j\\)\u4e4b\u95f4\u7684\u6700\u5927\u517c\u5bb9\u6d3b\u52a8\u96c6\u5408\uff08\u5f00\u59cb\u65f6\u95f4\u5728\\(a_i\\)\u7ed3\u675f\u4e4b\u540e\uff0c\u7ed3\u675f\u65f6\u95f4\u5728\\(a_{j}\\)\u5f00\u59cb\u4e4b\u524d\uff09\uff0c\u5176\u5927\u5c0f\u8bb0\u4e3a\\(c_{ij}\\)    $$    c_{ij} = max{c_{ik} + c_{kj} + 1 | f_i&lt;= s_k &lt; f_k &lt;= s_j}    $$    <code>\u6b64\u5904\u7684\u52a01\u662f\u56e0\u4e3a\uff0c\u9700\u8981\u989d\u5916\u6dfb\u52a0a_k,c_{ik}\u8868\u793a\u7684\u662fa_k\u5f00\u59cb\u4e4b\u524d\uff0cc_{kj}\u8868\u793a\u7684\u662fa_k\u5f00\u59cb\u4e4b\u540e\uff0c\u7a7a\u4f59\u51fa\u4e00\u4e2aa_k</code></li> </ol> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\uff1a</p> <ul> <li>\u5148\u8ba1\u7b97\u95f4\u9694k=1\uff0c\\(c_{i,i+1} = 0\\) \u2014\u2014\\(N - 1\\)</li> <li>\u518d\u8ba1\u7b97\u95f4\u9694k=2\uff0c\\(c_{i,i+2}\\) \u2014\u2014\\(\uff08k - 1)*(N - k)\\)</li> </ul> <p>$$    \\begin{aligned}    &amp;\\sum_{k=2}^{N-1} (k-1)\\times (N-k) \\    &amp;= (N-2)+2 \\times (N-3)+...+ (N-2) \\times 1\\    &amp;= N \\times \\sum_{k=2}^{N-1} (k-1) - \\sum_{k=2}^{N-1} k\\times (k-1) \\    \\end{aligned}    $$</p> <p>\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(N^2)\\)\u3002</p> <ol> <li>\u80cc\u5305\u95ee\u9898\u601d\u8def\uff1a</li> </ol> <p>\u8bbe\\(Si \\(\u8868\u793a\u6d3b\u52a8\\)a1, a2, . . . , ai \\(\u7684\u6700\u5927\u517c\u5bb9\u6d3b\u52a8\u96c6\u5408\uff0c\u5176\u5927\u5c0f\u8bb0\u4e3a\\)ci\\)(\u6d3b\u52a8\\(a_i\\)\u7ed3\u675f\u4e4b\u524d)\uff0c\u90a3\u4e48\u6211\u4eec\u6709    $$    c_i = max{c_{i-1}, c_{k(i)}+1}    $$    \u5206\u4e3a\u4e24\u4e2a\u60c5\u51b5\u8ba8\u8bba\uff1a</p> <ul> <li>\u6d3b\u52a8\\(a_i\\)\u4e0d\u653e\uff0c\\(c_i = c_{i-1}\\)</li> <li>\u6d3b\u52a8\\(a_i\\)\u653e\u7f6e\uff0c\u4f46\u662f\u5f97\u53d6\u51fa\u4e00\u4e9b\u6d3b\u52a8.\u5176\u4e2d\\(k(i)\\) \u8868\u793a\u5728\\(1 \u2a7d k \u2a7d i \\(\u4e2d\uff0c\\)f_k \u2a7d s_i\\) \u4e14\\(c_k \\(\u6700\u5927\u7684\\)k\\)\uff0c\u5373\u4e0d\u4e0eai \u51b2\u7a81\u7684\u6700\u665a\u7ed3\u675f\u7684\u6d3b\u52a8\u3002\u4e8e\u662f\\(c_i = c_{k(i)} +1\\)</li> </ul> <p>\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(N^2)\\)\u3002</p> <ol> <li></li> </ol> <p><code>\u5bf9\u4e8e\u5e26\u6743\u91cd\u95ee\u9898\uff0c\u8d2a\u5fc3\u7b97\u6cd5\u65e0\u6cd5\u6c42\u5f97\u6700\u4f18\u89e3,\u4f46\u662f\u52a8\u6001\u89c4\u5212\u7684\u65b9\u6cd5\u4f9d\u7136\u6210\u7acb</code></p>"},{"location":"ADS/9.%20Greedy%20Algorithms/#922-\u8d2a\u5fc3\u7b97\u6cd5","title":"9.2.2 \u8d2a\u5fc3\u7b97\u6cd5","text":"<p>\u8d2a\u5fc3\u7b97\u6cd5\uff1a<code>\u4e00\u4e2a\u53ef\u80fd\u6b63\u786e\u7684\u8d2a\u5fc3\u7b56\u7565\u4e3a\u4ece\u524d\u5230\u540e\u6bcf\u6b21\u9009\u62e9\u4e0d\u51b2\u7a81\u7684\u6700\u65e9\u7ed3\u675f\u7684\u6d3b\u52a8</code></p> <ol> <li>\u8d2a\u5fc3\u7b97\u6cd5\u4e00\uff1a\u54ea\u95e8\u8bfe\u5148\u5f00\u59cb\u6211\u5148\u9009\u54ea\u95e8\u8bfe\uff0c\u4f46\u662f\u663e\u7136\u4e0d\u5bf9\u3002</li> </ol> <p>\u53cd\u4f8b\uff1a\u5f00\u59cb\u6700\u65e9\u7ed3\u675f\u6700\u665a</p> <p></p> <ol> <li>\u8d2a\u5fc3\u7b97\u6cd5\u4e8c\uff1a\u6bcf\u6b21\u90fd\u9009\u533a\u95f4\u957f\u5ea6\u6700\u5c11\u7684\uff0c\u867d\u7136\u770b\u8d77\u6765\u80fd\u8ba9\u5b83\u201c\u76f8\u5bf9\u6bd4\u8f83\u591a\u201d\uff0c\u4f46\u662f\u663e\u7136\u4e5f\u65e0\u6cd5\u4fdd\u8bc1\u7ed3\u679c\u7684\u6700\u4f18\u6027</li> </ol> <p></p> <ol> <li>\u8d2a\u5fc3\u7b97\u6cd5\u4e09\uff1a\u9009\u62e9\u91cd\u53e0\u6700\u5c11\u7684</li> </ol> <p></p> <ol> <li>\u8d2a\u5fc3\u7b97\u6cd5\u56db\uff1a\u9009\u62e9\u6700\u65e9\u7ed3\u675f\u7684</li> </ol> <p></p> <p>\u9996\u5148\u6211\u4eec\u5148\u6765\u9a8c\u8bc1\u8fd9\u4e00\u7b56\u7565\u7684\u6b63\u786e\u6027</p> <p>\u4ee4\\(S_k = \\{a_i \\in S | s_i &gt;= f_k\\}\\),\\(S_k\\)\u8868\u793a\u5728\\(a_k\\)\u7ed3\u675f\u540e\u5f00\u59cb\u7684\u4efb\u52a1\u3002\u5f53\u6211\u4eec\u505a\u51fa\u8d2a\u5fc3\u9009\u62e9\uff0c\u9009\u62e9\\(a_1\\)\u540e\uff0c\u5269\u4e0b\u7684\u6211\u4eec\u53ea\u9700\u8981\u6c42\u89e3S1\u8fd9\u4e00\u5b50\u95ee\u9898\u3002</p> <p>\u5982\u679c\\(a_1\\)\u786e\u5b9e\u5728\u6700\u4f18\u89e3\u4e2d\uff0c\u90a3\u4e48\u539f\u95ee\u9898\u7684\u6700\u4f18\u89e3\u663e\u7136\u662f\u7531\u6d3b\u52a8\\(a_1\\)\u548c\u5b50\u95ee\u9898\\(S_1\\)\u7684\u6700\u4f18\u89e3\u6784\u6210\u3002\uff08<code>\u8fd9\u4e00\u70b9\u79f0\u4e4b\u4e3a\u8d2a\u5fc3\u7b97\u6cd5\u7684\u6700\u4f18\u5b50\u7ed3\u6784</code>\uff09\u3002\u4e4b\u540e\u5b50\u95ee\u9898\\(S_1\\)\u6211\u4eec\u53c8\u53ef\u4ee5\u6309\u7167\u8d2a\u5fc3\u7b56\u7565\u9009\u62e9\u65b0\u7684\u7ed3\u675f\u65f6\u95f4\u6700\u65e9\u7684\u6d3b\u52a8\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u80fd\u591f\u5f97\u5230\u5168\u90e8\u7684\u89e3\u3002</p> <p>\u63a5\u4e0b\u6765\u7684\u95ee\u9898\u8f6c\u5316\u4e3a\uff1a\u8d2a\u5fc3\u9009\u62e9\u6700\u65e9\u7ed3\u675f\u7684\u6d3b\u52a8\u662f\u5426\u662f\u6700\u4f18\u89e3\u7684\u4e00\u90e8\u5206\uff1f</p> <p>\u3010<code>\u5b9a\u7406\uff1a\u6d3b\u52a8\u9009\u62e9\u95ee\u9898\u7684\u8d2a\u5fc3\u9009\u62e9\u6027\u8d28</code>\u3011 \u8003\u8651\u4efb\u4f55\u975e\u7a7a\u5b50\u95ee\u9898 \\(S_k\\)\uff0c\u5e76\u8bbe \\(a_m\\) \u662f \\(S_k\\) \u4e2d\u7ed3\u675f\u65f6\u95f4\u6700\u65e9\u7684\u6d3b\u52a8\u3002 \u7136\u540e $a_m \\(\u5305\u542b\u5728\\) S_k $\u7684\u76f8\u4e92\u517c\u5bb9\u6d3b\u52a8\u7684\u4e00\u4e9b\u6700\u5927\u5927\u5c0f\u7684\u5b50\u96c6\u4e2d\u3002</p> <p></p> <ul> <li>\u4ee4\\(A_k\\)\u662f\\(S_k\\)\u7684\u4e00\u4e2a\u6700\u5927\u517c\u5bb9\u6d3b\u52a8\u5b50\u96c6\uff0c\u4e14\\(a_{ef}\\)\u662f\\(A_k\\)\u4e2d\u7ed3\u675f\u65f6\u95f4\u6700\u65e9\u7684\u6d3b\u52a8\u3002</li> <li>\u5982\u679c\\(a_m = a_{ef}\\),\u4e0a\u8ff0\u5b9a\u7406\u76f4\u63a5\u6210\u7acb\uff0c\u6b64\u65f6\\(S_k\\)\u4e2d\u7ed3\u675f\u65f6\u95f4\u6700\u65e9\u7684\u6d3b\u52a8\\(a_m\\)\u5df2\u7ecf\u5305\u542b\u5728\u6700\u5927\u517c\u5bb9\u6d3b\u52a8\u5b50\u96c6\\(A_k\\)\u4e2d</li> <li>\u5982\u679c\\(a_m != a_{ef}\\),\u5219\u7528\\(a_m\\)\u66ff\u4ee3\\(a_{ef}\\),\u56e0\u4e3a\\(a_m\\)\u662f\\(S_k\\)\u4e2d\u7ed3\u675f\u65f6\u95f4\u6700\u65e9\u7684\u6d3b\u52a8\uff0c\u8bf4\u660e\\(a_m\\)\u7684\u7ed3\u675f\u65f6\u95f4\u6bd4\\(a_{ef}\\)\u7684\u7ed3\u675f\u65f6\u95f4\u8fd8\u65e9\uff0c\u4e5f\u5c31\u662f\u5f97\u5230\u7684\u65b0\u7684\u6700\u4f18\u89e3\\(A_{k'}\\),\u4e5f\u662f\\(S_k\\)\u7684\u4e00\u4e2a\u6700\u5927\u517c\u5bb9\u6d3b\u52a8\u5b50\u96c6\u3002</li> </ul> <p>\u4e0a\u8ff0\u7684\u601d\u60f3\u662f\uff1a\u201c\u4ea4\u6362\u53c2\u6570\u6cd5\u201d\uff0c\u5047\u8bbe\u5b58\u5728\u4e00\u4e2a\u6700\u4f18\u9009\u62e9\uff0c\u5176\u4e2d\u67d0\u4e2a\u5143\u7d20\u53ef\u80fd\u4e0d\u5728\u6211\u4eec\u7684\u8d2a\u5fc3\u9009\u62e9\u4e2d\uff0c\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ea4\u6362\u8d2a\u5fc3\u9009\u62e9\u548c\u6700\u4f18\u9009\u62e9\u7684\u5143\u7d20\u6765\u6784\u9020\u4e00\u4e2a\u4e0d\u53ef\u80fd\u53d8\u5dee\u7684\u89e3\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u8bf4\u660e\u8d2a\u5fc3\u9009\u62e9\u5f97\u5230\u7684\u7ed3\u679c\u4e5f\u662f\u6700\u4f18\u9009\u62e9\u7684\u4e00\u79cd</p> <p>\u3010<code>\u5b9a\u7406\uff1a\u6d3b\u52a8\u9009\u62e9\u95ee\u9898\u7684\u6700\u4f18\u5b50\u7ed3\u6784</code>\u3011\u5728\u6d3b\u52a8\u9009\u62e9\u95ee\u9898\u4e2d\uff0c\u7528\u8d2a\u5fc3\u7b56\u7565\u9009\u62e9\\(a_1\\)\u4e4b\u540e\u5f97\u5230\u5b50\u95ee\u9898\\(S_1\\),\u90a3\u4e48\\(a_1\\)\u548c\u5b50\u95ee\u9898\\(S_1\\)\u7684\u6700\u4f18\u89e3\u5408\u5e76\u4e00\u5b9a\u80fd\u591f\u5f97\u5230\u539f\u95ee\u9898\u7684\u4e00\u4e2a\u6700\u4f18\u89e3</p> <p><code>\u53cd\u8bc1\u6cd5\uff1a</code>\u5047\u8bbe\\(a_1\\)\u548c\u5b50\u95ee\u9898\\(S_1\\)\u7684\u6700\u4f18\u89e3\\(C_1\\)\u5408\u5e76\u5f97\u5230\u7684\u89e3\\(\\(C\\)\\)\u4e0d\u662f\u539f\u95ee\u9898\u7684\u4e00\u4e2a\u6700\u4f18\u89e3</p> <ul> <li>\u5148\u5047\u8bbe\\(C'\\)\u662f\u539f\u95ee\u9898\u7684\u4e00\u4e2a\u6700\u4f18\u89e3\uff0c\u90a3\u4e48\\(|C'| &gt; |C|\\)\u3002</li> <li>\u6839\u636e\u8d2a\u5fc3\u9009\u62e9\u7684\u6027\u8d28\uff0c\\(a_1\\)\u7684\u7ed3\u675f\u65f6\u95f4\u80af\u5b9a\u6bd4\\(C'\\)\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u7ed3\u675f\u65f6\u95f4\u65e9\uff0c\u6240\u4ee5\u6211\u4eec\u7528\\(a_1\\)\u66ff\u6362\u6389\\(C'\\)\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u4e0d\u4f1a\u4f7f\u7ed3\u679c\u53d8\u5dee\uff0c\\(|C''| = |C'| &gt; |C|\\)</li> <li>\u63a5\u4e0b\u6765\u6211\u4eec\u53bb\u9664\\(C''\\)\u4e2d\u7684\\(a_1\\),\u5f97\u5230\u5b50\u95ee\u9898\\(S_1\\)\u7684\u4e00\u4e2a\u89e3\\(C_1''\\),\u7531\u4e8e\\(|C''| &gt; |C|\\),\u6240\u4ee5\\(|C_1''| &gt; |C_1|\\),\u8fd9\u4e0e\\(C_1\\)\u662f\u5b50\u95ee\u9898\\(S_1\\)\u7684\u6700\u4f18\u89e3\u77db\u76fe</li> </ul> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\uff1a\u5982\u679c\u7ed3\u675f\u65f6\u95f4\u5df2\u7ecf\u5b8c\u6210\u6392\u5e8f\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6309\u7167\u7ed3\u675f\u65f6\u95f4\u5347\u5e8f\u904d\u5386\u4e00\u904d\u6240\u6709\u6d3b\u52a8\uff0c\u5c31\u80fd\u5728\\(O(N)\\)\u7684\u65f6\u95f4\u5185\u627e\u5230\u6700\u4f18\u89e3\u3002\u6ca1\u6709\u6392\u5e8f\uff0c\u5c31\u5148\u4ee5\\(O(NlogN)\\)\u7684\u65f6\u95f4\u5b8c\u6210\u6392\u5e8f\uff0c\u6700\u540e\u7684\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f\\(O(NlogN)\\)</p> <p><code>\u7efc\u4e0a\uff1a</code></p> <p>\u6211\u4eec\u9996\u5148\u6839\u636e\u8d2a\u5fc3\u9009\u62e9\u6027\u8d28\u627e\u5230\u6700\u65e9\u7ed3\u675f\u7684\u6d3b\u52a8\\(a_1\\)\uff0c\u6839\u636e\u6700\u4f18\u5b50\u7ed3\u6784\u6027\u8d28\u53ef\u77e5\uff0c\u5b83\u548c(S_1 \\(\u7684\u6700\u4f18\u89e3\u4e00\u8d77\u53ef\u4ee5\u5f62\u6210\u5168\u95ee\u9898\u7684\u6700\u4f18\u89e3\uff0c\u7136\u540e\u6211\u4eec\u7684\u4efb\u52a1\u5c31\u53d8\u6210\u4e86\u627e\\)S_1\\) \u7684\u6700\u4f18\u89e3\u3002\u91cd\u590d\u8d2a\u5fc3\u9009\u62e9\u6027\u8d28\uff0c\u6211\u4eec\u8981\u627e\u5230\\(S_1\\) \u4e2d\u6700\u65e9\u7ed3\u675f\u7684\\(a_{i1}\\) \u4f5c\u4e3a\u8d2a\u5fc3\u9009\u62e9\uff0c\u8fd9\u6837\u6839\u636e\u6700\u4f18\u5b50\u7ed3\u6784\uff0c\\(S_1\\) \u7684\u6700\u4f18\u89e3\u53c8\u53ef\u4ee5\u8868\u8fbe\u4e3a(a_{i1} \\(\u548c\u5269\u4f59\u5b50\u95ee\u9898\\)S_{i1}\\) \u7684\u6700\u4f18\u89e3\u7684\u7ec4\u5408\uff0c\u7136\u540e\u6211\u4eec\u627e\\(S_{i1}\\) \u7684\u6700\u4f18\u89e3\uff0c\u7528\u8d2a\u5fc3\u9009\u62e9\u7136\u540e\u5f97\u5230\u5269\u4f59\u5b50\u95ee\u9898...... \u4ee5\u6b64\u7c7b\u63a8\uff0c\u5229\u7528\u5f52\u7eb3\u6cd5\u5373\u53ef\u5f97\u5230\uff0c\u76f4\u5230\u5b50\u95ee\u9898\u4e3a\u7a7a\u65f6\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u6574\u4e2a\u95ee\u9898\u7684\u6700\u4f18\u89e3\u3002</p> <p>\u3010<code>\u53d8\u4f531\uff1a\u52a0\u6743\u6d3b\u52a8\u9009\u62e9\u95ee\u9898</code>\u3011\u6bcf\u4e00\u4e2a\u6d3b\u52a8\u90fd\u6709\u4e00\u4e2a\u6743\u91cd\\(w_i\\),\u6211\u4eec\u5e0c\u671b\u627e\u5230\u4e00\u4e2a\u6700\u5927\u6743\u91cd\u7684\u517c\u5bb9\u6d3b\u52a8\u96c6\u5408\u3002\u6b64\u65f6\u4e0a\u8ff0\u7684\u8d2a\u5fc3\u7b97\u6cd5\u5931\u6548\uff0c\u4e0d\u518d\u662f\u5e0c\u671b\u5305\u542b\u7684\u6d3b\u52a8\u8d8a\u591a\u8d8a\u597d\u3002</p> <p>\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u5e26\u6743\u91cd\u7684\u65b9\u6cd5\u8fdb\u884c\u89e3\u51b3\u3002</p> <p>\u3010<code>\u53d8\u4f532\uff1a\u533a\u95f4\u8c03\u5ea6\u95ee\u9898</code>\u3011\u95ee\u9898\u4e0d\u518d\u662f\u6700\u5927\u5316\u517c\u5bb9\u96c6\u5408\u7684\u5927\u5c0f\u6216\u8005\u6743\u91cd\uff0c\u800c\u662f\u8f6c\u5316\u4e3a\uff1a\u6bcf\u4e00\u4e2a\u6d3b\u52a8\u90fd\u9700\u8981\u6559\u5e08\u8fdb\u884c\u4e3e\u529e\uff0c\u8003\u8651\u5c06\u6240\u6709\u7684\u6d3b\u52a8\u5206\u914d\u5230\u6700\u5c11\u7684\u6559\u5ba4\uff0c\u4e14\u6bcf\u4e2a\u6559\u5ba4\u7684\u6d3b\u52a8\u4e0d\u51b2\u7a81\u3002</p> <p>\u601d\u8def\u662f\uff1a\u5c06\u6240\u6709\u6d3b\u52a8\u6309\u7167\u5f00\u59cb\u65f6\u95f4\u8fdb\u884c\u6392\u5e8f\uff0c\u8bbe\u7f6e\u6559\u5ba4\u7684\u521d\u59cb\u6570\u91cf\u4e3a1\uff0c\u4ece\u524d\u5f80\u540e\u904d\u5386\uff0c\u6bcf\u6b21\u9009\u62e9\u4e00\u4e2a\u6d3b\u52a8\uff0c\u5148\u770b\u5f53\u524d\u6559\u5ba4\u6709\u65e0\u7a7a\u4f59\uff0c\u5982\u679c\u5168\u90e8\u90fd\u51b2\u7a81\u5c31\u65b0\u5f00\u4e00\u4e2a\u6559\u5ba4\u3002</p> <p>\u7b80\u5316\u540e\uff1a\u95ee\u9898\u8f6c\u5316\u4e3a\uff0c\u5728\u67d0\u4e00\u65f6\u6bb5\u6d3b\u52a8\u51b2\u7a81\u7684\u6700\u5927\u6570\u91cf\u3002\u5047\u8bbe\u6700\u591a\u51fa\u73b03\u4e2a\u6d3b\u52a8\u540c\u65f6\u8fdb\u884c\uff0c\u6700\u591a\u5206\u914d3\u4e2a\u6559\u5ba4\u3002\u56e0\u4e3a\u53ea\u6709\u5728\u5168\u90e8\u51b2\u7a81\u65f6\u624d\u80fd\u65b0\u5f00\u4e00\u4e2a\u6559\u5ba4\uff0c\u6240\u4ee5\u5206\u914d\u7b2c\u56db\u4e2a\u6559\u5ba4\u610f\u5473\u7740\u524d\u4e09\u4e2a\u6559\u5ba4\u90fd\u6709\u6d3b\u52a8\uff0c\u6709\u56db\u4e2a\u6d3b\u52a8\u540c\u65f6\u8fdb\u884c\uff0c\u4e0e\u524d\u63d0\u77db\u76fe</p> <p></p>"},{"location":"ADS/9.%20Greedy%20Algorithms/#93-\u8c03\u5ea6\u95ee\u9898","title":"9.3 \u8c03\u5ea6\u95ee\u9898","text":"<p>\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u6709\\(n\\) \u4e2a\u4efb\u52a1\uff0c\u6bcf\u4e2a\u4efb\u52a1\\(i \\(\u90fd\u6709\u4e00\u4e2a\u6b63\u7684\u5b8c\u6210\u9700\u8981\u7684\u65f6\u95f4\\)l_i \\(\u548c\u4e00\u4e2a\u6743\u91cd\\)w_i\\)\u3002\u5047\u5b9a\u6211\u4eec\u53ea\u80fd\u6309\u4e00\u5b9a\u987a\u5e8f\u4f9d\u6b21\u6267\u884c\u8fd9\u4e9b\u4efb\u52a1\uff0c\u4e0d\u80fd\u5e76\u884c\u3002</p> <p>\u8bb0\\(\\sigma\\)\u4e3a\u4e00\u79cd\u8c03\u5ea6\u65b9\u6cd5\uff0c\u5728\u8c03\u5ea6\\(\\sigma\\)\u4e2d\uff0c\u4efb\u52a1\\(i\\)\u7684\u5b8c\u6210\u65f6\u95f4\u4e3a\\(C_i(\\sigma)\\),\u8868\u793a\u4efb\u52a1\\(i\\)\u4e4b\u524d\u7684\u4efb\u52a1\u5b8c\u6210\u65f6\u95f4\u4e4b\u548c\u52a0\u4e0a\u4efb\u52a1\\(i\\)\u672c\u8eab\u7684\u5b8c\u6210\u65f6\u95f4<code>\u8981\u6c42\uff1a\u6700\u5c0f\u5316\u52a0\u6743\u5b8c\u6210\u65f6\u95f4\u4e4b\u548c</code> $$ T = min \\sum_{i = 1} ^ n w_i C_i(\\sigma) $$ \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6709\u4e09\u4e2a\u4efb\u52a1\uff0c\\(l_1 = 1\uff0cl_2 = 2\uff0cl_3 = 3\uff0cw_1 = 3\uff0cw_2 = 2\uff0cw_3 = 1\\)\u3002\u5982\u679c\u6211\u4eec\u628a\u7b2c\u4e00\u4e2a\u4efb\u52a1\u653e\u5728\u6700\u524d\uff0c\u7b2c\u4e8c\u4e2a\u653e\u5728\u5176\u6b21\uff0c\u7b2c\u4e09\u4e2a\u653e\u5728\u6700\u540e\uff0c\u90a3\u4e48\u4e09\u4e2a\u4efb\u52a1\u7684\u5b8c\u6210\u65f6\u95f4\u5c31\u662f1\u30013\u30016\uff0c\u56e0\u6b64\u52a0\u6743\u65f6\u95f4\u548c\u4e3a\\(3 \u00d7 1 + 2 \u00d7 3 + 1 \u00d7 6 = 15\\)\u3002\u5982\u679c\u8bfb\u8005\u68c0\u67e5\u5168\u90e8\u7684\u516d\u79cd\u6392\u5e8f\uff0c\u8fd9\u7684\u786e\u662f\u6700\u5c0f\u7684\u90a3\u4e00\u4e2a\u3002</p> <p>\u5047\u5982\u6240\u6709\u7684\u4efb\u52a1\u6240\u9700\u7684\u65f6\u95f4\u90fd\u76f8\u7b49\uff0c\u4e3a\u4e86\u4f7f\u52a0\u6743\u5b8c\u6210\u65f6\u95f4\u6700\u5c0f\uff0c\u663e\u7136\u8981\u5c06<code>\u6743\u91cd\u6700\u5927\u65f6\u95f4\u6700\u77ed</code>\u7684\u4efb\u52a1\u653e\u5728\u524d\u9762\u3002</p> <p>\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4ee5\u4e0b\u7684\u8d2a\u5fc3\u7b56\u7565\uff1a</p> <ul> <li>\u8ba1\u7b97\u6bcf\u4e2a\u4efb\u52a1i\u7684\\(w_i - l_i\\),\u6309\u7167\u5927\u5c0f\u964d\u5e8f\u8c03\u5ea6\u4efb\u52a1</li> <li>\u8ba1\u7b97\u6bcf\u4e2a\u4efb\u52a1i\u7684\\(\\dfrac{w_i}{l_i}\\),\u6309\u7167\u5927\u5c0f\u964d\u5e8f\u8c03\u5ea6\u4efb\u52a1</li> </ul> <p>\u968f\u4fbf\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u770b\u770b\u54ea\u4e2a\u65b9\u6cd5\u80fd\u5f97\u5230\u6b63\u786e\u7684\u7ed3\u679c\u3002\u6709\u4e24\u4e2a\u4efb\u52a1\uff0c\\(l_1 = 5, l_2 = 2, w_1= 3, w_2 = 1\\)</p> <ul> <li>\u6309\u7167\u7b2c\u4e00\u4e2a\u8d2a\u5fc3\u7b56\u7565\u8fdb\u884c\u8ba1\u7b97\uff0c\u5148\u6267\u884c\u4efb\u52a12\uff0c\u518d\u6267\u884c\u4efb\u52a11\uff0c\u603b\u65f6\u95f4\u4e3a\\(2 + 3 * 7 = 23\\)</li> <li>\u6309\u7167\u7b2c\u4e8c\u4e2a\u8d2a\u5fc3\u7b56\u7565\u8fdb\u884c\u8ba1\u7b97\uff0c\u5148\u6267\u884c\u4efb\u52a11\uff0c\u518d\u6267\u884c\u4efb\u52a12\uff0c\u603b\u65f6\u95f4\u4e3a\\(3 * 5 + 7 = 22\\)</li> </ul> <p>\u53d1\u73b0\u8fd8\u662f\u8d2a\u5fc3\u7b56\u75652\u66f4\u80dc\u4e00\u7b79</p> <p>\u3010<code>\u5b9a\u7406\uff1a\u8c03\u5ea6\u95ee\u9898\u7684\u8d2a\u5fc3\u9009\u62e9\u6027\u8d28</code>\u3011\u4ee4\\(i\\)\u662f\u5f53\u524d\\(w_i / l_i\\)\u6700\u5927\u7684\u4efb\u52a1\uff0c\u90a3\u4e48\u4e00\u5b9a\u5b58\u5728\u5c06\u4efb\u52a1\\(i\\)\u6392\u5728\u9996\u4f4d\u7684\u6700\u4f18\u8c03\u5ea6\u65b9\u5f0f</p> <p>\u8bc1\u660e\uff1a\u4f9d\u7136\u662f\u201c\u4ea4\u6362\u53c2\u6570\u6cd5\u201d\uff0c\u5047\u8bbe\u5b58\u5728\u4e00\u4e2a\u6700\u4f18\u89e3C\uff0c\u5982\u679c\u5b83\u7684\u7b2c\u4e00\u4e2a\u4efb\u52a1\u662f\\(i\\)\uff0c\u90a3\u4e48\u5b9a\u7406\u6210\u7acb\u3002\u5982\u679c\u5b83\u7684\u7b2c\u4e00\u4e2a\u4efb\u52a1\u662f\\(j\\)\uff0c\u4e14\\(i != j\\),\u90a3\u4e48\u6211\u4eec\u5c31\u628a\u4efb\u52a1\\(i\\)\u5f80\u524d\u79fb\u52a8\uff0c\u76f4\u5230\u7b2c\u4e00\u4f4d\u3002</p> <p>\u73b0\u5047\u8bbe\uff0c\u539f\u5148\u7684\u6700\u4f18\u89e3C\u4e2d\u4efb\u52a1\\(j\\)\u662f\u7b2c\u4e00\u4f4d\uff0c\u4efb\u52a1\\(i\\)\u662f\u7b2c\u4e8c\u4f4d\uff0c\u6700\u4f18\u89e3\\(C'\\)\u4e2d\u4efb\u52a1i\u662f\u7b2c\u4e00\u4f4d\uff0c\u4efb\u52a1j\u662f\u7b2c\u4e8c\u4f4d\u3002</p> <p><code>\u4e3a\u4ec0\u4e48\u4ec5\u4ec5\u8003\u8651\u7b2c\u4e00\u4f4d\u548c\u7b2c\u4e8c\u4f4d\u4ea4\u6362\u5462\uff1f\u5047\u5982j\uff0ci\u7684\u524d\u9762\u6709n\u4e2a\u4efb\u52a1\uff0c\u663e\u7136\u524dn\u4e2a\u4efb\u52a1\u7684\u52a0\u6743\u5b8c\u6210\u65f6\u95f4\u662f\u56fa\u5b9a\u7684\uff0c\u5bf9\u4e8e\u4efb\u52a1i\u548c\u4efb\u52a1j\uff0c\u65e0\u975e\u662f\u9700\u8981\u989d\u5916\u6dfb\u52a0\u4e00\u4e2a\u5e38\u6570\uff08\u524dn\u4e2a\u4efb\u52a1\u7684\u65f6\u95f4\u603b\u548c\uff09\u00d7\u6743\u91cd\uff0c\u53d1\u73b0\u6700\u7ec8\u76f8\u51cf\u7684\u65f6\u5019\u80fd\u591f\u6d88\u53bb</code></p> \\[ \\begin{aligned} &amp; t_1 = w_j \\times l_j + w_i \\times (l_j + l _i) \\\\ &amp; t_2 = w_i \\times l_i + w_j \\times (l_i + l_j) \\\\ &amp; \\Delta t = t_1 - t_2 = w_i \\times  l_j - w_j \\times l_i \\\\ &amp; \\dfrac{w_i}{l_i} &gt;= \\dfrac{w_j}{l_j}  \\rightarrow w_i \\times l_j &gt;= w_j \\times l_i \\rightarrow \\Delta t &gt;= 0 \\end{aligned} \\] <p>\u6545\u628a$i \\(\u5f80\u524d\u6362\uff0c\u52a0\u6743\u65f6\u95f4\u548c\u4e00\u5b9a\u4e0d\u4f1a\u53d8\u5927\uff0c\u6545\u4ecd\u7136\u4fdd\u8bc1\u6700\u4f18\u89e3\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4e0d\u65ad\u628a\\)i $\u5f80\u524d\u6362\uff0c\u76f4\u5230\u5b83\u5728\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u8fd9\u6837\u5c31\u8bc1\u660e\u4e86\u8d2a\u5fc3\u9009\u62e9\u6027\u8d28\u3002</p> <p>\u3010<code>\u5b9a\u7406\uff1a\u8c03\u5ea6\u95ee\u9898\u7684\u6700\u4f18\u5b50\u7ed3\u6784</code>\u3011\u5728\u8c03\u5ea6\u95ee\u9898S\u4e2d\uff0c\u6211\u4eec\u7528\u8d2a\u5fc3\u7b56\u7565\u9996\u5148\u9009\u62e9\u5177\u6709\u6700\u5927\\(w_i / l_i\\)\u7684\u4efb\u52a1\\(i\\) , \u4efb\u52a1\\(i\\)\u548c\u5269\u4f59\u5b50\u95ee\u9898\\(S_1\\)\uff08\u9664\u4efb\u52a1i\u5916\u4efb\u52a1\u4e2d\u5bfb\u627e\u4e00\u4e2a\u6700\u5c0f\u5316\u52a0\u6743\u5b8c\u6210\u65f6\u95f4\u4e4b\u548c\u7684\u89e3\uff09\u7684\u6700\u4f18\u89e3\\(C_1\\)\u4e00\u8d77\u6784\u6210\u539f\u95ee\u9898\u7684\u4e00\u4e2a\u6700\u4f18\u89e3\\(C\\)\u3002</p> <p>\u4f9d\u7136\u662f\u91c7\u7528\u53cd\u8bc1\u6cd5\uff1a</p> <p>\u5982\u679cC\u4e0d\u662f\u6700\u4f18\u89e3\uff0c\u4e00\u5b9a\u5b58\u5728\u6700\u4f18\u89e3\\(C'\\),\u5b83\u5bf9\u5e94\u7684\u52a0\u6743\u5b8c\u6210\u65f6\u95f4\u4e4b\u548c\\(T' &lt; T\\)</p> <p>\u6839\u636e\u8d2a\u5fc3\u9009\u62e9\u6027\u8d28\uff0c\u5982\u679c\u628a(C' \\(\u4e2d\u7684\\)i\\) \u4e0d\u65ad\u901a\u8fc7\u76f8\u90bb\u4ea4\u6362\u6362\u5230\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u60c5\u51b5\u4e00\u5b9a\u4e0d\u4f1a\u53d8\u5dee\uff0c\u56e0\u6b64\u8fd8\u662f\u6700\u4f18\u89e3\uff0c\u6211\u4eec\u5c06\u8fd9\u4e00\u65b0\u7684\u6700\u4f18\u89e3\u8bb0\u4e3a\\(C''\\)\u3002\u4e8e\u662f\\(C''\\) \u5728\u9009\u62e9\u4e86\\(i\\) \u4e4b\u540e\uff0c\u5269\u4e0b\u7684\u9009\u62e9\u5b9e\u9645\u4e0a\u4e5f\u662f\\(S1\\) \u7684\u4e00\u4e2a\u89e3\uff0c\u7531\u4e8e\\(T'' &lt;= T' &lt; T\\)\uff0c\u8fd9\u8868\u660e\\(C''\\) \u4e2d\u5bf9\u5e94\u7684\\(S1\\) \u7684\u89e3\u5fc5\u5b9a\u6bd4\\(C1\\) \u66f4\u597d\uff0c\u4f46\u6211\u4eec\u77e5\u9053\\(C1 \\(\u662f\u6700\u4f18\u89e3\uff0c\u56e0\u6b64\u5f97\u5230\u77db\u76fe\u3002\u6240\u4ee5\\)C1\\) \u548c$i $\u4e00\u8d77\u4e00\u5b9a\u6784\u6210\u4e86\u539f\u95ee\u9898\u7684\u4e00\u4e2a\u6700\u4f18\u89e3C\u3002</p>"},{"location":"ADS/9.%20Greedy%20Algorithms/#94-huffman-codes","title":"9.4 Huffman Codes","text":"<p>Huffman Codes\u2014\u2014for file compression</p> <p>\u3016Example\u3017 Suppose our text is a string of length 1000 that comprises the characters  a, u, x, and z.  Then it will take   8000  bits to store the string as 1000 one-byte characters.</p> <p>\u200b    We may encode the symbols as a = 00, u = 01, x = 10, z  = 11.   For example, aaaxuaxz is encoded as 0000001001001011.  Then the space taken by the string with length 1000 will be  2000 bits + space for code table. </p> <p>/ log C bits are needed in a standard encoding where C is the size of the character set /</p> <p>\u73b0\u5728\u5c06\u9891\u7387\u8003\u8651\u5728\u5185\uff1a</p> <p>In string  aaaxuaxz ,   f(a) = 4,  f(u) = 1,  f(x) = 2,  f(z) = 1.</p> <p>The size of the coded string can be reduced using variable-length codes, for example, a = 0, u = 110, x = 10, z  = 111. \\(\\rightarrow 00010110010111\\)</p> <p></p> <p><code>\u9632\u6b62\u51fa\u73b0\u6b67\u4e49\uff0c\u4e5f\u5c31\u662f\u9632\u6b62\u51fa\u73b0\u4e00\u4e2a\u5b57\u7b26\u7684\u7f16\u7801\u662f\u53e6\u4e00\u4e2a\u5b57\u7b26\u7684\u524d\u7f00</code></p> <pre><code>void Huffman ( PriorityQueue  heap[ ],  int  C )\n{   consider the C characters as C single node binary trees,\n     and initialize them into a min heap;\n     for ( i = 1; i &lt; C; i++ ) { \n        create a new node;\n        /* be greedy here */\n        delete root from min heap and attach it to left_child of node;\n        delete root from min heap and attach it to right_child of node;\n        weight of node = sum of weights of its children;\n        /* weight of a tree = sum of the frequencies of its leaves */\n        insert node into min heap;\n   }\n}\n</code></pre> <p>\u7b97\u6cd5\u601d\u8def\u662f\uff1a</p> <ol> <li>\u4ece\u6839\u636e\u9891\u7387\u5efa\u7acb\u7684\u6700\u5c0f\u5806\u4e2d\u53d6\u51fa\u5e76\u5220\u9664root\uff0c\u4f5c\u4e3a\u65b0node\u7684\u5de6\u513f\u5b50</li> <li>\u4ece\u6700\u5c0f\u5806\u4e2d\u53d6\u51fa\u5e76\u5220\u9664root\uff0c\u4f5c\u4e3a\u65b0node\u7684\u53f3\u513f\u5b50</li> <li>\u65b0node\u7684weight\u5c31\u662f\u4e24\u4e2a\u513f\u5b50\u7684weight\u4e4b\u548c</li> <li>\u6700\u540e\u5c06\u65b0\u7684node\u63d2\u5165\u5230\u6700\u5c0f\u5806\u4e2d</li> </ol> <p>\u5c06C\u4e2acharacter\uff0c\u4e0d\u65ad\u5730\u5408\u5e76\u6210\u4e00\u4e2a\uff0c\u9700\u8981\u6267\u884cC-1\u6b21</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\\(T = O(ClogC)\\)</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>1. \u9891\u7387\u6700\u4f4e\u7684\u4e24\u4f4d\u7f16\u7801\u53ea\u6709\u6700\u540e\u4e00\u4f4d\u4e0d\u540c</p> <p>2. \u9891\u7387\u6700\u9ad8\u7684\u653e\u5728\u6839\u7ed3\u70b9\u9644\u8fd1\uff08\u9ad8\u4f4d\uff09</p> <p></p> <p>\u3010<code>\u5b9a\u7406\uff1a\u8d2a\u5a6a\u9009\u62e9\u6027\u8d28</code>\u3011\\(C\\) \u4e3a\u4e00\u4e2a\u5b57\u6bcd\u8868\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5b57\u7b26\\(c \u2208 C \\(\u90fd\u6709\u4e00\u4e2a\u9891\u7387\\)c.freq\\)\u3002\u4ee4$x \\(\u548c\\)y $\u662fC \u4e2d\u9891\u7387\u6700\u4f4e\u7684\u4e24\u4e2a\u5b57\u7b26\u3002\u90a3\u4e48\u5b58\u5728C \u7684\u4e00\u4e2a<code>\u6700\u4f18\u524d\u7f00\u7801</code>\uff0cx \u548cy \u7684\u7801\u5b57\u957f\u5ea6\u76f8\u540c\uff0c\u4e14\u53ea\u6709\u6700\u540e\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u4e0d\u540c\u3002</p> <p>\u9891\u7387\u6700\u4f4e\u7684character\\(x,y\\)\u7684\u7f16\u7801\u957f\u5ea6\u76f8\u540c\uff0c\u4e14\u5177\u6709\u76f8\u540c\u524d\u7f00\uff0c\u8fd9\u4e2a\u7f16\u7801\u65b9\u5f0f\u4e00\u5b9a\u6700\u4f18\u89e3</p> <p>\u6211\u4eec\u7684\u601d\u8def\u662f\uff1a\u4ee4\\(T\\)\u8868\u793a\u4efb\u610f\u4e00\u4e2a\u6700\u4f18\u524d\u7f00\u7801\u5bf9\u5e94\u7684\u7f16\u7801\u6811\uff0c\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\uff0c\u5f97\u5230\u53e6\u4e00\u4e2a\u6700\u4f18\u524d\u7f00\u7801\u7684\u7f16\u7801\u6811\\(T'\\),\u4f7f\u5f97\u5728\u65b0\u6811\u4e2d\uff0cx\u548cy\u662f\u6df1\u5ea6\u6700\u5927\u7684\u53f6\u7ed3\u70b9\uff0c\u4e14\u4e3a\u5144\u5f1f\u8282\u70b9\uff0c\u8fd9\u610f\u5473\u7740x\u548cy\u7684\u7f16\u7801\u5177\u6709\u76f8\u540c\u957f\u5ea6\uff0c\u4e14\u53ea\u6709\u6700\u540e\u4e00\u4f4d\u4e0d\u540c\u3002</p> <p>\u7ecf\u9a8c\u8bc1\uff0c\u663e\u7136\\(Cost(T') &lt;= Cost(T)\\),\u65b0\u7684\u6811\u7684\u4ee3\u4ef7\u5c0f\u4e8e\u7b49\u4e8e\u539f\u6765\u7684\u6811\uff0c\u5f97\u5230\u65b0\u7684\u6700\u4f18\u89e3</p> <p></p> <p>\u3010<code>\u5b9a\u7406\uff1a\u6700\u4f18\u5b50\u7ed3\u6784</code>\u3011\\(C\\) \u4e3a\u4e00\u4e2a\u5b57\u6bcd\u8868\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5b57\u7b26\\(c \u2208 C\\) \u90fd\u6709\u4e00\u4e2a\u9891\u7387\\(c.freq\\)\u3002\u4ee4\\(x \\(\u548c\\)y\\)\u8868\u793a\\(C\\) \u4e2d\u9891\u7387\u6700\u4f4e\u7684\u4e24\u4e2a\u5b57\u7b26\u3002\u4ee4\\(C'\\) \u4e3a\\(C\\) \u53bb\u6389\u5b57\u7b26\\(x \\(\u548c\\)y\\)\uff0c\u52a0\u5165\u4e00\u4e2a\u65b0\u5b57\u7b26\\(z \\(\u540e\u7684\u5b57\u6bcd\u8868\u3002\u6211\u4eec\u7ed9\\)C' \\(\u4e5f\u5b9a\u4e49**\u9891\u7387\u96c6\u5408**\uff0c\u4e0d\u540c\u4e4b\u5904\u53ea\u662f\\)z.freq = x.freq + y.freq\\)\u3002\u4ee4\\(T'\\) \u4e3a\\(C' \\(\u7684\u4efb\u610f\u4e00\u4e2a\u6700\u4f18\u524d\u7f00\u6811\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c06\\)T' \\(\u4e2d\u53f6\u7ed3\u70b9\\)z\\) \u66ff\u6362\u4e3a\u4e00\u4e2a\u4ee5\\(x \\(\u548c\\)y\\) \u4e3a\u5b69\u5b50\u7684\u5185\u90e8\u7ed3\u70b9\u5f97\u5230\u4e00\u4e2a\\(C \\(\u7684\u4e00\u4e2a\u6700\u4f18\u524d\u7f00\u7801\u6811\\)T\\)\u3002</p> <p>\u5982\u679c\u4e0a\u9762\u8fd9\u4e00\u547d\u9898\u6b63\u786e\uff0c\u90a3\u4e48\u6211\u4eec\u6bcf\u6b21\u5408\u5e76\\(x\\) \u548c\\(y\\) \u5f97\u5230\\(z \\(\u4e4b\u540e\uff0c\u6309\u7167\u6ca1\u6709\\)x\\) \u548c\\(y\\)\uff0c\u53ea\u6709\\(z \\(\u7684\u5b50\u95ee\u9898\u7ee7\u7eed\u63a8\u8fdb\u6211\u4eec\u7684\u8d2a\u5fc3\u7b97\u6cd5\u53ef\u4ee5\u5f97\u5230\\)T'\\) \u8fd9\u4e00\u5b50\u95ee\u9898\u7684\u6700\u4f18\u89e3\uff0c\u5b83\u548c\u5408\u5e76\\(x\\) \u548c\\(y\\) \u5f97\u5230\\(z\\) \u8fd9\u4e00\u524d\u9762\u5df2\u7ecf\u9a8c\u8bc1\u6b63\u786e\u6027\u7684\u8d2a\u5fc3\u9009\u62e9\u4e00\u8d77\uff0c\u5c31\u6784\u6210\u4e86\u6574\u4f53\u7684\u6700\u4f18\u89e3\u3002</p> <p><code>\u53cd\u8bc1\u6cd5\uff1a</code>\u8bb0\\(Cost(T)\\)\u4e3a\u6811T\u7684\u4ee3\u4ef7\uff0c\u5373\u6240\u6709\u5b57\u6bcd\u7684\u7f16\u7801\u957f\u5ea6\u4e4b\u548c\u3002</p> <p>\\(T'\\)\u662f\u7531\\(T\\)\u5220\u9664\\(x\uff0cy\\)\u7ed3\u70b9\uff0c\u66ff\u6362\u4e3a\\(z\\)\u7ed3\u70b9\u5f97\u5230\u7684\uff0c\u5176\u4e2d\\(z.freq = x.freq + y.freq\\),\u8fd9\u4e5f\u5c31\u610f\u5473\u7740\uff0c\u5c06\\(x,y\\)\u7684\u7f16\u7801\u957f\u5ea6\u51cf\u4e00\uff0c\u6811\u7684\u6df1\u5ea6-1\uff0c\u6240\u4ee5\\(Cost(T') = Cost(T) - x.freq -y.freq\\)\u3002</p> <p>\u73b0\u5728\u5047\u8bbe\\(T\\)\u4e0d\u662fC\u7684\u6700\u4f18\u524d\u7f00\u7f16\u7801\u6811\uff0c\u5b58\u5728\u6811\\(T''\\)\u4f7f\u5f97\\(Cost(T'') &lt; Cost(T)\\),\u5bf9\\(T''\\)\u540c\u6837\u8fdb\u884c\u5220\u9664\\(x,y\\)\u7ed3\u70b9\uff0c\u66ff\u6362\u4e3a\\(z\\)\u7ed3\u70b9\u7684\u64cd\u4f5c\u5f97\u5230\u65b0\u7684\u6811\\(T'''\\) $$ Cost(T''') = Cost(T'') - x.freq - y.freq &lt; Cost(T) - x.freq - y.freq\\ Cost(T') = Cost(T) - x.freq - y.freq\\ \\rightarrow Cost(T''') &lt; Cost(T') $$ \u8fd9\u4e0e\\(T'\\)\u662f\\(C'\\)\u7684\u6700\u4f18\u524d\u7f00\u7f16\u7801\u6811\u77db\u76fe\uff0c\u6240\u4ee5\\(T\\)\u4e00\u5b9a\u662f\\(C\\)\u7684\u6700\u4f18\u524d\u7f00\u7f16\u7801\u6811\u3002</p>"},{"location":"ADS/9.%20Greedy%20Algorithms/#95-\u4e60\u9898\u96c6","title":"9.5 \u4e60\u9898\u96c6","text":"<ol> <li>Greedy algorithm works only if the local optimum is equal to the global optimum.</li> </ol> <p><code>T\uff0c\u53ea\u6709\u5728\u5c40\u90e8\u89e3\u548c\u5168\u5c40\u89e3\u76f8\u7b49\u7684\u65f6\u5019\u53ef\u4ee5\u7528</code></p> <ol> <li>In a greedy algorithm, a decision made in one stage is not changed in a later stage.</li> </ol> <p><code>T\uff0c\u505a\u51fa\u9009\u62e9\u540e\u4e0d\u4f1a\u6539\u53d8</code></p> <ol> <li>Let \\(C\\) be an alphabet in which each character \\(c\\) in \\(C\\) has frequency \\(c.freq\\).  If the size of \\(C\\) is \\(n\\),  the length of the optimal prefix code for any character \\(c\\) is not greater than \\(n-1\\).   </li> </ol> <p><code>T\uff0c \u6700\u957f\u60c5\u51b5\u4e5f\u5c31\u662fskew tree\uff0c\u6700\u540e\u4e00\u5c42\u5fc5\u6709\u4e24\u4e2a\u7ed3\u70b9</code></p> <ol> <li>\u54c8\u592b\u66fc\u7f16\u7801\u662f\u4e00\u79cd\u6700\u4f18\u7684\u524d\u7f00\u7801\u3002\u5bf9\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5b57\u7b26\u96c6\u53ca\u5176\u5b57\u7b26\u9891\u7387\uff0c\u5176\u54c8\u592b\u66fc\u7f16\u7801\u4e0d\u4e00\u5b9a\u662f\u552f\u4e00\u7684\uff0c\u4f46\u662f\u6bcf\u4e2a\u5b57\u7b26\u7684\u54c8\u592b\u66fc\u7801\u7684\u957f\u5ea6\u4e00\u5b9a\u662f\u552f\u4e00\u7684\u3002</li> </ol> <p><code>F, \u54c8\u592b\u66fc\u5b57\u7b26\u7684\u9891\u7387\u76f8\u540c\u65f6\u6bcf\u4e2a\u5b57\u7b26\u7684\u7801\u957f\u4e0d\u662f\u786e\u5b9a\u7684\u3002</code></p> <ol> <li>Consider the problem of making change for \\(n\\) cents using the fewest number of coins. Assume that each coin's value is an integer.The coins of the lowest denomination\uff08\u9762\u989d\uff09 is the cent.</li> </ol> <p>(I) Suppose that the available coins are quarters (25 cents), dimes (10 cents), nickels (5 cents), and pennies (1 cent). The greedy algorithm always yields an optimal solution.</p> <p>(II) Suppose that the available coins are in the denominations that are powers of c, that is, the denominations are \\(c^0\\), \\(c^1\\), ..., \\(c^k\\) for some integers \\(c&gt;1\\) and \\(k&gt;=1\\). The greedy algorithm always yields an optimal solution.</p> <p>(III) Given any set of \\(k\\) different coin denominations which includes a penny (1 cent) so that there is a solution for every value of \\(n\\), greedy algorithm always yields an optimal solution.</p> <p>Which of the following is correct?</p> <ul> <li> <p>A. Statement (I) is false.</p> </li> <li> <p>B. Statement (II) is false.</p> </li> <li> <p><code>C. Statement (III) is false.</code></p> </li> <li> <p>D. All of the three statements are correct.</p> </li> </ul> <p>c. Let the coin denominations be \\(\\{1, 3, 4\\}\\), and the value to make change for be \\(6\\). The greedy solution would result in the collection of coins \\(\\{1, 1, 4\\}\\) but the optimal solution would be \\(\\{3, 3\\}\\).**</p> <ol> <li> <p>Consider the problem of making change for \\(n\\) cents using the fewest number of coins. Assume that each coin's value is an integer.</p> <p>a. Describe a greedy algorithm to make change consisting of quarters, dimes, nickels, and pennies. Prove that your algorithm yields an optimal solution.</p> <p>b. Suppose that the available coins are in the denominations that are powers of \\(c\\), i.e., the denominations are \\(c^0, c^1, \\ldots, c^k\\) for some integers \\(c &gt; 1\\) and \\(k \\ge 1\\). Show that the greedy algorithm always yields an optimal solution.</p> <p>c. Give a set of coin denominations for which the greedy algorithm does not yield an optimal solution. Your set should include a penny so that there is a solution for every value of \\(n\\).</p> <p>d. Give an \\(O(nk)\\)-time algorithm that makes change for any set of \\(k\\) different coin denominations, assuming that one of the coins is a penny.</p> </li> </ol> <p>a. Always give the highest denomination coin that you can without going over. Then, repeat this process until the amount of remaining change drops to \\(0\\).</p> <p>b. Given an optimal solution \\((x_0, x_1, \\dots, x_k)\\) where \\(x_i\\) indicates the number of coins of denomination \\(c_i\\) . We will first show that we must have \\(x_i &lt; c\\) for every \\(i &lt; k\\). Suppose that we had some \\(x_i \\ge c\\), then, we could decrease \\(x_i\\) by \\(c\\) and increase \\(x_{i + 1}\\) by \\(1\\). This collection of coins has the same value and has \\(c \u2212 1\\) fewer coins, so the original solution must of been non-optimal. This configuration of coins is exactly the same as you would get if you kept greedily picking the largest coin possible. This is because to get a total value of \\(V\\), you would pick \\(x_k = \\lfloor V c^{\u2212k} \\rfloor\\) and for \\(i &lt; k\\), \\(x_i\\lfloor (V\\mod c^{i + 1})c^{-i} \\rfloor\\). This is the only solution that satisfies the property that there aren't more than \\(c\\) of any but the largest denomination because the coin amounts are a base \\(c\\) representation of \\(V\\mod c^k\\).</p> <p>c. Let the coin denominations be \\(\\{1, 3, 4\\}\\), and the value to make change for be \\(6\\). The greedy solution would result in the collection of coins \\(\\{1, 1, 4\\}\\) but the optimal solution would be \\(\\{3, 3\\}\\).</p> <p>d. See algorithm \\(\\text{MAKE-CHANGE}(S, v)\\) which does a dynamic programming solution. Since the first forloop runs \\(n\\) times, and the inner for loop runs \\(k\\) times, and the later while loop runs at most \\(n\\) times, the total running time is \\(O(nk)\\).</p> <p> </p>"},{"location":"ADS/9.%20Greedy%20Algorithms/#951-huffman","title":"9.5.1 Huffman","text":"<p>\u5224\u65ad\u9898</p> <ol> <li>Given a Huffman tree for N (\u22652) characters, all with different weights. The weight of any non-leaf node must be no less than the weight of any node on the next lower level.    T\uff0c\u975e\u53f6\u5b50\u7ed3\u70b9\u7684weight\u662f\u5b83\u7684\u513f\u5b50\u7684weight\u4e4b\u548c</li> </ol> <p>\u9009\u62e9\u9898</p> <ol> <li> <p>\u5b9a\u4e0d\u5c0f\u4e8e\u4e0b\u4e00\u5c42\u4efb\u4e00\u7ed3\u70b9\u7684\u6743\u503c    <code>D   \u8be5\u6811\u4e00\u5b9a\u662f\u4e00\u68f5\u5b8c\u5168\u4e8c\u53c9\u6811</code></p> </li> <li> <p>Given a piece of text which consists of characters {a, b, c, d}, with the frequencies of occurrence being {4, 2, 5, 1}, respectively. How many bits are saved by Huffman code comparing to the equal-length code?    <pre><code>   12\n /   \\   \n    5(0) 7\n     / \\\n       3   4(11)\n      /\\\n     1(100)  2(101)\n</code></pre></p> </li> </ol> <p>\u8ba1\u7b97\u7684\u662f\u5e26\u6743\u8def\u5f84\u957f\u5ea6\u4e4b\u5dee\uff1a\\(12 \\times 2 - 4 \\times 2 - 3 \\times 3 - 5 \\times 1 = 24 - 22 = 2\\)</p> <ol> <li> <p>\u54c8\u592b\u66fc\u6811\u662fn\u4e2a\u5e26\u6743\u53f6\u5b50\u7ed3\u70b9\u6784\u6210\u7684\u6240\u6709\u4e8c\u53c9\u6811\u4e2d\uff08\uff09\u6700\u5c0f\u7684\u4e8c\u53c9\u6811\u3002    \u9009\u9879    A    \u6743\u503c    B    \u9ad8\u5ea6    <code>C \u5e26\u6743\u8def\u5f84\u957f\u5ea6(weight * \u7f16\u7801\u6570)</code>    D    \u5ea6</p> </li> <li> <p>\u5173\u4e8eHuffamn\u6811\uff0c\u5982\u4e0b\u8bf4\u6cd5\u9519\u8bef\u7684\u662f\uff08 \uff09    \u9009\u9879    A    \u591a\u4e8e1\u4e2a\u53f6\u5b50\u7ed3\u70b9\u7684Huffman\u6811\u4e2d\u4e0d\u5b58\u5728\u5ea6\u4e3a1\u7684\u7ed3\u70b9    B    Huffman\u6811\u4e2d\uff0c\u4efb\u610f\u8c03\u6574\u7ed3\u70b9\u5de6\u53f3\u5b69\u5b50\u7684\u987a\u5e8f\uff0c\u4e0d\u5f71\u54cd\u5e26\u6743\u8def\u5f84\u957f\u5ea6    <code>C Huffamn\u6811\u7684\u5e26\u6743\u8def\u5f84\u957f\u5ea6\u6700\u5927</code>    D    Huffman\u6811\u4e2d\uff0c\u6743\u503c\u8d8a\u5927\u7684\u53f6\u5b50\u7ed3\u70b9\u79bb\u6839\u7ed3\u70b9\u8d8a\u8fd1</p> </li> <li> <p>\u8bbe\u7ed9\u5b9a\u6743\u503c\u603b\u6570\u6709n \u4e2a,\u5176\u54c8\u592b\u66fc\u6811\u7684\u7ed3\u70b9\u603b\u6570\u4e3a(\\(2n - 1\\))</p> </li> <li> <p>\u8bbe\u54c8\u592b\u66fc\u6811\u4e2d\u6709199\u4e2a\u7ed3\u70b9\uff0c\u5219\u8be5\u54c8\u592b\u66fc\u6811\u4e2d\u6709\uff08100\uff09\u4e2a\u53f6\u5b50\u7ed3\u70b9\u3002</p> </li> <li> <p>\u7ed9\u5b9a\u4e00\u6bb5\u6587\u672c\u4e2d\u76844\u4e2a\u5b57\u7b26(a, b, c, d)\u3002\u8bbea\u548cb\u5177\u6709\u6700\u4f4e\u7684\u51fa\u73b0\u9891\u7387\u3002\u4e0b\u5217\u54ea\u7ec4\u7f16\u7801\u662f\u8fd9\u6bb5\u6587\u672c\u53ef\u80fd\u7684\u54c8\u592b\u66fc\u7f16\u7801\uff1f    \u9009\u9879    <code>A   a: 000, b:001, c:01, d:1</code>    B    a: 000, b:001, c:01, d:11    C    a: 000, b:001, c:10, d:1    D    a: 010, b:001, c:01, d:1</p> </li> <li> <p>\u7ed9\u5b9a\u4e00\u6bb5\u6587\u672c\u4e2d\u7684 4 \u4e2a\u5b57\u7b26 (u,v,w,x) \u53ca\u5176\u51fa\u73b0\u9891\u7387 (fu ,fv ,fw ,fx )\u3002\u82e5\u5bf9\u5e94\u7684\u54c8\u592b\u66fc\u7f16\u7801\u4e3a u: 00, v: 010, w: 011, x: 1\uff0c\u5219\u4e0b\u5217\u54ea\u7ec4\u9891\u7387\u53ef\u80fd\u5bf9\u5e94 (fu ,fv ,fw ,fx )\uff1f    \u9009\u9879    A    15, 23, 16, 45    <code>B   30, 21, 12, 33</code>    C    41, 12, 20, 32    D    55, 22, 18, 46</p> </li> </ol>"},{"location":"ADS/Readme/","title":"Readme","text":"<p> \u7ea6 17 \u4e2a\u5b57 </p> <p>\u8fd9\u91cc\u662f\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u5206\u6790\u7684\u7b14\u8bb0</p>"},{"location":"CV/Lecture1_Introduction/","title":"Introduction","text":"<p> \u7ea6 962 \u4e2a\u5b57  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 5 \u5206\u949f</p>"},{"location":"CV/Lecture1_Introduction/#\u8ba1\u7b97\u673a\u89c6\u89c9\u8d77\u6e90\u751f\u7269\u795e\u7ecf\u4fe1\u53f7\u7684\u4f20\u8f93","title":"\u8ba1\u7b97\u673a\u89c6\u89c9\u8d77\u6e90\uff1a\u751f\u7269\u795e\u7ecf\u4fe1\u53f7\u7684\u4f20\u8f93","text":"<p>\u5b9e\u9645\u4e0a\u5f88\u96be\u627e\u5230\u4e00\u4e2a\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u8d77\u6e90\uff0c\u56e0\u4e3a\u6839\u636e Justin \u6240\u8bf4\uff0c\u6bcf\u4e00\u4e2a\u5de5\u4f5c\u90fd\u6709\u5176\u4e4b\u524d\u7684\u5de5\u4f5c\uff0c\u6bcf\u4e2a\u4eba\u90fd\u4f1a\u6536\u5230\u4e4b\u524d\u5de5\u4f5c\u7684\u542f\u53d1\uff0c\u6240\u4ee5\u53ea\u80fd\u627e\u4e00\u4e2a\u53ef\u4ee5\u8bf4\u6709\u5212\u65f6\u4ee3\u610f\u4e49\u7684\u8282\u70b9\u6765\u4f5c\u4e3a\u6240\u8c13\u7684\u8d77\u6e90\uff0c\u4e2d\u8282\u70b9\u5c31\u662f 1959 \u5e74\u7684\u5b9e\u9a8c\uff0c</p> <ul> <li>1959 \u5e74\u7684\u5b9e\u9a8c\u5185\u5bb9\uff0c\u5c31\u662f\u751f\u7269\u5b66\u5bb6\u60f3\u4e86\u89e3\u751f\u7269\u7684\u89c6\u89c9\u795e\u7ecf\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u4ed6\u4eec\u5c06\u4e00\u4e9b\u7535\u6781\u63d2\u5165\u732b\u7684\u89c6\u89c9\u76ae\u5c42\u4e2d\uff0c\u53ef\u4ee5\u7528\u6765\u8bb0\u5f55\u89c6\u89c9\u76ae\u5c42\u4e2d\u5355\u4e2a\u795e\u7ecf\u5143\u7684\u6d3b\u52a8\uff0c\u4ed6\u4eec\u5411\u732b\u5c55\u793a\u4e0d\u540c\u7684\u5e7b\u706f\u7247\u3002</li> </ul> <p>\u4ed6\u4eec\u7684\u5047\u8bbe\uff1a\u89c6\u89c9\u76ae\u5c42\u4e2d\u4e0d\u540c\u795e\u7ecf\u5143\u4f1a\u5bf9\u4e0d\u540c\u7c7b\u578b\u7684\u89c6\u89c9\u523a\u6fc0\u505a\u51fa\u54cd\u5e94\u3002\u6240\u4ee5\u4ed6\u4eec\u5411\u732b\u5c55\u793a\u4e0d\u540c\u7684\u7c7b\u578b\u7684\u56fe\u50cf\uff0c\u6765\u8bb0\u5f55\u732b\u7684\u795e\u7ecf\u5143\u5bf9\u6b64\u505a\u51fa\u4ec0\u4e48\u54cd\u5e94\u3002</p> <p>\u6b64\u9879\u7814\u7a76\u5728 1981 \u5e74\u83b7\u5f97\u8bfa\u8d1d\u5c14\u751f\u7269\u5b66\u5956\uff0c\u4e5f\u6210\u4e3a\u8ba1\u7b97\u673a\u89c6\u89c9\u9886\u57df\u7684\u5f00\u521b\u9f3b\u7956</p>"},{"location":"CV/Lecture1_Introduction/#\u4e00\u7bc7\u5173\u4e8e\u8ba1\u7b97\u673a\u89c6\u89c9\u7684\u535a\u58eb\u8bba\u6587","title":"\u4e00\u7bc7\u5173\u4e8e\u8ba1\u7b97\u673a\u89c6\u89c9\u7684\u535a\u58eb\u8bba\u6587","text":"<p>1963 \u5e74\uff0cLarry Robert \u4ece MIT \u6bd5\u4e1a\uff0c\u5176\u535a\u58eb\u8bba\u6587\u53ef\u4ee5\u79f0\u5f97\u4e0a\u662f\u7b2c\u4e00\u7bc7\u8ba1\u7b97\u673a\u89c6\u89c9\u65b9\u9762\u7684\u535a\u58eb\u8bba\u6587\uff0c\u5f53\u7136\u90a3\u65f6\u5019\u60f3\u4f7f\u7528\u8ba1\u7b97\u673a\u8fdb\u884c\u8ba1\u7b97\u662f\u975e\u5e38\u9ebb\u70e6\u7684\uff0c\u5305\u62ec\u4f7f\u7528\u76f8\u673a\u8fdb\u884c\u62cd\u6444\u4e5f\u9ebb\u70e6\uff0c\u6240\u4ee5\u8bba\u6587\u5f88\u5927\u4e00\u90e8\u5206\u90fd\u662f\u5728\u56f4\u7ed5\u6444\u5f71\u4fe1\u606f\u5982\u4f55\u8f93\u5165\u5230\u8ba1\u7b97\u673a\u4e2d\uff0c\u5f53\u7136\uff0c\u5176\u4e2d\u4e5f\u63d0\u5230\u4e86\u5f88\u591a\u5173\u4e8e\u8fb9\u7f18\u68c0\u6d4b\u65b9\u9762\u7684\u65b9\u6cd5</p> <p>\u5728 1966 \u5e74\uff0cMIT \u7684\u4e3e\u529e\u4e86\u4e00\u4e2a\u89c6\u89c9\u590f\u4ee4\u8425\uff0c\u60f3\u4e0e\u4e94\u4e2a\u672c\u79d1\u751f\u4e00\u8d77\u5728\u4e00\u4e2a\u590f\u5929\u5b9e\u73b0\u8ba1\u7b97\u673a\u89c6\u89c9\u7684\u5185\u5bb9\uff0c\u5f53\u7136\uff0c\u76f4\u5230\u73b0\u5728\uff0c\u8fd9\u4e2a\u4efb\u52a1\u90fd\u6ca1\u6709\u5706\u6ee1\u5b8c\u6210</p> <p>\u8fd9\u4e2a\u65f6\u5019\uff0c\u53ef\u4ee5\u68c0\u6d4b\u8fb9\u7f18\u548c\u7b80\u5355\u51e0\u4f55\u5f62\u72b6</p>"},{"location":"CV/Lecture1_Introduction/#\u65b0\u9636\u6bb5","title":"\u65b0\u9636\u6bb5","text":"<ul> <li>1970 \u5e74\u540e\uff0c\u5165\u95e8\u5f00\u59cb\u5bf9\u7269\u4f53\u8bc6\u522b\u9886\u57df\u611f\u5174\u8da3\uff0c\u5f00\u59cb\u601d\u8003\u6784\u5efa\u8ba1\u7b97\u673a\u7cfb\u7edf</li> </ul> <p>\u7269\u4f53\u8bc6\u522b\u9886\u57df\u5f00\u59cb\u5c1d\u8bd5\u65b0\u7684\u65b9\u5411\uff0c\u8bc6\u522b\u66f4\u590d\u6742\u7684\u7269\u4f53\u2014\u2014\u6bd4\u5982\u4eba\uff0c\u6240\u4ee5\u6709\u4e86\u4e00\u4e9b\u5173\u4e8e\u5706\u67f1\u4f53\u548c\u5706\u5f62\u7ed3\u6784\u7684\u5de5\u4f5c\uff0c\u8fd9\u4e9b\u5c1d\u8bd5\u5c06\u4eba\u8bc6\u522b\u4e3a\u5e26\u6709\u67d0\u79cd\u5df2\u77e5</p> <p>\u62d3\u6251\u7ed3\u6784\u7684\u521a\u6027\u90e8\u4ef6\u7684\u53ef\u53d8\u5f62\u914d\u7f6e</p> <ul> <li>1980 \u5e74\u4ee3\uff0c\u8ba1\u7b97\u80fd\u529b\u5f00\u59cb\u53d1\u5c55\uff08camera \u53d1\u5c55\uff09\uff0c\u4e3b\u9898\u662f\u901a\u8fc7\u8fb9\u7f18\u68c0\u6d4b\u6765\u8bc6\u522b\u7269\u4f53</li> </ul> <p>John Canny \u548c David Lowe \u7b49\u4eba\u53d1\u8868\u4e86\u4e00\u4e9b\u5173\u4e8e\u5f3a\u5927\u7684\u8fb9\u7f18\u68c0\u6d4b\u65b9\u6cd5\u65b9\u9762\u7684\u8bba\u6587</p> <p>\u56fe\u7247\u4e0e\u6a21\u677f\u56fe\u7247\u7684 matching</p> <ul> <li>1990 \u5e74\u4ee3\uff0c\u4eba\u4eec\u60f3\u6784\u5efa\u66f4\u590d\u6742\u7684\u56fe\u50cf\u548c\u573a\u666f\uff0c\u4e3b\u9898\uff1a\u5c1d\u8bd5\u901a\u8fc7\u5206\u7ec4\u6765\u8bc6\u522b\u5bf9\u8c61</li> <li>2000 \u5e74\uff0c<code>sift</code> \u8f93\u5165\u56fe\u7247\uff0c\u68c0\u67e5\u56fe\u50cf\u4e2d\u5173\u952e\u70b9\u548c\u4e0d\u540c\u4f4d\u7f6e,\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5173\u952e\u70b9\uff0c\u6211\u4eec\u4f7f\u7528\u7279\u5f81\u5411\u91cf\u8868\u793a\u5173\u952e\u70b9\u7684 appearance\uff0c\u901a\u8fc7\u5bf9\u7279\u5f81\u5411\u91cf\u7f16\u7801\u4e0d\u540c\u7c7b\u578b\u7684\u4e0d\u53d8\u6027\uff08invariances\uff09\uff0c\u53ef\u4ee5\u5b9e\u73b0\u56fe\u50cf\u7684\u65cb\u8f6c\uff0c\u4eae\u6697\u8c03\u6574\uff08\u70b9\u5bf9\u70b9\u7684\u6620\u5c04\uff09</li> <li>2001 \u5e74\uff0cViola and Jones\uff0c\u63d0\u51fa\u56fe\u50cf\u4eba\u8138\u8bc6\u522b\u7684\u7b97\u6cd5</li> <li>\u4f7f\u7528 machine learning \u548c computer vision\uff0cthe boosted decision trees \u80fd\u591f\u5b66\u4e60\u7279\u5f81\u7684\u6b63\u786e\u7ec4\u5408</li> <li>\u5546\u4e1a\u5316\u5feb\uff0c\u6570\u7801\u76f8\u673a\u81ea\u52a8\u5bf9\u7126</li> </ul>"},{"location":"CV/Lecture1_Introduction/#\u6df1\u5ea6\u5b66\u4e60\u7a81\u7834\u65f6\u523b","title":"\u6df1\u5ea6\u5b66\u4e60\u7a81\u7834\u65f6\u523b","text":"<ul> <li> <p>imageNet\uff1a\u5916\u5305\u6570\u636e\u6807\u6ce8\uff0c\u6570\u636e\u96c6\u5927</p> </li> <li> <p>2012 \u5e74\uff0cAlexNet \u7684\u51fa\u73b0\uff0c\u6807\u5fd7\u7740\u6df1\u5ea6\u5b66\u4e60\u7684\u8bde\u751f\uff0c\u5c06\u56fe\u50cf\u5206\u7c7b\u7684\u9519\u8bef\u7387\u4ece 25 \u964d\u4f4e\u5230\u4e86 16\uff0c\u8fd9\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u8fdb\u6b65</p> </li> </ul>"},{"location":"CV/Lecture1_Introduction/#\u53d1\u5c55\u5386\u53f2","title":"\u53d1\u5c55\u5386\u53f2","text":"<p>Maxpooling\uff1aYamaguchi \u9996\u6b21\u63d0\u51fa\u7528\u4e8e\u58f0\u97f3\u4fe1\u53f7\u8bc6\u522b\uff081990\uff09</p> <p>LeNet\uff1a\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u9f3b\u7956\uff0c\u53ef\u4ee5\u8bc6\u522b 32x32 \u7684\u7f51\u7edc\uff0c1998</p> <p>AlexNet\uff1a\u9996\u4e2a GPU \u4f18\u5316\u7684\u6df1\u5c42 CNN\uff0c\u5728\u8fd9\u4e4b\u524d\u786c\u4ef6\u7684\u7b97\u529b\u65e0\u6cd5\u652f\u6301\u795e\u7ecf\u7f51\u7edc\u7684\u8bad\u7ec3\uff0c\u6240\u4ee5\u5927\u5bb6\u611f\u89c9\u8fd9\u662f\u4e00\u4e2a\u5f88\u6162\u7684\u6a21\u578b\uff0c\u6240\u4ee5 AlexNet \u4e5f\u662f\u8fd9\u4e2a\u5c40\u9762\u7684\u5206\u754c\u70b9</p>"},{"location":"CV/Lecture2_Image_Classification/","title":"Image_Classification","text":"<p> \u7ea6 8023 \u4e2a\u5b57  63 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 41 \u5206\u949f</p>"},{"location":"CV/Lecture2_Image_Classification/#\u6982\u5ff5","title":"\u6982\u5ff5","text":"<p>\u76ee\u6807\uff1a\u8fd9\u4e00\u8282\u6211\u4eec\u5c06\u4ecb\u7ecd\u56fe\u50cf\u5206\u7c7b\u95ee\u9898\u3002<code>\u6240\u8c13\u56fe\u50cf\u5206\u7c7b\u95ee\u9898\uff0c\u5c31\u662f\u5df2\u6709\u56fa\u5b9a\u7684\u5206\u7c7b\u6807\u7b7e\u96c6\u5408\uff0c\u7136\u540e\u5bf9\u4e8e\u8f93\u5165\u7684\u56fe\u50cf\uff0c\u4ece\u5206\u7c7b\u6807\u7b7e\u96c6\u5408\u4e2d\u627e\u51fa\u4e00\u4e2a\u5206\u7c7b\u6807\u7b7e\uff0c\u6700\u540e\u628a\u5206\u7c7b\u6807\u7b7e\u5206\u914d\u7ed9\u8be5\u8f93\u5165\u56fe\u50cf\uff0c\u6216\u8005\u7b80\u5355\u7684\u8bf4\uff0c\u5c31\u662f\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u56fe\u50cf\uff0c\u9884\u6d4b\u5b83\u5c5e\u4e8e\u54ea\u4e2a\u7c7b\u522b\uff08\u6216\u8005\u7ed9\u51fa\u5c5e\u4e8e\u4e00\u7cfb\u5217\u4e0d\u540c\u6807\u7b7e\u7684\u53ef\u80fd\u6027\uff09\u3002</code> \u867d\u7136\u770b\u8d77\u6765\u633a\u7b80\u5355\u7684\uff0c\u4f46\u8fd9\u53ef\u662f\u8ba1\u7b97\u673a\u89c6\u89c9\u9886\u57df\u7684\u6838\u5fc3\u95ee\u9898\u4e4b\u4e00\uff0c\u5e76\u4e14\u6709\u7740\u5404\u79cd\u5404\u6837\u7684\u5b9e\u9645\u5e94\u7528\u3002\u5728\u8fd9\u91cc\u6211\u4eec\u9762\u4e34\u7684\u6311\u6218\u5c31\u662f \u8bed\u4e49\u9e3f\u6c9f(semantic gap)\u3002\u5728\u540e\u9762\u7684\u8bfe\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u8ba1\u7b97\u673a\u89c6\u89c9\u9886\u57df\u4e2d\u5f88\u591a\u770b\u4f3c\u4e0d\u540c\u7684\u95ee\u9898\uff08\u6bd4\u5982\u7269\u4f53\u68c0\u6d4b\u548c\u5206\u5272\uff09\uff0c\u90fd\u53ef\u4ee5\u88ab\u5f52\u7ed3\u4e3a\u56fe\u50cf\u5206\u7c7b\u95ee\u9898\u3002</p> <p>\u4f8b\u5b50\uff1a\u4ee5\u4e0b\u56fe\u4e3a\u4f8b\uff0c\u56fe\u50cf\u5206\u7c7b\u6a21\u578b\u8bfb\u53d6\u8be5\u56fe\u7247\uff0c\u5e76\u751f\u6210\u8be5\u56fe\u7247\u5c5e\u4e8e\u96c6\u5408 {cat, dog, hat, mug}\u4e2d\u5404\u4e2a\u6807\u7b7e\u7684\u6982\u7387\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u4e8e\u8ba1\u7b97\u673a\u6765\u8bf4\uff0c\u56fe\u50cf\u662f\u4e00\u4e2a\u7531\u6570\u5b57\u7ec4\u6210\u7684\u5de8\u5927\u7684 3 \u7ef4\u6570\u7ec4\uff08\u5728\u6df1\u5ea6\u5b66\u4e60\u5de5\u5177\u4e2d\uff0c\u56fe\u50cf\u5c31\u662f\u4e00\u4e2a\u4e09\u7ef4\u5f20\u91cf\uff09\u3002\u5728\u4e0b\u56fe\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u732b\u7684\u56fe\u50cf\u5927\u5c0f\u662f\u5bbd 248 \u50cf\u7d20\uff0c\u9ad8 400 \u50cf\u7d20\uff0c\u6709 3 \u4e2a\u989c\u8272\u901a\u9053\uff0c\u5206\u522b\u662f\u7ea2\u3001\u7eff\u548c\u84dd\uff08\u7b80\u79f0 RGB\uff09\u3002</p> <p>\u5982\u6b64\uff0c\u8be5\u56fe\u50cf\u5c31\u5305\u542b\u4e86 \\(248\\times400\\times3 = 297600\\) \u4e2a\u6570\u5b57\uff0c\u6bcf\u4e2a\u6570\u5b57\u90fd\u662f\u5728\u8303\u56f4 0-255 \u4e4b\u95f4\u7684\u6574\u578b\uff0c\u5176\u4e2d 0 \u8868\u793a\u5168\u9ed1\uff0c255 \u8868\u793a\u5168\u767d\u3002\u6211\u4eec\u7684\u4efb\u52a1\u5c31\u662f\u628a\u8fd9\u4e9b\u4e0a\u767e\u4e07\u7684\u6570\u5b57\u53d8\u6210\u4e00\u4e2a\u7b80\u5355\u7684\u6807\u7b7e\uff0c\u6bd4\u5982 \"\u732b\"\u3002\u6216\u8005\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u501f\u52a9\u67d0\u79cd\u65b9\u6cd5\u5c06\u8fd9\u4e2a\u539f\u59cb\u6570\u5b57\u7f51\u7edc\u8f6c\u53d8\u4e3a\u76f8\u5e94\u7684\u6709\u610f\u4e49\u7684\u8bed\u4e49\u2014\u2014\u6bd4\u5982\u8bf4\u201c\u732b\u201d\u6807\u7b7e</p> <p></p>"},{"location":"CV/Lecture2_Image_Classification/#\u56f0\u96be\u548c\u6311\u6218","title":"\u56f0\u96be\u548c\u6311\u6218","text":"<p>\u5bf9\u4e8e\u4eba\u6765\u8bf4\uff0c\u8bc6\u522b\u51fa\u4e00\u4e2a\u50cf \"\u732b\" \u4e00\u6837\u89c6\u89c9\u6982\u5ff5\u662f\u7b80\u5355\u81f3\u6781\u7684\uff0c\u7136\u800c\u4ece\u8ba1\u7b97\u673a\u89c6\u89c9\u7b97\u6cd5\u7684\u89d2\u5ea6\u6765\u770b\u5c31\u503c\u5f97\u6df1\u601d\u4e86\u3002\u6211\u4eec\u5728\u4e0b\u9762\u5217\u4e3e\u4e86\u8ba1\u7b97\u673a\u89c6\u89c9\u7b97\u6cd5\u5728\u56fe\u50cf\u8bc6\u522b\u65b9\u9762\u9047\u5230\u7684\u4e00\u4e9b\u56f0\u96be</p> <ul> <li>\u89c6\u89d2\u53d8\u5316\uff08 Viewpoint variation \uff09\uff1a\u540c\u4e00\u4e2a\u7269\u4f53\uff0c\u6444\u50cf\u673a\u53ef\u4ee5\u4ece <code>\u591a\u4e2a\u89d2\u5ea6\u6765\u5c55\u73b0</code>\uff0c\u5c3d\u7ba1\u53ef\u80fd\u89d2\u5ea6\u7684\u53d8\u5316\u5f88\u8f7b\u5fae\uff0c\u4f46\u662f\u53ef\u80fd\u4f7f\u5f97\u8fd9\u4e9b\u6570\u5b57\u53d1\u751f\u4e0d\u76f4\u89c2\u7684\u67d0\u79cd\u6539\u53d8</li> <li>\u7c7b\u5185\u5dee\u5f02\uff08 Intra-class variation \uff09\uff1a\u4e00\u7c7b\u7269\u4f53\u7684\u4e2a\u4f53\u4e4b\u95f4\u7684\u5916\u5f62\u5dee\u5f02\u5f88\u5927\uff0c\u6bd4\u5982\u6905\u5b50\u3002<code>\u8fd9\u4e00\u7c7b\u7269\u4f53\u6709\u8bb8\u591a\u4e0d\u540c\u7684\u5bf9\u8c61\uff0c\u6bcf\u4e2a\u90fd\u6709\u81ea\u5df1\u7684\u5916\u5f62</code>\u3002\u6bd4\u5982\u8bf4\u732b\u5c31\u662f\u4e00\u79cd\u5f88\u4f1a\u53d8\u5f62\u7684\u751f\u7269</li> <li>\u76f8\u4f3c\u7c7b\uff08 Fine-Grained Categories \uff09\uff1a\u4e0d\u540c\u7c7b\u7269\u4f53\u7684\u4e2a\u4f53\u4e4b\u95f4\u7684\u5916\u5f62\u5dee\u5f02\u5c0f</li> <li>\u80cc\u666f\u5e72\u6270\uff08 Background clutter \uff09\uff1a\u7269\u4f53\u53ef\u80fd <code>\u6df7\u5165\u80cc\u666f\u4e4b\u4e2d</code>\uff0c\u4f7f\u4e4b\u96be\u4ee5\u88ab\u8fa8\u8ba4</li> <li>\u5149\u7167\u6761\u4ef6\uff08 Illumination conditions \uff09\uff1a\u5728\u50cf\u7d20\u5c42\u9762\u4e0a\uff0c\u5149\u7167\u7684\u5f71\u54cd\u975e\u5e38\u5927\uff0c\u6bd4\u5982\u8bf4 <code>\u5149\u7167\u548c\u660f\u6697\u60c5\u51b5</code> \u4e0b\u56fe\u50cf\u4f1a\u6709\u4e0d\u540c\u60c5\u51b5</li> <li>\u5f62\u53d8\uff08 Deformation \uff09\uff1a\u5f88\u591a\u4e1c\u897f\u7684\u5f62\u72b6\u5e76\u975e\u4e00\u6210\u4e0d\u53d8\uff0c\u4f1a\u6709\u5f88\u5927\u53d8\u5316\u3002</li> <li>\u906e\u6321\uff08 Occlusion \uff09\uff1a<code>\u76ee\u6807\u7269\u4f53\u53ef\u80fd\u88ab\u6321\u4f4f</code>\u3002\u6709\u65f6\u5019\u53ea\u6709\u7269\u4f53\u7684\u4e00\u5c0f\u90e8\u5206\uff08\u53ef\u4ee5\u5c0f\u5230\u51e0\u4e2a\u50cf\u7d20\uff09\u662f\u53ef\u89c1\u7684\uff0c\u6bd4\u5982\u8bf4\u732b\u9690\u85cf\u5728\u8349\u4e1b\u4e2d\uff0c\u5e76\u4e0d\u660e\u663e</li> <li>\u5927\u5c0f\u53d8\u5316\uff08 Scale variation \uff09\uff1a\u7269\u4f53\u53ef\u89c6\u7684\u5927\u5c0f\u901a\u5e38\u662f\u4f1a\u53d8\u5316\u7684\uff08\u4e0d\u4ec5\u662f\u5728\u56fe\u7247\u4e2d\uff0c\u5728\u771f\u5b9e\u4e16\u754c\u4e2d\u5927\u5c0f\u4e5f\u662f\u53d8\u5316\u7684\uff09\u3002</li> </ul> <p>\u9762\u5bf9\u4ee5\u4e0a\u6240\u6709\u53d8\u5316\u53ca\u5176\u7ec4\u5408\uff0c\u597d\u7684\u56fe\u50cf\u5206\u7c7b\u6a21\u578b\u80fd\u591f\u5728\u7ef4\u6301\u5206\u7c7b\u7ed3\u8bba\u7a33\u5b9a\u7684\u540c\u65f6\uff0c\u4fdd\u6301\u5bf9 <code>\u7c7b\u5185\u5dee\u5f02</code> \u8db3\u591f\u654f\u611f\u3002</p> <p></p> <p>\u5f53\u7136\uff0c\u56fe\u50cf\u5206\u7c7b\u6709\u4e0d\u540c\u7684\u5883\u754c</p> <p></p> <p>\u901a\u7528\u7684\u591a\u7c7b\u522b\u5206\u7c7b\uff0c\u662f\u5728\u4e0d\u540c\u7269\u79cd\u7684\u5c42\u6b21\u4e0a\u8fdb\u884c\u5206\u7c7b\uff0c\u6bd4\u5982\u8bf4\u6211\u4eec\u53ea\u9700\u8981\u533a\u5206\u51fa\u732b\u548c\u72d7\u5373\u53ef</p> <p>\u5b50\u7c7b\u7ec6\u7c92\u5ea6\u5206\u7c7b\u662f\u5bf9\u4e00\u4e2a\u5927\u7c7b\u4e2d\u7684\u5b50\u7c7b\u8fdb\u884c\u5212\u5206\uff0c\u6bd4\u5982\u8bf4\u6211\u4eec\u533a\u5206\u4e86\u732b\u72d7\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u4e00\u6b65\u533a\u522b\u662f\u4ec0\u4e48\u54c1\u79cd\u7684\u732b\u548c\u72d7</p> <p>\u6700\u9ad8\u7684\u662f\u5b9e\u4f8b\u7ea7\u5206\u7c7b\uff0c\u4e00\u4e2a\u4e2a\u4f53\u5c31\u662f\u4e00\u4e2a\u7c7b\uff0c\u8fd9\u79cd\u7684\u7ec6\u7c92\u5ea6\u6700\u9ad8</p>"},{"location":"CV/Lecture2_Image_Classification/#\u7c7b\u522b\u4e0d\u5e73\u8861\u95ee\u9898","title":"\u7c7b\u522b\u4e0d\u5e73\u8861\u95ee\u9898","text":"<p>\u5982\u679c\u4e0d\u540c\u7c7b\u522b\u4e0b\u6837\u672c\u6570\u91cf\u76f8\u5dee\u5f88\u5927\uff0c\u5c31\u4f1a\u5bfc\u81f4\u5206\u7c7b\u6a21\u578b\u7684\u6027\u80fd\u53d8\u5dee\uff0c\u5c31\u4e0e\u5b66\u751f\u6781\u5ea6\u504f\u79d1\u4e00\u6837\uff0c\u603b\u5206\u65e0\u6cd5\u7279\u522b\u9ad8\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u65b9\u9762\u7684\u65b9\u6cd5\u63d0\u4f9b\u89e3\u51b3\u65b9\u6848</p> <p></p>"},{"location":"CV/Lecture2_Image_Classification/#\u6837\u672c\u6570\u91cf\u5c11\u95ee\u9898","title":"\u6837\u672c\u6570\u91cf\u5c11\u95ee\u9898","text":"<p>\u6211\u4eec\u53ef\u4ee5\u5c06\u6837\u672c\u6570\u91cf\u5f88\u5c11\u7684\u7c7b\u522b\uff0c\u968f\u673a\u8fdb\u884c\u4e00\u4e9b\u63d2\u503c\uff0c\u6bd4\u5982\u8bf4\u968f\u673a\u9009\u62e9\u4e00\u4e9b\u56fe\u7247\u8fdb\u884c\u590d\u5236\u6dfb\u52a0\u5230\u8be5\u7c7b\u522b\u5305\u542b\u7684\u56fe\u50cf\u5185\uff0c\u5b9e\u9645\u4e0a\u8fd9\u5c31\u662f\u4e00\u79cd\u63d2\u503c\u65b9\u5f0f</p> <p></p> <p>\u5f53\u7136\u6211\u4eec\u53ef\u4ee5\u4ee5\u7ed3\u679c\u4e3a\u5bfc\u5411\u8fdb\u884c\u63d0\u9ad8\uff0c\u5220\u9664\u4e00\u4e9b\u5206\u7c7b\u597d\u7684\u7c7b\u522b\u7684\u6837\u672c\uff0c\u590d\u5236\u4e00\u4e9b\u6bd4\u8f83\u5dee\u7684\u6837\u672c\u7684\u7c7b\u522b</p> <p></p> <p>\u6216\u8005\u6211\u4eec\u53ef\u4ee5\u5bf9\u7b97\u6cd5\u672c\u8eab\u8fdb\u884c\u6539\u8fdb\uff0c\u5148\u6784\u5efa\u4e00\u4e2a\u6bd4\u8f83\u5747\u8861\u7684\u6570\u636e\u96c6\uff0c\u7136\u540e\u5728\u8fd9\u4e2a\u4e0a\u9762\u8fdb\u884c\u9884\u8bad\u7ec3\uff0c\u540e\u9762\u8fdb\u884c\u5fae\u8c03\uff0c\u4e5f\u53ef\u4ee5\u6709\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u7684\u63d0\u9ad8</p> <p></p> <p>\u4e5f\u53ef\u4ee5\u8fdb\u884c\u57fa\u4e8e\u6837\u672c\u6570\u91cf\u7684\u81ea\u9002\u5e94\u52a0\u6743\uff0c\u63d0\u9ad8\u6570\u91cf\u5c11\u7684\u7c7b\u522b\u7684\u6743\u91cd</p> <p>\u7814\u7a76\u7c7b\u522b\u6570\u91cf\u4e0d\u5747\u8861\u7684\u95ee\u9898\u662f\u6709\u610f\u4e49\u7684\uff0c\u56e0\u4e3a\u5728\u4e00\u4e9b\u7279\u5b9a\u6837\u672c\u96be\u4ee5\u83b7\u53d6\u7684\u4efb\u52a1\u4e0a\uff0c\u6837\u672c\u6570\u91cf\u51e0\u4e4e\u662f\u5fc5\u5b9a\u6781\u4e3a\u4e0d\u5747\u8861\u7684\uff0c\u6bd4\u5982\u8bf4\u533b\u7597\u89c6\u89c9\u6a21\u578b\u4efb\u52a1\u4e2d\uff0c\u4e00\u4e9b\u7f55\u89c1\u75c5\u7684\u5f71\u50cf\u6570\u91cf\u5f88\u5c11</p> <p>\u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c1d\u8bd5\u901a\u8fc7\u8fc1\u79fb\u5b66\u4e60\u89e3\u51b3\uff0c\u5982\u679c\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u8bad\u7ec3\u6570\u636e\u8db3\u591f\u5927\uff0c\u5e76\u4e14\u4e0e\u672c\u4efb\u52a1\u76f8\u5339\u914d\uff0c\u90a3\u4e48\u8fd9\u4e2a\u9884\u8bad\u7ec3\u6a21\u578b\u6240\u5b66\u7684\u7279\u5f81\u5c31\u4f1a\u5177\u6709\u4e00\u5b9a\u7684\u901a\u7528\u6027\uff0c\u6bd4\u5982\u8bf4\u7528\u9014\u5e7f\u6cdb\u7684 ImageNet \u6570\u636e\u96c6</p> <p>\u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6570\u636e\u589e\u5f3a\u65b9\u5f0f\uff0c\u4eba\u4e3a\u6269\u5145\u6570\u636e\u96c6\uff0c\u8fd9\u6837\u5b50\u5c31\u53ef\u4ee5\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u89e3\u51b3\u6570\u636e\u96c6\u7684\u95ee\u9898</p> <p></p>"},{"location":"CV/Lecture2_Image_Classification/#\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1","title":"\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1","text":"<p>\u5f53\u7136\uff0c\u8ba1\u7b97\u673a\u89c6\u89c9\u4e0d\u6b62\u6709\u56fe\u50cf\u5206\u7c7b\uff0c\u8fd8\u6709\u53e6\u4e00\u4e2a\u76f8\u5173\u7684\u4efb\u52a1\u2014\u2014<code>\u76ee\u6807\u68c0\u6d4b\uff08object detection\uff09</code>\uff0c\u8fd9\u4e2a\u4efb\u52a1\u6211\u4eec\u9700\u8981\u5c06\u56fe\u50cf\u4e2d\u7684\u76ee\u6807\u5bf9\u8c61\u5708\u51fa\u6765</p> <p>\u7ed3\u679c\u8bc1\u660e\uff0c\u56fe\u50cf\u5206\u7c7b\u672c\u6765\u5c31\u662f\u4e00\u4e2a\u57fa\u7840\uff0c\u53ef\u4ee5\u7528\u6765\u6784\u5efa\u66f4\u591a\u66f4\u590d\u6742\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u6bd4\u5982\u8bf4\u76ee\u6807\u68c0\u6d4b\uff0c\u6839\u636e\u56fe\u7247\u751f\u6210 caption \u6ce8\u91ca\uff08\u4f8b\u5982\u4e0b\u56fe\u53ef\u4ee5\u751f\u6210 man ride horse\uff09\uff0c\u7b49 </p> <p>\u60f3\u6cd5\uff1a\u5982\u4f55\u5b9e\u73b0\u56fe\u50cf\u5206\u7c7b\uff1f</p> <p>\u6839\u636e\u4e4b\u524d\u6240\u4e86\u89e3\u5230\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u80fd\u9996\u5148\u60f3\u5230\u901a\u8fc7\u5bf9\u7167\u7247\u8fdb\u884c <code>\u8fb9\u7f18\u68c0\u6d4b(edge detection)</code> \u6765\u63d0\u53d6\u7279\u5f81\uff0c\u5982\u4f55\u5c1d\u8bd5\u627e\u5230\u89d2\u70b9\u6216\u8005\u5176\u4ed6\u7c7b\u578b\u7684\u53ef\u89e3\u91ca\u6a21\u5f0f\uff0c\u6bd4\u5982\u8bf4\u732b\u6709\u4e09\u89d2\u5f62\u5c16\u8033\u6735\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u68c0\u6d4b\u8fd9\u65b9\u9762\u7684\u8fb9\u7f18\u4fe1\u606f\uff0c\u6216\u8005\u6211\u4eec\u77e5\u9053\u732b\u6709\u80e1\u987b\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u63d0\u53d6\u80e1\u987b\u7684\u8fb9\u7f18\u4fe1\u606f\uff0c\u6211\u4eec\u6839\u636e\u8fd9\u4e9b\u4fe1\u606f\u6765\u5199\u4e00\u4e2a\u7b97\u6cd5\u6765\u68c0\u6d4b\u4ed6\u4eec</p> <p>\u5f53\u7136\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u65b9\u6cd5\uff0c\u6bd4\u5982\u8bf4\u4f1a\u6709\u6ca1\u6709\u80e1\u987b\u7684\u732b\uff0c\u4f1a\u6709\u6ca1\u6709\u5c16\u8033\u6735\u7684\u732b\uff0c\u6216\u8005\u6709\u65f6\u5019\u8fb9\u7f18\u68c0\u6d4b\u5668\u4f1a\u5931\u6548\u4ece\u800c\u65e0\u6cd5\u6b63\u5e38\u63d0\u4ea4\u6240\u9700\u7684\u8fb9\u7f18\uff0c\u800c\u4e14\u8fd9\u5f88\u96be\u8fdb\u884c\u8fc1\u79fb\u2014\u2014\u5f53\u6211\u4eec\u53ef\u4ee5\u6210\u529f\u8bc6\u522b\u732b\u7684\u65f6\u5019\uff0c\u5982\u679c\u6211\u4eec\u60f3\u5c06\u5176\u7528\u5230\u5176\u4ed6\u65b9\u9762\uff0c\u6bd4\u5982\u8bf4\u8bc6\u522b\u72d7\uff0c\u90a3\u4e48\u4e4b\u524d\u7684\u5de5\u4f5c\u5c06\u6beb\u65e0\u610f\u4e49\uff0c<code>\u6240\u4ee5\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u79cd\u5177\u6709\u53ef\u6269\u5c55\u6027\u7684\u7b97\u6cd5</code></p>"},{"location":"CV/Lecture2_Image_Classification/#\u6570\u636e\u9a71\u52a8\u65b9\u6cd5-data-driven-approach","title":"\u6570\u636e\u9a71\u52a8\u65b9\u6cd5 Data-Driven Approach","text":"<ol> <li>Collect a dataset of images and labels</li> <li>Use machine learning to train a classifier</li> <li>Evaluate the classifier on new images</li> </ol> <p>3 \u4e2a\u91cd\u8981\u7684\u73af\u8282\uff1a</p> <ul> <li> <p>input\uff1a\u8f93\u5165\u662f\u5305\u542b N \u4e2a\u56fe\u50cf\u7684\u96c6\u5408\uff0c\u6bcf\u4e2a\u56fe\u50cf\u7684\u6807\u7b7e\u662f K \u79cd\u5206\u7c7b\u6807\u7b7e\u4e2d\u7684\u4e00\u79cd\u3002\u8fd9\u4e2a\u96c6\u5408\u79f0\u4e3a\u8bad\u7ec3\u96c6\u3002</p> </li> <li> <p>train\uff1a \u8f93\u5165\u56fe\u50cf\u6570\u636e\u96c6\u4ee5\u53ca\u76f8\u5173\u6807\u7b7e\u96c6\u5408\uff0c\u4f7f\u7528\u67d0\u79cd\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\uff0c\u8fd4\u56de\u7edf\u8ba1\u6a21\u578b</p> </li> <li>predict\uff1a\u8ba9\u5206\u7c7b\u5668\u6765\u9884\u6d4b\u5b83\u672a\u66fe\u89c1\u8fc7\u7684\u56fe\u50cf\u7684\u5206\u7c7b\u6807\u7b7e\uff0c\u5e76\u4ee5\u6b64\u6765\u8bc4\u4ef7\u5206\u7c7b\u5668\u7684\u8d28\u91cf\u3002</li> </ul> <p>\u4f20\u7edf\u7684\u56fe\u50cf\u5206\u7c7b\u662f\u7531\u4e13\u5bb6\u53bb\u624b\u52a8\u8bbe\u8ba1\u7279\u5f81\u53bb\u63d0\u53d6\uff08\u4f9d\u9760\u4eba\u7c7b\u73b0\u6709\u7684\u7ea6\u5b9a\u4fd7\u6210\u7684\u77e5\u8bc6\uff09\uff0c\u6df1\u5ea6\u5b66\u4e60\u5206\u7c7b\u65b9\u6cd5\u5219\u662f\u8ba9\u673a\u5668\u81ea\u52a8\u53bb\u5b66\u4e60\u5982\u4f55\u63d0\u53d6\u7279\u5f81\u548c\u54ea\u4e9b\u63d0\u53d6\u7279\u5f81\uff0c\u4eba\u7c7b\u6240\u9700\u8981\u505a\u7684\u5c31\u662f\u6295\u5582\u5927\u91cf\u7684\u76ee\u6807 label \u7684\u56fe\u50cf\u3002</p> <p></p> <p>\u5982\u4f55\u5199\u4e00\u4e2a\u56fe\u50cf\u5206\u7c7b\u7684\u7b97\u6cd5\u5462\uff1f\u8fd9\u548c\u5199\u4e2a\u6392\u5e8f\u7b97\u6cd5\u53ef\u662f\u5927\u4e0d\u4e00\u6837\u3002\u600e\u4e48\u5199\u4e00\u4e2a\u4ece\u56fe\u50cf\u4e2d\u8ba4\u51fa\u732b\u7684\u7b97\u6cd5\uff1f\u641e\u4e0d\u6e05\u695a\u3002\u56e0\u6b64\uff0c<code>\u4e0e\u5176\u5728\u4ee3\u7801\u4e2d\u76f4\u63a5\u5199\u660e\u5404\u7c7b\u7269\u4f53\u5230\u5e95\u770b\u8d77\u6765\u662f\u4ec0\u4e48\u6837\u7684\uff0c\u5012\u4e0d\u5982\u8bf4\u6211\u4eec\u91c7\u53d6\u7684\u65b9\u6cd5\u548c\u6559\u5c0f\u5b69\u513f\u770b\u56fe\u8bc6\u7269\u7c7b\u4f3c\uff1a\u7ed9\u8ba1\u7b97\u673a\u5f88\u591a\u6570\u636e\uff0c\u7136\u540e\u5b9e\u73b0\u5b66\u4e60\u7b97\u6cd5\uff0c\u8ba9\u8ba1\u7b97\u673a\u5b66\u4e60\u5230\u6bcf\u4e2a\u7c7b\u7684\u5916\u5f62\u3002</code> \u8fd9\u79cd\u65b9\u6cd5\uff0c\u5c31\u662f\u6570\u636e\u9a71\u52a8\u65b9\u6cd5\u3002\u4e5f\u5c31\u662f\u4f7f\u7528\u62e5\u6709\u4ece\u6570\u636e\u4e2d\u5b66\u4e60\u5982\u4f55\u8bc6\u522b\u4e0d\u540c\u7c7b\u578b\u5bf9\u8c61\u4e0e\u56fe\u50cf\u7684\u7b97\u6cd5\u3002\u65e2\u7136\u8be5\u65b9\u6cd5\u7684\u7b2c\u4e00\u6b65\u5c31\u662f\u6536\u96c6\u5927\u91cf\u5df2\u7ecf\u505a\u597d\u5206\u7c7b\u6807\u6ce8\u7684\u56fe\u7247\u6765\u4f5c\u4e3a\u8bad\u7ec3\u96c6\uff0c\u90a3\u4e48\u4e0b\u9762\u5c31\u770b\u770b\u6570\u636e\u96c6\u5230\u5e95\u957f\u4ec0\u4e48\u6837\uff1a</p> <p></p>"},{"location":"CV/Lecture2_Image_Classification/#\u6570\u636e\u96c6","title":"\u6570\u636e\u96c6","text":""},{"location":"CV/Lecture2_Image_Classification/#mnist-\u6570\u636e\u96c6\u8ba1\u7b97\u673a\u89c6\u89c9\u4e2d\u7684\u679c\u8747","title":"MNIST \u6570\u636e\u96c6\uff1a\u8ba1\u7b97\u673a\u89c6\u89c9\u4e2d\u7684\u679c\u8747","text":"<p>MNIST \u6570\u636e\u96c6\u662f\u4e00\u79cd\u624b\u5199\u6570\u5b57\u6570\u636e\u96c6\uff0c\u5176\u4e2d\u7684\u6bcf\u5f20\u56fe\u7247\u90fd\u5305\u62ec\u4e00\u4e2a\u4e0d\u540c\u7684\u624b\u5199\u6570\u5b57\uff0c\u5927\u5c0f\u7edf\u4e00\u4e3a 28 \\(\\times\\) 28\uff0c\u5341\u4e2a\u7c7b\u522b\uff0c\u6709\u4e94\u4e07\u5f20\u4f5c\u4e3a\u8bad\u7ec3\u96c6\u548c\u4e00\u4e07\u5f20\u4f5c\u4e3a\u6d4b\u8bd5\u96c6</p> <p>\u5b83\u66f4\u50cf\u4e00\u79cd\u73a9\u5177\u6570\u636e\u96c6\uff0c\u6216\u8005\u4e5f\u88ab\u79f0\u4e3a\u8ba1\u7b97\u673a\u89c6\u89c9\u7684\u679c\u8747\uff0c\u53ef\u4ee5\u505a\u5f88\u591a\u6d4b\u8bd5\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6570\u636e\u96c6\u5f88\u5c0f\u800c\u4e14\u7b80\u5355\uff0c\u53ef\u4ee5\u5feb\u901f\u9a8c\u8bc1\u65b0\u60f3\u6cd5</p>"},{"location":"CV/Lecture2_Image_Classification/#cifar-\u6570\u636e\u96c6","title":"CIFAR \u6570\u636e\u96c6","text":"<p>CIFAR-10\uff1a\u4e00\u4e2a\u975e\u5e38\u6d41\u884c\u7684\u56fe\u50cf\u5206\u7c7b\u6570\u636e\u96c6\u662f [CIFAR-10][15]\u3002\u8fd9\u4e2a\u6570\u636e\u96c6\u5305\u542b\u4e86 60000 \u5f20 32X32 \u7684\u5c0f\u56fe\u50cf\u3002\u6bcf\u5f20\u56fe\u50cf\u90fd\u6709 10 \u79cd\u5206\u7c7b\u6807\u7b7e\u4e2d\u7684\u4e00\u79cd\u5e76\u4e14\u53ea\u6709\u4e00\u4e2a\u4e3b\u4f53\u5bf9\u8c61\u3002\u8fd9 60000 \u5f20\u56fe\u50cf\u88ab\u5206\u4e3a\u5305\u542b 50000 \u5f20\u56fe\u50cf\u7684\u8bad\u7ec3\u96c6\u548c\u5305\u542b 10000 \u5f20\u56fe\u50cf\u7684\u6d4b\u8bd5\u96c6\u3002\u53ef\u4ee5\u89c6\u4f5c MNIST \u7684\u5f69\u8272\u589e\u5f3a\u7248</p> <p>\u5728\u4e0b\u56fe\u4e2d\u4f60\u53ef\u4ee5\u770b\u89c1 10 \u4e2a\u7c7b\u7684 10 \u5f20\u968f\u673a\u56fe\u7247\u3002</p> <p></p> <p>\u5de6\u8fb9\uff1a\u4ece [CIFAR-10][15] \u6570\u636e\u5e93\u6765\u7684\u6837\u672c\u56fe\u50cf\u3002\u53f3\u8fb9\uff1a\u7b2c\u4e00\u5217\u662f\u6d4b\u8bd5\u56fe\u50cf\uff0c\u7136\u540e\u7b2c\u4e00\u5217\u7684\u6bcf\u4e2a\u6d4b\u8bd5\u56fe\u50cf\u53f3\u8fb9\u662f\u4f7f\u7528 Nearest Neighbor \u7b97\u6cd5\uff0c\u6839\u636e\u50cf\u7d20\u5dee\u5f02\uff0c\u4ece\u8bad\u7ec3\u96c6\u4e2d\u9009\u51fa\u7684 10 \u5f20\u6700\u7c7b\u4f3c\u7684\u56fe\u7247\u3002</p> <p>\u6b64\u5916\u8fd8\u6709 CIFAR100 \u6570\u636e\u96c6\uff08100 \u7c7b\uff09\uff0c\u7ec6\u7c92\u5ea6\u66f4\u9ad8\uff0c\u6709\u4e00\u767e\u4e2a\u7c7b\uff0c\u5e76\u4e14\u6bcf\u4e94\u4e2a\u7c7b\u7ec4\u6210\u4e00\u4e2a\u8d85\u7c7b\u6bcf\u4e2a\u7c7b\u6709 600 \u4e2a\u56fe\u50cf\uff0c\u5e76\u4e14\u6bcf\u4e2a\u56fe\u50cf\u6709\u4e24\u4e2a\u6807\u7b7e\u2014\u2014\u4e00\u4e2a\u662f\u7cbe\u7ec6\u7684\u7c7b\u6807\u7b7e\uff0c\u4e00\u4e2a\u662f\u7c97\u7cd9\u7684\u8d85\u7c7b\u6807\u7b7e\uff0c\u5982\u4e0b\u56fe\u6240\u793a</p> <p></p>"},{"location":"CV/Lecture2_Image_Classification/#imagenet\u9ec4\u91d1\u6570\u636e\u96c6","title":"ImageNet\uff1a\u9ec4\u91d1\u6570\u636e\u96c6","text":"<p>\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u6570\u636e\uff0c\u6709\u4e24\u4e07\u79cd\u7c7b\u522b\uff0c\u540c\u65f6\u6709\u5343\u4e07\u5f20\u56fe\u7247\uff08\u6bcf\u4e2a\u7c7b\u522b 1300 \u5f20\uff09\uff0c\u767e\u4e07\u6807\u6ce8\u6846\uff0c\u56fe\u50cf\u5927\u5c0f\u4e0d\u7edf\u4e00\uff0c\u4ee5\u5176\u547d\u540d\u7684 ImageNet \u5206\u7c7b\u7ade\u8d5b\u4f7f\u7528\u4e86\u5176\u4e2d\u4e00\u5343\u4e2a\u7c7b\u7684\u5b50\u96c6\uff0c\u5728\u6b64\u7ade\u8d5b\u4e2d\u51fa\u73b0\u4e86\u5927\u91cf\u7ecf\u5178\u5de5\u4f5c\uff0c\u5982 AlexNet \u7b49 </p> <p>\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u4e00\u4e2a\u56fe\u7247\u7684\u6807\u6ce8\u53ef\u4ee5\u5206\u4e3a\u5f88\u591a\u4e2a\u7ea7\u522b\uff0c\u9897\u7c92\u5ea6\u8d8a\u6765\u8d8a\u5c0f\uff08\u6216\u8005\u8bf4\u4e00\u4e2a\u56fe\u7247\u6709\u591a\u4e2a\u6807\u7b7e\u5e76\u4e14\u5448\u5305\u542b\u5173\u7cfb\uff09</p> <p></p>"},{"location":"CV/Lecture2_Image_Classification/#nearest-neighbor-\u5206\u7c7b\u5668","title":"Nearest Neighbor \u5206\u7c7b\u5668","text":"<p>\u4f5c\u4e3a\u8bfe\u7a0b\u4ecb\u7ecd\u7684\u7b2c\u4e00\u4e2a\u65b9\u6cd5\uff0c\u6211\u4eec\u6765\u5b9e\u73b0\u4e00\u4e2a Nearest Neighbor \u5206\u7c7b\u5668\u3002\u867d\u7136\u8fd9\u4e2a\u5206\u7c7b\u5668\u548c\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\uff0c\u5b9e\u9645\u4e2d\u4e5f\u6781\u5c11\u4f7f\u7528\u800c\u4e14\u5176\u975e\u5e38\u7b80\u5355\uff0c\u4f46\u901a\u8fc7\u5b9e\u73b0\u5b83\uff0c\u53ef\u4ee5\u8ba9\u8bfb\u8005\u5bf9\u4e8e\u89e3\u51b3\u56fe\u50cf\u5206\u7c7b\u95ee\u9898\u7684\u65b9\u6cd5\u6709\u4e2a\u57fa\u672c\u7684\u8ba4\u8bc6\uff0c\u4e5f\u5c31\u662f\u673a\u5668\u5b66\u4e60\u7cfb\u7edf\u7684\u4e24\u4e2a\u57fa\u672c\u90e8\u5206\u2014\u2014\u8bad\u7ec3\u3001\u9884\u6d4b\u3002</p> <p><code>\u5176\u4e2d\uff0c\u8bad\u7ec3\u51fd\u6570\uff0c\u5c31\u662f\u8bb0\u4f4f\u6240\u6709\u7684\u6570\u636e\u548c\u6807\u7b7e\uff08\u6216\u8005\u8bf4\u8fdb\u884c\u5b66\u4e60\uff09\uff0c\u9884\u6d4b\u51fd\u6570\uff0c\u5c31\u662f\u9884\u6d4b\u51fa\u56fe\u50cf\u6700\u53ef\u80fd\u7684\u6807\u7b7e</code></p> <p>\u5047\u8bbe\u73b0\u5728\u6211\u4eec\u6709 CIFAR-10 \u7684 50000 \u5f20\u56fe\u7247\uff08\u6bcf\u79cd\u5206\u7c7b 5000 \u5f20\uff09\u4f5c\u4e3a\u8bad\u7ec3\u96c6\uff0c\u6211\u4eec\u5e0c\u671b\u5c06\u4f59\u4e0b\u7684 10000 \u4f5c\u4e3a\u6d4b\u8bd5\u96c6\u5e76\u7ed9\u4ed6\u4eec\u6253\u4e0a\u6807\u7b7e\u3002Nearest Neighbor \u7b97\u6cd5\u5c06\u4f1a\u62ff\u7740\u6d4b\u8bd5\u56fe\u7247\u548c\u8bad\u7ec3\u96c6\u4e2d\u6bcf\u4e00\u5f20\u56fe\u7247\u53bb\u6bd4\u8f83\uff0c\u7136\u540e\u5c06\u5b83\u8ba4\u4e3a\u6700\u76f8\u4f3c\u7684\u90a3\u4e2a\u8bad\u7ec3\u96c6\u56fe\u7247\u7684\u6807\u7b7e\u8d4b\u7ed9\u8fd9\u5f20\u6d4b\u8bd5\u56fe\u7247\u3002</p> <p>\u90a3\u4e48\u5177\u4f53\u5982\u4f55\u6bd4\u8f83\u4e24\u5f20\u56fe\u7247\u7684\u76f8\u4f3c\u7a0b\u5ea6\u5462\uff08\u6216\u8005\u53ef\u4ee5\u5c06\u76f8\u4f3c\u7a0b\u5ea6\u7406\u89e3\u4e3a\u8ddd\u79bb\uff0c\u8ddd\u79bb\u8d8a\u8fd1\uff0c\u56fe\u7247\u8d8a\u76f8\u4f3c\uff09\uff1f\u5728\u672c\u4f8b\u4e2d\uff0c\u5c31\u662f\u6bd4\u8f83 32x32x3 \u7684\u50cf\u7d20\u5757\u3002\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u5c31\u662f\u9010\u4e2a\u50cf\u7d20\u6bd4\u8f83\uff0c\u6700\u540e\u5c06\u5dee\u5f02\u503c\u5168\u90e8\u52a0\u8d77\u6765\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u5c06\u4e24\u5f20\u56fe\u7247\u5148\u8f6c\u5316\u4e3a\u4e24\u4e2a\u5411\u91cf \\(I_1, I_2\\)\uff0c\u7136\u540e\u8ba1\u7b97\u4ed6\u4eec\u7684 L1 \u8ddd\u79bb\uff08\u66fc\u54c8\u987f\u8ddd\u79bb\uff09\uff1a</p> <p></p> <p>\u8fd9\u91cc\u7684\u6c42\u548c\u662f\u9488\u5bf9\u6240\u6709\u7684\u50cf\u7d20\u3002\u4e0b\u9762\u662f\u6574\u4e2a\u6bd4\u8f83\u6d41\u7a0b\u7684\u56fe\u4f8b\uff1a</p> <p></p> <p>\u4ee5\u56fe\u7247\u4e2d\u7684\u4e00\u4e2a\u989c\u8272\u901a\u9053\u4e3a\u4f8b\u6765\u8fdb\u884c\u8bf4\u660e\u3002\u4e24\u5f20\u56fe\u7247\u4f7f\u7528 L1 \u8ddd\u79bb\u6765\u8fdb\u884c\u6bd4\u8f83\u3002\u9010\u4e2a\u50cf\u7d20\u6c42\u5dee\u503c\uff0c\u7136\u540e\u5c06\u6240\u6709\u5dee\u503c\u52a0\u8d77\u6765\u5f97\u5230\u4e00\u4e2a\u6570\u503c\u3002\u5982\u679c\u4e24\u5f20\u56fe\u7247\u4e00\u6a21\u4e00\u6837\uff0c\u90a3\u4e48 L1 \u8ddd\u79bb\u4e3a 0\uff0c\u4f46\u662f\u5982\u679c\u4e24\u5f20\u56fe\u7247\u5f88\u662f\u4e0d\u540c\uff0c\u90a3 L1 \u503c\u5c06\u4f1a\u975e\u5e38\u5927\u3002</p> <p>\u4e0b\u9762\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u7528\u4ee3\u7801\u6765\u5b9e\u73b0\u8fd9\u4e2a\u5206\u7c7b\u5668\u3002\u9996\u5148\uff0c\u6211\u4eec\u5c06 CIFAR-10 \u7684\u6570\u636e\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u5e76\u5206\u6210 4 \u4e2a\u6570\u7ec4\uff1a\u8bad\u7ec3\u6570\u636e\u548c\u6807\u7b7e\uff0c\u6d4b\u8bd5\u6570\u636e\u548c\u6807\u7b7e\u3002\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff0cXtr\uff08\u5927\u5c0f\u662f \\(50000\\times32\\times32\\times3\\)\uff09\u5b58\u6709\u8bad\u7ec3\u96c6\u4e2d\u6240\u6709\u7684\u56fe\u50cf\uff0cYtr \u662f\u5bf9\u5e94\u7684\u957f\u5ea6\u4e3a 50000 \u7684 1 \u7ef4\u6570\u7ec4\uff0c\u5b58\u6709\u56fe\u50cf\u5bf9\u5e94\u7684\u5206\u7c7b\u6807\u7b7e\uff08\u4ece 0 \u5230 9\uff09\uff1a</p> <pre><code>Xtr, Ytr, Xte, Yte = load_CIFAR10('data/cifar10/') # a magifunction we provide\n# flatten out all images to be one-dimensional\nXtr_rows = Xtr.reshape(Xtr.shape[0], 32 * 32 * 3) # Xtr_row becomes 50000 x 3072\nXte_rows = Xte.reshape(Xte.shape[0], 32 * 32 * 3) # Xte_row becomes 10000 x 3072\n</code></pre> <ul> <li><code>Xtr.shape[0]</code> \u83b7\u53d6 <code>Xtr</code> \u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\u7684\u5927\u5c0f\uff0c\u5373\u6837\u672c\u7684\u6570\u91cf\u3002</li> <li> <p><code>reshape</code> \u65b9\u6cd5\u7528\u4e8e\u5c06\u6bcf\u4e2a 32x32 \u7684\u5f69\u8272\u56fe\u50cf\uff083 \u4e2a\u901a\u9053\u5206\u522b\u5bf9\u5e94 RGB\uff09\u8f6c\u6362\u4e3a\u4e00\u4e2a 3072 \u7ef4\u7684 1 \u7ef4\u5411\u91cf\uff0832 _ 32 _ 3 = 3072\uff09\u3002</p> </li> <li> <p><code>Xtr_rows</code> \u548c <code>Xte_rows</code> \u7684\u5f62\u72b6\u5206\u522b\u4e3a <code>(50000, 3072)</code> \u548c <code>(10000, 3072)</code>\uff0c\u5176\u4e2d\u6bcf\u4e00\u884c\u8868\u793a\u4e00\u4e2a\u5c55\u5e73\u7684\u56fe\u50cf\u3002</p> </li> </ul> <p>\u901a\u8fc7 <code>Xtr.shape[0]</code>\uff0c\u4f60\u83b7\u5f97\u4e86\u6837\u672c\u6570\u91cf\uff0850000\uff09\uff0c\u5e76\u5728 <code>reshape</code> \u65b9\u6cd5\u4e2d\u5c06\u6bcf\u5f20\u56fe\u50cf\u5c55\u5e73\u6210\u4e00\u4e2a 3072 \u7ef4\u7684\u5411\u91cf\u3002\u8fd9\u6837\u53ef\u4ee5\u786e\u4fdd\u5c55\u5e73\u540e\u7684\u6570\u7ec4\u4ecd\u7136\u5305\u542b 50000 \u4e2a\u6837\u672c\uff0c\u6bcf\u4e2a\u6837\u672c\u6709 3072 \u4e2a\u7279\u5f81\u3002</p> <p>\u73b0\u5728\u6211\u4eec\u5f97\u5230\u6240\u6709\u7684\u56fe\u50cf\u6570\u636e\uff0c\u5e76\u4e14\u628a\u4ed6\u4eec\u62c9\u957f\u6210\u4e3a\u884c\u5411\u91cf\u4e86\u3002\u63a5\u4e0b\u6765\u5c55\u793a\u5982\u4f55\u8bad\u7ec3\u5e76\u8bc4\u4ef7\u4e00\u4e2a\u5206\u7c7b\u5668\uff1a</p> <pre><code>    nn = NearestNeighbor() # create a Nearest Neighbor classifier class\n    nn.train(Xtr_rows, Ytr) # train the classifier on the training images and labels\n    Yte_predict = nn.predict(Xte_rows) # predict labels on the test images\n    # and now print the classification accuracy, which is the average number\n    # of examples that are correctly predicted (i.e. label matches)\n    print 'accuracy: %f' % ( np.mean(Yte_predict == Yte) )\n</code></pre> <ol> <li>\u5e38\u89c1\u6700\u8fd1\u90bb\u5206\u7c7b\u5668</li> </ol> <p>\u8fd9\u91cc\u7684 <code>NearestNeighbor</code> \u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u6700\u8fd1\u90bb\u5206\u7c7b\u5668\u7c7b\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u3002\u8fd9\u4e2a\u7c7b\u5e94\u8be5\u6709\u65b9\u6cd5\u6765\u8bad\u7ec3\u6a21\u578b\u548c\u8fdb\u884c\u9884\u6d4b</p> <ol> <li>\u8bad\u7ec3\u5206\u7c7b\u5668</li> </ol> <p><code>train()</code> \u65b9\u6cd5\u5c06\u5206\u7c7b\u5668\u8bad\u7ec3\u5728\u8bad\u7ec3\u96c6\u4e0a\u3002\u5b83\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff1a</p> <ul> <li><code>Xtr_rows</code>\uff1a\u5c55\u5e73\u540e\u7684\u8bad\u7ec3\u56fe\u50cf\u6570\u636e\uff0850000 x 3072\uff09\u3002</li> <li><code>Ytr</code>\uff1a\u8bad\u7ec3\u56fe\u50cf\u7684\u6807\u7b7e\u3002</li> </ul> <p>\u5728\u6700\u8fd1\u90bb\u5206\u7c7b\u5668\u4e2d\uff0c\u8bad\u7ec3\u901a\u5e38\u53ea\u662f\u5c06\u8bad\u7ec3\u6570\u636e\u5b58\u50a8\u8d77\u6765\uff0c\u56e0\u4e3a\u9884\u6d4b\u65f6\u53ea\u9700\u8981\u627e\u5230\u8ddd\u79bb\u6700\u8fd1\u7684\u8bad\u7ec3\u6837\u672c\u3002</p> <ol> <li>\u8fdb\u884c\u9884\u6d4b</li> </ol> <p><code>predict()</code> \u65b9\u6cd5\u4f7f\u7528\u6700\u8fd1\u90bb\u7b97\u6cd5\u5bf9\u6d4b\u8bd5\u96c6 <code>Xte_rows</code> \u8fdb\u884c\u9884\u6d4b\u3002\u5b83\u5c06\u4e3a\u6d4b\u8bd5\u96c6\u4e2d\u7684\u6bcf\u4e2a\u6837\u672c\u627e\u5230\u8ddd\u79bb\u6700\u8fd1\u7684\u8bad\u7ec3\u6837\u672c\uff0c\u5e76\u8fd4\u56de\u76f8\u5e94\u7684\u6807\u7b7e\u3002</p> <ol> <li>\u8ba1\u7b97\u5e76\u6253\u5370\u4e86\u5206\u7c7b\u5668\u5728\u6d4b\u8bd5\u96c6\u4e0a\u7684\u51c6\u786e\u7387\u3002</li> </ol> <p><code>Yte_predict == Yte</code> \u4f1a\u751f\u6210\u4e00\u4e2a\u5e03\u5c14\u6570\u7ec4\uff0c\u8868\u793a\u9884\u6d4b\u6807\u7b7e\u4e0e\u5b9e\u9645\u6807\u7b7e\u662f\u5426\u5339\u914d\u3002</p> <p><code>np.mean()</code> \u8ba1\u7b97\u8be5\u5e03\u5c14\u6570\u7ec4\u4e2d <code>True</code> \u7684\u6bd4\u4f8b\uff08\u5373\u5206\u7c7b\u6b63\u786e\u7684\u6837\u672c\u5360\u6bd4\uff09\uff0c\u4f5c\u4e3a\u51c6\u786e\u7387\u3002</p> <pre><code>import numpy as np\n\nclass NearestNeighbor:\n    def __init__(self):\n        pass\n\n    def train(self, X, y):\n        # X \u662f\u5f62\u72b6\u4e3a N x D \u7684\u8bad\u7ec3\u6570\u636e\uff0c\u5176\u4e2d\u6bcf\u4e00\u884c\u662f\u4e00\u4e2a\u793a\u4f8b\uff0cy \u662f N \u957f\u5ea6\u7684\u4e00\u7ef4\u6807\u7b7e\u6570\u7ec4\n        # \u6700\u8fd1\u90bb\u5206\u7c7b\u5668\u53ea\u9700\u8981\u8bb0\u4f4f\u6240\u6709\u7684\u8bad\u7ec3\u6570\u636e\n        self.Xtr = X\n        self.Ytr = y\n\n    def predict(self, X):\n        # X \u662f\u5f62\u72b6\u4e3a N x D \u7684\u6d4b\u8bd5\u6570\u636e\uff0c\u5176\u4e2d\u6bcf\u4e00\u884c\u662f\u4e00\u4e2a\u6211\u4eec\u60f3\u9884\u6d4b\u6807\u7b7e\u7684\u793a\u4f8b\n        num_test = X.shape[0]\n        # \u786e\u4fdd\u8f93\u51fa\u7c7b\u578b\u4e0e\u8f93\u5165\u7c7b\u578b\u5339\u914d\n        Ypred = np.zeros(num_test, dtype=self.Ytr.dtype)\n\n        # \u904d\u5386\u6240\u6709\u6d4b\u8bd5\u6837\u672c\n        for i in range(num_test):\n            # \u627e\u5230\u4e0e\u7b2c i \u4e2a\u6d4b\u8bd5\u6837\u672c\u6700\u8fd1\u7684\u8bad\u7ec3\u6837\u672c\n            # \u4f7f\u7528 L1 \u8ddd\u79bb\uff08\u7edd\u5bf9\u503c\u5dee\u7684\u548c\uff09\n            distances = np.sum(np.abs(self.Xtr - X[i, :]), axis=1)\n            # \u83b7\u53d6\u8ddd\u79bb\u6700\u5c0f\u7684\u7d22\u5f15\n            min_index = np.argmin(distances)\n            # \u9884\u6d4b\u6700\u8fd1\u6837\u672c\u7684\u6807\u7b7e\n            Ypred[i] = self.Ytr[min_index]\n\n        return Ypred\n</code></pre> <p>\u5982\u679c\u4f60\u7528\u8fd9\u6bb5\u4ee3\u7801\u8dd1 CIFAR-10\uff0c\u4f60\u4f1a\u53d1\u73b0\u51c6\u786e\u7387\u80fd\u8fbe\u5230 38.6%\u3002\u8fd9\u6bd4\u968f\u673a\u731c\u6d4b\u7684 10%\u8981\u597d\uff0c\u4f46\u662f\u6bd4\u4eba\u7c7b\u8bc6\u522b\u7684\u6c34\u5e73\uff08[\u636e\u7814\u7a76\u63a8\u6d4b\u662f 94%__][21]\uff09\u548c\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u80fd\u8fbe\u5230\u7684 95%\u8fd8\u662f\u5dee\u591a\u4e86\u3002\u70b9\u51fb\u67e5\u770b\u57fa\u4e8e CIFAR-10 \u6570\u636e\u7684[Kaggle \u7b97\u6cd5\u7ade\u8d5b\u6392\u884c\u699c__][22]\u3002</p> <p>\u8ddd\u79bb\u9009\u62e9\uff1a\u8ba1\u7b97\u5411\u91cf\u95f4\u7684\u8ddd\u79bb\u6709\u5f88\u591a\u79cd\u65b9\u6cd5\uff0c\u53e6\u4e00\u4e2a\u5e38\u7528\u7684\u65b9\u6cd5\u662f L2 \u8ddd\u79bb\uff0c\u4ece\u51e0\u4f55\u5b66\u7684\u89d2\u5ea6\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u5b83\u5728\u8ba1\u7b97\u4e24\u4e2a\u5411\u91cf\u95f4\u7684\u6b27\u5f0f\u8ddd\u79bb\u3002L2 \u8ddd\u79bb\u7684\u516c\u5f0f\u5982\u4e0b\uff1a</p> <p></p> <p>\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u4f9d\u65e7\u662f\u5728\u8ba1\u7b97\u50cf\u7d20\u95f4\u7684\u5dee\u503c\uff0c\u53ea\u662f\u5148\u6c42\u5176\u5e73\u65b9\uff0c\u7136\u540e\u628a\u8fd9\u4e9b\u5e73\u65b9\u5168\u90e8\u52a0\u8d77\u6765\uff0c\u6700\u540e\u5bf9\u8fd9\u4e2a\u548c\u5f00\u65b9\u3002\u5728 Numpy \u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u8981\u66ff\u6362\u4e0a\u9762\u4ee3\u7801\u4e2d\u7684 1 \u884c\u4ee3\u7801\u5c31\u884c\uff1a</p> <pre><code>    distances = np.sqrt(np.sum(np.square(self.Xtr - X[i,:]), axis = 1))\n</code></pre> <p>\u6ce8\u610f\u5728\u8fd9\u91cc\u4f7f\u7528\u4e86 np.sqrt\uff0c\u4f46\u662f\u5728\u5b9e\u9645\u4e2d\u53ef\u80fd\u4e0d\u7528\u3002\u56e0\u4e3a\u6c42\u5e73\u65b9\u6839\u51fd\u6570\u662f\u4e00\u4e2a\u5355\u8c03\u51fd\u6570\uff0c\u5b83\u5bf9\u4e0d\u540c\u8ddd\u79bb\u7684\u7edd\u5bf9\u503c\u6c42\u5e73\u65b9\u6839\u867d\u7136\u6539\u53d8\u4e86\u6570\u503c\u5927\u5c0f\uff0c\u4f46\u4f9d\u7136\u4fdd\u6301\u4e86\u4e0d\u540c\u8ddd\u79bb\u5927\u5c0f\u7684\u987a\u5e8f\u3002\u6240\u4ee5\u7528\u4e0d\u7528\u5b83\uff0c\u90fd\u80fd\u591f\u5bf9\u50cf\u7d20\u5dee\u5f02\u7684\u5927\u5c0f\u8fdb\u884c\u6b63\u786e\u6bd4\u8f83\u3002\u5982\u679c\u4f60\u5728 CIFAR-10 \u4e0a\u9762\u8dd1\u8fd9\u4e2a\u6a21\u578b\uff0c\u6b63\u786e\u7387\u662f 35.4%\uff0c\u6bd4\u521a\u624d\u4f4e\u4e86\u4e00\u70b9\u3002</p>"},{"location":"CV/Lecture2_Image_Classification/#k-nearest-neighbor-\u5206\u7c7b\u5668","title":"k-Nearest Neighbor \u5206\u7c7b\u5668","text":"<p>\u4f60\u53ef\u80fd\u6ce8\u610f\u5230\u4e86\uff0c\u4e3a\u4ec0\u4e48\u53ea\u7528\u6700\u76f8\u4f3c\u7684 1 \u5f20\u56fe\u7247\u7684\u6807\u7b7e\u6765\u4f5c\u4e3a\u6d4b\u8bd5\u56fe\u50cf\u7684\u6807\u7b7e\u5462\uff1f\u8fd9\u4e0d\u662f\u5f88\u5947\u602a\u5417\uff01\u662f\u7684\uff0c\u4f7f\u7528 k-Nearest Neighbor \u5206\u7c7b\u5668 \u5c31\u80fd\u505a\u5f97\u66f4\u597d\u3002\u5b83\u7684\u601d\u60f3\u5f88\u7b80\u5355\uff1a\u4e0e\u5176\u53ea\u627e\u6700\u76f8\u8fd1\u7684\u90a3 1 \u4e2a\u56fe\u7247\u7684\u6807\u7b7e\uff0c\u6211\u4eec\u627e\u6700\u76f8\u4f3c\u7684 k \u4e2a\u56fe\u7247\u7684\u6807\u7b7e\uff0c\u7136\u540e\u8ba9\u4ed6\u4eec\u9488\u5bf9\u6d4b\u8bd5\u56fe\u7247\u8fdb\u884c\u6295\u7968\uff0c\u6700\u540e\u628a\u7968\u6570\u6700\u9ad8\u7684\u6807\u7b7e\u4f5c\u4e3a\u5bf9\u6d4b\u8bd5\u56fe\u7247\u7684\u9884\u6d4b\u3002\u6240\u4ee5\u5f53 k = 1 \u7684\u65f6\u5019\uff0ck-Nearest Neighbor \u5206\u7c7b\u5668\u5c31\u662f Nearest Neighbor \u5206\u7c7b\u5668\u3002\u4ece\u76f4\u89c2\u611f\u53d7\u4e0a\u5c31\u53ef\u4ee5\u770b\u5230\uff0c\u66f4\u9ad8\u7684 k \u503c\u53ef\u4ee5\u8ba9\u5206\u7c7b\u7684\u6548\u679c\u66f4\u5e73\u6ed1\uff0c\u4f7f\u5f97\u5206\u7c7b\u5668\u5bf9\u4e8e\u5f02\u5e38\u503c\u66f4\u6709\u62b5\u6297\u529b\u3002</p> <p> \u4e0a\u9762\u793a\u4f8b\u5c55\u793a\u4e86 Nearest Neighbor \u5206\u7c7b\u5668\u548c 5-Nearest Neighbor \u5206\u7c7b\u5668\u7684\u533a\u522b\u3002\u4f8b\u5b50\u4f7f\u7528\u4e86 2 \u7ef4\u7684\u70b9\u6765\u8868\u793a\uff0c\u5206\u6210 3 \u7c7b\uff08\u7ea2\u3001\u84dd\u548c\u7eff\uff09\u3002\u4e0d\u540c\u989c\u8272\u533a\u57df\u4ee3\u8868\u7684\u662f\u4f7f\u7528 L2 \u8ddd\u79bb\u7684\u5206\u7c7b\u5668\u7684 \u51b3\u7b56\u8fb9\u754c\u3002\u767d\u8272\u7684\u533a\u57df\u662f\u5206\u7c7b\u6a21\u7cca\u7684\u4f8b\u5b50\uff08\u5373\u56fe\u50cf\u4e0e\u4e24\u4e2a\u4ee5\u4e0a\u7684\u5206\u7c7b\u6807\u7b7e\u7ed1\u5b9a\uff09\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728 NN \u5206\u7c7b\u5668\u4e2d\uff0c\u5f02\u5e38\u7684\u6570\u636e\u70b9\uff08\u6bd4\u5982\uff1a\u5728\u84dd\u8272\u533a\u57df\u4e2d\u7684\u7eff\u70b9\uff09\u5236\u9020\u51fa\u4e00\u4e2a\u4e0d\u6b63\u786e\u9884\u6d4b\u7684\u5b64\u5c9b\u30025-NN \u5206\u7c7b\u5668\u5c06\u8fd9\u4e9b\u4e0d\u89c4\u5219\u90fd\u5e73\u6ed1\u4e86\uff0c\u4f7f\u5f97\u5b83\u9488\u5bf9\u6d4b\u8bd5\u6570\u636e\u7684 \u6cdb\u5316\uff08generalization\uff09 \u80fd\u529b\u66f4\u597d\uff08\u4f8b\u5b50\u4e2d\u672a\u5c55\u793a\uff09\u3002\u6ce8\u610f\uff0c5-NN \u4e2d\u4e5f\u5b58\u5728\u4e00\u4e9b\u7070\u8272\u533a\u57df\uff0c\u8fd9\u4e9b\u533a\u57df\u662f\u56e0\u4e3a\u8fd1\u90bb\u6807\u7b7e\u7684\u6700\u9ad8\u7968\u6570\u76f8\u540c\u5bfc\u81f4\u7684\uff08\u6bd4\u5982\uff1a2 \u4e2a\u90bb\u5c45\u662f\u7ea2\u8272\uff0c2 \u4e2a\u90bb\u5c45\u662f\u84dd\u8272\uff0c\u8fd8\u6709 1 \u4e2a\u662f\u7eff\u8272)\u3002</p>"},{"location":"CV/Lecture2_Image_Classification/#\u7528\u4e8e\u8d85\u53c2\u6570\u8c03\u4f18\u7684\u9a8c\u8bc1\u96c6","title":"\u7528\u4e8e\u8d85\u53c2\u6570\u8c03\u4f18\u7684\u9a8c\u8bc1\u96c6","text":"<p>k-NN \u5206\u7c7b\u5668\u9700\u8981\u8bbe\u5b9a k \u503c\uff0c\u90a3\u4e48\u9009\u62e9\u54ea\u4e2a k \u503c\u6700\u5408\u9002\u7684\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u4e0d\u540c\u7684\u8ddd\u79bb\u51fd\u6570\uff0c\u6bd4\u5982 L1 \u8303\u6570\u548c L2 \u8303\u6570\u7b49\uff0c\u90a3\u4e48\u9009\u54ea\u4e2a\u597d\uff1f\u8fd8\u6709\u4e0d\u5c11\u9009\u62e9\u6211\u4eec\u751a\u81f3\u8fde\u8003\u8651\u90fd\u6ca1\u6709\u8003\u8651\u5230\uff08\u6bd4\u5982\uff1a\u70b9\u79ef\uff09\u3002\u6240\u6709\u8fd9\u4e9b\u9009\u62e9\uff0c\u88ab\u79f0\u4e3a \u8d85\u53c2\u6570\uff08hyperparameter\uff09\u3002\u5728\u57fa\u4e8e\u6570\u636e\u8fdb\u884c\u5b66\u4e60\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u8bbe\u8ba1\u4e2d\uff0c\u8d85\u53c2\u6570\u662f\u5f88\u5e38\u89c1\u7684\u3002\u4e00\u822c\u8bf4\u6765\uff0c\u8fd9\u4e9b\u8d85\u53c2\u6570\u5177\u4f53\u600e\u4e48\u8bbe\u7f6e\u6216\u53d6\u503c\u5e76\u4e0d\u662f\u663e\u800c\u6613\u89c1\u7684\u3002</p> <p></p> <p><code>\u4f60\u53ef\u80fd\u4f1a\u5efa\u8bae\u5c1d\u8bd5\u4e0d\u540c\u7684\u503c\uff0c\u770b\u54ea\u4e2a\u503c\u8868\u73b0\u6700\u597d\u5c31\u9009\u54ea\u4e2a\u3002</code></p> <ul> <li>choose hyperparameters that work best on the data</li> </ul> <p><code>K = 1 always works perfectly on training data</code></p> <ul> <li>Split data into train and test\uff0cchoose hyperparameters that work best on the test data</li> </ul> <p><code>No idea how algorithm will perform on new data</code></p> <p>\u7279\u522b\u6ce8\u610f\uff1a<code>\u51b3\u4e0d\u80fd\u4f7f\u7528\u6d4b\u8bd5\u96c6\u6765\u8fdb\u884c\u8c03\u4f18</code>\u3002\u5f53\u4f60\u5728\u8bbe\u8ba1\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u7684\u65f6\u5019\uff0c\u5e94\u8be5\u628a\u6d4b\u8bd5\u96c6\u770b\u505a\u975e\u5e38\u73cd\u8d35\u7684\u8d44\u6e90\uff0c\u4e0d\u5230\u6700\u540e\u4e00\u6b65\uff0c\u7edd\u4e0d\u4f7f\u7528\u5b83\u3002\u5982\u679c\u4f60\u4f7f\u7528\u6d4b\u8bd5\u96c6\u6765\u8c03\u4f18\uff0c\u800c\u4e14\u7b97\u6cd5\u770b\u8d77\u6765\u6548\u679c\u4e0d\u9519\uff0c\u90a3\u4e48\u771f\u6b63\u7684\u5371\u9669\u5728\u4e8e\uff1a\u7b97\u6cd5\u5b9e\u9645\u90e8\u7f72\u540e\uff0c\u6027\u80fd\u53ef\u80fd\u4f1a\u8fdc\u4f4e\u4e8e\u9884\u671f\u3002\u8fd9\u79cd\u60c5\u51b5\uff0c\u79f0\u4e4b\u4e3a\u7b97\u6cd5\u5bf9\u6d4b\u8bd5\u96c6 <code>\u8fc7\u62df\u5408</code>\u3002\u4ece\u53e6\u4e00\u4e2a\u89d2\u5ea6\u6765\u8bf4\uff0c\u5982\u679c\u4f7f\u7528\u6d4b\u8bd5\u96c6\u6765\u8c03\u4f18\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u6d4b\u8bd5\u96c6\u5f53\u505a\u8bad\u7ec3\u96c6\uff0c\u7531\u6d4b\u8bd5\u96c6\u8bad\u7ec3\u51fa\u6765\u7684\u7b97\u6cd5\u518d\u8dd1\u6d4b\u8bd5\u96c6\uff0c\u81ea\u7136\u6027\u80fd\u770b\u8d77\u6765\u4f1a\u5f88\u597d\u3002\u8fd9\u5176\u5b9e\u662f\u8fc7\u4e8e\u4e50\u89c2\u4e86\uff0c\u5b9e\u9645\u90e8\u7f72\u8d77\u6765\u6548\u679c\u5c31\u4f1a\u5dee\u5f88\u591a\u3002\u6240\u4ee5\uff0c\u6700\u7ec8\u6d4b\u8bd5\u7684\u65f6\u5019\u518d\u4f7f\u7528\u6d4b\u8bd5\u96c6\uff0c\u53ef\u4ee5\u5f88\u597d\u5730\u8fd1\u4f3c\u5ea6\u91cf\u4f60\u6240\u8bbe\u8ba1\u7684\u5206\u7c7b\u5668\u7684\u6cdb\u5316\u6027\u80fd\uff08\u5728\u63a5\u4e0b\u6765\u7684\u8bfe\u7a0b\u4e2d\u4f1a\u6709\u5f88\u591a\u5173\u4e8e\u6cdb\u5316\u6027\u80fd\u7684\u8ba8\u8bba\uff09\u3002</p> <p>\u6d4b\u8bd5\u6570\u636e\u96c6\u53ea\u4f7f\u7528\u4e00\u6b21\uff0c\u5373\u5728\u8bad\u7ec3\u5b8c\u6210\u540e\u8bc4\u4ef7\u6700\u7ec8\u7684\u6a21\u578b\u65f6\u4f7f\u7528\u3002</p> <p>\u4f46\u662f\u53ea\u6709\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u4f1a\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u90a3\u5c31\u662f\u4e0d\u77e5\u9053\u7b97\u6cd5\u5728\u65b0\u6570\u636e\u4e0a\u8868\u73b0\u5982\u4f55\u3002 \u89e3\u51b3\u601d\u8def\u662f\uff1a<code>\u4ece\u8bad\u7ec3\u96c6\u4e2d\u53d6\u51fa\u4e00\u90e8\u5206\u6570\u636e\u7528\u6765\u8c03\u4f18\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u9a8c\u8bc1\u96c6\uff08validation set\uff09\u3002</code> \u4ee5 CIFAR-10 \u4e3a\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 49000 \u4e2a\u56fe\u50cf\u4f5c\u4e3a\u8bad\u7ec3\u96c6\uff0c\u7528 1000 \u4e2a\u56fe\u50cf\u4f5c\u4e3a\u9a8c\u8bc1\u96c6\u3002\u9a8c\u8bc1\u96c6\u5176\u5b9e\u5c31\u662f\u4f5c\u4e3a\u5047\u7684\u6d4b\u8bd5\u96c6\u6765\u8c03\u4f18</p> <p>\u4e0b\u9762\u5c31\u662f\u4ee3\u7801\uff1a</p> <pre><code>    # assume we have Xtr_rows, Ytr, Xte_rows, Yte as before\n    # recall Xtr_rows is 50,000 x 3072 matrix\n    Xval_rows = Xtr_rows[:1000, :] # take first 1000 for validation\n    Yval = Ytr[:1000]\n    Xtr_rows = Xtr_rows[1000:, :] # keep last 49,000 for train\n    Ytr = Ytr[1000:]\n\n    # find hyperparameters that work best on the validation set\n    validation_accuracies = []\n    for k in [1, 3, 5, 10, 20, 50, 100]:\n\n      # use a particular value of k and evaluation on validation data\n      nn = NearestNeighbor()\n      nn.train(Xtr_rows, Ytr)\n      # here we assume a modified NearestNeighbor class that can take a k as input\n      Yval_predict = nn.predict(Xval_rows, k = k)\n      acc = np.mean(Yval_predict == Yval)\n      print 'accuracy: %f' % (acc,)\n\n      # keep track of what works on the validation set\n      validation_accuracies.append((k, acc))\n</code></pre> <p>\u7a0b\u5e8f\u7ed3\u675f\u540e\uff0c\u6211\u4eec\u4f1a\u4f5c\u56fe\u5206\u6790\u51fa\u54ea\u4e2a k \u503c\u8868\u73b0\u6700\u597d\uff0c\u7136\u540e\u7528\u8fd9\u4e2a k \u503c\u6765\u8dd1\u771f\u6b63\u7684\u6d4b\u8bd5\u96c6\uff0c\u5e76\u4f5c\u51fa\u5bf9\u7b97\u6cd5\u7684\u8bc4\u4ef7\u3002 \u628a\u8bad\u7ec3\u96c6\u5206\u6210\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u3002\u4f7f\u7528\u9a8c\u8bc1\u96c6\u6765\u5bf9\u6240\u6709\u8d85\u53c2\u6570\u8c03\u4f18\u3002\u6700\u540e\u53ea\u5728\u6d4b\u8bd5\u96c6\u4e0a\u8dd1\u4e00\u6b21\u5e76\u62a5\u544a\u7ed3\u679c\u3002</p> <p></p> <p>\u4ea4\u53c9\u9a8c\u8bc1\u3002\u6709\u65f6\u5019\uff0c\u8bad\u7ec3\u96c6\u6570\u91cf\u8f83\u5c0f\uff08\u56e0\u6b64\u9a8c\u8bc1\u96c6\u7684\u6570\u91cf\u66f4\u5c0f\uff09\uff0c\u4eba\u4eec\u4f1a\u4f7f\u7528\u4e00\u79cd\u88ab\u79f0\u4e3a \u4ea4\u53c9\u9a8c\u8bc1 \u7684\u65b9\u6cd5\uff0c\u8fd9\u79cd\u65b9\u6cd5\u66f4\u52a0\u590d\u6742\u4e9b\u3002\u8fd8\u662f\u7528\u521a\u624d\u7684\u4f8b\u5b50\uff0c\u5982\u679c\u662f\u4ea4\u53c9\u9a8c\u8bc1\u96c6\uff0c\u6211\u4eec\u5c31\u4e0d\u662f\u53d6 1000 \u4e2a\u56fe\u50cf\uff0c\u800c\u662f\u5c06\u8bad\u7ec3\u96c6\u5e73\u5747\u5206\u6210 5 \u4efd\uff0c\u5176\u4e2d 4 \u4efd\u7528\u6765\u8bad\u7ec3\uff0c1 \u4efd\u7528\u6765\u9a8c\u8bc1\u3002\u7136\u540e\u6211\u4eec\u5faa\u73af\u7740\u53d6\u5176\u4e2d 4 \u4efd\u6765\u8bad\u7ec3\uff0c\u5176\u4e2d 1 \u4efd\u6765\u9a8c\u8bc1\uff0c\u6700\u540e\u53d6\u6240\u6709 5 \u6b21\u9a8c\u8bc1\u7ed3\u679c\u7684\u5e73\u5747\u503c\u4f5c\u4e3a\u7b97\u6cd5\u9a8c\u8bc1\u7ed3\u679c\u3002</p> <p> \u5e38\u7528\u7684\u6570\u636e\u5206\u5272\u6a21\u5f0f\u3002\u7ed9\u51fa\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u540e\uff0c\u8bad\u7ec3\u96c6\u4e00\u822c\u4f1a\u88ab\u5747\u5206\u3002\u8fd9\u91cc\u662f\u5206\u6210 5 \u4efd\u3002\u524d\u9762 4 \u4efd\u7528\u6765\u8bad\u7ec3\uff0c\u9ec4\u8272\u90a3\u4efd\u7528\u4f5c\u9a8c\u8bc1\u96c6\u8c03\u4f18\u3002\u5982\u679c\u91c7\u53d6\u4ea4\u53c9\u9a8c\u8bc1\uff0c\u90a3\u5c31\u5404\u4efd\u8f6e\u6d41\u4f5c\u4e3a\u9a8c\u8bc1\u96c6\u3002\u6700\u540e\u6a21\u578b\u8bad\u7ec3\u5b8c\u6bd5\uff0c\u8d85\u53c2\u6570\u90fd\u5b9a\u597d\u4e86\uff0c\u8ba9\u6a21\u578b\u8dd1\u4e00\u6b21\uff08\u800c\u4e14\u53ea\u8dd1\u4e00\u6b21)\u6d4b\u8bd5\u96c6\uff0c\u4ee5\u6b64\u6d4b\u8bd5\u7ed3\u679c\u8bc4\u4ef7\u7b97\u6cd5\u3002</p> <p></p> <p>\u8fd9\u5c31\u662f 5 \u4efd\u4ea4\u53c9\u9a8c\u8bc1\u5bf9 k \u503c\u8c03\u4f18\u7684\u4f8b\u5b50\u3002\u9488\u5bf9\u6bcf\u4e2a k \u503c\uff0c\u5f97\u5230 5 \u4e2a\u51c6\u786e\u7387\u7ed3\u679c\uff0c\u53d6\u5176\u5e73\u5747\u503c\uff0c\u7136\u540e\u5bf9\u4e0d\u540c k \u503c\u7684\u5e73\u5747\u8868\u73b0\u753b\u7ebf\u8fde\u63a5\u3002\u672c\u4f8b\u4e2d\uff0c\u5f53 k = 7 \u7684\u65f6\u7b97\u6cd5\u8868\u73b0\u6700\u597d\uff08\u5bf9\u5e94\u56fe\u4e2d\u7684\u51c6\u786e\u7387\u5cf0\u503c\uff09\u3002\u5982\u679c\u6211\u4eec\u5c06\u8bad\u7ec3\u96c6\u5206\u6210\u66f4\u591a\u4efd\u6570\uff0c\u76f4\u7ebf\u4e00\u822c\u4f1a\u66f4\u52a0\u5e73\u6ed1\uff08\u566a\u97f3\u66f4\u5c11\uff09\u3002</p> <p>\u968f\u7740 training samples \u7684\u6570\u91cf\u8d8b\u4e8e\u65e0\u7a77\uff0cnearest neighbor \u53ef\u4ee5\u8868\u793a\u4efb\u4f55\u51fd\u6570</p> <p></p> <p>\u4f46\u662f\u968f\u7740\u7ef4\u6570\u7684\u589e\u957f\uff0c\u4e3a\u4e86\u5c3d\u53ef\u80fd\u8986\u76d6\u6d4b\u8bd5\u96c6\uff0c\u6d4b\u8bd5\u70b9\u7684\u6570\u91cf\u6307\u6570\u7ea7\u589e\u957f</p>"},{"location":"CV/Lecture2_Image_Classification/#nearest-neighbor-\u5206\u7c7b\u5668\u7684\u4f18\u52a3","title":"Nearest Neighbor \u5206\u7c7b\u5668\u7684\u4f18\u52a3","text":"<p>\u73b0\u5728\u5bf9 Nearest Neighbor \u5206\u7c7b\u5668\u7684\u4f18\u7f3a\u70b9\u8fdb\u884c\u601d\u8003\u3002\u9996\u5148\uff0cNearest Neighbor \u5206\u7c7b\u5668\u6613\u4e8e\u7406\u89e3\uff0c\u5b9e\u73b0\u7b80\u5355\u3002\u5176\u6b21\uff0c<code>\u7b97\u6cd5\u7684\u8bad\u7ec3\u4e0d\u9700\u8981\u82b1\u65f6\u95f4\uff0c\u56e0\u4e3a\u5176\u8bad\u7ec3\u8fc7\u7a0b\u53ea\u662f\u5c06\u8bad\u7ec3\u96c6\u6570\u636e\u5b58\u50a8\u8d77\u6765\u3002\u7136\u800c\u6d4b\u8bd5\u8981\u82b1\u8d39\u5927\u91cf\u65f6\u95f4\u8ba1\u7b97\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u6d4b\u8bd5\u56fe\u50cf\u9700\u8981\u548c\u6240\u6709\u5b58\u50a8\u7684\u8bad\u7ec3\u56fe\u50cf\u8fdb\u884c\u6bd4\u8f83</code>\uff0c\u8fd9\u663e\u7136\u662f\u4e00\u4e2a\u7f3a\u70b9\u3002\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u6211\u4eec\u5173\u6ce8\u6d4b\u8bd5\u6548\u7387\u8fdc\u8fdc\u9ad8\u4e8e\u8bad\u7ec3\u6548\u7387\u3002</p> <p>\u5176\u5b9e\uff0c\u6211\u4eec\u540e\u7eed\u8981\u5b66\u4e60\u7684 <code>\u5377\u79ef\u795e\u7ecf\u7f51\u7edc</code> \u5728\u8fd9\u4e2a\u6743\u8861\u4e0a\u8d70\u5230\u4e86\u53e6\u4e00\u4e2a\u6781\u7aef\uff1a<code>\u867d\u7136\u8bad\u7ec3\u82b1\u8d39\u5f88\u591a\u65f6\u95f4\uff0c\u4f46\u662f\u4e00\u65e6\u8bad\u7ec3\u5b8c\u6210\uff0c\u5bf9\u65b0\u7684\u6d4b\u8bd5\u6570\u636e\u8fdb\u884c\u5206\u7c7b\u975e\u5e38\u5feb</code>\u3002\u8fd9\u6837\u7684\u6a21\u5f0f\u5c31\u7b26\u5408\u5b9e\u9645\u4f7f\u7528\u9700\u6c42\u3002</p> <p>Nearest Neighbor \u5206\u7c7b\u5668\u7684\u8ba1\u7b97\u590d\u6742\u5ea6\u7814\u7a76\u662f\u4e00\u4e2a\u6d3b\u8dc3\u7684\u7814\u7a76\u9886\u57df\uff0c\u82e5\u5e72 Approximate Nearest Neighbor (ANN)\u7b97\u6cd5\u548c\u5e93\u7684\u4f7f\u7528\u53ef\u4ee5\u63d0\u5347 Nearest Neighbor \u5206\u7c7b\u5668\u5728\u6570\u636e\u4e0a\u7684\u8ba1\u7b97\u901f\u5ea6\uff08\u6bd4\u5982\uff1a[FLANN__][14]\uff09\u3002\u8fd9\u4e9b\u7b97\u6cd5\u53ef\u4ee5\u5728\u51c6\u786e\u7387\u548c\u65f6\u7a7a\u590d\u6742\u5ea6\u4e4b\u95f4\u8fdb\u884c\u6743\u8861\uff0c\u5e76\u901a\u5e38\u4f9d\u8d56\u4e00\u4e2a\u9884\u5904\u7406/\u7d22\u5f15\u8fc7\u7a0b\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u4e00\u822c\u5305\u542b kd \u6811\u7684\u521b\u5efa\u548c k-means \u7b97\u6cd5\u7684\u8fd0\u7528\u3002</p> <p>Nearest Neighbor \u5206\u7c7b\u5668\u5728\u67d0\u4e9b\u7279\u5b9a\u60c5\u51b5\uff08\u6bd4\u5982\u6570\u636e\u7ef4\u5ea6\u8f83\u4f4e\uff09\u4e0b\uff0c\u53ef\u80fd\u662f\u4e0d\u9519\u7684\u9009\u62e9\u3002\u4f46\u662f\u5728\u5b9e\u9645\u7684\u56fe\u50cf\u5206\u7c7b\u5de5\u4f5c\u4e2d\uff0c\u5f88\u5c11\u4f7f\u7528\u3002</p> <ol> <li>\u56fe\u50cf\u90fd\u662f\u9ad8\u7ef4\u5ea6\u6570\u636e\uff08\u4ed6\u4eec\u901a\u5e38\u5305\u542b\u5f88\u591a\u50cf\u7d20\uff09\uff0c\u8981\u60f3\u6027\u80fd\u597d\uff0c\u8bad\u7ec3\u96c6\u6307\u6570\u589e\u957f\u9700\u8981\u8db3\u591f\u5e9e\u5927</li> <li>\u6d4b\u8bd5\u65f6\u95f4\u8fc7\u4e8e\u6f2b\u957f</li> <li>\u800c\u9ad8\u7ef4\u5ea6\u5411\u91cf\u4e4b\u95f4\u7684\u8ddd\u79bb\u901a\u5e38\u662f\u53cd\u76f4\u89c9\u7684\u3002\u4e0b\u9762\u7684\u56fe\u7247\u5c55\u793a\u4e86\u57fa\u4e8e\u50cf\u7d20\u7684\u76f8\u4f3c\u548c\u57fa\u4e8e\u611f\u5b98\u7684\u76f8\u4f3c\u662f\u6709\u5f88\u5927\u4e0d\u540c\u7684\uff1a</li> </ol> <p></p> <p>\u5728\u9ad8\u7ef4\u5ea6\u6570\u636e\u4e0a\uff0c\u57fa\u4e8e\u50cf\u7d20\u7684\u7684\u8ddd\u79bb\u548c\u611f\u5b98\u4e0a\u7684\u975e\u5e38\u4e0d\u540c\u3002\u4e0a\u56fe\u4e2d\uff0c\u53f3\u8fb9 3 \u5f20\u56fe\u7247\u548c\u5de6\u8fb9\u7b2c 1 \u5f20\u539f\u59cb\u56fe\u7247\u7684 L2 \u8ddd\u79bb\u662f\u4e00\u6837\u7684\u3002\u5f88\u663e\u7136\uff0c\u57fa\u4e8e\u50cf\u7d20\u6bd4\u8f83\u7684\u76f8\u4f3c\u548c\u611f\u5b98\u4e0a\u4ee5\u53ca\u8bed\u4e49\u4e0a\u7684\u76f8\u4f3c\u662f\u4e0d\u540c\u7684\u3002</p>"},{"location":"CV/Lecture2_Image_Classification/#\u5c0f\u7ed3","title":"\u5c0f\u7ed3","text":"<ul> <li>\u4ecb\u7ecd\u4e86 \u56fe\u50cf\u5206\u7c7b \u95ee\u9898\u3002\u5728\u8be5\u95ee\u9898\u4e2d\uff0c\u7ed9\u51fa\u4e00\u4e2a\u7531\u88ab\u6807\u6ce8\u4e86\u5206\u7c7b\u6807\u7b7e\u7684\u56fe\u50cf\u7ec4\u6210\u7684\u96c6\u5408\uff0c\u8981\u6c42\u7b97\u6cd5\u80fd\u9884\u6d4b\u6ca1\u6709\u6807\u7b7e\u7684\u56fe\u50cf\u7684\u5206\u7c7b\u6807\u7b7e\uff0c\u5e76\u6839\u636e\u7b97\u6cd5\u9884\u6d4b\u51c6\u786e\u7387\u8fdb\u884c\u8bc4\u4ef7\u3002</li> <li>\u4ecb\u7ecd\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u56fe\u50cf\u5206\u7c7b\u5668\uff1a\u6700\u8fd1\u90bb\u5206\u7c7b\u5668(Nearest Neighbor classifier)\u3002\u5206\u7c7b\u5668\u4e2d\u5b58\u5728\u4e0d\u540c\u7684\u8d85\u53c2\u6570(\u6bd4\u5982 k \u503c\u6216\u8ddd\u79bb\u7c7b\u578b\u7684\u9009\u53d6)\uff0c\u8981\u60f3\u9009\u53d6\u597d\u7684\u8d85\u53c2\u6570\u4e0d\u662f\u4e00\u4ef6\u8f7b\u800c\u6613\u4e3e\u7684\u4e8b\u3002</li> <li>\u9009\u53d6\u8d85\u53c2\u6570\u7684\u6b63\u786e\u65b9\u6cd5\u662f\uff1a\u5c06\u539f\u59cb\u8bad\u7ec3\u96c6\u5206\u4e3a\u8bad\u7ec3\u96c6\u548c \u9a8c\u8bc1\u96c6\uff0c\u6211\u4eec\u5728\u9a8c\u8bc1\u96c6\u4e0a\u5c1d\u8bd5\u4e0d\u540c\u7684\u8d85\u53c2\u6570\uff0c\u6700\u540e\u4fdd\u7559\u8868\u73b0\u6700\u597d\u90a3\u4e2a\u3002</li> <li>\u5982\u679c\u8bad\u7ec3\u6570\u636e\u91cf\u4e0d\u591f\uff0c\u4f7f\u7528 \u4ea4\u53c9\u9a8c\u8bc1 \u65b9\u6cd5\uff0c\u5b83\u80fd\u5e2e\u52a9\u6211\u4eec\u5728\u9009\u53d6\u6700\u4f18\u8d85\u53c2\u6570\u7684\u65f6\u5019\u51cf\u5c11\u566a\u97f3\u3002</li> <li>\u4e00\u65e6\u627e\u5230\u6700\u4f18\u7684\u8d85\u53c2\u6570\uff0c\u5c31\u8ba9\u7b97\u6cd5\u4ee5\u8be5\u53c2\u6570\u5728\u6d4b\u8bd5\u96c6\u8dd1\u4e14\u53ea\u8dd1\u4e00\u6b21\uff0c\u5e76\u6839\u636e\u6d4b\u8bd5\u7ed3\u679c\u8bc4\u4ef7\u7b97\u6cd5\u3002</li> <li>\u6700\u8fd1\u90bb\u5206\u7c7b\u5668\u80fd\u591f\u5728 CIFAR-10 \u4e0a\u5f97\u5230\u5c06\u8fd1 40%\u7684\u51c6\u786e\u7387\u3002\u8be5\u7b97\u6cd5\u7b80\u5355\u6613\u5b9e\u73b0\uff0c\u4f46\u9700\u8981\u5b58\u50a8\u6240\u6709\u8bad\u7ec3\u6570\u636e\uff0c\u5e76\u4e14\u5728\u6d4b\u8bd5\u7684\u65f6\u5019\u8fc7\u4e8e\u8017\u8d39\u8ba1\u7b97\u80fd\u529b\u3002</li> <li>\u6700\u540e\uff0c\u6211\u4eec\u77e5\u9053\u4e86\u4ec5\u4ec5\u4f7f\u7528 L1 \u548c L2 \u8303\u6570\u6765\u8fdb\u884c\u50cf\u7d20\u6bd4\u8f83\u662f\u4e0d\u591f\u7684\uff0c\u56fe\u50cf\u66f4\u591a\u7684\u662f\u6309\u7167\u80cc\u666f\u548c\u989c\u8272\u88ab\u5206\u7c7b\uff0c\u800c\u4e0d\u662f\u8bed\u4e49\u4e3b\u4f53\u5206\u8eab\u3002</li> </ul> <p>\u5728\u63a5\u4e0b\u6765\u7684\u8bfe\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u4e13\u6ce8\u4e8e\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u548c\u6311\u6218\uff0c\u5e76\u6700\u7ec8\u80fd\u591f\u5f97\u5230\u8d85\u8fc7 90%\u51c6\u786e\u7387\u7684\u89e3\u51b3\u65b9\u6848\u3002\u8be5\u65b9\u6848\u80fd\u591f\u5728\u5b8c\u6210\u5b66\u4e60\u5c31\u4e22\u6389\u8bad\u7ec3\u96c6\uff0c\u5e76\u5728\u4e00\u6beb\u79d2\u4e4b\u5185\u5c31\u5b8c\u6210\u4e00\u5f20\u56fe\u7247\u7684\u5206\u7c7b\u3002</p>"},{"location":"CV/Lecture2_Image_Classification/#\u5c0f\u7ed3\u5b9e\u9645\u5e94\u7528-k-nn","title":"\u5c0f\u7ed3\uff1a\u5b9e\u9645\u5e94\u7528 k-NN","text":"<p>\u5982\u679c\u4f60\u5e0c\u671b\u5c06 k-NN \u5206\u7c7b\u5668\u7528\u5230\u5b9e\u5904\uff08\u6700\u597d\u522b\u7528\u5230\u56fe\u50cf\u4e0a\uff0c\u82e5\u662f\u4ec5\u4ec5\u4f5c\u4e3a\u7ec3\u624b\u8fd8\u53ef\u4ee5\u63a5\u53d7\uff09\uff0c\u90a3\u4e48\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u6d41\u7a0b\uff1a</p> <ol> <li>\u9884\u5904\u7406\u4f60\u7684\u6570\u636e\uff1a\u5bf9\u4f60\u6570\u636e\u4e2d\u7684\u7279\u5f81\u8fdb\u884c\u5f52\u4e00\u5316\uff08normalize\uff09\uff0c\u8ba9\u5176\u5177\u6709\u96f6\u5e73\u5747\u503c\uff08zero mean\uff09\u548c\u5355\u4f4d\u65b9\u5dee\uff08unit variance\uff09\u3002\u5728\u540e\u9762\u7684\u5c0f\u8282\u6211\u4eec\u4f1a\u8ba8\u8bba\u8fd9\u4e9b\u7ec6\u8282\u3002\u672c\u5c0f\u8282\u4e0d\u8ba8\u8bba\uff0c\u662f\u56e0\u4e3a\u56fe\u50cf\u4e2d\u7684\u50cf\u7d20\u90fd\u662f\u540c\u8d28\u7684\uff0c\u4e0d\u4f1a\u8868\u73b0\u51fa\u8f83\u5927\u7684\u5dee\u5f02\u5206\u5e03\uff0c\u4e5f\u5c31\u4e0d\u9700\u8981\u6807\u51c6\u5316\u5904\u7406\u4e86\u3002</li> <li>\u5982\u679c\u6570\u636e\u662f\u9ad8\u7ef4\u6570\u636e\uff0c\u8003\u8651\u4f7f\u7528\u964d\u7ef4\u65b9\u6cd5\uff0c\u6bd4\u5982 PCA([wiki ref __][18], [CS229ref__][19], [blog ref __][20])\u6216[\u968f\u673a\u6295\u5f71__][21]\u3002</li> <li>\u5c06\u6570\u636e\u968f\u673a\u5206\u5165\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u3002\u6309\u7167\u4e00\u822c\u89c4\u5f8b\uff0c70%-90% \u6570\u636e\u4f5c\u4e3a\u8bad\u7ec3\u96c6\u3002\u8fd9\u4e2a\u6bd4\u4f8b\u6839\u636e\u7b97\u6cd5\u4e2d\u6709\u591a\u5c11\u8d85\u53c2\u6570\uff0c\u4ee5\u53ca\u8fd9\u4e9b\u8d85\u53c2\u6570\u5bf9\u4e8e\u7b97\u6cd5\u7684\u9884\u671f\u5f71\u54cd\u6765\u51b3\u5b9a\u3002\u5982\u679c\u9700\u8981\u9884\u6d4b\u7684\u8d85\u53c2\u6570\u5f88\u591a\uff0c\u90a3\u4e48\u5c31\u5e94\u8be5\u4f7f\u7528\u66f4\u5927\u7684\u9a8c\u8bc1\u96c6\u6765\u6709\u6548\u5730\u4f30\u8ba1\u5b83\u4eec\u3002\u5982\u679c\u62c5\u5fc3\u9a8c\u8bc1\u96c6\u6570\u91cf\u4e0d\u591f\uff0c\u90a3\u4e48\u5c31\u5c1d\u8bd5\u4ea4\u53c9\u9a8c\u8bc1\u65b9\u6cd5\u3002\u5982\u679c\u8ba1\u7b97\u8d44\u6e90\u8db3\u591f\uff0c\u4f7f\u7528\u4ea4\u53c9\u9a8c\u8bc1\u603b\u662f\u66f4\u52a0\u5b89\u5168\u7684\uff08\u4efd\u6570\u8d8a\u591a\uff0c\u6548\u679c\u8d8a\u597d\uff0c\u4e5f\u66f4\u8017\u8d39\u8ba1\u7b97\u8d44\u6e90\uff09\u3002</li> <li>\u5728\u9a8c\u8bc1\u96c6\u4e0a\u8c03\u4f18\uff0c\u5c1d\u8bd5\u8db3\u591f\u591a\u7684 k \u503c\uff0c\u5c1d\u8bd5 L1 \u548c L2 \u4e24\u79cd\u8303\u6570\u8ba1\u7b97\u65b9\u5f0f\u3002</li> <li>\u5982\u679c\u5206\u7c7b\u5668\u8dd1\u5f97\u592a\u6162\uff0c\u5c1d\u8bd5\u4f7f\u7528 Approximate Nearest Neighbor \u5e93\uff08\u6bd4\u5982[FLANN__][14]\uff09\u6765\u52a0\u901f\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5176\u4ee3\u4ef7\u662f\u964d\u4f4e\u4e00\u4e9b\u51c6\u786e\u7387\u3002</li> <li>\u5bf9\u6700\u4f18\u7684\u8d85\u53c2\u6570\u505a\u8bb0\u5f55\u3002\u8bb0\u5f55\u6700\u4f18\u53c2\u6570\u540e\uff0c\u662f\u5426\u5e94\u8be5\u8ba9\u4f7f\u7528\u6700\u4f18\u53c2\u6570\u7684\u7b97\u6cd5\u5728\u5b8c\u6574\u7684\u8bad\u7ec3\u96c6\u4e0a\u8fd0\u884c\u5e76\u518d\u6b21\u8bad\u7ec3\u5462\uff1f\u56e0\u4e3a\u5982\u679c\u628a\u9a8c\u8bc1\u96c6\u91cd\u65b0\u653e\u56de\u5230\u8bad\u7ec3\u96c6\u4e2d\uff08\u81ea\u7136\u8bad\u7ec3\u96c6\u7684\u6570\u636e\u91cf\u5c31\u53c8\u53d8\u5927\u4e86\uff09\uff0c\u6709\u53ef\u80fd\u6700\u4f18\u53c2\u6570\u53c8\u4f1a\u6709\u6240\u53d8\u5316\u3002\u5728\u5b9e\u8df5\u4e2d\uff0c\u4e0d\u8981\u8fd9\u6837\u505a\u3002\u5343\u4e07\u4e0d\u8981\u5728\u6700\u7ec8\u7684\u5206\u7c7b\u5668\u4e2d\u4f7f\u7528\u9a8c\u8bc1\u96c6\u6570\u636e\uff0c\u8fd9\u6837\u505a\u4f1a\u7834\u574f\u5bf9\u4e8e\u6700\u4f18\u53c2\u6570\u7684\u4f30\u8ba1\u3002\u76f4\u63a5\u4f7f\u7528\u6d4b\u8bd5\u96c6\u6765\u6d4b\u8bd5\u7528\u6700\u4f18\u53c2\u6570\u8bbe\u7f6e\u597d\u7684\u6700\u4f18\u6a21\u578b\uff0c\u5f97\u5230\u6d4b\u8bd5\u96c6\u6570\u636e\u7684\u5206\u7c7b\u51c6\u786e\u7387\uff0c\u5e76\u4ee5\u6b64\u4f5c\u4e3a\u4f60\u7684 kNN \u5206\u7c7b\u5668\u5728\u8be5\u6570\u636e\u4e0a\u7684\u6027\u80fd\u8868\u73b0\u3002</li> </ol>"},{"location":"CV/Lecture2_Image_Classification/#\u8bc4\u4ef7\u6307\u6807","title":"\u8bc4\u4ef7\u6307\u6807","text":""},{"location":"CV/Lecture2_Image_Classification/#\u6b63\u8d1f\u6837\u672c","title":"\u6b63\u8d1f\u6837\u672c","text":"<p>\u6307\u6807\u9996\u5148\u662f\u7edf\u8ba1\u6b63\u8d1f\u6837\u672c</p> <ol> <li>\u6b63\u6837\u672c\uff08Positive Samples\uff09\uff1a</li> <li>\u6b63\u6837\u672c\u662f\u6307\u90a3\u4e9b\u6807\u7b7e\u6216\u8f93\u51fa\u662f\u6b63\u7c7b\u7684\u6570\u636e\u70b9\u3002\u5728\u4e8c\u5143\u5206\u7c7b\u4e2d\uff0c\u201c\u6b63\u201d\u901a\u5e38\u610f\u5473\u7740\u6211\u4eec\u611f\u5174\u8da3\u7684\u7c7b\u522b\uff0c\u6216\u8005\u662f\u6211\u4eec\u5e0c\u671b\u6a21\u578b\u68c0\u6d4b\u6216\u9884\u6d4b\u7684\u7c7b\u522b\u3002</li> <li>\u4f8b\u5982\uff0c\u5728\u5783\u573e\u90ae\u4ef6\u68c0\u6d4b\u95ee\u9898\u4e2d\uff0c\u5783\u573e\u90ae\u4ef6\u662f\u6b63\u6837\u672c\uff0c\u56e0\u4e3a\u6a21\u578b\u7684\u4efb\u52a1\u662f\u8bc6\u522b\u51fa\u5783\u573e\u90ae\u4ef6\u3002</li> <li>\u8d1f\u6837\u672c\uff08Negative Samples\uff09\uff1a</li> <li>\u8d1f\u6837\u672c\u662f\u6307\u90a3\u4e9b\u6807\u7b7e\u6216\u8f93\u51fa\u662f\u8d1f\u7c7b\u7684\u6570\u636e\u70b9\u3002\u5728\u4e8c\u5143\u5206\u7c7b\u4e2d\uff0c\u201c\u8d1f\u201d\u901a\u5e38\u610f\u5473\u7740\u975e\u76ee\u6807\u7c7b\u522b\uff0c\u5373\u6211\u4eec\u4e0d\u5e0c\u671b\u6a21\u578b\u68c0\u6d4b\u6216\u9884\u6d4b\u7684\u7c7b\u522b\u3002</li> <li>\u5728\u5783\u573e\u90ae\u4ef6\u68c0\u6d4b\u7684\u4f8b\u5b50\u4e2d\uff0c\u975e\u5783\u573e\u90ae\u4ef6\u662f\u8d1f\u6837\u672c\u3002</li> </ol> <p></p>"},{"location":"CV/Lecture2_Image_Classification/#pr-\u66f2\u7ebf","title":"PR \u66f2\u7ebf","text":"<ol> <li>Precision\uff1a\u4e5f\u53eb\u67e5\u51c6\u7387\uff0c\u8868\u793a\u6240\u6709\u88ab\u6a21\u578b\u5224\u5b9a\u4e3a\u6b63\u6837\u672c\u4e2d\uff0c\u771f\u6b63\u7684\u6b63\u6837\u672c\u7684\u6bd4\u4f8b\u3002</li> <li>Recall\uff1a\u4e5f\u53eb\u67e5\u5168\u7387\u6216\u8005\u53ec\u56de\u7387\uff0c\u8868\u793a\u6240\u6709\u771f\u6b63\u7684\u6b63\u6837\u672c\u4e2d\uff0c\u88ab\u6a21\u578b\u5224\u5b9a\u4e3a\u6b63\u6837\u672c\u7684\u6bd4\u4f8b\u3002</li> </ol> <p>\u901a\u5e38\u4f1a\u4e3a\u6bcf\u4e2a\u7269\u4f53\u7c7b\u522b\u7ed8\u5236\u4e00\u4e2a PR \u66f2\u7ebf\uff08Precision-Recall \u66f2\u7ebf\uff09\uff0c\u7136\u540e\u8ba1\u7b97\u8be5\u66f2\u7ebf\u4e0b\u7684\u9762\u79ef\uff0c\u5373 AP\uff08Average Precision\uff0c\u5e73\u5747\u7cbe\u5ea6\uff09\u3002AP \u503c\u8d8a\u9ad8\uff0c\u8bf4\u660e\u6a21\u578b\u5728\u8be5\u7c7b\u522b\u7684\u68c0\u6d4b\u6027\u80fd\u8d8a\u597d\u3002</p> <p>\u4e0d\u8fc7\u7cbe\u5ea6\u548c\u53ec\u56de\u7387\u662f\u76f8\u4e92\u77db\u76fe\u7684\uff0c\u53ec\u56de\u7387\u8d8a\u9ad8\uff0c\u6a21\u578b\u8d8a\u503e\u5411\u4e8e\u628a\u66f4\u591a\u6837\u672c\u5f52\u7c7b\u4e3a\u6b63\u6837\u672c\uff0c\u5c31\u5bb9\u6613\u8bef\u5224</p> <p>\u6240\u4ee5\u6211\u4eec\u9700\u8981\u7efc\u5408\u8003\u8651\uff0c\u4e5f\u5c31\u662f PR \u66f2\u7ebf\u7684\u9762\u79ef\u8d8a\u5927\uff0c\u6027\u80fd\u5c31\u8d8a\u597d\uff0c\u4f46\u662f PR \u66f2\u7ebf\u5bf9\u6b63\u8d1f\u6837\u672c\u4e0d\u5747\u8861\u5f88\u654f\u611f\uff0cPR \u66f2\u7ebf\u66f4\u5173\u6ce8\u6b63\u6837\u672c\u7684\u9884\u6d4b\u51c6\u786e\u6027\uff0c\u56e0\u6b64\u5728\u6b63\u6837\u672c\u8f83\u5c11\u7684\u60c5\u51b5\u4e0b\uff0c\u6a21\u578b\u6027\u80fd\u7684\u5fae\u5c0f\u53d8\u5316\u4e5f\u4f1a\u5728 PR \u66f2\u7ebf\u4e0a\u8868\u73b0\u5f97\u975e\u5e38\u660e\u663e\u3002</p> <p></p> <p>\u6240\u4ee5\u6211\u4eec\u4e5f\u4f1a\u4f7f\u7528 ROC \u66f2\u7ebf\u8fdb\u884c\u66f4\u5168\u9762\u7684\u5224\u65ad</p>"},{"location":"CV/Lecture2_Image_Classification/#roc-\u66f2\u7ebf\u4e0e-auc","title":"ROC \u66f2\u7ebf\u4e0e AUC","text":"<p>AUC \u5c31\u662f ROC \u66f2\u7ebf\u4e0b\u7684\u9762\u79ef\uff0cAUC \u66f2\u7ebf\u5bf9\u6b63\u8d1f\u6837\u672c\u4e0d\u5e73\u8861\u7684\u654f\u611f\u5ea6\u8f83\u4f4e\u3002\u5373\u4f7f\u5728\u8d1f\u6837\u672c\u6570\u91cf\u8fdc\u8d85\u6b63\u6837\u672c\u7684\u60c5\u51b5\u4e0b\uff0cAUC \u4ecd\u80fd\u63d0\u4f9b\u8f83\u4e3a\u5408\u7406\u7684\u6027\u80fd\u8bc4\u4f30\u3002\u8fd9\u662f\u56e0\u4e3a AUC \u8003\u8651\u4e86\u6240\u6709\u53ef\u80fd\u7684\u5206\u7c7b\u9608\u503c\uff0c\u5e76\u4e14 FPR \u7684\u8ba1\u7b97\u62b5\u6d88\u4e86\u8d1f\u6837\u672c\u6570\u91cf\u591a\u7684\u5f71\u54cd\u3002</p>"},{"location":"CV/Lecture2_Image_Classification/#\u6df7\u6dc6\u77e9\u9635","title":"\u6df7\u6dc6\u77e9\u9635","text":"<p>\u5bf9\u4e8e\u591a\u5206\u7c7b\u95ee\u9898\uff0c\u6bd4\u5982\u8bf4\u6709 K \u7c7b\uff0c\u5c31\u6709\u4e00\u4e2a KxK \u7684\u6df7\u6dc6\u77e9\u9635\uff0c\u5143\u7d20 \\(c_{ij}\\) \u8868\u793a\u7b2c i \u7c7b\u6837\u672c\u88ab\u5206\u7c7b\u5668\u5224\u5b9a\u4e3a\u7b2c j \u7c7b\u7684\u6570\u91cf\uff0c\u4e3b\u5bf9\u89d2\u7ebf\u662f\u6b63\u786e\u5206\u7c7b\u7684\u6837\u672c\u6570\u91cf\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u89c2\u5bdf\u6df7\u6dc6\u77e9\u9635\uff0c\u5224\u65ad\u54ea\u4e9b\u7c7b\u66f4\u5bb9\u6613\u6df7\u6dc6</p> <p></p>"},{"location":"CV/Lecture3_Linear_Classifiers/","title":"Linear_Classifier","text":"<p> \u7ea6 9930 \u4e2a\u5b57  57 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 50 \u5206\u949f</p>"},{"location":"CV/Lecture3_Linear_Classifiers/#\u6982\u8ff0","title":"\u6982\u8ff0","text":"<p>\u4e0a\u4e00\u7bc7\u7b14\u8bb0\u4ecb\u7ecd\u4e86\u56fe\u50cf\u5206\u7c7b\u95ee\u9898\u3002<code>\u56fe\u50cf\u5206\u7c7b\u7684\u4efb\u52a1\uff0c\u5c31\u662f\u4ece\u5df2\u6709\u7684\u56fa\u5b9a\u5206\u7c7b\u6807\u7b7e\u96c6\u5408\u4e2d\u9009\u62e9\u4e00\u4e2a\u5e76\u5206\u914d\u7ed9\u4e00\u5f20\u56fe\u50cf\u3002\u6211\u4eec\u8fd8\u4ecb\u7ecd\u4e86k-Nearest Neighbor \uff08k-NN\uff09\u5206\u7c7b\u5668\uff0c\u8be5\u5206\u7c7b\u5668\u7684\u57fa\u672c\u601d\u60f3\u662f\u901a\u8fc7\u5c06\u6d4b\u8bd5\u56fe\u50cf\u4e0e\u8bad\u7ec3\u96c6\u5e26\u6807\u7b7e\u7684\u56fe\u50cf\u8fdb\u884c\u6bd4\u8f83\uff0c\u6765\u7ed9\u6d4b\u8bd5\u56fe\u50cf\u6253\u4e0a\u5206\u7c7b\u6807\u7b7e</code>\u3002</p> <p>k-Nearest Neighbor \u5206\u7c7b\u5668\u5b58\u5728\u4ee5\u4e0b\u4e0d\u8db3\uff1a</p> <ul> <li>\u5206\u7c7b\u5668\u5fc5\u987b\u8bb0\u4f4f\u6240\u6709\u8bad\u7ec3\u6570\u636e\u5e76\u5c06\u5176\u5b58\u50a8\u8d77\u6765\uff0c\u4ee5\u4fbf\u4e8e\u672a\u6765\u6d4b\u8bd5\u6570\u636e\u7528\u4e8e\u6bd4\u8f83\u3002\u8fd9\u5728\u5b58\u50a8\u7a7a\u95f4\u4e0a\u662f\u4f4e\u6548\u7684\uff0c\u56e0\u4e3a\u6570\u636e\u96c6\u7684\u5927\u5c0f\u5f88\u5bb9\u6613\u5c31\u4ee5 GB \u8ba1\u7b97\u3002</li> <li>\u5bf9\u4e00\u4e2a\u6d4b\u8bd5\u56fe\u50cf\u8fdb\u884c\u5206\u7c7b\u9700\u8981 <code>\u548c\u6240\u6709\u8bad\u7ec3\u56fe\u50cf\u4f5c\u6bd4\u8f83</code>\uff0c\u7b97\u6cd5\u8ba1\u7b97\u8d44\u6e90\u8017\u8d39\u9ad8\u3002</li> </ul> <p>\u6240\u6709\u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u79cd\u66f4\u5e7f\u6cdb\u7684\u6784\u5efa\u673a\u5668\u5b66\u4e60\u6a21\u578b\u7684\u65b9\u6cd5\uff0c\u90a3\u5c31\u662f\u53c2\u6570\u65b9\u6cd5\uff0c\u8fd9\u79cd\u65b9\u6cd5\u7684\u60f3\u6cd5\u662f <code>\u53c2\u6570\u53ef\u5b66\u4e60\uff08parametric approach\uff09</code></p> <p>\u6982\u8ff0\uff1a\u6211\u4eec\u5c06\u8981\u5b9e\u73b0\u4e00\u79cd\u66f4\u5f3a\u5927\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\u56fe\u50cf\u5206\u7c7b\u95ee\u9898\uff0c\u8be5\u65b9\u6cd5\u53ef\u4ee5\u81ea\u7136\u5730\u5ef6\u4f38\u5230\u795e\u7ecf\u7f51\u7edc\u548c\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u4e0a\u3002\u8fd9\u79cd\u65b9\u6cd5\u4e3b\u8981\u6709\u4e24\u90e8\u5206\u7ec4\u6210\uff1a</p> <p><code>\u4e00\u4e2a\u662f\u8bc4\u5206\u51fd\u6570\uff08score function\uff09\uff0c\u5b83\u662f\u539f\u59cb\u56fe\u50cf\u6570\u636e\u5230\u7c7b\u522b\u5206\u503c\u7684\u6620\u5c04\u3002</code></p> <p><code>\u53e6\u4e00\u4e2a\u662f\u635f\u5931\u51fd\u6570\uff08loss function\uff09\uff0c\u5b83\u662f\u7528\u6765\u91cf\u5316\u9884\u6d4b\u5206\u7c7b\u6807\u7b7e\u7684\u5f97\u5206\u4e0e\u771f\u5b9e\u6807\u7b7e\u4e4b\u95f4\u4e00\u81f4\u6027\u7684\u3002</code></p> <p>\u8be5\u65b9\u6cd5\u53ef\u8f6c\u5316\u4e3a\u4e00\u4e2a\u6700\u4f18\u5316\u95ee\u9898\uff0c\u5728\u6700\u4f18\u5316\u8fc7\u7a0b\u4e2d\uff0c\u5c06\u901a\u8fc7\u66f4\u65b0\u8bc4\u5206\u51fd\u6570\u7684\u53c2\u6570\u6765\u6700\u5c0f\u5316\u635f\u5931\u51fd\u6570\u503c\u3002</p>"},{"location":"CV/Lecture3_Linear_Classifiers/#\u4ece\u56fe\u50cf\u5230\u6807\u7b7e\u5206\u503c\u7684\u53c2\u6570\u5316\u6620\u5c04","title":"\u4ece\u56fe\u50cf\u5230\u6807\u7b7e\u5206\u503c\u7684\u53c2\u6570\u5316\u6620\u5c04","text":"<p>\u8be5\u65b9\u6cd5\u7684\u7b2c\u4e00\u90e8\u5206\u5c31\u662f\u5b9a\u4e49\u4e00\u4e2a\u8bc4\u5206\u51fd\u6570 score function\uff0c\u8fd9\u4e2a\u51fd\u6570\u5c06\u56fe\u50cf\u7684\u50cf\u7d20\u503c\u6620\u5c04\u4e3a\u5404\u4e2a\u5206\u7c7b\u7c7b\u522b\u7684\u5f97\u5206\uff0c\u5f97\u5206\u9ad8\u4f4e\u4ee3\u8868\u56fe\u50cf\u5c5e\u4e8e\u8be5\u7c7b\u522b\u7684\u53ef\u80fd\u6027\u9ad8\u4f4e\u3002</p> <p>\u4e0b\u9762\u4f1a\u5229\u7528\u4e00\u4e2a\u5177\u4f53\u4f8b\u5b50\u6765\u5c55\u793a\u8be5\u65b9\u6cd5\u3002\u73b0\u5728\u5047\u8bbe\u6709\u4e00\u4e2a\u5305\u542b\u5f88\u591a\u56fe\u50cf\u7684\u8bad\u7ec3\u96c6\\(x_{i}\\in R^{D}\\)\uff0c\u6bcf\u4e2a\u56fe\u50cf\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u5206\u7c7b\u6807\u7b7e\\(y_{i}\\)\u3002\u8fd9\u91cc\\(i=1,2,3...N\\)\u5e76\u4e14\\(y_{i}\\in 1...K\\)\u3002\u8fd9\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u6709 N \u4e2a\u56fe\u50cf\u6837\u4f8b\uff0c\u6bcf\u4e2a\u56fe\u50cf\u7684\u7ef4\u5ea6\u662f D\uff0c\u5171\u6709 K \u79cd\u4e0d\u540c\u7684\u5206\u7c7b\u3002</p> <p>\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5728 CIFAR-10 \u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a N = 50000 \u7684\u8bad\u7ec3\u96c6\uff0c\u6bcf\u4e2a\u56fe\u50cf\u6709\\(D=32\\times32\\times3=3072\\)\u4e2a\u50cf\u7d20\uff0c\u800c K = 10\uff0c\u8fd9\u662f\u56e0\u4e3a\u56fe\u7247\u88ab\u5206\u4e3a 10 \u4e2a\u4e0d\u540c\u7684\u7c7b\u522b\uff08\u72d7\uff0c\u732b\uff0c\u6c7d\u8f66\u7b49\uff09\u3002\u6211\u4eec\u73b0\u5728\u5b9a\u4e49\u8bc4\u5206\u51fd\u6570\u4e3a\uff1a\\(f:R^{D}\\rightarrow R^{K}\\)\uff0c\u8be5\u51fd\u6570\u662f\u539f\u59cb\u56fe\u50cf\u50cf\u7d20\u5230\u5206\u7c7b\u5206\u503c\u7684\u6620\u5c04\u3002</p> <p>\u7ebf\u6027\u5206\u7c7b\u5668\uff1a\u5728\u672c\u6a21\u578b\u4e2d\uff0c\u6211\u4eec\u4ece\u6700\u7b80\u5355\u7684\u6982\u7387\u51fd\u6570\u5f00\u59cb\uff0c\u4e00\u4e2a\u7ebf\u6027\u6620\u5c04\uff1a</p> \\[f(x_{i},W,b)=Wx_{i}+b\\] <p>\u5728\u4e0a\u9762\u7684\u516c\u5f0f\u4e2d\uff0c\u5047\u8bbe\u6bcf\u4e2a\u56fe\u50cf\u6570\u636e\u90fd\u88ab\u62c9\u957f\u4e3a\u4e00\u4e2a\u957f\u5ea6\u4e3a D \u7684\u5217\u5411\u91cf\uff0c\u5927\u5c0f\u4e3a [D x 1]\u3002\u5176\u4e2d\u5927\u5c0f\u4e3a\\([K \\times D]\\)\u7684\u77e9\u9635 W \u548c\u5927\u5c0f\u4e3a [K x 1] \u5217\u5411\u91cf b \u4e3a\u8be5\u51fd\u6570\u7684 \u53c2\u6570\uff08parameters\uff09\u3002</p> <p>\u4ee5 CIFAR-10 \u4e3a\u4f8b\uff0c\u7b2c i \u4e2a\u56fe\u50cf\u7684\u6240\u6709\u50cf\u7d20\u4fe1\u606f\u88ab\u62c9\u6210\u4e3a\u4e00\u4e2a [3072 x 1] \u7684\u5217\u5411\u91cf\uff0cW \u5927\u5c0f\u4e3a [10x3072]\uff0cb \u7684\u5927\u5c0f\u4e3a [10x1]\u3002\u56e0\u6b64\uff0c3072 \u4e2a\u6570\u5b57\uff08\u539f\u59cb\u50cf\u7d20\u6570\u503c\uff09\u8f93\u5165\u51fd\u6570\uff0c\u51fd\u6570\u8f93\u51fa 10 \u4e2a\u6570\u5b57\uff08\u4e0d\u540c\u5206\u7c7b\u5f97\u5230\u7684\u5206\u503c\uff09\u3002\u53c2\u6570 W \u88ab\u79f0\u4e3a \u6743\u91cd\uff08weights\uff09\u3002b \u88ab\u79f0\u4e3a \u504f\u5dee\u5411\u91cf\uff08bias vector\uff09</p> <p></p> <p></p> <p>\u9700\u8981\u6ce8\u610f\u7684\u51e0\u70b9\uff1a</p> <ul> <li> <p>\u4e00\u4e2a\u5355\u72ec\u7684\u77e9\u9635\u4e58\u6cd5\\(W{x_{i}}\\)\u5c31\u9ad8\u6548\u5730\u5e76\u884c\u8bc4\u4f30 10 \u4e2a\u4e0d\u540c\u7684\u5206\u7c7b\u5668\uff08\u6bcf\u4e2a\u5206\u7c7b\u5668\u9488\u5bf9\u4e00\u4e2a\u5206\u7c7b\uff09\uff0c\u5176\u4e2d\u6bcf\u4e2a\u7c7b\u7684\u5206\u7c7b\u5668\u5c31\u662f W \u7684\u4e00\u4e2a\u884c\u5411\u91cf\u3002</p> </li> <li> <p>\u8f93\u5165\u6570\u636e\\((x_{i},y_{i})\\)\u662f\u7ed9\u5b9a\u4e14\u4e0d\u53ef\u6539\u53d8\u7684\uff0c<code>\u4f46\u53c2\u6570W\u548cb\u662f\u53ef\u63a7\u5236\u6539\u53d8\u7684</code>\u3002\u6211\u4eec\u7684\u76ee\u6807\u5c31\u662f\u901a\u8fc7\u8bbe\u7f6e\u8fd9\u4e9b\u53c2\u6570\uff0c\u4f7f\u5f97\u8ba1\u7b97\u51fa\u6765\u7684\u5206\u7c7b\u5206\u503c\u60c5\u51b5\u548c\u8bad\u7ec3\u96c6\u4e2d\u56fe\u50cf\u6570\u636e\u7684\u771f\u5b9e\u7c7b\u522b\u6807\u7b7e\u76f8\u7b26\u3002</p> </li> <li> <p>\u4f18\u52bf\uff1a</p> </li> <li> <p>\u8bad\u7ec3\u6570\u636e\u662f\u7528\u6765\u5b66\u4e60\u5230\u53c2\u6570 W \u548c b \u7684\uff0c\u4e00\u65e6\u8bad\u7ec3\u5b8c\u6210\uff0c\u8bad\u7ec3\u6570\u636e\u5c31\u53ef\u4ee5\u4e22\u5f03\uff0c\u7559\u4e0b\u5b66\u4e60\u5230\u7684\u53c2\u6570\u5373\u53ef</p> </li> <li> <p>\u53ea\u9700\u8981\u505a\u4e00\u4e2a\u77e9\u9635\u4e58\u6cd5\u548c\u4e00\u4e2a\u77e9\u9635\u52a0\u6cd5\u5c31\u80fd\u5bf9\u4e00\u4e2a\u6d4b\u8bd5\u6570\u636e\u5206\u7c7b\uff0c\u8fd9\u6bd4 k-NN \u4e2d\u5c06\u6d4b\u8bd5\u56fe\u50cf\u548c\u6240\u6709\u8bad\u7ec3\u6570\u636e\u505a\u6bd4\u8f83\u7684\u65b9\u6cd5\u5feb</p> </li> <li> <p>\u53ef\u4ee5\u5c06\u504f\u5dee b \u4f5c\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u53ef\u5b66\u4e60\u53c2\u6570\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u8fdb\u884c\u5408\u5e76\uff0c\u5c06\u5176\u5408\u5e76\u5230\u6743\u91cd\u77e9\u9635\u4e4b\u4e2d\uff0c\u8fd9\u6837\u7684\u65b9\u5f0f\u65e0\u975e\u5c31\u662f\u7ed9\u6743\u91cd\u77e9\u9635\u6269\u5f20\u4e00\u4e0b\u5217\u5411\u91cf\uff0c\u5e76\u4e14\u7ed9\u8f93\u5165\u5411\u91cf\u589e\u52a0\u4e00\u4e2a\u5e38\u91cf\u7ef4\u5ea6</p> </li> </ul> <p></p>"},{"location":"CV/Lecture3_Linear_Classifiers/#\u7406\u89e3\u7ebf\u6027\u5206\u7c7b\u5668","title":"\u7406\u89e3\u7ebf\u6027\u5206\u7c7b\u5668","text":"<ol> <li>\u7ebf\u6027\u5206\u7c7b\u5668\u8ba1\u7b97\u56fe\u50cf\u4e2d 3 \u4e2a\u989c\u8272\u901a\u9053\u4e2d\u6240\u6709\u50cf\u7d20\u7684\u503c\u4e0e\u6743\u91cd\u7684\u77e9\u9635\u4e58\uff0c\u4ece\u800c\u5f97\u5230\u5206\u7c7b\u5206\u503c\u3002\u6839\u636e\u6211\u4eec\u5bf9\u6743\u91cd\u8bbe\u7f6e\u7684\u503c\uff0c\u5bf9\u4e8e\u56fe\u50cf\u4e2d\u7684\u67d0\u4e9b\u4f4d\u7f6e\u7684\u67d0\u4e9b\u989c\u8272\uff0c\u51fd\u6570\u8868\u73b0\u51fa\u559c\u597d\u6216\u8005\u538c\u6076\uff08\u6839\u636e\u6bcf\u4e2a\u6743\u91cd\u7684\u7b26\u53f7\u800c\u5b9a\uff09\u3002</li> </ol> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u53ef\u4ee5\u60f3\u8c61 \"\u8239\" \u5206\u7c7b\u5c31\u662f\u88ab\u5927\u91cf\u7684\u84dd\u8272\u6240\u5305\u56f4\uff08\u5bf9\u5e94\u7684\u5c31\u662f\u6c34\uff09\u3002\u90a3\u4e48 \"\u8239\" \u5206\u7c7b\u5668\u5728\u84dd\u8272\u901a\u9053\u4e0a\u7684\u6743\u91cd\u5c31\u6709\u5f88\u591a\u7684\u6b63\u6743\u91cd\uff08\u5b83\u4eec\u7684\u51fa\u73b0\u63d0\u9ad8\u4e86 \"\u8239\" \u5206\u7c7b\u7684\u5206\u503c\uff09\uff0c\u800c\u5728\u7eff\u8272\u548c\u7ea2\u8272\u901a\u9053\u4e0a\u7684\u6743\u91cd\u4e3a\u8d1f\u7684\u5c31\u6bd4\u8f83\u591a\uff08\u5b83\u4eec\u7684\u51fa\u73b0\u964d\u4f4e\u4e86 \"\u8239\" \u5206\u7c7b\u7684\u5206\u503c\uff09\u3002</p> <ol> <li>\u7ebf\u6027\u5206\u7c7b\u5668\u53ef\u4ee5\u7406\u89e3\u4e3a\u5bf9\u4e8e\u6bcf\u4e00\u4e2a category\uff0c\u751f\u6210\u4e00\u4e2a\u7c7b\u6a21\u677f\u3002\u6b64\u65f6\u4e0d\u518d\u5c06\u56fe\u50cf\u6570\u636e\u62c9\u4f38\u4e3a\u5217\u5411\u91cf\uff0c\u76f8\u5e94\u7684\u6539\u53d8\u6743\u91cd\u77e9\u9635\u9002\u5e94\u56fe\u50cf\u6570\u636e\u7684\u7ef4\u6570\u3002\u6539\u53d8\u540e\u7684\u6743\u91cd\u77e9\u9635\u7c7b\u4f3c\u4e8e\u6a21\u677f\uff0c\u540e\u7eed\u5c31\u662f\u8ba1\u7b97\u5185\u79ef\uff0c\u8fdb\u884c\u6a21\u677f\u7684\u5339\u914d\u3002</li> </ol> <p>\u4ece\u53e6\u4e00\u4e2a\u89d2\u5ea6\u6765\u770b\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u8fd8\u662f\u5728\u9ad8\u6548\u5730\u4f7f\u7528 k-NN\uff0c\u4e0d\u540c\u7684\u662f\u6211\u4eec\u6ca1\u6709\u4f7f\u7528\u6240\u6709\u7684\u8bad\u7ec3\u96c6\u7684\u56fe\u50cf\u6765\u6bd4\u8f83 <code>\uff0c\u800c\u662f\u6bcf\u4e2a\u7c7b\u522b\u53ea\u7528\u4e86\u4e00\u5f20\u56fe\u7247\uff08\u8fd9\u5f20\u56fe\u7247\u662f\u6211\u4eec\u5b66\u4e60\u5230\u7684\uff0c\u800c\u4e0d\u662f\u8bad\u7ec3\u96c6\u4e2d\u7684\u67d0\u4e00\u5f20\uff09</code>\uff0c\u800c\u4e14\u6211\u4eec\u4f1a\u4f7f\u7528\u5185\u79ef\u6765\u8ba1\u7b97\u5411\u91cf\u95f4\u7684\u8ddd\u79bb\uff0c\u800c\u4e0d\u662f\u4f7f\u7528 L1 \u6216\u8005 L2 \u8ddd\u79bb\u3002</p> <p></p> <ul> <li>\u8239\u7684\u6a21\u677f\u5982\u671f\u671b\u7684\u90a3\u6837\u6709\u5f88\u591a\u84dd\u8272\u50cf\u7d20\u3002\u5982\u679c\u56fe\u50cf\u662f\u4e00\u8258\u8239\u884c\u9a76\u5728\u5927\u6d77\u4e0a\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6a21\u677f\u5229\u7528\u5185\u79ef\u8ba1\u7b97\u56fe\u50cf\u5c06\u7ed9\u51fa\u5f88\u9ad8\u7684\u5206\u6570\u3002</li> <li>\u53ef\u4ee5\u770b\u5230\u9a6c\u7684\u6a21\u677f\u770b\u8d77\u6765\u4f3c\u4e4e\u662f\u4e24\u4e2a\u5934\u7684\u9a6c\uff0c\u8fd9\u662f\u56e0\u4e3a\u8bad\u7ec3\u96c6\u4e2d\u7684\u9a6c\u7684\u56fe\u50cf\u4e2d\u9a6c\u5934\u671d\u5411\u5404\u6709\u5de6\u53f3\u9020\u6210\u7684\u3002\u7ebf\u6027\u5206\u7c7b\u5668\u5c06\u8fd9\u4e24\u79cd\u60c5\u51b5\u878d\u5408\u5230\u4e00\u8d77\u4e86\u3002\u7c7b\u4f3c\u7684\uff0c\u6c7d\u8f66\u7684\u6a21\u677f\u770b\u8d77\u6765\u4e5f\u662f\u5c06\u51e0\u4e2a\u4e0d\u540c\u7684\u6a21\u578b\u878d\u5408\u5230\u4e86\u4e00\u4e2a\u6a21\u677f\u4e2d\uff0c\u5e76\u4ee5\u6b64\u6765\u5206\u8fa8\u4e0d\u540c\u65b9\u5411\u4e0d\u540c\u989c\u8272\u7684\u6c7d\u8f66\u3002\u8fd9\u4e2a\u6a21\u677f\u4e0a\u7684\u8f66\u662f\u7ea2\u8272\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a CIFAR-10 \u4e2d\u8bad\u7ec3\u96c6\u7684\u8f66\u5927\u591a\u662f\u7ea2\u8272\u7684\u3002</li> </ul> <p>\u7ebf\u6027\u5206\u7c7b\u5668\u5bf9\u4e8e\u4e0d\u540c\u989c\u8272\u7684\u8f66\u7684\u5206\u7c7b\u80fd\u529b\u662f\u5f88\u5f31\u7684\uff0c\u4f46\u662f\u540e\u9762\u53ef\u4ee5\u770b\u5230\u795e\u7ecf\u7f51\u7edc\u662f\u53ef\u4ee5\u5b8c\u6210\u8fd9\u4e00\u4efb\u52a1\u7684\u3002<code>\u795e\u7ecf\u7f51\u7edc\u53ef\u4ee5\u5728\u5b83\u7684\u9690\u85cf\u5c42\u4e2d\u5b9e\u73b0\u4e2d\u95f4\u795e\u7ecf\u5143\u6765\u63a2\u6d4b\u4e0d\u540c\u79cd\u7c7b\u7684\u8f66\uff08\u6bd4\u5982\u7eff\u8272\u8f66\u5934\u5411\u5de6\uff0c\u84dd\u8272\u8f66\u5934\u5411\u524d\u7b49\uff09\u3002\u800c\u4e0b\u4e00\u5c42\u7684\u795e\u7ecf\u5143\u901a\u8fc7\u8ba1\u7b97\u4e0d\u540c\u7684\u6c7d\u8f66\u63a2\u6d4b\u5668\u7684\u6743\u91cd\u548c\uff0c\u5c06\u8fd9\u4e9b\u5408\u5e76\u4e3a\u4e00\u4e2a\u66f4\u7cbe\u786e\u7684\u6c7d\u8f66\u5206\u7c7b\u5206\u503c\u3002</code></p> <ol> <li>\u56fe\u50cf\u7a7a\u95f4\u7684\u793a\u610f\u56fe\u3002\u5176\u4e2d\u6bcf\u4e2a\u56fe\u50cf\u662f\u4e00\u4e2a\u70b9\uff0c\u6709 3 \u4e2a\u5206\u7c7b\u5668\u3002\u4ee5\u7ea2\u8272\u7684\u6c7d\u8f66\u5206\u7c7b\u5668\u4e3a\u4f8b\uff0c\u7ea2\u7ebf\u8868\u793a\u7a7a\u95f4\u4e2d\u6c7d\u8f66\u5206\u7c7b\u5206\u6570\u4e3a 0 \u7684\u70b9\u7684\u96c6\u5408\uff0c\u7ea2\u8272\u7684\u7bad\u5934\u8868\u793a\u5206\u503c\u4e0a\u5347\u7684\u65b9\u5411\u3002\u6240\u6709\u7ea2\u7ebf\u53f3\u8fb9\u7684\u70b9\u7684\u5206\u6570\u503c\u5747\u4e3a\u6b63\uff0c\u4e14\u7ebf\u6027\u5347\u9ad8\u3002\u7ea2\u7ebf\u5de6\u8fb9\u7684\u70b9\u5206\u503c\u4e3a\u8d1f\uff0c\u4e14\u7ebf\u6027\u964d\u4f4e\u3002</li> </ol> <p>\u4ece\u4e0a\u9762\u53ef\u4ee5\u770b\u5230\uff0cW \u7684\u6bcf\u4e00\u884c\u90fd\u662f\u4e00\u4e2a\u5206\u7c7b\u7c7b\u522b\u7684\u5206\u7c7b\u5668\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u6570\u5b57\u7684\u51e0\u4f55\u89e3\u91ca\u662f\uff1a<code>\u5982\u679c\u6539\u53d8\u5176\u4e2d\u4e00\u884c\u7684\u6570\u5b57\uff0c\u4f1a\u770b\u89c1\u5206\u7c7b\u5668\u5728\u7a7a\u95f4\u4e2d\u5bf9\u5e94\u7684\u76f4\u7ebf\u5f00\u59cb\u5411\u7740\u4e0d\u540c\u65b9\u5411\u65cb\u8f6c\u3002\u800c\u504f\u5deeb\uff0c\u5219\u5141\u8bb8\u5206\u7c7b\u5668\u5bf9\u5e94\u7684\u76f4\u7ebf\u5e73\u79fb\u3002</code> \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u6ca1\u6709\u504f\u5dee\uff0c\u65e0\u8bba\u6743\u91cd\u5982\u4f55\uff0c\u5206\u7c7b\u5206\u503c\u59cb\u7ec8\u4e3a 0\u3002\u8fd9\u6837\u6240\u6709\u5206\u7c7b\u5668\u7684\u7ebf\u90fd\u4e0d\u5f97\u4e0d\u7a7f\u8fc7\u539f\u70b9\u3002</p> <p></p> <p>summary:</p> <p></p> <p>\u56fe\u50cf\u6570\u636e\u9884\u5904\u7406\uff1a\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6240\u6709\u56fe\u50cf\u90fd\u662f\u4f7f\u7528\u7684\u539f\u59cb\u50cf\u7d20\u503c\uff08\u4ece 0 \u5230 255\uff09\u3002\u5728\u673a\u5668\u5b66\u4e60\u4e2d\uff0c\u5bf9\u4e8e\u8f93\u5165\u7684\u7279\u5f81\u505a\u5f52\u4e00\u5316\uff08normalization\uff09\u5904\u7406\u662f\u5e38\u89c1\u7684\u5957\u8def\u3002\u800c\u5728\u56fe\u50cf\u5206\u7c7b\u7684\u4f8b\u5b50\u4e2d\uff0c\u56fe\u50cf\u4e0a\u7684\u6bcf\u4e2a\u50cf\u7d20\u53ef\u4ee5\u770b\u505a\u4e00\u4e2a\u7279\u5f81\u3002\u5728\u5b9e\u8df5\u4e2d\uff0c\u5bf9\u6bcf\u4e2a\u7279\u5f81\u51cf\u53bb\u5e73\u5747\u503c\u6765 \u4e2d\u5fc3\u5316 \u6570\u636e\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002\u5728\u8fd9\u4e9b\u56fe\u7247\u7684\u4f8b\u5b50\u4e2d\uff0c\u8be5\u6b65\u9aa4\u610f\u5473\u7740\u6839\u636e\u8bad\u7ec3\u96c6\u4e2d\u6240\u6709\u7684\u56fe\u50cf\u8ba1\u7b97\u51fa\u4e00\u4e2a\u5e73\u5747\u56fe\u50cf\u503c\uff0c\u7136\u540e\u6bcf\u4e2a\u56fe\u50cf\u90fd\u51cf\u53bb\u8fd9\u4e2a\u5e73\u5747\u503c\uff0c\u8fd9\u6837\u56fe\u50cf\u7684\u50cf\u7d20\u503c\u5c31\u5927\u7ea6\u5206\u5e03\u5728 [-127, 127] \u4e4b\u95f4\u4e86\u3002\u4e0b\u4e00\u4e2a\u5e38\u89c1\u6b65\u9aa4\u662f\uff0c\u8ba9\u6240\u6709\u6570\u503c\u5206\u5e03\u7684\u533a\u95f4\u53d8\u4e3a [-1, 1]\u3002\u96f6\u5747\u503c\u7684\u4e2d\u5fc3\u5316 \u662f\u5f88\u91cd\u8981\u7684\uff0c\u7b49\u6211\u4eec\u7406\u89e3\u4e86\u68af\u5ea6\u4e0b\u964d\u540e\u518d\u6765\u8be6\u7ec6\u89e3\u91ca\u3002</p>"},{"location":"CV/Lecture3_Linear_Classifiers/#\u635f\u5931\u51fd\u6570-loss-function","title":"\u635f\u5931\u51fd\u6570 Loss function","text":"<p>\u5728\u4e0a\u4e00\u8282\u5b9a\u4e49\u4e86\u4ece\u56fe\u50cf\u50cf\u7d20\u503c\u5230\u6240\u5c5e\u7c7b\u522b\u7684\u8bc4\u5206\u51fd\u6570\uff08score function\uff09\uff0c\u8be5\u51fd\u6570\u7684\u53c2\u6570\u662f\u6743\u91cd\u77e9\u9635 W\u3002\u5728\u51fd\u6570\u4e2d\uff0c\u6570\u636e(\\(x_i, y_i\\))\u662f\u7ed9\u5b9a\u7684\uff0c\u4e0d\u80fd\u4fee\u6539\u3002\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u8c03\u6574\u6743\u91cd\u77e9\u9635\u8fd9\u4e2a\u53c2\u6570\uff0c\u4f7f\u5f97\u8bc4\u5206\u51fd\u6570\u7684\u7ed3\u679c\u4e0e\u8bad\u7ec3\u6570\u636e\u96c6\u4e2d\u56fe\u50cf\u7684\u771f\u5b9e\u7c7b\u522b\u4e00\u81f4\uff0c\u5373\u8bc4\u5206\u51fd\u6570\u5728\u6b63\u786e\u7684\u5206\u7c7b\u7684\u4f4d\u7f6e\u5e94\u5f53\u5f97\u5230\u6700\u9ad8\u7684\u8bc4\u5206\uff08score\uff09\u3002</p> <p>\u6211\u4eec\u5c06\u4f7f\u7528 \u635f\u5931\u51fd\u6570\uff08Loss Function\uff09\uff08\u6709\u65f6\u4e5f\u53eb \u4ee3\u4ef7\u51fd\u6570 Cost Function \u6216 \u76ee\u6807\u51fd\u6570 Objective function\uff09\u6765\u8861\u91cf\u6211\u4eec\u5bf9\u7ed3\u679c\u7684\u4e0d\u6ee1\u610f\u7a0b\u5ea6\u3002\u76f4\u89c2\u5730\u8bb2\uff0c\u5f53\u8bc4\u5206\u51fd\u6570\u8f93\u51fa\u7ed3\u679c\u4e0e\u771f\u5b9e\u7ed3\u679c\u4e4b\u95f4\u5dee\u5f02\u8d8a\u5927\uff0c\u635f\u5931\u51fd\u6570\u8f93\u51fa\u8d8a\u5927\uff0c\u53cd\u4e4b\u8d8a\u5c0f\u3002</p> <ul> <li> <p>Loss for a single example is\\(L_i(f_i(x_i, W),y_i)\\)</p> </li> <li> <p>Loss for the dataset is average of per-example losses :\\(L = \\dfrac{1}{N}\\sum L_i(f(x_i,W),y_i)\\)</p> </li> </ul>"},{"location":"CV/Lecture3_Linear_Classifiers/#0-1-\u635f\u5931","title":"0-1 \u635f\u5931","text":"<p>\u8fd9\u662f\u4e00\u79cd\u6700\u5b8c\u7f8e\u7684\u635f\u5931\u51fd\u6570\uff0c\u7406\u8bba\u4e0a\u53ef\u4ee5\u6ee1\u8db3\u6211\u4eec\u7684\u9700\u8981\uff0c\u627e\u5230\u6700\u4f73\u7684\u4f18\u5316\u76ee\u6807\uff0c\u4f46\u662f\u6ca1\u529e\u6cd5\u5728\u7a0b\u5e8f\u4e2d\u5b9e\u73b0.</p> <p>\u53ea\u770b\u5206\u7c7b\u7684\u5bf9\u4e0e\u9519\uff0c\u5f53\u6807\u7b7e\u4e0e\u9884\u6d4b\u7c7b\u522b\u76f8\u7b49\u65f6\uff0closs = 0\uff0c\u5426\u5219\u4e3a 1</p> \\[ L(f_i(x_i, W), y_i) = \\begin{cases}     0   &amp; if \\ y_i = f_i(x_i, W)\\\\     1   &amp; if \\ y_i != f_i(x_i, W) \\end{cases} \\]"},{"location":"CV/Lecture3_Linear_Classifiers/#\u4ea4\u53c9\u71b5\u635f\u5931","title":"\u4ea4\u53c9\u71b5\u635f\u5931","text":"<p>\u71b5\u8868\u793a\u70ed\u529b\u5b66\u7cfb\u7edf\u7684\u65e0\u5e8f\u7a0b\u5ea6\uff0c\u5728\u4fe1\u606f\u5b66\u4e2d\u53ef\u4ee5\u8868\u793a\u4fe1\u606f\u7684\u65e0\u5e8f\u7a0b\u5ea6\uff0c\u5728\u56fe\u50cf\u5206\u7c7b\u4e2d\uff0c\u771f\u5b9e\u6807\u7b7e\u5411\u91cf\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u4e3a 1\uff0c\u8fd9\u79cd\u60c5\u51b5\u65e0\u5e8f\u7a0b\u5ea6\u6700\u4f4e\uff0c\u8fd9\u4e5f\u662f\u6211\u4eec\u671f\u671b\u6a21\u578b\u8f93\u51fa\u53ef\u4ee5\u8fbe\u5230\u7684\u7a0b\u5ea6\u3002</p> \\[ entropy = -\\sum_{i = 0}^i p_ilogp_i \\] <p>\u4ea4\u53c9\u71b5\u635f\u5931\u53ef\u4ee5\u8861\u91cf\u4e24\u4e2a\u5411\u91cf\u4e4b\u95f4\u7684\u5dee\u5f02\u7a0b\u5ea6\uff0c\u5e76\u4e14\u53ea\u5173\u5fc3\u6b63\u786e\u5206\u7c7b\u7684\u95ee\u9898\uff0c\u4e0d\u4f1a\u53bb\u5173\u5fc3\u9519\u8bef\u5206\u7c7b\u7684\u6982\u7387\uff0c\u53ef\u4ee5\u4f7f\u5f97\u6a21\u578b\u66f4\u4e13\u6ce8\u4e8e\u5f3a\u5316\u6b63\u786e\u5206\u7c7b\u7684\u6982\u7387</p> <p>\\(y_{ij}\\)\u8868\u793a\u7b2c\\(i\\)\u4e2a\u6837\u672c\u5c5e\u4e8e\u7b2c\\(j\\)\u7c7b\u6807\u7b7e\u7684\u6982\u7387\uff080 \u6216 1\uff09\uff0c\\(f(x_{ij})\\)\u8868\u793a\u7b2c\\(i\\)\u4e2a\u6837\u672c\u88ab\u9884\u6d4b\u4e3a\u7b2c\\(j\\)\u7c7b\u6807\u7b7e\u7684\u6982\u7387</p> \\[ l(f, y) = -\\sum_i^n \\sum_j^m y_{ij}logf(x_{ij}) \\] <p>\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570\u5b9e\u9645\u4e0a\u662f\u5728\u5ea6\u91cf\u5b9e\u9645\u5206\u7c7b\u4e0e\u9884\u6d4b\u5206\u7c7b\u4e4b\u95f4\u7684\u5dee\u5f02\u3002\u5f53\u5b9e\u9645\u5206\u7c7b\u548c\u9884\u6d4b\u5206\u7c7b\u5dee\u5f02\u589e\u5927\u65f6\uff0c\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570\u7684\u503c\u4f1a\u589e\u52a0\uff0c\u53cd\u4e4b\u51cf\u5c11\u3002</p> <ul> <li>\u71b5\u589e\uff08\u635f\u5931\u589e\u5927\uff09\uff1a\u5f53\u9884\u6d4b\u7684\u6982\u7387\u5206\u5e03\\(f(x_{ij})\\)\u504f\u79bb\u771f\u5b9e\u5206\u5e03\\(y_{ij}\\)\u65f6\uff08\u5373\u9884\u6d4b\u9519\u8bef\uff09\uff0c\u635f\u5931\u51fd\u6570\u503c\u4f1a\u589e\u5927\u3002\u4f8b\u5982\uff0c\u5982\u679c\\(y_{ij} = 1\\)\u4f46\\(f(x_{ij})\\)\u975e\u5e38\u63a5\u8fd1 0\uff0c\u90a3\u4e48\\(\\log f(x_{ij})\\)\u4f1a\u8d8b\u5411\u4e8e\u8d1f\u65e0\u7a77\u5927\uff0c\u4ece\u800c\u5bfc\u81f4\u635f\u5931\u51fd\u6570\u503c\u589e\u5927\u3002</li> <li>\u71b5\u51cf\uff08\u635f\u5931\u51cf\u5c0f\uff09\uff1a\u5f53\u9884\u6d4b\u7684\u6982\u7387\u5206\u5e03\\(f(x_{ij}\\)) \u8d8a\u63a5\u8fd1\u771f\u5b9e\u5206\u5e03\\(y_{ij}\\)\u65f6\uff08\u5373\u9884\u6d4b\u6b63\u786e\uff09\uff0c\u635f\u5931\u51fd\u6570\u503c\u4f1a\u51cf\u5c0f\u3002\u4f8b\u5982\uff0c\u5982\u679c\\(y*{ij} = 1\\)\u4e14\\(f(x*{ij})\\)\u8d8a\u63a5\u8fd1 1\uff0c\u90a3\u4e48\\(\\log f(x_{ij})\\)\u4e5f\u4f1a\u63a5\u8fd1 0\uff0c\u4ece\u800c\u4f7f\u5f97\u635f\u5931\u503c\u51cf\u5c0f\u3002</li> </ul>"},{"location":"CV/Lecture3_Linear_Classifiers/#kl-\u6563\u5ea6","title":"KL \u6563\u5ea6","text":"<p>KL \u6563\u5ea6\uff08Kullback-Leibler Divergence\uff0c\u4e5f\u79f0\u4e3a\u76f8\u5bf9\u71b5\uff09\u662f\u7528\u6765\u8861\u91cf\u4e24\u4e2a\u6982\u7387\u5206\u5e03\u4e4b\u95f4\u5dee\u5f02\u7684\u4e00\u79cd\u65b9\u6cd5\u3002\u5728\u4fe1\u606f\u8bba\u4e2d\uff0cKL \u6563\u5ea6\u53ef\u4ee5\u7528\u6765\u63cf\u8ff0\u4ece\u4e00\u4e2a\u5206\u5e03\u9884\u6d4b\u53e6\u4e00\u4e2a\u5206\u5e03\u7684\u4ee3\u4ef7\u3002</p> <p>\u5047\u8bbe\u6709\u4e24\u4e2a\u6982\u7387\u5206\u5e03 P \u548c Q\uff0c\u5176\u4e2d P \u662f\u771f\u5b9e\u5206\u5e03\uff0cQ \u662f\u9884\u6d4b\u5206\u5e03\u3002KL \u6563\u5ea6\u5b9a\u4e49\u4e3a\uff1a</p> \\[ D_{KL}(P \\parallel Q) = \\sum_i P(i) \\log \\frac{P(i)}{Q(i)} \\] <p>\u6216\u8005\u5728\u8fde\u7eed\u60c5\u51b5\u4e0b\uff1a</p> \\[ D_{KL}(P \\parallel Q) = \\int P(x) \\log \\frac{P(x)}{Q(x)} \\, dx \\] <p>KL \u6563\u5ea6\u53ef\u4ee5\u88ab\u7406\u89e3\u4e3a\u4f7f\u7528\u5206\u5e03 Q \u4ee3\u66ff\u5206\u5e03 P \u65f6\u589e\u52a0\u7684\u201c\u989d\u5916\u4fe1\u606f\u201d\u6216\u201c\u4fe1\u606f\u635f\u5931\u201d\u3002\u6362\u53e5\u8bdd\u8bf4\uff0cKL \u6563\u5ea6\u91cf\u5316\u4e86\u5728\u4f7f\u7528 Q \u6765\u63cf\u8ff0\u6570\u636e\u800c\u4e0d\u662f P \u65f6\u6240\u4ed8\u51fa\u7684\u4ee3\u4ef7\u3002\u8d8a\u5927\u7684 KL \u6563\u5ea6\u8868\u793a Q \u8d8a\u4e0d\u63a5\u8fd1 P\uff0c\u9884\u6d4b\u8bef\u5dee\u8d8a\u5927\u3002</p> <p>\u4ea4\u53c9\u71b5\u548c KL \u6563\u5ea6\u4e4b\u95f4\u6709\u5bc6\u5207\u7684\u5173\u7cfb\u3002\u4ea4\u53c9\u71b5\u53ef\u4ee5\u5199\u6210\uff1a</p> \\[ H(P, Q) = H(P) + D_{KL}(P \\parallel Q) \\] <p>\u5176\u4e2d\uff0cH(P) \u662f\u5206\u5e03 P \u7684\u71b5\uff0c\u800c H(P, Q) \u662f P \u548c Q \u4e4b\u95f4\u7684\u4ea4\u53c9\u71b5\u3002\u4ea4\u53c9\u71b5\u7b49\u4e8e\u771f\u5b9e\u5206\u5e03\u7684\u71b5\u52a0\u4e0a KL \u6563\u5ea6\uff0c\u56e0\u6b64\u6700\u5c0f\u5316\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570\u4e5f\u5728\u6700\u5c0f\u5316 KL \u6563\u5ea6\u3002</p>"},{"location":"CV/Lecture3_Linear_Classifiers/#\u591a\u7c7b\u652f\u6301\u5411\u91cf\u673a\u635f\u5931-multiclass-support-vector-machine-loss","title":"\u591a\u7c7b\u652f\u6301\u5411\u91cf\u673a\u635f\u5931 Multiclass Support Vector Machine Loss","text":"<p>\u4ecb\u7ecd\u5e38\u7528\u7684\u591a\u7c7b\u652f\u6301\u5411\u91cf\u673a\uff08SVM\uff09\u635f\u5931\u51fd\u6570\u3002SVM \u7684\u76ee\u6807\u662f\u786e\u4fdd\u6b63\u786e\u5206\u7c7b\u7684\u5f97\u5206\u6bd4\u4e0d\u6b63\u786e\u5206\u7c7b\u7684\u5f97\u5206\u9ad8\u51fa\u81f3\u5c11\u4e00\u4e2a\u8fb9\u754c\u503c\\(\\Delta\\)\u3002\u5982\u679c\u4e0d\u6ee1\u8db3\u8fd9\u4e00\u6761\u4ef6\uff0c\u5c31\u4f1a\u4ea7\u751f\u635f\u5931\u3002</p> <p>\u7b2c i \u4e2a\u6570\u636e\u4e2d\u5305\u542b\u56fe\u50cf\\(x_i\\)\u7684\u50cf\u7d20\u6570\u636e\u548c\u4ee3\u8868\u6b63\u786e\u7c7b\u522b\u7684\u6807\u7b7e\\(y_i\\)\u3002\u8bc4\u5206\u51fd\u6570\u8f93\u5165\u50cf\u7d20\u6570\u636e\uff0c\u7136\u540e\u901a\u8fc7\u516c\u5f0f\\(f(x_i,W)\\)\u6765\u8ba1\u7b97\u4e0d\u540c\u5206\u7c7b\u7c7b\u522b\u7684\u5206\u503c\u3002\u8fd9\u91cc\u6211\u4eec\u5c06\u5206\u503c\u7b80\u5199\u4e3a s\u3002\u6bd4\u5982\uff0c\u9488\u5bf9\u7b2c j \u4e2a\u7c7b\u522b\u7684\u5f97\u5206\u5c31\u662f\u7b2c j \u4e2a\u5143\u7d20\uff1a\\(s_{j}=f(x_{i},W)_{j}\\)\u3002\u9488\u5bf9\u7b2c i \u4e2a\u6570\u636e\u7684\u591a\u7c7b SVM \u7684\u635f\u5931\u51fd\u6570\u5b9a\u4e49\u5982\u4e0b\uff1a</p> \\[ L_i =\\sum_{j\\not = y_i}\\max(0, s_j-s_{y_i}+\\Delta) \\] <p>\u4e3e\u4f8b\uff1a\u7528\u4e00\u4e2a\u4f8b\u5b50\u6f14\u793a\u516c\u5f0f\u662f\u5982\u4f55\u8ba1\u7b97\u7684\u3002\u5047\u8bbe\u6709 3 \u4e2a\u5206\u7c7b\uff0c\u5e76\u4e14\u5f97\u5230\u4e86\u5206\u503c\\(s = [13,-7,11]\\)\u3002\u5176\u4e2d\u7b2c\u4e00\u4e2a\u7c7b\u522b\u662f\u6b63\u786e\u7c7b\u522b\uff0c\u5373\\(y_i=0\\)\u3002\u540c\u65f6\u5047\u8bbe\\(\\Delta\\)\u662f 10\uff08\u540e\u9762\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\u8be5\u8d85\u53c2\u6570\uff09\u3002\u4e0a\u9762\u7684\u516c\u5f0f\u662f\u5c06\u6240\u6709\u4e0d\u6b63\u786e\u5206\u7c7b\uff08\\(j\\not=y_i\\)\uff09\u52a0\u8d77\u6765\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u5230\u4e24\u4e2a\u90e8\u5206\uff1a</p> \\[ L_i =\\max(0,-7-13+10)+\\max(0,11-13+10) \\] <p>\u53ef\u4ee5\u770b\u5230\u7b2c\u4e00\u4e2a\u90e8\u5206\u7ed3\u679c\u662f 0\uff0c\u8fd9\u662f\u56e0\u4e3a [-7-13+10] \u5f97\u5230\u7684\u662f\u8d1f\u6570\uff0c\u7ecf\u8fc7\\(\\max(0,-)\\)\u51fd\u6570\u5904\u7406\u540e\u5f97\u5230 0\u3002\u8fd9\u4e00\u5bf9\u7c7b\u522b\u5206\u6570\u548c\u6807\u7b7e\u7684\u635f\u5931\u503c\u662f 0\uff0c\u8fd9\u662f\u56e0\u4e3a\u6b63\u786e\u5206\u7c7b\u7684\u5f97\u5206 13 \u4e0e\u9519\u8bef\u5206\u7c7b\u7684\u5f97\u5206-7 \u7684\u5dee\u4e3a 20\uff0c\u9ad8\u4e8e\u8fb9\u754c\u503c 10\u3002\u800c SVM \u53ea\u5173\u5fc3\u5dee\u8ddd\u81f3\u5c11\u8981\u5927\u4e8e 10\uff0c\u66f4\u5927\u7684\u5dee\u503c\u8fd8\u662f\u7b97\u4f5c\u635f\u5931\u503c\u4e3a 0\u3002\u7b2c\u4e8c\u4e2a\u90e8\u5206\u8ba1\u7b97 [11-13+10] \u5f97\u5230 8\u3002\u867d\u7136\u6b63\u786e\u5206\u7c7b\u7684\u5f97\u5206\u6bd4\u4e0d\u6b63\u786e\u5206\u7c7b\u7684\u5f97\u5206\u8981\u9ad8\uff0813 &gt; 11\uff09\uff0c\u4f46\u662f\u6bd4 10 \u7684\u8fb9\u754c\u503c\u8fd8\u662f\u5c0f\u4e86\uff0c\u5206\u5dee\u53ea\u6709 2\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u635f\u5931\u503c\u7b49\u4e8e 8\u3002<code>\u7b80\u800c\u8a00\u4e4b\uff0cSVM \u7684\u635f\u5931\u51fd\u6570\u60f3\u8981\u6b63\u786e\u5206\u7c7b\u7c7b\u522b$y_i$\u7684\u5206\u6570\u6bd4\u4e0d\u6b63\u786e\u7c7b\u522b\u5206\u6570\u9ad8\uff0c\u800c\u4e14\u81f3\u5c11\u8981\u9ad8$\\Delta$\u3002\u5982\u679c\u4e0d\u6ee1\u8db3\u8fd9\u70b9\uff0c\u5c31\u5f00\u59cb\u8ba1\u7b97\u635f\u5931\u503c\u3002</code></p> <p>\u90a3\u4e48\u5728\u8fd9\u6b21\u7684\u6a21\u578b\u4e2d\uff0c\u6211\u4eec\u9762\u5bf9\u7684\u662f\u7ebf\u6027\u8bc4\u5206\u51fd\u6570\uff08\\(f(x_i,W)=Wx_i\\)\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u635f\u5931\u51fd\u6570\u7684\u516c\u5f0f\u7a0d\u5fae\u6539\u5199\u4e00\u4e0b\uff1a</p> \\[ L_i =\\sum_{j\\not = y_i}\\max(0, w^T_jx_i-w^T_{y_i}x_i+\\Delta) \\] <p>\u5176\u4e2d\\(w_j\\)\u662f\u6743\u91cd\\(W\\)\u7684\u7b2c j \u884c\uff0c\u88ab\u53d8\u5f62\u4e3a\u5217\u5411\u91cf\u3002\u7136\u800c\uff0c\u4e00\u65e6\u5f00\u59cb\u8003\u8651\u66f4\u590d\u6742\u7684\u8bc4\u5206\u51fd\u6570\\(f\\)\u516c\u5f0f\uff0c\u8fd9\u6837\u505a\u5c31\u4e0d\u662f\u5fc5\u987b\u7684\u4e86\u3002</p> <p>\u5728\u7ed3\u675f\u8fd9\u4e00\u5c0f\u8282\u524d\uff0c\u8fd8\u5fc5\u987b\u63d0\u4e00\u4e0b\u7684\u5c5e\u4e8e\u662f\u5173\u4e8e 0 \u7684\u9600\u503c\uff1a\\(\\max(0,-)\\)\u51fd\u6570\uff0c\u5b83\u5e38\u88ab\u79f0\u4e3a \u6298\u53f6\u635f\u5931\uff08hinge loss\uff09\u3002\u6709\u65f6\u5019\u4f1a\u542c\u5230\u4eba\u4eec\u4f7f\u7528\u5e73\u65b9\u6298\u53f6\u635f\u5931 SVM\uff08\u5373 L2-SVM\uff09\uff0c\u5b83\u4f7f\u7528\u7684\u662f\\(\\max(0,-)^2\\)\uff0c\u5c06\u66f4\u5f3a\u70c8\uff08\u5e73\u65b9\u5730\u800c\u4e0d\u662f\u7ebf\u6027\u5730\uff09\u5730\u60e9\u7f5a\u8fc7\u754c\u7684\u8fb9\u754c\u503c\u3002\u4e0d\u4f7f\u7528\u5e73\u65b9\u662f\u66f4\u6807\u51c6\u7684\u7248\u672c\uff0c\u4f46\u662f\u5728\u67d0\u4e9b\u6570\u636e\u96c6\u4e2d\uff0c\u5e73\u65b9\u6298\u53f6\u635f\u5931\u4f1a\u5de5\u4f5c\u5f97\u66f4\u597d\u3002\u53ef\u4ee5\u901a\u8fc7 \u4ea4\u53c9\u9a8c\u8bc1 \u6765\u51b3\u5b9a\u5230\u5e95\u4f7f\u7528\u54ea\u4e2a\u3002</p> <p></p> <p></p> <p>\u591a\u7c7b SVM \"\u60f3\u8981\" \u6b63\u786e\u7c7b\u522b\u7684\u5206\u7c7b\u5206\u6570\u6bd4\u5176\u4ed6\u4e0d\u6b63\u786e\u5206\u7c7b\u7c7b\u522b\u7684\u5206\u6570\u8981\u9ad8\uff0c\u800c\u4e14\u81f3\u5c11\u9ad8\u51fa delta \u7684\u8fb9\u754c\u503c\u3002\u5982\u679c\u5176\u4ed6\u5206\u7c7b\u5206\u6570\u8fdb\u5165\u4e86\u7ea2\u8272\u7684\u533a\u57df\uff0c\u751a\u81f3\u66f4\u9ad8\uff0c\u90a3\u4e48\u5c31\u5f00\u59cb\u8ba1\u7b97\u635f\u5931\u3002\u5982\u679c\u6ca1\u6709\u8fd9\u4e9b\u60c5\u51b5\uff0c\u635f\u5931\u503c\u4e3a 0\u3002\u6211\u4eec\u7684\u76ee\u6807\u662f\u627e\u5230\u4e00\u4e9b\u6743\u91cd\uff0c\u5b83\u4eec\u65e2\u80fd\u591f\u8ba9\u8bad\u7ec3\u96c6\u4e2d\u7684\u6570\u636e\u6837\u4f8b\u6ee1\u8db3\u8fd9\u4e9b\u9650\u5236\uff0c\u4e5f\u80fd\u8ba9\u603b\u7684\u635f\u5931\u503c\u5c3d\u53ef\u80fd\u5730\u4f4e\u3002</p>"},{"location":"CV/Lecture3_Linear_Classifiers/#\u6b63\u5219\u5316-regularization","title":"\u6b63\u5219\u5316 Regularization","text":"<p><code>\u6b63\u5219\u5316\uff08Regularization\uff09\u662f\u673a\u5668\u5b66\u4e60\u4e2d\u5e38\u7528\u7684\u6280\u672f\uff0c\u7528\u6765\u9632\u6b62\u6a21\u578b\u8fc7\u62df\u5408\u5e76\u63d0\u9ad8\u6cdb\u5316\u80fd\u529b\u3002\u5728\u591a\u7c7b SVM \u7684\u80cc\u666f\u4e0b\uff0c\u6b63\u5219\u5316\u901a\u8fc7\u589e\u52a0\u60e9\u7f5a\u9879\u6765\u63a7\u5236\u6a21\u578b\u7684\u590d\u6742\u5ea6\uff0c\u4ece\u800c\u51cf\u5c11\u6743\u91cd\u7684\u6a21\u7cca\u6027\u548c\u907f\u514d\u8fc7\u5ea6\u4f9d\u8d56\u67d0\u4e9b\u7279\u5b9a\u7684\u8f93\u5165\u7ef4\u5ea6\u3002</code></p> <p>\u6b63\u5219\u5316\uff08Regularization\uff09\u52a8\u673a\uff1a \u4e0a\u9762\u635f\u5931\u51fd\u6570\u6709\u4e00\u4e2a\u95ee\u9898\u3002\u5047\u8bbe\u6709\u4e00\u4e2a\u6570\u636e\u96c6\u548c\u4e00\u4e2a\u6743\u91cd\u96c6 W \u80fd\u591f\u6b63\u786e\u5730\u5206\u7c7b\u6bcf\u4e2a\u6570\u636e\uff08\u5373\u6240\u6709\u7684\u8fb9\u754c\u90fd\u6ee1\u8db3\uff0c\u5bf9\u4e8e\u6240\u6709\u7684 i \u90fd\u6709\\(L_i=0\\)\uff09\u3002\u95ee\u9898\u5728\u4e8e\u8fd9\u4e2a W \u5e76\u4e0d\u552f\u4e00\uff1a\u53ef\u80fd\u6709\u5f88\u591a\u76f8\u4f3c\u7684 W \u90fd\u80fd\u6b63\u786e\u5730\u5206\u7c7b\u6240\u6709\u7684\u6570\u636e\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a\u5982\u679c W \u80fd\u591f\u6b63\u786e\u5206\u7c7b\u6240\u6709\u6570\u636e\uff0c\u5373\u5bf9\u4e8e\u6bcf\u4e2a\u6570\u636e\uff0c\u635f\u5931\u503c\u90fd\u662f 0\u3002\u90a3\u4e48\u5f53\\(\\lambda &gt;1\\)\u65f6\uff0c\u4efb\u4f55\u6570\u4e58\\(\\lambda W\\)\u90fd\u80fd\u4f7f\u5f97\u635f\u5931\u503c\u4e3a 0\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u53d8\u5316\u5c06\u6240\u6709\u5206\u503c\u7684\u5927\u5c0f\u90fd\u5747\u7b49\u5730\u6269\u5927\u4e86\uff0c\u6240\u4ee5\u5b83\u4eec\u4e4b\u95f4\u7684\u7edd\u5bf9\u5dee\u503c\u4e5f\u6269\u5927\u4e86\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u4e00\u4e2a\u6b63\u786e\u5206\u7c7b\u7684\u5206\u503c\u548c\u4e3e\u4f8b\u5b83\u6700\u8fd1\u7684\u9519\u8bef\u5206\u7c7b\u7684\u5206\u503c\u7684\u5dee\u8ddd\u662f 15\uff0c\u5bf9 W \u4e58\u4ee5 2 \u5c06\u4f7f\u5f97\u5dee\u8ddd\u53d8\u6210 30\u3002</p> <p>\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u5411\u67d0\u4e9b\u7279\u5b9a\u7684\u6743\u91cd W \u6dfb\u52a0\u4e00\u4e9b\u504f\u597d\uff0c\u5bf9\u5176\u4ed6\u6743\u91cd\u5219\u4e0d\u6dfb\u52a0\uff0c\u4ee5\u6b64\u6765\u6d88\u9664\u6a21\u7cca\u6027\u3002\u8fd9\u4e00\u70b9\u662f\u80fd\u591f\u5b9e\u73b0\u7684\uff0c\u65b9\u6cd5\u662f\u5411\u635f\u5931\u51fd\u6570\u589e\u52a0\u4e00\u4e2a \u6b63\u5219\u5316\u60e9\u7f5a\uff08regularization penalty\uff09\\(R(W)\\)]\u90e8\u5206\u3002</p> <p>\u6700\u5e38\u7528\u7684\u6b63\u5219\u5316\u60e9\u7f5a\u662f L2 \u8303\u5f0f\uff0cL2 \u8303\u5f0f\u901a\u8fc7\u5bf9\u6240\u6709\u53c2\u6570\u8fdb\u884c\u9010\u5143\u7d20\u7684\u5e73\u65b9\u60e9\u7f5a\u6765\u6291\u5236\u5927\u6570\u503c\u7684\u6743\u91cd\uff1a\\(R(W)=\\sum_k\\sum_lW^2_{k,l}\\)</p> <p>\u4e0a\u9762\u7684\u8868\u8fbe\u5f0f\u4e2d\uff0c\u5c06\\(W\\)\u4e2d\u6240\u6709\u5143\u7d20\u5e73\u65b9\u540e\u6c42\u548c\u3002\u6ce8\u610f\u6b63\u5219\u5316\u51fd\u6570\u4e0d\u662f\u6570\u636e\u7684\u51fd\u6570\uff0c\u4ec5\u57fa\u4e8e\u6743\u91cd\u3002\u5305\u542b\u6b63\u5219\u5316\u60e9\u7f5a\u540e\uff0c\u5c31\u80fd\u591f\u7ed9\u51fa\u5b8c\u6574\u7684\u591a\u7c7b SVM \u635f\u5931\u51fd\u6570\u4e86\uff0c\u5b83\u7531\u4e24\u4e2a\u90e8\u5206\u7ec4\u6210\uff1a\u6570\u636e\u635f\u5931\uff08data loss\uff09\uff0c\u5373\u6240\u6709\u6837\u4f8b\u7684\u7684\u5e73\u5747\u635f\u5931\\(L_i\\)\uff0c\u4ee5\u53ca \u6b63\u5219\u5316\u635f\u5931\uff08regularization loss\uff09\u3002\u5b8c\u6574\u516c\u5f0f\u5982\u4e0b\u6240\u793a\uff1a</p> \\[ L = \\underbrace{ \\frac{1}{N}\\sum_i L_i}_{data   loss}+\\underbrace{\\lambda R(W)}_{regularization  loss} \\] <p>\u5c06\u5176\u5c55\u5f00\u5b8c\u6574\u516c\u5f0f\u662f\uff1a</p> \\[ L = \\frac{1}{N}\\sum_i\\sum_{j\\not = y_i} \\left [ \\max(0, f(x_i; W)_j-f(x_i; W)_{y_i}+\\Delta )\\right] + \\lambda\\sum_k\\sum_l W_{k, l}^2 \\] <p>\u5176\u4e2d\uff0c\\(N\\)\u662f\u8bad\u7ec3\u96c6\u7684\u6570\u636e\u91cf\u3002\u73b0\u5728\u6b63\u5219\u5316\u60e9\u7f5a\u6dfb\u52a0\u5230\u4e86\u635f\u5931\u51fd\u6570\u91cc\u9762\uff0c\u5e76\u7528\u8d85\u53c2\u6570\\(\\lambda\\)\u6765\u8ba1\u7b97\u5176\u6743\u91cd\u3002\u8be5\u8d85\u53c2\u6570\u65e0\u6cd5\u7b80\u5355\u786e\u5b9a\uff0c\u9700\u8981\u901a\u8fc7\u4ea4\u53c9\u9a8c\u8bc1\u6765\u83b7\u53d6\u3002</p> <p>\u6b63\u5219\u5316\u6709\u8bb8\u591a\u91cd\u8981\u4f5c\u7528\uff1a</p> <ul> <li>\u63a7\u5236\u6a21\u578b\u590d\u6742\u5ea6\uff1a\u901a\u8fc7\u60e9\u7f5a\u5927\u6743\u91cd\uff0cL2 \u6b63\u5219\u5316\u6291\u5236\u6a21\u578b\u7684\u590d\u6742\u6027(prefe simple models)\uff0c\u9f13\u52b1\u6743\u91cd\u503c\u66f4\u5c0f\u4e14\u66f4\u5747\u5300\u5730\u5206\u5e03\u5728\u5404\u4e2a\u7ef4\u5ea6\u4e0a\u3002</li> </ul> <p></p> <ul> <li> <p>\u63d0\u5347\u6cdb\u5316\u80fd\u529b\uff1a\u907f\u514d\u6a21\u578b\u4f9d\u8d56\u4e8e\u5c11\u6570\u51e0\u4e2a\u7279\u5f81\uff0c\u4ece\u800c\u51cf\u5c11\u8fc7\u62df\u5408\u73b0\u8c61\u3002</p> </li> <li> <p>\u6700\u5927\u8fb9\u754c\u6027\u8d28\uff1a\u5728 SVM \u4e2d\uff0c\u6b63\u5219\u5316\u4fc3\u4f7f\u6a21\u578b\u5bfb\u627e\u6700\u5927\u5316\u5206\u7c7b\u8fb9\u754c\u7684\u89e3\uff0c\u8fd9\u589e\u5f3a\u4e86\u6a21\u578b\u7684\u7a33\u5b9a\u6027\u548c\u9c81\u68d2\u6027\u3002</p> </li> </ul> <p>\u5176\u4e2d\u6700\u597d\u7684\u6027\u8d28\u5c31\u662f\u5bf9\u5927\u6570\u503c\u6743\u91cd\u8fdb\u884c\u60e9\u7f5a\uff0c\u53ef\u4ee5\u63d0\u5347\u5176\u6cdb\u5316\u80fd\u529b\uff0c\u56e0\u4e3a\u8fd9\u5c31\u610f\u5473\u7740\u6ca1\u6709\u54ea\u4e2a\u7ef4\u5ea6\u80fd\u591f\u72ec\u81ea\u5bf9\u4e8e\u6574\u4f53\u5206\u503c\u6709\u8fc7\u5927\u7684\u5f71\u54cd\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u8f93\u5165\u5411\u91cf\\(x = [1,1,1,1]\\)\uff0c\u4e24\u4e2a\u6743\u91cd\u5411\u91cf\\(w_1=[1,0,0,0]\\)\uff0c\\(w_2=[0.25,0.25,0.25,0.25]\\)\u3002\u90a3\u4e48\\(w^T_1x=w^T_2x=1\\)\uff0c\u4e24\u4e2a\u6743\u91cd\u5411\u91cf\u90fd\u5f97\u5230\u540c\u6837\u7684\u5185\u79ef\uff0c\u4f46\u662f\\(w_1\\)\u7684 L2 \u60e9\u7f5a\u662f 1.0\uff0c\u800c\\(w_2\\)\u7684 L2 \u60e9\u7f5a\u662f 0.25\u3002\u56e0\u6b64\uff0c\u6839\u636e L2 \u60e9\u7f5a\u6765\u770b\uff0c\\(w_2\\)\u66f4\u597d\uff0c\u56e0\u4e3a\u5b83\u7684\u6b63\u5219\u5316\u635f\u5931\u66f4\u5c0f\u3002</p> <p>\u4ece\u76f4\u89c2\u4e0a\u6765\u770b\uff0c\u8fd9\u662f\u56e0\u4e3a\\(w_2\\)\u7684\u6743\u91cd\u503c\u66f4\u5c0f\u4e14\u66f4\u5206\u6563\u3002\u65e2\u7136 L2 \u60e9\u7f5a\u503e\u5411\u4e8e\u66f4\u5c0f\u66f4\u5206\u6563\u7684\u6743\u91cd\u5411\u91cf\uff0c\u8fd9\u5c31\u4f1a\u9f13\u52b1\u5206\u7c7b\u5668\u6700\u7ec8\u5c06\u6240\u6709\u7ef4\u5ea6\u4e0a\u7684\u7279\u5f81\u90fd\u7528\u8d77\u6765\uff0c\u800c\u4e0d\u662f\u5f3a\u70c8\u4f9d\u8d56\u5176\u4e2d\u5c11\u6570\u51e0\u4e2a\u7ef4\u5ea6\u3002\u5728\u540e\u9762\u7684\u8bfe\u7a0b\u4e2d\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u4e00\u6548\u679c\u5c06\u4f1a\u63d0\u5347\u5206\u7c7b\u5668\u7684\u6cdb\u5316\u80fd\u529b\uff0c\u5e76\u907f\u514d <code>\u8fc7\u62df\u5408</code>\u3002</p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u548c\u6743\u91cd\u4e0d\u540c\uff0c\u504f\u5dee\u6ca1\u6709\u8fd9\u6837\u7684\u6548\u679c\uff0c\u56e0\u4e3a\u5b83\u4eec\u5e76\u4e0d\u63a7\u5236\u8f93\u5165\u7ef4\u5ea6\u4e0a\u7684\u5f71\u54cd\u5f3a\u5ea6\u3002\u56e0\u6b64\u901a\u5e38\u53ea\u5bf9\u6743\u91cd\\(W\\)\u6b63\u5219\u5316\uff0c\u800c\u4e0d\u6b63\u5219\u5316\u504f\u5dee\\(b\\)\u3002\u5728\u5b9e\u9645\u64cd\u4f5c\u4e2d\uff0c\u53ef\u53d1\u73b0\u8fd9\u4e00\u64cd\u4f5c\u7684\u5f71\u54cd\u53ef\u5ffd\u7565\u4e0d\u8ba1\u3002\u6700\u540e\uff0c\u56e0\u4e3a\u6b63\u5219\u5316\u60e9\u7f5a\u7684\u5b58\u5728\uff0c\u4e0d\u53ef\u80fd\u5728\u6240\u6709\u7684\u4f8b\u5b50\u4e2d\u5f97\u5230 0 \u7684\u635f\u5931\u503c\uff0c\u8fd9\u662f\u56e0\u4e3a\u53ea\u6709\u5f53\\(W=0\\)\u7684\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u624d\u80fd\u5f97\u5230\u635f\u5931\u503c\u4e3a 0\u3002</p>"},{"location":"CV/Lecture3_Linear_Classifiers/#\u975e\u5411\u91cf\u5316","title":"\u975e\u5411\u91cf\u5316","text":"<p>\u4ee3\u7801\u7247\u6bb5\u5c55\u793a\u4e86\u8ba1\u7b97\u591a\u7c7b SVM \u635f\u5931\u7684\u4e09\u79cd\u5b9e\u73b0\u65b9\u5f0f\uff1a\u975e\u5411\u91cf\u5316\uff08<code>L_i</code>\uff09\u3001\u90e8\u5206\u5411\u91cf\u5316\uff08<code>L_i_vectorized</code>\uff09\u548c\u5b8c\u5168\u5411\u91cf\u5316\uff08<code>L</code>\uff09\u3002\u6bcf\u4e2a\u5b9e\u73b0\u7684\u76ee\u6807\u662f\u8ba1\u7b97\u6837\u672c\u96c6\u4e0a\u7684\u591a\u7c7b SVM \u635f\u5931\u3002</p> <pre><code>def L_i(x, y, W):\n    delta = 1.0\n    scores = W.dot(x)  # \u8ba1\u7b97\u6240\u6709\u7c7b\u522b\u7684\u5f97\u5206\n    correct_class_score = scores[y]  # \u83b7\u53d6\u6b63\u786e\u7c7b\u522b\u7684\u5f97\u5206\n    D = W.shape[0]  # \u7c7b\u522b\u6570\u91cf\uff0c\u4f8b\u5982\u5728 CIFAR-10 \u4e2d\u4e3a 10\n    loss_i = 0.0\n    for j in xrange(D):  # \u904d\u5386\u6240\u6709\u7c7b\u522b\n        if j == y:\n            continue  # \u8df3\u8fc7\u6b63\u786e\u7c7b\u522b\n        # \u8ba1\u7b97\u6bcf\u4e2a\u9519\u8bef\u7c7b\u522b\u7684\u635f\u5931\uff0c\u5e76\u7d2f\u52a0\n        loss_i += max(0, scores[j] - correct_class_score + delta)\n    return loss_i\n</code></pre> <ul> <li> <p><code>W.dot(x)</code>\uff1a\u8ba1\u7b97\u6240\u6709\u7c7b\u522b\u7684\u5f97\u5206\uff0c\u8fd9\u91cc <code>W</code> \u662f\u6743\u91cd\u77e9\u9635\uff0c<code>x</code> \u662f\u6837\u672c\u5411\u91cf\u3002\u7ed3\u679c\u662f\u4e00\u4e2a\u5927\u5c0f\u4e3a <code>[D, 1]</code> \u7684\u5411\u91cf\uff0c\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4e00\u4e2a\u7c7b\u522b\u7684\u5f97\u5206\u3002</p> </li> <li> <p><code>correct_class_score</code>\uff1a\u63d0\u53d6\u6b63\u786e\u7c7b\u522b\u7684\u5f97\u5206\u3002</p> </li> <li> <p><code>for j in xrange(D)</code>\uff1a\u904d\u5386\u6240\u6709\u7c7b\u522b\uff0c\u8ba1\u7b97\u9519\u8bef\u7c7b\u522b\u7684\u635f\u5931\uff0c\u5ffd\u7565\u6b63\u786e\u7c7b\u522b\u7684\u635f\u5931\u3002</p> </li> <li> <p><code>loss_i += max(0, scores[j] - correct_class_score + delta)</code>\uff1a\u4f7f\u7528\u6298\u53f6\u635f\u5931\uff08hinge loss\uff09\uff0c\u5982\u679c\u9519\u8bef\u7c7b\u522b\u7684\u5f97\u5206\u9ad8\u4e8e\u6b63\u786e\u7c7b\u522b\u7684\u5f97\u5206\u52a0\u4e0a\u4e00\u4e2a <code>delta</code>\uff08\u8fb9\u754c\u503c\uff09\uff0c\u5219\u4ea7\u751f\u635f\u5931\u3002</p> </li> </ul> <p>\u53cc\u91cd\u5faa\u73af\uff1a\u5916\u5c42\u5faa\u73af\u904d\u5386\u6240\u6709\u6837\u672c\uff0c\u5185\u5c42\u5faa\u73af\u904d\u5386\u6240\u6709\u7c7b\u522b\u3002</p> <p>\u4f4e\u6548\uff1a\u5f53\u6837\u672c\u91cf\u548c\u7c7b\u522b\u6570\u91cf\u8f83\u5927\u65f6\uff0c\u8ba1\u7b97\u901f\u5ea6\u6162\u3002</p>"},{"location":"CV/Lecture3_Linear_Classifiers/#\u90e8\u5206\u5411\u91cf\u5316","title":"\u90e8\u5206\u5411\u91cf\u5316","text":"<pre><code>def L_i_vectorized(x, y, W):\n    delta = 1.0\n    scores = W.dot(x)  # \u8ba1\u7b97\u6240\u6709\u7c7b\u522b\u7684\u5f97\u5206\n    margins = np.maximum(0, scores - scores[y] + delta)  # \u8ba1\u7b97\u6240\u6709\u7c7b\u522b\u7684\u8fb9\u8ddd\n    margins[y] = 0  # \u6b63\u786e\u7c7b\u522b\u7684\u8fb9\u8ddd\u8bbe\u4e3a 0\uff0c\u4e0d\u8ba1\u5165\u635f\u5931\n    loss_i = np.sum(margins)  # \u8ba1\u7b97\u603b\u635f\u5931\n    return loss_i\n</code></pre> <ul> <li><code>margins = np.maximum(0, scores - scores[y] + delta)</code>\uff1a\u4e00\u6b21\u6027\u8ba1\u7b97\u6240\u6709\u7c7b\u522b\u7684\u8fb9\u8ddd\uff0c\u5e76\u5bf9\u6bcf\u4e2a\u7c7b\u522b\u5e94\u7528\u6298\u53f6\u635f\u5931\u3002</li> <li><code>margins[y] = 0</code>\uff1a\u5c06\u6b63\u786e\u7c7b\u522b\u7684\u8fb9\u8ddd\u8bbe\u7f6e\u4e3a 0\uff0c\u56e0\u4e3a\u5b83\u4e0d\u5e94\u8be5\u4ea7\u751f\u635f\u5931\u3002</li> <li><code>loss_i = np.sum(margins)</code>\uff1a\u5c06\u6240\u6709\u9519\u8bef\u7c7b\u522b\u7684\u635f\u5931\u52a0\u603b\u3002</li> </ul> <ul> <li> <p>\u6548\u7387\u63d0\u9ad8\uff1a\u5229\u7528 NumPy \u7684\u77e2\u91cf\u5316\u64cd\u4f5c\uff0c\u907f\u514d\u4e86\u663e\u5f0f\u7684\u5185\u90e8\u5faa\u73af\u3002</p> </li> <li> <p>\u6bd4\u975e\u5411\u91cf\u5316\u9ad8\u6548\uff1a\u51cf\u5c11\u4e86\u5185\u90e8\u5faa\u73af\u3002</p> </li> </ul>"},{"location":"CV/Lecture3_Linear_Classifiers/#\u5b8c\u5168\u5411\u91cf\u5316","title":"\u5b8c\u5168\u5411\u91cf\u5316","text":"<pre><code>def L(X, y, W):\n    \"\"\"\n    \u5168\u5411\u91cf\u5316\u5b9e\u73b0\u7684\u591a\u7c7b SVM \u635f\u5931\u51fd\u6570\u3002\n    - X \u4fdd\u5b58\u6240\u6709\u8bad\u7ec3\u6837\u672c\u7684\u5217\u5411\u91cf\uff08\u4f8b\u5982\uff0c\u5728 CIFAR-10 \u6570\u636e\u96c6\u4e2d\uff0cX \u7684\u5f62\u72b6\u4e3a 3073 x 50,000\uff09\n    - y \u662f\u4e00\u4e2a\u4e00\u7ef4\u6574\u6570\u6570\u7ec4\uff0c\u6307\u5b9a\u6b63\u786e\u7c7b\u522b\u7684\u7d22\u5f15\uff08\u4f8b\u5982\uff0c\u957f\u5ea6\u4e3a 50,000 \u7684\u6570\u7ec4\uff09\n    - W \u662f\u6743\u91cd\u77e9\u9635\uff08\u4f8b\u5982\uff0c\u5728 CIFAR-10 \u6570\u636e\u96c6\u4e2d\uff0cW \u7684\u5f62\u72b6\u4e3a 10 x 3073\uff09\n    \"\"\"\n\n    delta = 1.0  # \u8fb9\u754c\u8d85\u53c2\u6570\n    num_train = X.shape[1]  # \u8bad\u7ec3\u6837\u672c\u7684\u6570\u91cf\n\n    # \u7b2c\u4e00\u6b65\uff1a\u8ba1\u7b97\u6240\u6709\u7c7b\u522b\u7684\u5f97\u5206\n    scores = W.dot(X)  # \u8ba1\u7b97\u5f97\u5206\u77e9\u9635\uff0c\u5f62\u72b6\u4e3a [\u7c7b\u522b\u6570\u91cf, \u8bad\u7ec3\u6837\u672c\u6570\u91cf]\n\n    # \u7b2c\u4e8c\u6b65\uff1a\u4ece\u5f97\u5206\u77e9\u9635\u4e2d\u63d0\u53d6\u6b63\u786e\u7c7b\u522b\u7684\u5f97\u5206\n    correct_class_scores = scores[y, np.arange(num_train)]  # \u6b63\u786e\u7c7b\u522b\u7684\u5f97\u5206\uff0c\u5f62\u72b6\u4e3a [1, \u8bad\u7ec3\u6837\u672c\u6570\u91cf]\n\n    # \u7b2c\u4e09\u6b65\uff1a\u8ba1\u7b97\u6240\u6709\u7c7b\u522b\u7684\u8fb9\u8ddd\n    margins = np.maximum(0, scores - correct_class_scores + delta)  # \u8ba1\u7b97\u8fb9\u8ddd\u77e9\u9635\uff0c\u5f62\u72b6\u4e3a [\u7c7b\u522b\u6570\u91cf, \u8bad\u7ec3\u6837\u672c\u6570\u91cf]\n\n    # \u7b2c\u56db\u6b65\uff1a\u4e0d\u8003\u8651\u6b63\u786e\u7c7b\u522b\u7684\u635f\u5931\uff08\u5c06\u5176\u8fb9\u8ddd\u8bbe\u4e3a 0\uff09\n    margins[y, np.arange(num_train)] = 0  # \u5bf9\u6b63\u786e\u7c7b\u522b\u7684\u8fb9\u8ddd\u8bbe\u4e3a 0\n\n    # \u7b2c\u4e94\u6b65\uff1a\u8ba1\u7b97\u6240\u6709\u6837\u672c\u7684\u5e73\u5747\u603b\u635f\u5931\n    loss = np.sum(margins) / num_train  # \u8ba1\u7b97\u603b\u635f\u5931\n\n    # \u7b2c\u516d\u6b65\uff1a\u5c06\u6b63\u5219\u5316\u9879\u6dfb\u52a0\u5230\u635f\u5931\u4e2d\n    regularization_strength = 0.5  # \u6b63\u5219\u5316\u5f3a\u5ea6\u7684\u8d85\u53c2\u6570\uff0c\u53ef\u4ee5\u6839\u636e\u9700\u8981\u8c03\u6574\n    loss += regularization_strength * np.sum(W * W)  # \u6dfb\u52a0\u6b63\u5219\u5316\u635f\u5931\n\n    return loss  # \u8fd4\u56de\u6700\u7ec8\u7684\u635f\u5931\u503c\n</code></pre> <ul> <li> <p><code>scores</code> \u77e9\u9635\u7684\u5f62\u72b6\u4e3a <code>[num_classes, num_train]</code>\uff0c\u5373\u6bcf\u4e00\u5217\u5bf9\u5e94\u4e00\u4e2a\u6837\u672c\uff0c\u6bcf\u4e00\u884c\u5bf9\u5e94\u4e00\u4e2a\u7c7b\u522b\u7684\u5f97\u5206\u3002</p> </li> <li> <p><code>correct_class_scores</code> \u63d0\u53d6\u51fa\u6bcf\u4e2a\u6837\u672c\u7684\u6b63\u786e\u7c7b\u522b\u7684\u5f97\u5206\uff0c\u5f62\u72b6\u4e3a <code>[1, num_train]</code>\u3002</p> </li> </ul> <p><code>y</code> \u662f\u6b63\u786e\u7c7b\u522b\u7684\u7d22\u5f15\u6570\u7ec4\uff0c\u901a\u8fc7 <code>scores[y, np.arange(num_train)]</code> \u53ef\u4ee5\u76f4\u63a5\u63d0\u53d6\u51fa\u5bf9\u5e94\u5217\u4e2d\u7684\u6b63\u786e\u7c7b\u522b\u5f97\u5206\u3002</p> <ul> <li><code>margins</code> \u77e9\u9635\u7684\u5f62\u72b6\u4e0e <code>scores</code> \u76f8\u540c\uff0c\u4e3a <code>[num_classes, num_train]</code>\u3002</li> </ul> <p>\u5bf9\u6bcf\u4e2a\u6837\u672c\uff0c\u8ba1\u7b97\u5b83\u7684\u6240\u6709\u7c7b\u522b\u7684\u8fb9\u8ddd\u503c\uff0c\u5e76\u901a\u8fc7 <code>np.maximum</code> \u5c06\u8d1f\u7684\u8fb9\u8ddd\u503c\u8bbe\u4e3a 0\u3002</p> <ul> <li> <p>\u5c06 <code>margins</code> \u4e2d\u6b63\u786e\u7c7b\u522b\u7684\u8fb9\u8ddd\u503c\u8bbe\u4e3a 0\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u9700\u8981\u8003\u8651\u5b83\u4eec\u7684\u635f\u5931\u3002</p> </li> <li> <p>\u5bf9\u6240\u6709\u6837\u672c\u548c\u7c7b\u522b\u7684\u8fb9\u8ddd\u503c\u6c42\u548c\uff0c\u7136\u540e\u9664\u4ee5\u6837\u672c\u603b\u6570\uff0c\u5f97\u5230\u5e73\u5747\u635f\u5931\u3002</p> </li> <li> <p>\u5c06\u6b63\u5219\u5316\u635f\u5931\u52a0\u5230\u603b\u635f\u5931\u4e2d\u3002\u6b63\u5219\u5316\u9879\u662f\u6743\u91cd\u77e9\u9635\u7684 L2 \u8303\u6570\u7684\u5e73\u65b9\u3002</p> </li> </ul> <p>\u5b8c\u5168\u5411\u91cf\u5316\u5b9e\u73b0 (<code>L</code>)\uff1a\u5bf9\u6240\u6709\u6837\u672c\u548c\u7c7b\u522b\u4e00\u6b21\u6027\u5b8c\u6210\u8ba1\u7b97\uff0c\u6548\u7387\u6700\u9ad8\uff0c\u9002\u5408\u5904\u7406\u5927\u89c4\u6a21\u6570\u636e\u96c6\u3002</p> <p>\u6700\u9ad8\u6548\uff1a\u4f7f\u7528 NumPy \u7684\u5e7f\u64ad\u673a\u5236\u548c\u77e2\u91cf\u5316\u64cd\u4f5c\uff0c\u5b8c\u5168\u6d88\u9664\u4e86\u663e\u5f0f\u7684\u5faa\u73af\u3002</p>"},{"location":"CV/Lecture3_Linear_Classifiers/#\u5b9e\u9645\u8003\u8651","title":"\u5b9e\u9645\u8003\u8651","text":"<p>\u8bbe\u7f6e Delta\uff1a\u4f60\u53ef\u80fd\u6ce8\u610f\u5230\u4e0a\u9762\u7684\u5185\u5bb9\u5bf9\u8d85\u53c2\u6570\\(Delta\\)\u53ca\u5176\u8bbe\u7f6e\u662f\u4e00\u7b14\u5e26\u8fc7\uff0c\u90a3\u4e48\u5b83\u5e94\u8be5\u88ab\u8bbe\u7f6e\u6210\u4ec0\u4e48\u503c\uff1f\u9700\u8981\u901a\u8fc7\u4ea4\u53c9\u9a8c\u8bc1\u6765\u6c42\u5f97\u5417\uff1f\u73b0\u5728\u770b\u6765\uff0c\u8be5\u8d85\u53c2\u6570\u5728\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u8bbe\u4e3a\\(Delta=1.0\\)\u90fd\u662f\u5b89\u5168\u7684\u3002\u8d85\u53c2\u6570\\(\\Delta\\)\u548c\\(\\lambda\\)\u770b\u8d77\u6765\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u8d85\u53c2\u6570\uff0c\u4f46\u5b9e\u9645\u4e0a\u4ed6\u4eec\u4e00\u8d77\u63a7\u5236\u540c\u4e00\u4e2a\u6743\u8861\uff1a\u5373\u635f\u5931\u51fd\u6570\u4e2d\u7684\u6570\u636e\u635f\u5931\u548c\u6b63\u5219\u5316\u635f\u5931\u4e4b\u95f4\u7684\u6743\u8861\u3002 \u7406\u89e3\u8fd9\u4e00\u70b9\u7684\u5173\u952e\u662f\u8981\u77e5\u9053\uff0c<code>\u6743\u91cd$W$\u7684\u5927\u5c0f\u5bf9\u4e8e\u5206\u7c7b\u5206\u503c\u6709\u76f4\u63a5\u5f71\u54cd</code>\uff08\u5f53\u7136\u5bf9\u4ed6\u4eec\u7684\u5dee\u5f02\u4e5f\u6709\u76f4\u63a5\u5f71\u54cd\uff09\uff1a\u5f53\u6211\u4eec\u5c06\\(W\\)\u4e2d\u503c\u7f29\u5c0f\uff0c\u5206\u7c7b\u5206\u503c\u4e4b\u95f4\u7684\u5dee\u5f02\u4e5f\u53d8\u5c0f\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002<code>\u56e0\u6b64\uff0c\u4e0d\u540c\u5206\u7c7b\u5206\u503c\u4e4b\u95f4\u7684\u8fb9\u754c\u7684\u5177\u4f53\u503c</code>\uff08\u6bd4\u5982\\(\\Delta=1\\)\u6216\\(\\Delta=100\\)\uff09<code>\u4ece\u67d0\u4e9b\u89d2\u5ea6\u6765\u770b\u662f\u6ca1\u610f\u4e49\u7684</code>\uff0c\u56e0\u4e3a\u6743\u91cd\u81ea\u5df1\u5c31\u53ef\u4ee5\u63a7\u5236\u5dee\u5f02\u53d8\u5927\u548c\u7f29\u5c0f\u3002\u4e5f\u5c31\u662f\u8bf4 \uff0c<code>\u771f\u6b63\u7684\u6743\u8861\u662f\u6211\u4eec\u5141\u8bb8\u6743\u91cd\u80fd\u591f\u53d8\u5927\u5230\u4f55\u79cd\u7a0b\u5ea6\uff08\u901a\u8fc7\u6b63\u5219\u5316\u5f3a\u5ea6$\\lambda$\u6765\u63a7\u5236\uff09\u3002</code></p> <p>\u4e0e\u4e8c\u5143\u652f\u6301\u5411\u91cf\u673a\uff08 Binary Support Vector Machine \uff09\u7684\u5173\u7cfb\uff1a\u5728\u5b66\u4e60\u672c\u8bfe\u7a0b\u524d\uff0c\u4f60\u53ef\u80fd\u5bf9\u4e8e\u4e8c\u5143\u652f\u6301\u5411\u91cf\u673a\u6709\u4e9b\u7ecf\u9a8c\uff0c\u5b83\u5bf9\u4e8e\u7b2c i \u4e2a\u6570\u636e\u7684\u635f\u5931\u8ba1\u7b97\u516c\u5f0f\u662f\uff1a</p> \\[L_i=C\\max(0,1-y_iw^Tx_i)+R(W)\\] <p>\u5176\u4e2d\uff0c\\(C\\)\u662f\u4e00\u4e2a\u8d85\u53c2\u6570\uff0c\u5e76\u4e14\\(y_i\\in{\\left\\{-1,1\\right\\}}\\)\u3002\u53ef\u4ee5\u8ba4\u4e3a\u672c\u7ae0\u8282\u4ecb\u7ecd\u7684 SVM \u516c\u5f0f\u5305\u542b\u4e86\u4e0a\u8ff0\u516c\u5f0f\uff0c\u4e0a\u8ff0\u516c\u5f0f\u662f\u591a\u7c7b\u652f\u6301\u5411\u91cf\u673a\u516c\u5f0f\u53ea\u6709\u4e24\u4e2a\u5206\u7c7b\u7c7b\u522b\u7684\u7279\u4f8b\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u8981\u5206\u7c7b\u7684\u7c7b\u522b\u53ea\u6709\u4e24\u4e2a\uff0c\u90a3\u4e48\u516c\u5f0f\u5c31\u5316\u4e3a\u4e8c\u5143 SVM \u516c\u5f0f\u3002\u8fd9\u4e2a\u516c\u5f0f\u4e2d\u7684\\(C\\)\u548c\u591a\u7c7b SVM \u516c\u5f0f\u4e2d\u7684\\(\\lambda\\)\u90fd\u63a7\u5236\u7740\u540c\u6837\u7684\u6743\u8861\uff0c\u800c\u4e14\u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\u662f\\(C\\propto\\frac{1}{\\lambda}\\)</p>"},{"location":"CV/Lecture3_Linear_Classifiers/#softmax-\u5206\u7c7b\u5668","title":"Softmax \u5206\u7c7b\u5668","text":"<p>SVM \u662f\u6700\u5e38\u7528\u7684\u4e24\u4e2a\u5206\u7c7b\u5668\u4e4b\u4e00\uff0c\u800c\u53e6\u4e00\u4e2a\u5c31\u662f Softmax \u5206\u7c7b\u5668\uff0c \u5b83\u7684\u635f\u5931\u51fd\u6570\u4e0e SVM \u7684\u635f\u5931\u51fd\u6570\u4e0d\u540c\u3002\u5bf9\u4e8e\u5b66\u4e60\u8fc7\u4e8c\u5143\u903b\u8f91\u56de\u5f52\u5206\u7c7b\u5668\u7684\u8bfb\u8005\u6765\u8bf4\uff0c<code>Softmax \u5206\u7c7b\u5668\u5c31\u53ef\u4ee5\u7406\u89e3\u4e3a\u903b\u8f91\u56de\u5f52\u5206\u7c7b\u5668\u9762\u5bf9\u591a\u4e2a\u5206\u7c7b\u7684\u4e00\u822c\u5316\u5f52\u7eb3</code>\u3002SVM \u5c06\u8f93\u51fa\\(f(x_i, W)\\)\u4f5c\u4e3a\u6bcf\u4e2a\u5206\u7c7b\u7684\u8bc4\u5206\uff08\u56e0\u4e3a\u65e0\u5b9a\u6807\uff0c\u6240\u4ee5\u96be\u4ee5\u76f4\u63a5\u89e3\u91ca\uff09\u3002</p> <p></p> <p>\u5728 Softmax \u5206\u7c7b\u5668\u4e2d\uff0c\u51fd\u6570\u6620\u5c04\\(f(x_i; W)= Wx_i\\)\u4fdd\u6301\u4e0d\u53d8\uff0c\u5176\u8f93\u51fa\u662f\u7ebf\u6027\u5206\u7c7b\u5668\u9884\u6d4b\u7684\u539f\u59cb\u5206\u6570\uff0c\u4f46\u5c06\u8fd9\u4e9b\u8bc4\u5206\u503c\u89c6\u4e3a\u6bcf\u4e2a\u5206\u7c7b\u7684\u672a\u5f52\u4e00\u5316\u7684\u5bf9\u6570\u6982\u7387\uff08\u6216\u8005\u53eb\u505a\u975e\u6807\u51c6\u5316\u7684\u5bf9\u6570\u6982\u7387\uff09\uff0c\u8fdb\u884c\u6307\u6570\u8ba1\u7b97\u4e4b\u540e\uff0c\u6240\u6709\u7684\u5206\u6570\u8f6c\u5316\u4e3a\u6b63\u6570\uff0c\u5e76\u4e14\u5c06\u6298\u53f6\u635f\u5931\uff08hinge loss\uff09\u66ff\u6362\u4e3a \u4ea4\u53c9\u71b5\u635f\u5931\uff08cross-entropy loss\uff09\u3002</p> \\[ entropy = -\\sum_{i = 0}^i p_ilogp_i \\\\ l(f, y) = -\\sum_i^n \\sum_j^m y_{ij}logf(x_{ij}) \\] <p>Softmax \u5206\u7c7b\u5668\u4f7f\u7528 \u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570 \u6765\u8861\u91cf\u6a21\u578b\u8f93\u51fa\u7684\u6982\u7387\u5206\u5e03\u4e0e\u5b9e\u9645\u6807\u7b7e\u7684\u5dee\u8ddd\u3002\u5bf9\u4e8e\u4e00\u4e2a\u8f93\u5165\u6837\u672c xix_ixi \u53ca\u5176\u5bf9\u5e94\u7684\u771f\u5b9e\u6807\u7b7e yiy_iyi\uff0c\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570\u53ef\u4ee5\u5199\u4f5c\uff1a</p> <p>\\(Li=\u2212log\u2061P(y_i\u2223x_i)\\)\u5176\u4e2d\\(P(y_i\u2223x_i)\\)\u662f\u6a21\u578b\u5bf9\u6837\u672c\\(x_i\\)\u7684\u6b63\u786e\u7c7b\u522b\\(y_i\\)\u9884\u6d4b\u7684\u6982\u7387\u3002</p> <p>\u516c\u5f0f\u5982\u4e0b\uff1a\\(Li =-log(\\dfrac{e^{f_{y_i}}}{\\sum_je^{f_j}})\\)\u6216\u7b49\u4ef7\u7684\\(L_i =-f_{y_i}+log(\\sum_je^{f_j})\\)</p> <p>\u5728\u4e0a\u5f0f\u4e2d\uff0c\u4f7f\u7528\\(f_j\\)\u6765\u8868\u793a\u5206\u7c7b\u8bc4\u5206\u5411\u91cf\\(f\\)\u4e2d\u7684\u7b2c\\(j\\)\u4e2a\u5143\u7d20(\\(f_j = W_j \\cdot x_i\\))\u3002\u548c\u4e4b\u524d\u4e00\u6837\uff0c\u6574\u4e2a\u6570\u636e\u96c6\u7684\u635f\u5931\u503c\u662f\u6570\u636e\u96c6\u4e2d\u6240\u6709\u6837\u672c\u6570\u636e\u7684\u635f\u5931\u503c\\(L_i\\)\u7684\u5747\u503c\u4e0e\u6b63\u5219\u5316\u635f\u5931\\(R(W)\\)\u4e4b\u548c\u3002\u5176\u4e2d\u51fd\u6570\\(f_j(z)= \\dfrac{e^{z_j}}{\\sum_ke^{z_k}}\\)\u88ab\u79f0\u4f5c softmax \u51fd\u6570\uff1a\u5176\u8f93\u5165\u503c\u662f\u4e00\u4e2a\u5411\u91cf\uff0c\u5411\u91cf\u4e2d\u5143\u7d20\u4e3a\u4efb\u610f\u5b9e\u6570\u7684\u8bc4\u5206\u503c\\(z\\)\u4e2d\u7684\uff09\uff0c\u51fd\u6570\u5bf9\u5176\u8fdb\u884c\u538b\u7f29\uff0c\u8f93\u51fa\u4e00\u4e2a\u5411\u91cf\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u503c\u5728 0 \u5230 1 \u4e4b\u95f4\uff0c\u4e14\u6240\u6709\u5143\u7d20\u4e4b\u548c\u4e3a 1\u3002</p> <p>\u56e0\u4e3a\u539f\u59cb\u7684\u7ebf\u6027\u5206\u7c7b\u5668\u8f93\u51fa\u7684\u662f\u539f\u59cb\u5206\u6570\uff0c\u53ef\u4ee5\u770b\u505a\u662f\u975e\u6807\u51c6\u5316/\u672a\u5f52\u4e00\u5316\u7684\u5bf9\u6570\u6982\u7387\uff0c\u7136\u540e\u53d6\u6307\u6570\uff0c\u5f97\u5230\u975e\u6807\u51c6\u5316/\u672a\u5f52\u4e00\u5316\u6982\u7387\uff0c\u7136\u540e\u8fdb\u884c\u5f52\u4e00\u5316\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u6240\u6709\u7c7b\u7684\u79bb\u6563\u6982\u7387\u5206\u5e03</p> <p>\u4fe1\u606f\u7406\u8bba\u89c6\u89d2\uff1a\u5728 \"\u771f\u5b9e\" \u5206\u5e03\\(p\\)\u548c\u4f30\u8ba1\u5206\u5e03\\(q\\)\u4e4b\u95f4\u7684\u4ea4\u53c9\u71b5\u5b9a\u4e49\u5982\u4e0b\uff1a\\(H(p, q)=-\\sum_xp(x) logq(x)\\)</p> <p>-\\(p(x)\\)\u662f\u771f\u5b9e\u5206\u5e03\uff08\u901a\u5e38\u662f\u72ec\u70ed\u7f16\u7801\uff0c\u5373\u5728\u6b63\u786e\u7c7b\u522b\u4f4d\u7f6e\u4e0a\u4e3a 1\uff0c\u5176\u4ed6\u4f4d\u7f6e\u4e3a 0\uff09\u3002</p> <p>-\\(q(x)\\)\u662f\u6a21\u578b\u7684\u9884\u6d4b\u5206\u5e03\uff08Softmax \u8f93\u51fa\u7684\u5f52\u4e00\u5316\u6982\u7387\uff09\u3002</p> <p>\u56e0\u6b64\uff0cSoftmax \u5206\u7c7b\u5668\u6240\u505a\u7684\u5c31\u662f <code>\u6700\u5c0f\u5316</code> \u5728\u4f30\u8ba1\u5206\u7c7b\u6982\u7387\uff08 \u5c31\u662f\u4e0a\u9762\u7684\\(e^{f_{y_i}}/\\sum_{j}e^{f_j}\\)\uff09\u548c \"\u771f\u5b9e\" \u5206\u5e03\u4e4b\u95f4\u7684 \u4ea4\u53c9\u71b5\uff0c\u5728\u8fd9\u4e2a\u89e3\u91ca\u4e2d\uff0c\"\u771f\u5b9e\" \u5206\u5e03\u5c31\u662f\u6240\u6709\u6982\u7387\u5bc6\u5ea6\u90fd\u5206\u5e03\u5728\u6b63\u786e\u7684\u7c7b\u522b\u4e0a\uff08\u6bd4\u5982\uff1a\\(p = [0, \\cdots,1,\\cdots,0]\\)\u4e2d\u5728\\(y_i\\)\u7684\u4f4d\u7f6e\u5c31\u6709\u4e00\u4e2a\u5355\u72ec\u7684 1\uff09\u3002\u8fd8\u6709\uff0c\u65e2\u7136\u4ea4\u53c9\u71b5\u53ef\u4ee5\u5199\u6210\u71b5\u548c\u76f8\u5bf9\u71b5\uff08Kullback-Leibler divergence\uff09\\(H(p, q)= H(p)+D_{KL}(p||q)\\)\uff0c\u5e76\u4e14 delta \u51fd\u6570\\(p\\)\u7684\u71b5\u662f 0\uff0c\u90a3\u4e48\u5c31\u80fd\u7b49\u4ef7\u7684\u770b\u505a\u662f\u5bf9\u4e24\u4e2a\u5206\u5e03\u4e4b\u95f4\u7684\u76f8\u5bf9\u71b5\u505a\u6700\u5c0f\u5316\u64cd\u4f5c\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c<code>\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570 \"\u60f3\u8981\" \u9884\u6d4b\u5206\u5e03\u7684\u6240\u6709_\u6982\u7387\u5bc6\u5ea6_\u90fd\u5728\u6b63\u786e\u5206\u7c7b\u4e0a\u3002</code></p> <p>\u5f53\u7136\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u5b50\u7406\u89e3\uff0cW \u8868\u793a\u6743\u91cd\uff0cx \u8868\u793a\u8f93\u5165\uff0cz \u8868\u793a\u8f93\u51fa\uff0c\u5f53\u4e09\u8005\u90fd\u4e3a\u5411\u91cf\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u5b9e\u9645\u4e0a\u4f18\u5316\u9884\u6d4b\u6982\u7387\u5c31\u662f\u5728\u4f18\u5316\u5411\u91cf\u5939\u89d2</p> <p></p> <p>\u5982\u56fe\u6240\u793a\uff0c\u5982\u679c\u4e24\u4e2a\u7c7b\u4e4b\u95f4\u7684\u5939\u89d2\u8d8a\u5927\uff0c\u5219\u8d8a\u5bb9\u6613\u8fdb\u884c\u533a\u5206\uff0c\u5982\u679c\u7c7b\u6240\u5360\u533a\u57df\u7684\u5939\u89d2\u5f88\u5c0f\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u7c7b\u5185\u66f4\u52a0\u7d27\u51d1\uff0c\u7c7b\u95f4\u66f4\u5bb9\u6613\u5206\u79bb\uff0c\u90a3\u4e48\u5206\u7c7b\u5668\u5b66\u4e60\u8d77\u6765\u66f4\u5bb9\u6613</p> <p></p> <p><code>\u7c7b\u5185\u7d27\u51d1\u6027\u4e0e\u7c7b\u95f4\u5206\u79bb:</code></p> <p>\u5f53\u7c7b\u522b\u4e4b\u95f4\u7684\u5939\u89d2\u5f88\u5c0f\u65f6\uff0c\u8bf4\u660e\u4e0d\u540c\u7c7b\u522b\u7684\u7279\u5f81\u4e4b\u95f4\u7684\u76f8\u4f3c\u6027\u8f83\u9ad8\uff0c\u8fd9\u4f1a\u589e\u52a0\u5206\u7c7b\u7684\u96be\u5ea6\u3002\u4f46\u5982\u679c\u7c7b\u5185\u7684\u6570\u636e\u5206\u5e03\u975e\u5e38\u7d27\u51d1\uff0c\u7c7b\u95f4\u7684\u5206\u79bb\u4ecd\u7136\u8f83\u4e3a\u660e\u663e\uff0c\u5219\u5206\u7c7b\u5668\u4e5f\u80fd\u627e\u5230\u6709\u6548\u7684\u51b3\u7b56\u8fb9\u754c\u3002</p> <ul> <li>\u7c7b\u5185\u7d27\u51d1\u6027\uff1a\u6307\u7684\u662f\u76f8\u540c\u7c7b\u522b\u7684\u6837\u672c\u5728\u7279\u5f81\u7a7a\u95f4\u4e2d\u5206\u5e03\u5f97\u975e\u5e38\u96c6\u4e2d\u3002\u7c7b\u5185\u8d8a\u7d27\u51d1\uff0c\u5206\u7c7b\u5668\u8d8a\u5bb9\u6613\u6355\u6349\u5230\u7c7b\u522b\u7684\u7279\u5f81\u4e2d\u5fc3\uff0c\u63d0\u5347\u5206\u7c7b\u6027\u80fd\u3002</li> <li>\u7c7b\u95f4\u5206\u79bb\uff1a\u5982\u679c\u7c7b\u95f4\u7684\u8ddd\u79bb\u8f83\u5927\uff0c\u5373\u4f7f\u5939\u89d2\u8f83\u5c0f\uff0c\u5206\u7c7b\u5668\u4ecd\u7136\u80fd\u627e\u5230\u8f83\u597d\u7684\u8fb9\u754c\u6765\u533a\u5206\u4e0d\u540c\u7c7b\u522b\u3002</li> </ul> <p>\u6982\u7387\u8bba\u89e3\u91ca\uff1a\u5148\u770b\u4e0b\u9762\u7684\u516c\u5f0f\uff1a</p> \\[ P(y_i|x_i, W)= \\dfrac{e^{f_{y_i}}}{\\sum_je^{f_j}} \\] <p>\u53ef\u4ee5\u89e3\u91ca\u4e3a\u662f\u7ed9\u5b9a\u56fe\u50cf\u6570\u636e\\(x_i\\)\uff0c\u4ee5\\(W\\)\u4e3a\u53c2\u6570\uff0c\u5206\u914d\u7ed9\u6b63\u786e\u5206\u7c7b\u6807\u7b7e\\(y_i\\)\u7684\u5f52\u4e00\u5316\u6982\u7387\u3002\u7528\\(W \\cdot x_i\\)\u5f97\u5230\u7684\u7ed3\u679c\u505a\u6307\u6570\u51fd\u6570\u7684\u5e42\u5c31\u5f97\u5230\u4e86\u6ca1\u6709\u5f52\u4e00\u5316\u7684\u6982\u7387\uff0c\u800c\u9664\u6cd5\u64cd\u4f5c\u5219\u5bf9\u6570\u636e\u8fdb\u884c\u4e86\u5f52\u4e00\u5316\u5904\u7406\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u6982\u7387\u7684\u548c\u4e3a 1\u3002\u4ece\u6982\u7387\u8bba\u7684\u89d2\u5ea6\u6765\u7406\u89e3\uff0c\u6211\u4eec\u5c31\u662f\u5728\u6700\u5c0f\u5316\u6b63\u786e\u5206\u7c7b\u7684\u8d1f\u5bf9\u6570\u6982\u7387\uff0c\u8fd9\u53ef\u4ee5\u770b\u505a\u662f\u5728\u8fdb\u884c\u6700\u5927\u4f3c\u7136\u4f30\u8ba1\uff08MLE\uff09\u3002\u8be5\u89e3\u91ca\u7684\u53e6\u4e00\u4e2a\u597d\u5904\u662f\uff0c\u635f\u5931\u51fd\u6570\u4e2d\u7684\u6b63\u5219\u5316\u90e8\u5206\\(R(W)\\)\u53ef\u4ee5\u88ab\u770b\u505a\u662f\u6743\u91cd\u77e9\u9635\\(W\\)\u7684\u9ad8\u65af\u5148\u9a8c\uff0c\u8fd9\u91cc\u8fdb\u884c\u7684\u662f\u6700\u5927\u540e\u9a8c\u4f30\u8ba1\uff08MAP\uff09\u800c\u4e0d\u662f\u6700\u5927\u4f3c\u7136\u4f30\u8ba1\u3002</p> <p>\u5b9e\u64cd\u4e8b\u9879\uff1a\u6570\u503c\u7a33\u5b9a\u3002 \u7f16\u7a0b\u5b9e\u73b0 softmax \u51fd\u6570\u8ba1\u7b97\u7684\u65f6\u5019\uff0c\u4e2d\u95f4\u9879\\(e^{f_{y_i}}\\)\u548c\\(\\sum_j e^{f_j}\\)\u56e0\u4e3a\u5b58\u5728\u6307\u6570\u51fd\u6570\uff0c\u6240\u4ee5\u6570\u503c\u53ef\u80fd\u975e\u5e38\u5927\u3002\u9664\u4ee5\u5927\u6570\u503c\u53ef\u80fd\u5bfc\u81f4\u6570\u503c\u8ba1\u7b97\u7684\u4e0d\u7a33\u5b9a\uff0c\u6240\u4ee5\u5b66\u4f1a\u4f7f\u7528\u5f52\u4e00\u5316\u6280\u5de7\u975e\u5e38\u91cd\u8981\u3002\u5982\u679c\u5728\u5206\u5f0f\u7684\u5206\u5b50\u548c\u5206\u6bcd\u90fd\u4e58\u4ee5\u4e00\u4e2a\u5e38\u6570\\(C\\)\uff0c\u5e76\u628a\u5b83\u53d8\u6362\u5230\u6c42\u548c\u4e4b\u4e2d\uff0c\u5c31\u80fd\u5f97\u5230\u4e00\u4e2a\u4ece\u6570\u5b66\u4e0a\u7b49\u4ef7\u7684\u516c\u5f0f\uff1a</p> \\[ \\dfrac{e^{f_{y_i}}}{\\sum_je^{f_j}}= \\dfrac{Ce^{f_{y_i}}}{C\\sum_je^{f_j}}=\\dfrac{e^{f_{y_i}+logC}}{\\sum_je^{f_j+logC}} \\] <p>\\(C\\)\u7684\u503c\u53ef\u81ea\u7531\u9009\u62e9\uff0c\u4e0d\u4f1a\u5f71\u54cd\u8ba1\u7b97\u7ed3\u679c\uff0c\u901a\u8fc7\u4f7f\u7528\u8fd9\u4e2a\u6280\u5de7\u53ef\u4ee5\u63d0\u9ad8\u8ba1\u7b97\u4e2d\u7684\u6570\u503c\u7a33\u5b9a\u6027\u3002\u901a\u5e38\u5c06\\(C\\)\u8bbe\u4e3a\\(logC =-maxf_j\\)\u3002\u8be5\u6280\u5de7\u7b80\u5355\u5730\u8bf4\uff0c\u5c31\u662f\u5e94\u8be5\u5c06\u5411\u91cf\\(f\\)\u4e2d\u7684\u6570\u503c\u8fdb\u884c\u5e73\u79fb\uff0c\u4f7f\u5f97\u6700\u5927\u503c\u4e3a 0\u3002\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a</p> <pre><code>    f = np.array([123, 456, 789]) # \u4f8b\u5b50\u4e2d\u67093\u4e2a\u5206\u7c7b\uff0c\u6bcf\u4e2a\u8bc4\u5206\u7684\u6570\u503c\u90fd\u5f88\u5927\n    p = np.exp(f) / np.sum(np.exp(f)) # \u4e0d\u5999\uff1a\u6570\u503c\u95ee\u9898\uff0c\u53ef\u80fd\u5bfc\u81f4\u6570\u503c\u7206\u70b8\n\n    # \u90a3\u4e48\u5c06f\u4e2d\u7684\u503c\u5e73\u79fb\u5230\u6700\u5927\u503c\u4e3a0\uff1a\n    f -= np.max(f) # f becomes [-666, -333, 0]\n    p = np.exp(f) / np.sum(np.exp(f)) # \u73b0\u5728OK\u4e86\uff0c\u5c06\u7ed9\u51fa\u6b63\u786e\u7ed3\u679c\n</code></pre>"},{"location":"CV/Lecture3_Linear_Classifiers/#1-svm\u652f\u6301\u5411\u91cf\u673a","title":"1. SVM\uff08\u652f\u6301\u5411\u91cf\u673a\uff09","text":"<ul> <li>\u635f\u5931\u51fd\u6570: SVM \u4f7f\u7528\u7684\u662f Hinge Loss\uff08\u6298\u53f6\u635f\u5931\uff09\u3002</li> <li>\u8f93\u51fa: SVM \u7684\u8f93\u51fa\u662f\u6bcf\u4e2a\u7c7b\u522b\u7684\u539f\u59cb\u5206\u6570\uff0c\u8fd9\u4e9b\u5206\u6570\u5e76\u4e0d\u80fd\u76f4\u63a5\u89e3\u91ca\u4e3a\u6982\u7387\u3002</li> <li>\u5206\u7c7b\u51b3\u7b56: \u901a\u8fc7\u6700\u5927\u5316\u7c7b\u522b\u95f4\u7684\u8fb9\u754c\u6765\u8fdb\u884c\u5206\u7c7b\uff0c\u5373\u4f7f\u5f97\u6b63\u786e\u5206\u7c7b\u7684\u5206\u6570\u4e0e\u5176\u4ed6\u6240\u6709\u9519\u8bef\u5206\u7c7b\u7684\u5206\u6570\u4e4b\u95f4\u6709\u4e00\u4e2a\u9884\u5b9a\u7684\u95f4\u9694\uff08<code>delta</code>\uff09\u3002</li> <li>\u6b63\u5219\u5316: \u901a\u5e38\u901a\u8fc7\u5728\u635f\u5931\u51fd\u6570\u4e2d\u6dfb\u52a0 L2 \u6b63\u5219\u5316\u9879\u6765\u63a7\u5236\u6743\u91cd\u7684\u5927\u5c0f\uff0c\u9632\u6b62\u8fc7\u62df\u5408\u3002</li> </ul>"},{"location":"CV/Lecture3_Linear_Classifiers/#2-softmax-\u5206\u7c7b\u5668","title":"2. Softmax \u5206\u7c7b\u5668","text":"<ul> <li>\u635f\u5931\u51fd\u6570: Softmax \u5206\u7c7b\u5668\u4f7f\u7528\u7684\u662f Cross-Entropy Loss\uff08\u4ea4\u53c9\u71b5\u635f\u5931\uff09\uff0c\u8be5\u635f\u5931\u51fd\u6570\u6700\u5c0f\u5316\u7684\u662f\u9884\u6d4b\u6982\u7387\u5206\u5e03\u4e0e\u771f\u5b9e\u5206\u5e03\u4e4b\u95f4\u7684\u5dee\u5f02\u3002</li> <li>\u8f93\u51fa: Softmax \u5206\u7c7b\u5668\u7684\u8f93\u51fa\u662f\u4e00\u4e2a\u6982\u7387\u5206\u5e03\uff0c\u8868\u793a\u6bcf\u4e2a\u7c7b\u522b\u7684\u6982\u7387\uff0c\u5e76\u4e14\u8fd9\u4e9b\u6982\u7387\u7684\u603b\u548c\u4e3a 1\u3002</li> <li>\u5206\u7c7b\u51b3\u7b56: \u901a\u8fc7\u6700\u5927\u5316\u6b63\u786e\u7c7b\u522b\u7684\u6982\u7387\u6765\u8fdb\u884c\u5206\u7c7b\uff0c\u786e\u4fdd\u6a21\u578b\u5bf9\u6bcf\u4e2a\u6837\u672c\u9884\u6d4b\u7684\u6b63\u786e\u7c7b\u522b\u6982\u7387\u5c3d\u53ef\u80fd\u9ad8\u3002</li> <li>\u6982\u7387\u89e3\u91ca: Softmax \u5206\u7c7b\u5668\u7684\u8f93\u51fa\u662f\u76f4\u89c2\u7684\u6982\u7387\u503c\uff0c\u4fbf\u4e8e\u7406\u89e3\u548c\u89e3\u91ca\u3002</li> </ul>"},{"location":"CV/Lecture3_Linear_Classifiers/#svm-\u548c-softmax-\u7684\u6bd4\u8f83","title":"SVM \u548c Softmax \u7684\u6bd4\u8f83","text":"<p>\u4e0b\u56fe\u6709\u52a9\u4e8e\u533a\u5206\u8fd9 Softmax \u548c SVM \u8fd9\u4e24\u79cd\u5206\u7c7b\u5668\uff1a</p> <p></p> <p>\u9488\u5bf9\u4e00\u4e2a\u6570\u636e\u70b9\uff0cSVM \u548c Softmax \u5206\u7c7b\u5668\u7684\u4e0d\u540c\u5904\u7406\u65b9\u5f0f\u7684\u4f8b\u5b50\u3002\u4e24\u4e2a\u5206\u7c7b\u5668\u90fd\u8ba1\u7b97\u4e86\u540c\u6837\u7684\u5206\u503c\u5411\u91cf f\uff08\u672c\u8282\u4e2d\u662f\u901a\u8fc7\u77e9\u9635\u4e58\u6765\u5b9e\u73b0\uff09\u3002\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u5bf9 f \u4e2d\u5206\u503c\u7684\u89e3\u91ca\uff1aSVM \u5206\u7c7b\u5668\u5c06\u5b83\u4eec\u770b\u505a\u662f\u5206\u7c7b\u8bc4\u5206\uff0c\u5b83\u7684\u635f\u5931\u51fd\u6570\u9f13\u52b1\u6b63\u786e\u7684\u5206\u7c7b\uff08\u672c\u4f8b\u4e2d\u662f\u84dd\u8272\u7684\u7c7b\u522b 2\uff09\u7684\u5206\u503c\u6bd4\u5176\u4ed6\u5206\u7c7b\u7684\u5206\u503c\u9ad8\u51fa\u81f3\u5c11\u4e00\u4e2a\u8fb9\u754c\u503c\u3002Softmax \u5206\u7c7b\u5668\u5c06\u8fd9\u4e9b\u6570\u503c\u770b\u505a\u662f\u6bcf\u4e2a\u5206\u7c7b\u6ca1\u6709\u5f52\u4e00\u5316\u7684 \u5bf9\u6570\u6982\u7387\uff0c\u9f13\u52b1\u6b63\u786e\u5206\u7c7b\u7684\u5f52\u4e00\u5316\u7684\u5bf9\u6570\u6982\u7387\u53d8\u9ad8\uff0c\u5176\u4f59\u7684\u53d8\u4f4e\u3002 SVM \u7684\u6700\u7ec8\u7684\u635f\u5931\u503c\u662f 1.58\uff0cSoftmax \u7684\u6700\u7ec8\u7684\u635f\u5931\u503c\u662f 0.452\uff0c\u4f46\u8981\u6ce8\u610f\u8fd9\u4e24\u4e2a\u6570\u503c\u6ca1\u6709\u53ef\u6bd4\u6027\u3002\u53ea\u5728\u7ed9\u5b9a\u540c\u6837\u6570\u636e\uff0c\u5728\u540c\u6837\u7684\u5206\u7c7b\u5668\u7684\u635f\u5931\u503c\u8ba1\u7b97\u4e2d\uff0c\u5b83\u4eec\u624d\u6709\u610f\u4e49\u3002</p> <p>Softmax \u5206\u7c7b\u5668\u4e3a\u6bcf\u4e2a\u5206\u7c7b\u63d0\u4f9b\u4e86 \"\u53ef\u80fd\u6027\"\uff1aSVM \u7684\u8ba1\u7b97\u662f\u65e0\u6807\u5b9a\u7684\uff0c\u800c\u4e14\u96be\u4ee5\u9488\u5bf9\u6240\u6709\u5206\u7c7b\u7684\u8bc4\u5206\u503c\u7ed9\u51fa\u76f4\u89c2\u89e3\u91ca\u3002Softmax \u5206\u7c7b\u5668\u5219\u4e0d\u540c\uff0c\u5b83\u5141\u8bb8\u6211\u4eec\u8ba1\u7b97\u51fa\u5bf9\u4e8e\u6240\u6709\u5206\u7c7b\u6807\u7b7e\u7684\u53ef\u80fd\u6027\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u9488\u5bf9\u7ed9\u51fa\u7684\u56fe\u50cf\uff0cSVM \u5206\u7c7b\u5668\u53ef\u80fd\u7ed9\u4f60\u7684\u662f\u4e00\u4e2a [12.5, 0.6, -23.0] \u5bf9\u5e94\u5206\u7c7b \"\u732b\"\uff0c\"\u72d7\"\uff0c\"\u8239\"\u3002\u800c softmax \u5206\u7c7b\u5668\u53ef\u4ee5\u8ba1\u7b97\u51fa\u8fd9\u4e09\u4e2a\u6807\u7b7e\u7684 \"\u53ef\u80fd\u6027\" \u662f [0.9, 0.09, 0.01]\uff0c\u8fd9\u5c31\u8ba9\u4f60\u80fd\u770b\u51fa\u5bf9\u4e8e\u4e0d\u540c\u5206\u7c7b\u51c6\u786e\u6027\u7684\u628a\u63e1\u3002</p> <p>\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u5728 \"\u53ef\u80fd\u6027\" \u4e0a\u9762\u6253\u5f15\u53f7\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u53ef\u80fd\u6027\u5206\u5e03\u7684\u96c6\u4e2d\u6216\u79bb\u6563\u7a0b\u5ea6\u662f\u7531\u6b63\u5219\u5316\u53c2\u6570 \u03bb \u76f4\u63a5\u51b3\u5b9a\u7684\uff0c\u03bb \u662f\u4f60\u80fd\u76f4\u63a5\u63a7\u5236\u7684\u4e00\u4e2a\u8f93\u5165\u53c2\u6570\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe 3 \u4e2a\u5206\u7c7b\u7684\u539f\u59cb\u5206\u6570\u662f [1, -2, 0]\uff0c\u90a3\u4e48 softmax \u51fd\u6570\u5c31\u4f1a\u8ba1\u7b97\uff1a</p> \\[ [1,-2,0]\\rightarrow [e^1, e^{-2}, e^0] = [2.71,0.14,1]\\rightarrow [0.7,0.04,0.26] \\] <p>\u73b0\u5728\uff0c\u5982\u679c\u6b63\u5219\u5316\u53c2\u6570 \u03bb \u66f4\u5927\uff0c\u90a3\u4e48\u6743\u91cd W \u5c31\u4f1a\u88ab\u60e9\u7f5a\u7684\u66f4\u591a\uff0c\u7136\u540e\u4ed6\u7684\u6743\u91cd\u6570\u503c\u5c31\u4f1a\u66f4\u5c0f\u3002\u8fd9\u6837\u7b97\u51fa\u6765\u7684\u5206\u6570\u4e5f\u4f1a\u66f4\u5c0f\uff0c\u5047\u8bbe\u5c0f\u4e86\u4e00\u534a [0.5, -1, 0]\uff0c\u90a3\u4e48 softmax \u51fd\u6570\u7684\u8ba1\u7b97\u5c31\u662f\uff1a</p> \\[ [0.5,-1,0]\\rightarrow [e^{0.5}, e^{-1}, e^0] = [1.65,0.73,1]\\rightarrow [0.55,0.12,0.33] \\] <p>\u968f\u7740\u6b63\u5219\u5316\u53c2\u6570 \u03bb \u4e0d\u65ad\u589e\u5f3a\uff0c\u6743\u91cd\u6570\u503c\u4f1a\u8d8a\u6765\u8d8a\u5c0f\uff0c\u6700\u540e\u8f93\u51fa\u7684\u6982\u7387\u4f1a\u63a5\u8fd1\u4e8e\u5747\u5300\u5206\u5e03\u3002</p> <p>SVM \u7684\u5c40\u90e8\u76ee\u6807\u5316\uff1a</p> <ul> <li>SVM \u5206\u7c7b\u5668\u4e3b\u8981\u5173\u6ce8\u6b63\u786e\u7c7b\u522b\u4e0e\u5176\u4ed6\u7c7b\u522b\u4e4b\u95f4\u7684 \u76f8\u5bf9\u5dee\u5f02\u3002\u53ea\u8981\u6b63\u786e\u7c7b\u522b\u7684\u5206\u6570\u9ad8\u4e8e\u4e0d\u6b63\u786e\u7c7b\u522b\u7684\u5206\u6570\uff0c\u5e76\u4e14\u8d85\u8fc7\u4e00\u5b9a\u7684\u8fb9\u754c\uff08\u5373 \u0394\uff09\uff0cSVM \u5c31\u4f1a\u8ba4\u4e3a\u635f\u5931\u4e3a 0\uff0c\u4e0d\u518d\u8fdb\u4e00\u6b65\u4f18\u5316\u3002</li> <li>\u4f8b\u5982\uff0c\u5bf9\u4e8e [10, -2, 3] \u7684\u8bc4\u5206\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5206\u7c7b\u662f\u6b63\u786e\u7684\uff0cSVM \u8ba4\u4e3a\u5206\u6570\u5df2\u7ecf\u6ee1\u8db3\u4e86\u8fb9\u754c\u6761\u4ef6\uff08\u5047\u8bbe \u0394 = 1\uff09\uff0c\u56e0\u6b64\u4e0d\u4f1a\u518d\u4f18\u5316\u8be5\u6837\u672c\u7684\u5206\u7c7b\u7ed3\u679c\u3002\u800c\u4e14\uff0c\u65e0\u8bba\u5206\u6570\u662f [10, -100, -100] \u8fd8\u662f [10, 9, 9]\uff0c\u53ea\u8981\u6ee1\u8db3\u4e86\u8fb9\u754c\u6761\u4ef6\uff0cSVM \u7684\u635f\u5931\u503c\u90fd\u662f 0\u3002</li> </ul> <p>Softmax \u7684\u5168\u5c40\u4f18\u5316\uff1a</p> <ul> <li>Softmax \u5206\u7c7b\u5668\u5219\u4e0d\u540c\uff0c\u5b83\u5bf9\u6bcf\u4e00\u4e2a\u5206\u7c7b\u5206\u6570\u90fd\u8fdb\u884c\u8003\u8651\uff0c\u5e76\u4e14 \u59cb\u7ec8\u8bd5\u56fe\u6700\u5927\u5316\u6b63\u786e\u7c7b\u522b\u7684\u6982\u7387\u3002Softmax \u4e0d\u4f1a\u56e0\u4e3a\u5206\u6570\u6ee1\u8db3\u67d0\u4e2a\u6761\u4ef6\u800c\u505c\u6b62\u4f18\u5316\uff0c\u5b83\u4f1a\u4e0d\u65ad\u5c1d\u8bd5\u8ba9\u6b63\u786e\u7c7b\u522b\u7684\u5206\u6570\u66f4\u9ad8\u3001\u4e0d\u6b63\u786e\u7c7b\u522b\u7684\u5206\u6570\u66f4\u4f4e\u3002</li> <li>\u5728 [10, 9, 9] \u548c [10, -100, -100] \u7684\u60c5\u51b5\u4e0b\uff0cSoftmax \u4f1a\u7ed9\u51fa\u4e0d\u540c\u7684\u635f\u5931\u503c\uff1a\u524d\u8005\u635f\u5931\u503c\u8f83\u9ad8\uff0c\u56e0\u4e3a\u4e0d\u6b63\u786e\u7c7b\u522b\u7684\u5206\u6570\u8f83\u9ad8\uff1b\u800c\u540e\u8005\u635f\u5931\u503c\u8f83\u4f4e\uff0c\u56e0\u4e3a\u4e0d\u6b63\u786e\u7c7b\u522b\u7684\u5206\u6570\u5df2\u7ecf\u975e\u5e38\u4f4e\u3002</li> </ul> <p><code>SVM \u7684\u7279\u6027\u548c\u5c40\u9650</code></p> <ul> <li>\u7279\u6027\uff1aSVM \u4e13\u6ce8\u4e8e\u6b63\u786e\u7c7b\u522b\u548c\u4e0d\u6b63\u786e\u7c7b\u522b\u7684\u5dee\u8ddd\u662f\u5426\u8d85\u8fc7\u4e00\u5b9a\u7684\u9608\u503c\u3002\u5f53\u8fd9\u4e2a\u9608\u503c\u88ab\u6ee1\u8db3\u65f6\uff0cSVM \u4e0d\u518d\u5173\u6ce8\u5177\u4f53\u7684\u5206\u6570\u7ec6\u8282\u3002\u56e0\u6b64\uff0c\u5b83\u5728\u9762\u5bf9\u4e0d\u9700\u8981\u8fc7\u5ea6\u533a\u5206\u7684\u7b80\u5355\u5206\u7c7b\u4efb\u52a1\u65f6\u53ef\u4ee5\u8868\u73b0\u5f97\u5f88\u597d\u3002\u4f8b\u5982\uff0c\u5728\u6c7d\u8f66\u5206\u7c7b\u4efb\u52a1\u4e2d\uff0cSVM \u53ef\u80fd\u4f1a\u5c06\u66f4\u591a\u7684\u6ce8\u610f\u529b\u653e\u5728\u533a\u5206\u76f8\u4f3c\u7684\u6c7d\u8f66\u7c7b\u578b\u4e0a\uff0c\u800c\u4e0d\u4f1a\u5728\u660e\u663e\u4e0d\u540c\u7684\u7269\u4f53\uff08\u5982\u9752\u86d9\uff09\u4e0a\u82b1\u8d39\u592a\u591a\u7cbe\u529b\u3002</li> <li>\u5c40\u9650\uff1a\u8fd9\u79cd\u201c\u5c40\u90e8\u76ee\u6807\u5316\u201d\u7684\u65b9\u6cd5\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ef\u80fd\u4e0d\u662f\u6700\u4f18\u7684\uff0c\u56e0\u4e3a\u5b83\u5ffd\u7565\u4e86\u8fdb\u4e00\u6b65\u4f18\u5316\u7684\u673a\u4f1a\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4e24\u4e2a\u4e0d\u6b63\u786e\u7c7b\u522b\u7684\u5206\u6570\u63a5\u8fd1\u6b63\u786e\u7c7b\u522b\uff0cSVM \u53ef\u80fd\u4f1a\u8ba4\u4e3a\u635f\u5931\u5df2\u7ecf\u8db3\u591f\u5c0f\uff0c\u800c\u4e0d\u518d\u8fdb\u4e00\u6b65\u4f18\u5316\uff0c\u8fd9\u53ef\u80fd\u5bfc\u81f4\u5206\u7c7b\u5668\u5728\u9762\u5bf9\u590d\u6742\u4efb\u52a1\u65f6\u8868\u73b0\u4e0d\u5982 Softmax\u3002</li> </ul> <p><code>Softmax \u7684\u4f18\u70b9\u548c\u7f3a\u70b9</code></p> <ul> <li>\u4f18\u70b9\uff1aSoftmax \u5206\u7c7b\u5668\u603b\u662f\u5c1d\u8bd5\u6700\u5c0f\u5316\u5206\u7c7b\u635f\u5931\uff0c\u5373\u4f7f\u5bf9\u4e8e\u90a3\u4e9b\u5df2\u7ecf\u6ee1\u8db3\u67d0\u4e9b\u6761\u4ef6\u7684\u6837\u672c\uff0c\u5b83\u4e5f\u4f1a\u7ee7\u7eed\u4f18\u5316\u3002\u8fd9\u4f7f\u5f97 Softmax \u80fd\u591f\u5728\u590d\u6742\u7684\u5206\u7c7b\u4efb\u52a1\u4e2d\u63d0\u4f9b\u66f4\u7cbe\u7ec6\u7684\u533a\u5206\u80fd\u529b\u3002</li> <li>\u7f3a\u70b9\uff1a\u7531\u4e8e Softmax \u5206\u7c7b\u5668\u603b\u662f\u4e0d\u65ad\u4f18\u5316\uff0c\u5b83\u53ef\u80fd\u5728\u4e00\u4e9b\u7b80\u5355\u7684\u4efb\u52a1\u4e2d\u6d6a\u8d39\u8ba1\u7b97\u8d44\u6e90\u3002\u4f8b\u5982\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0cSoftmax \u53ef\u80fd\u4f1a\u8fc7\u5ea6\u5173\u6ce8\u4e00\u4e9b\u65e0\u5173\u7d27\u8981\u7684\u7ec6\u8282\uff08\u5982\u5982\u4f55\u8fdb\u4e00\u6b65\u964d\u4f4e\u4e00\u4e2a\u5df2\u7ecf\u5f88\u4f4e\u7684\u9519\u8bef\u5206\u7c7b\u5206\u6570\uff09\uff0c\u800c\u8fd9\u4e9b\u5e76\u4e0d\u4f1a\u663e\u8457\u63d0\u9ad8\u5206\u7c7b\u6027\u80fd\u3002</li> </ul>"},{"location":"CV/Lecture4_Optimization/","title":"Optimization","text":"<p> \u7ea6 6893 \u4e2a\u5b57  143 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 36 \u5206\u949f</p> <p>\u5728\u4e0a\u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1\u4e2d\u7684\u4e24\u4e2a\u5173\u952e\u90e8\u5206\uff1a</p> <ol> <li>\u57fa\u4e8e\u53c2\u6570\u7684 \u8bc4\u5206\u51fd\u6570\u3002</li> </ol> <p>\u8bc4\u5206\u51fd\u6570\u7684\u4e3b\u8981\u4f5c\u7528\u662f\u5c06\u8f93\u5165\u56fe\u50cf\u7684\u50cf\u7d20\u6620\u5c04\u5230\u5206\u7c7b\u8bc4\u5206\u503c\uff0c\u8fd9\u4e9b\u8bc4\u5206\u503c\u7528\u4e8e\u5224\u65ad\u56fe\u50cf\u5c5e\u4e8e\u54ea\u4e2a\u7c7b\u522b\u3002\u6700\u5e38\u89c1\u7684\u8bc4\u5206\u51fd\u6570\u662f\u7ebf\u6027\u6a21\u578b\uff0c\u5176\u5f62\u5f0f\u5982\u4e0b\uff1a</p> <p>\\(f(x;W,b)=Wx+b\\)</p> <ul> <li>x \u662f\u8f93\u5165\u56fe\u50cf\u7684\u50cf\u7d20\u503c\u5411\u91cf\u3002</li> <li>W \u662f\u6743\u91cd\u77e9\u9635\uff0c\u6bcf\u4e00\u884c\u5bf9\u5e94\u4e00\u4e2a\u7c7b\u522b\u3002</li> <li>b \u662f\u504f\u7f6e\u5411\u91cf\u3002</li> </ul> <p>\u8fd9\u4e2a\u51fd\u6570\u4f1a\u8f93\u51fa\u6bcf\u4e2a\u7c7b\u522b\u7684\u8bc4\u5206\u503c\uff08\u5373\u5f97\u5206\uff09\u3002\u8fd9\u4e9b\u5f97\u5206\u5e76\u4e0d\u76f4\u63a5\u4ee3\u8868\u6982\u7387\uff0c\u800c\u662f\u7528\u4e8e\u51b3\u5b9a\u54ea\u4e2a\u7c7b\u522b\u7684\u5f97\u5206\u6700\u9ad8\uff0c\u56e0\u800c\u8ba4\u4e3a\u8be5\u56fe\u50cf\u5c5e\u4e8e\u8be5\u7c7b\u522b\u3002</p> <ol> <li>\u635f\u5931\u51fd\u6570\u3002\u635f\u5931\u51fd\u6570\u7528\u4e8e\u8bc4\u4f30\u6a21\u578b\u7684\u9884\u6d4b\u4e0e\u5b9e\u9645\u6807\u7b7e\u4e4b\u95f4\u7684\u5dee\u5f02\uff0c\u5e76\u5f15\u5bfc\u6a21\u578b\u53c2\u6570\u7684\u66f4\u65b0\u3002\u635f\u5931\u51fd\u6570\u901a\u8fc7\u8861\u91cf\u5206\u7c7b\u8bc4\u5206\u548c\u5b9e\u9645\u5206\u7c7b\u7684\u4e00\u81f4\u6027\uff0c\u6765\u8bc4\u4f30\u53c2\u6570\u7684\u597d\u574f\u3002\u4e24\u79cd\u5e38\u89c1\u7684\u635f\u5931\u51fd\u6570\u662f SVM Loss \u548c Softmax Loss\u3002</li> </ol> <p></p> <p>SVM \u635f\u5931\u51fd\u6570\u7684\u76ee\u6807\u662f\u6700\u5927\u5316\u6b63\u786e\u5206\u7c7b\u7684\u5f97\u5206\u4e0e\u5176\u4ed6\u7c7b\u522b\u7684\u5f97\u5206\u4e4b\u95f4\u7684\u5dee\u8ddd\u3002SVM \u635f\u5931\u51fd\u6570\u901a\u5e38\u8868\u8fbe\u4e3a\uff1a</p> \\[ L = \\dfrac{1}{N}\\sum_{i}\\sum_{j!= y_i}[max(0, f(x_i, W)_j - f(x_i, W)_{y_i} + \\Delta)] + \\alpha R(W)\\\\  L_i = \\sum_{j \\neq y_i} \\max(0, s_j - s_{y_i} + \\Delta) \\] <p>\u5176\u4e2d\uff1a</p> <ul> <li>\\(y_i\\)\u662f\u6b63\u786e\u7c7b\u522b\u7684\u7d22\u5f15\u3002</li> <li>\\(s_j\\)\u662f\u7b2c \\( j \\) \u7c7b\u7684\u5f97\u5206\u3002</li> <li>\\(\\Delta\\)\u662f\u4e00\u4e2a\u8d85\u53c2\u6570\uff0c\u63a7\u5236\u5f97\u5206\u5dee\u8ddd\u7684\u5bb9\u5fcd\u5ea6\u3002</li> </ul> <p>SVM \u635f\u5931\u51fd\u6570\u5e0c\u671b\u6b63\u786e\u7c7b\u522b\u7684\u5f97\u5206\u6bd4\u5176\u4ed6\u7c7b\u522b\u7684\u5f97\u5206\u9ad8\u81f3\u5c11 \\(\\Delta\\)\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u635f\u5931\u3002</p> <p>Softmax \u635f\u5931\u51fd\u6570\u5c06\u5f97\u5206\u8f6c\u5316\u4e3a\u6982\u7387\u5206\u5e03\uff0c\u5e76\u4f7f\u7528\u4ea4\u53c9\u71b5\u6765\u8861\u91cf\u9884\u6d4b\u6982\u7387\u4e0e\u5b9e\u9645\u6807\u7b7e\u5206\u5e03\u7684\u5dee\u5f02\u3002\u5176\u8868\u8fbe\u5f0f\u4e3a\uff1a</p> \\[ L_i = -\\log \\left(\\dfrac{e^{s_{y_i}}}{\\sum_j e^{s_j}} \\right) \\] <ul> <li>\\(s_{y_i}\\)\u662f\u6b63\u786e\u7c7b\u522b\u7684\u5f97\u5206\u3002</li> <li>\\(\\sum_j e^{s_j}\\)\u662f\u6240\u6709\u7c7b\u522b\u5f97\u5206\u7684\u6307\u6570\u548c\u3002</li> </ul> <p>Softmax \u635f\u5931\u51fd\u6570\u5e0c\u671b\u6b63\u786e\u7c7b\u522b\u7684\u6982\u7387\u63a5\u8fd1 1\uff0c\u540c\u65f6\u5176\u4ed6\u7c7b\u522b\u7684\u6982\u7387\u63a5\u8fd1 0\u3002</p> <p>\u5bf9\u4e8e\u56fe\u50cf\u6570\u636e \\(x_i\\)\uff0c\u5982\u679c\u57fa\u4e8e\u53c2\u6570\u96c6 \\(W\\)\u505a\u51fa\u7684\u5206\u7c7b\u9884\u6d4b\u4e0e\u771f\u5b9e\u60c5\u51b5\u6bd4\u8f83\u4e00\u81f4\uff0c\u90a3\u4e48\u8ba1\u7b97\u51fa\u6765\u7684\u635f\u5931\u503c \\(L\\)\u5c31\u5f88\u4f4e\u3002\u73b0\u5728\u4ecb\u7ecd\u7b2c\u4e09\u4e2a\uff0c\u4e5f\u662f\u6700\u540e\u4e00\u4e2a\u5173\u952e\u90e8\u5206\uff1a<code>\u6700\u4f18\u5316Optimization\u3002\u6700\u4f18\u5316\u662f\u5bfb\u627e\u80fd\u4f7f\u5f97\u635f\u5931\u51fd\u6570\u503c\u6700\u5c0f\u5316\u7684\u53c2\u6570$W$\u7684\u8fc7\u7a0b\u3002</code></p> <p>\u94fa\u57ab\uff1a\u4e00\u65e6\u7406\u89e3\u4e86\u8fd9\u4e09\u4e2a\u90e8\u5206\u662f\u5982\u4f55\u76f8\u4e92\u8fd0\u4f5c\u7684\uff0c\u6211\u4eec\u5c06\u4f1a\u56de\u5230\u7b2c\u4e00\u4e2a\u90e8\u5206\uff08\u57fa\u4e8e\u53c2\u6570\u7684\u51fd\u6570\u6620\u5c04\uff09\uff0c\u7136\u540e\u5c06\u5176\u62d3\u5c55\u4e3a\u4e00\u4e2a\u8fdc\u6bd4\u7ebf\u6027\u51fd\u6570\u590d\u6742\u7684\u51fd\u6570\uff1a\u9996\u5148\u662f\u795e\u7ecf\u7f51\u7edc\uff0c\u7136\u540e\u662f\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u3002\u800c\u635f\u5931\u51fd\u6570\u548c\u6700\u4f18\u5316\u8fc7\u7a0b\u8fd9\u4e24\u4e2a\u90e8\u5206\u5c06\u4f1a\u4fdd\u6301\u76f8\u5bf9\u7a33\u5b9a\u3002</p>"},{"location":"CV/Lecture4_Optimization/#41-\u635f\u5931\u51fd\u6570\u53ef\u89c6\u5316","title":"4.1 \u635f\u5931\u51fd\u6570\u53ef\u89c6\u5316","text":"<p>\u5728\u9ad8\u7ef4\u7a7a\u95f4\u4e2d\uff0c\u50cf\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1\u4e2d\u7684\u635f\u5931\u51fd\u6570\u662f\u96be\u4ee5\u76f4\u63a5\u53ef\u89c6\u5316\u7684\uff0c\u56e0\u4e3a\u5b83\u4eec\u6d89\u53ca\u5927\u91cf\u7684\u53c2\u6570\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e CIFAR-10 \u56fe\u50cf\u5206\u7c7b\u4e2d\u7684\u7ebf\u6027\u5206\u7c7b\u5668\uff0c\u5176\u6743\u91cd\u77e9\u9635\u6709 30,730 \u4e2a\u53c2\u6570\uff08\u5bf9\u4e8e\u6bcf\u4e2a\u7c7b 3,073 \u4e2a\u53c2\u6570\uff0c\u5171 10 \u4e2a\u7c7b\uff09\u3002\u7136\u800c\uff0c\u901a\u8fc7\u5728\u4f4e\u7ef4\u7a7a\u95f4\u4e2d\u5bf9\u9ad8\u7ef4\u635f\u5931\u51fd\u6570\u8fdb\u884c\u5207\u7247\uff0c\u53ef\u4ee5\u83b7\u53d6\u5176\u7ed3\u6784\u7684\u76f4\u89c2\u7406\u89e3\u3002\u8fd9\u79cd\u65b9\u6cd5\u80fd\u5e2e\u52a9\u6211\u4eec\u4e86\u89e3\u635f\u5931\u51fd\u6570\u7684\u590d\u6742\u6027\u53ca\u5176\u5bf9\u4e0d\u540c\u53c2\u6570\u7684\u654f\u611f\u5ea6\u3002</p> <ol> <li>\u5355\u7ef4\u5ea6\u7684\u5207\u7247\u53ef\u89c6\u5316</li> </ol> <p>\u53ef\u4ee5 \u9009\u53d6\u4e00\u4e2a\u968f\u673a\u65b9\u5411 \u5e76\u6cbf\u8be5\u65b9\u5411\u8fdb\u884c\u63a2\u7d22\uff0c\u751f\u6210\u4e00\u7ef4\u56fe\u50cf\u3002\u5177\u4f53\u6765\u8bf4\uff1a</p> <ul> <li>\u9996\u5148\uff0c\u9009\u62e9\u4e00\u4e2a\u968f\u673a\u751f\u6210\u7684\u6743\u91cd\u77e9\u9635 W \u4f5c\u4e3a\u8d77\u70b9\u3002</li> <li>\u7136\u540e\uff0c\u6cbf\u67d0\u4e2a\u968f\u673a\u65b9\u5411 \\(W_1\\)\u524d\u8fdb\uff0c\u8bb0\u5f55\u635f\u5931\u503c \\(L(W + aW_1)\\)\u968f a \u53d8\u5316\u7684\u60c5\u51b5\u3002</li> </ul> <p>\u5de6\u56fe \u5c55\u793a\u4e86\u8fd9\u4e2a\u8fc7\u7a0b\uff1ax \u8f74\u8868\u793a\u6b65\u957f a\uff0cy \u8f74\u8868\u793a\u5bf9\u5e94\u7684\u635f\u5931\u503c\u3002\u7531\u4e8e SVM \u635f\u5931\u51fd\u6570\u7684\u5206\u6bb5\u7ebf\u6027\u6027\u8d28\uff0c\u6211\u4eec\u4f1a\u770b\u5230\u591a\u4e2a\u7ebf\u6027\u6bb5\u8fde\u63a5\u5f62\u6210\u7684\u56fe\u50cf\uff0c\u53cd\u6620\u4e86\u6a21\u578b\u5bf9\u4e0d\u540c\u6743\u91cd\u914d\u7f6e\u7684\u654f\u611f\u5ea6\u3002</p> <ol> <li>\u53cc\u7ef4\u5ea6\u7684\u5207\u7247\u53ef\u89c6\u5316</li> </ol> <p>\u4e3a\u4e86\u83b7\u5f97\u66f4\u4e30\u5bcc\u7684\u7ed3\u6784\u4fe1\u606f\uff0c\u53ef\u4ee5\u5728\u4e24\u4e2a\u7ef4\u5ea6\u4e0a\u5bf9\u635f\u5931\u51fd\u6570\u8fdb\u884c\u5207\u7247\uff1a</p> <ul> <li>\u751f\u6210\u4e24\u4e2a\u968f\u673a\u65b9\u5411 \\(W_1\\)\u548c \\(W_2\\)\u3002</li> <li>\u8ba1\u7b97\u4e0d\u540c \\(a, b\\)\u7ec4\u5408\u4e0b\u7684\u635f\u5931\u503c \\(L(W + aW_1 + bW_2)\\)</li> </ul> <p>\u4e2d\u56fe\u548c\u53f3\u56fe \u5c55\u793a\u4e86\u5728\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684\u5207\u7247\u7ed3\u679c\u3002x \u8f74\u548c y \u8f74\u5206\u522b\u4ee3\u8868 a \u548c b \u7684\u503c\uff0c\u989c\u8272\u4ee3\u8868\u635f\u5931\u503c\u7684\u5927\u5c0f\u3002\u84dd\u8272\u533a\u57df\u8868\u793a\u635f\u5931\u8f83\u4f4e\uff0c\u7ea2\u8272\u533a\u57df\u8868\u793a\u635f\u5931\u8f83\u9ad8\u3002</p> <p></p> <p>\u4e00\u4e2a\u65e0\u6b63\u5219\u5316\u7684\u591a\u7c7b SVM \u7684\u635f\u5931\u51fd\u6570\u7684\u56fe\u793a\u3002\u5de6\u8fb9\u548c\u4e2d\u95f4\u53ea\u6709\u4e00\u4e2a\u6837\u672c\u6570\u636e\uff0c\u53f3\u8fb9\u662f CIFAR-10 \u4e2d\u7684 100 \u4e2a\u6570\u636e\u3002\u5de6\uff1aa \u503c\u53d8\u5316\u5728\u67d0\u4e2a\u7ef4\u5ea6\u65b9\u5411\u4e0a\u5bf9\u5e94\u7684\u7684\u635f\u5931\u503c\u53d8\u5316\u3002\u4e2d\u548c\u53f3\uff1a\u4e24\u4e2a\u7ef4\u5ea6\u65b9\u5411\u4e0a\u7684\u635f\u5931\u503c\u5207\u7247\u56fe\uff0c\u84dd\u8272\u90e8\u5206\u662f\u4f4e\u635f\u5931\u503c\u533a\u57df\uff0c\u7ea2\u8272\u90e8\u5206\u662f\u9ad8\u635f\u5931\u503c\u533a\u57df\u3002</p> <p>\u5f53\u53ea\u4f7f\u7528\u4e00\u4e2a\u6837\u672c\u8fdb\u884c\u8ba1\u7b97\uff08\u5982\u5de6\u56fe\u548c\u4e2d\u56fe\uff09\uff0c\u635f\u5931\u51fd\u6570\u5177\u6709\u660e\u663e\u7684 <code>\u5206\u6bb5\u7ebf\u6027\u7279\u5f81</code>\uff0c\u53cd\u6620\u4e86 SVM \u7684\u6027\u8d28\u3002\u800c\u5f53\u4f7f\u7528 <code>\u66f4\u591a\u6837\u672c</code> \u65f6\uff08\u5982\u53f3\u56fe\uff09\uff0c\u635f\u5931\u51fd\u6570\u7684\u56fe\u50cf\u53d8\u5f97\u66f4\u52a0\u5e73\u6ed1\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u6837\u672c\u7684\u5206\u6bb5\u7ebf\u6027\u7279\u5f81\u88ab\u5e73\u5747\u5316\uff0c\u5f62\u6210\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u201c\u7897\u72b6\u201d\u7684\u7ed3\u6784\u3002<code>\u8fd9\u79cd\u5e73\u6ed1\u7684\u201c\u7897\u201d\u7ed3\u6784\u6709\u52a9\u4e8e\u7406\u89e3\u635f\u5931\u51fd\u6570\u7684\u6700\u5c0f\u503c\u5904\u4e8e\u4f55\u5904\uff0c\u5373\u6a21\u578b\u627e\u5230\u4e00\u4e2a\u5bf9\u6240\u6709\u6837\u672c\u90fd\u8868\u73b0\u826f\u597d\u7684\u6743\u91cd\u914d\u7f6e</code>\u3002</p> <p>\u7ebf\u6027\u7ed3\u6784\u662f\u7531\u6bcf\u4e2a\u6837\u672c\u7684\u635f\u5931\u503c\u901a\u8fc7 <code>max(0, -)</code> \u51fd\u6570\u8ba1\u7b97\u5f97\u51fa\u7684\uff0c\u5b83\u5c06\u7ebf\u6027\u51fd\u6570\u7684\u7ed3\u679c\u4e0e 0 \u8fdb\u884c\u6bd4\u8f83\uff0c\u4ece\u800c\u4ea7\u751f\u591a\u4e2a\u5206\u6bb5\u7ebf\u6027\u90e8\u5206\u3002</p> <p>\u5177\u4f53\u6765\u8bf4\uff0c\u5bf9\u4e8e\u5355\u4e2a\u6570\u636e\u70b9\u7684\u635f\u5931\u51fd\u6570 \\(L_i\\)\u800c\u8a00\uff0c\u5b83\u662f\u6240\u6709\u5176\u4ed6\u7c7b\u522b\u7684\u5f97\u5206\u51cf\u53bb\u6b63\u786e\u7c7b\u522b\u5f97\u5206\u518d\u52a0\u4e0a\u4e00\u4e2a\u5e38\u6570\uff08\u901a\u5e38\u4e3a 1\uff09\u7684\u6700\u5927\u503c\u7684\u548c\u3002\u56e0\u6b64\uff0c<code>\u635f\u5931\u51fd\u6570\u662f W \u7684\u7ebf\u6027\u51fd\u6570\u7684\u603b\u548c</code>\uff0c\u6bcf\u4e2a\u7ebf\u6027\u90e8\u5206\u901a\u8fc7 <code>max</code> \u64cd\u4f5c\u88ab\u622a\u65ad\u5728\u96f6\u503c\u4ee5\u4e0a\u3002</p> <p>\u5bf9\u4e8e\u4e00\u4e2a\u5355\u72ec\u7684\u6570\u636e\uff0c\u6709\u635f\u5931\u51fd\u6570\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a</p> \\[ L_i = \\sum_{j!= y_i}[max(0, w_j^Tx_i - w_{y_i}^Tx_i + 1)] \\] <p>\u901a\u8fc7\u516c\u5f0f\u53ef\u89c1\uff0c\u6bcf\u4e2a\u6837\u672c\u7684\u6570\u636e\u635f\u5931\u503c\u662f\u4ee5 \\(W\\)\u4e3a\u53c2\u6570\u7684\u7ebf\u6027\u51fd\u6570\u7684\u603b\u548c\uff08\u96f6\u9608\u503c\u6765\u6e90\u4e8e \\(max(0,-)\\)\u51fd\u6570\uff09\u3002\\(W\\)\u7684\u6bcf\u4e00\u884c\uff08\u5373 \\(W_j\\)\uff09\uff0c\u6709\u65f6\u5019\u5b83\u524d\u9762\u662f\u4e00\u4e2a\u6b63\u53f7\uff08\u6bd4\u5982\u5f53\u5b83\u5bf9\u5e94\u9519\u8bef\u5206\u7c7b\u7684\u65f6\u5019\uff09\uff0c\u6709\u65f6\u5019\u5b83\u524d\u9762\u662f\u4e00\u4e2a\u8d1f\u53f7\uff08\u6bd4\u5982\u5f53\u5b83\u662f\u662f\u6b63\u786e\u5206\u7c7b\u7684\u65f6\u5019\uff09\u3002\u4e3a\u8fdb\u4e00\u6b65\u9610\u660e\uff0c\u5047\u8bbe\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u6570\u636e\u96c6\uff0c\u5176\u4e2d\u5305\u542b\u6709 3 \u4e2a\u53ea\u6709 1 \u4e2a\u7ef4\u5ea6\u7684\u70b9\uff0c\u6570\u636e\u96c6\u6570\u636e\u70b9\u6709 3 \u4e2a\u7c7b\u522b\u3002\u90a3\u4e48\u5b8c\u6574\u7684\u65e0\u6b63\u5219\u5316 SVM \u7684\u635f\u5931\u503c\u8ba1\u7b97\u5982\u4e0b\uff1a</p> \\[ L_0 = max(0, w^T_1x_0-w^T_0x_0+1)+max(0, w^T_2x_0-w^T_0x_0+1)\\\\ L_1 = max(0, w^T_0x_1-w^T_1x_1+1)+max(0, w^T_2x_1-w^T_1x_1+1)\\\\ L_2 = max(0, w^T_0x_2-w^T_2x_2+1)+max(0, w^T_1x_2-w^T_2x_2+1)\\\\ L =(L_0+L_1+L_2)/3 \\] <p>\u56e0\u4e3a\u8fd9\u4e9b\u4f8b\u5b50\u90fd\u662f\u4e00\u7ef4\u7684\uff0c\u6240\u4ee5\u6570\u636e \\(x_i\\)\u548c\u6743\u91cd \\(w_j\\)\u90fd\u662f\u6570\u5b57\u3002\u89c2\u5bdf \\(w_0\\)\uff0c\u53ef\u4ee5\u770b\u5230\u4e0a\u9762\u7684\u5f0f\u5b50\u4e2d\u4e00\u4e9b\u9879\u662f \\(W_0\\)\u7684\u7ebf\u6027\u51fd\u6570\uff0c\u4e14\u6bcf\u4e00\u9879\u90fd\u4f1a\u4e0e 0 \u6bd4\u8f83\uff0c\u53d6\u4e24\u8005\u7684\u6700\u5927\u503c\u3002\u53ef\u4f5c\u56fe\u5982\u4e0b\uff1a\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014</p> <p></p> <p>\u4ece\u4e00\u4e2a\u7ef4\u5ea6\u65b9\u5411\u4e0a\u5bf9\u6570\u636e\u635f\u5931\u503c\u7684\u5c55\u793a\u3002x \u8f74\u65b9\u5411\u5c31\u662f\u4e00\u4e2a\u6743\u91cd\uff0cy \u8f74\u5c31\u662f\u635f\u5931\u503c\u3002\u6570\u636e\u635f\u5931\u662f\u591a\u4e2a\u90e8\u5206\u7ec4\u5408\u800c\u6210\u3002\u5176\u4e2d\u6bcf\u4e2a\u90e8\u5206\u8981\u4e48\u662f\u67d0\u4e2a\u6743\u91cd\u7684\u72ec\u7acb\u90e8\u5206\uff0c\u8981\u4e48\u662f\u8be5\u6743\u91cd\u7684\u7ebf\u6027\u51fd\u6570\u4e0e 0 \u9608\u503c\u7684\u6bd4\u8f83\u3002\u5b8c\u6574\u7684 SVM \u6570\u636e\u635f\u5931\u5c31\u662f\u8fd9\u4e2a\u5f62\u72b6\u7684 30730 \u7ef4\u7248\u672c\u3002</p> <p>\u5728\u591a\u7ef4\u60c5\u51b5\u4e0b\uff0c\u7c7b\u4f3c\u7684\u5206\u6bb5\u7ebf\u6027\u7ed3\u6784\u4f1a\u51fa\u73b0\u5728\u6bcf\u4e2a\u7ef4\u5ea6\u4e0a\uff0c\u4ece\u800c\u6784\u6210\u9ad8\u7ef4\u7a7a\u95f4\u4e2d\u7684\u51f8\u5f62\u72b6\u3002\u6b63\u56e0\u4e3a\u5982\u6b64\uff0cSVM \u635f\u5931\u51fd\u6570\u662f\u51f8\u51fd\u6570\uff0c\u8fd9\u4f7f\u5f97\u5176\u4f18\u5316\u95ee\u9898\u5728\u6570\u5b66\u4e0a\u662f\u53ef\u89e3\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u5e94\u7528\u6709\u6548\u7684\u51f8\u4f18\u5316\u7b97\u6cd5\u3002\u4f46\u662f\u4e00\u65e6\u6211\u4eec\u5c06\u51fd\u6570 \\(f\\)\u6269\u5c55\u5230\u795e\u7ecf\u7f51\u7edc\uff0c\u76ee\u6807\u51fd\u6570\u5c31\u5c31\u4e0d\u518d\u662f\u51f8\u51fd\u6570\u4e86\uff0c\u56fe\u50cf\u4e5f\u4e0d\u4f1a\u50cf\u4e0a\u9762\u90a3\u6837\u662f\u4e2a\u7897\u72b6\uff0c\u800c\u662f\u51f9\u51f8\u4e0d\u5e73\u7684\u590d\u6742\u5730\u5f62\u5f62\u72b6\u3002</p>"},{"location":"CV/Lecture4_Optimization/#42-\u6700\u4f18\u5316-optimization","title":"4.2 \u6700\u4f18\u5316 Optimization","text":"<p>\u5728\u51f8\u4f18\u5316\u4e2d\uff0c\u50cf SVM \u635f\u5931\u51fd\u6570\u8fd9\u6837\u7684\u51f8\u51fd\u6570\u53ef\u4ee5\u901a\u8fc7\u68af\u5ea6\u4e0b\u964d\u6216\u5176\u4ed6\u51f8\u4f18\u5316\u7b97\u6cd5\u6709\u6548\u5730\u627e\u5230\u5168\u5c40\u6700\u4f18\u89e3\u3002\u7136\u800c\uff0c\u5f53\u6211\u4eec\u8f6c\u5411\u795e\u7ecf\u7f51\u7edc\u65f6\uff0c\u635f\u5931\u51fd\u6570\u901a\u5e38\u662f\u975e\u51f8\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u53ef\u80fd\u5305\u542b\u591a\u4e2a\u5c40\u90e8\u6781\u5c0f\u503c\u3001\u978d\u70b9\u4ee5\u53ca\u590d\u6742\u7684\u5730\u5f62\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6807\u51c6\u7684\u51f8\u4f18\u5316\u65b9\u6cd5\u53ef\u80fd\u4e0d\u518d\u9002\u7528\uff0c\u6211\u4eec\u9700\u8981\u66f4\u590d\u6742\u7684\u4f18\u5316\u7b56\u7565\uff0c\u5982\u968f\u673a\u68af\u5ea6\u4e0b\u964d\uff08SGD\uff09\u3001\u52a8\u91cf\u65b9\u6cd5\u3001\u81ea\u9002\u5e94\u5b66\u4e60\u7387\u4f18\u5316\u5668\uff08\u5982 Adam\uff09\u7b49\u3002</p>"},{"location":"CV/Lecture4_Optimization/#421-\u7b56\u7565-1\u968f\u673a\u641c\u7d22-random-search","title":"4.2.1 \u7b56\u7565 1\uff1a\u968f\u673a\u641c\u7d22 Random Search","text":"<p>\u968f\u673a\u641c\u7d22\u7684\u7b56\u7565\uff1a\u901a\u8fc7\u968f\u673a\u751f\u6210\u5927\u91cf\u4e0d\u540c\u7684\u6743\u91cd\u77e9\u9635\uff0c\u8ba1\u7b97\u6bcf\u4e2a\u6743\u91cd\u77e9\u9635\u7684\u635f\u5931\u503c\uff0c\u5e76\u9009\u53d6\u635f\u5931\u503c\u6700\u5c0f\u7684\u90a3\u4e2a\u6743\u91cd\u77e9\u9635\u4f5c\u4e3a\u6700\u7ec8\u7684\u6a21\u578b\u3002</p> <pre><code># \u5047\u8bbe X_train \u7684\u6bcf\u4e00\u5217\u4ee3\u8868\u4e00\u4e2a\u6570\u636e\u6837\u672c\uff08\u5f62\u72b6\u4e3a 3073 x 50000\uff09\n# \u5047\u8bbe Y_train \u662f\u5bf9\u5e94\u7684\u6807\u7b7e\u6570\u7ec4\uff08\u957f\u5ea6\u4e3a 50000\uff09\n# \u5047\u8bbe\u51fd\u6570 L \u8ba1\u7b97\u7ed9\u5b9a\u6743\u91cd W \u7684\u635f\u5931\u503c\n\nbestloss = float(\"inf\")  # \u521d\u59cb\u5316\u6700\u5c0f\u635f\u5931\u503c\u4e3a\u6b63\u65e0\u7a77\nfor num in range(1000):  # \u8fdb\u884c 1000 \u6b21\u968f\u673a\u641c\u7d22\n    # \u751f\u6210\u4e00\u4e2a\u5f62\u72b6\u4e3a 10x3073 \u7684\u968f\u673a\u6743\u91cd\u77e9\u9635\uff0c\u5e76\u7f29\u653e\u3002\u6743\u91cd\u77e9\u9635\u4e2d\u7684\u503c\u7531\u6807\u51c6\u6b63\u6001\u5206\u5e03\u751f\u6210\uff0c\u5e76\u4e58\u4ee5\u4e00\u4e2a\u5f88\u5c0f\u7684\u5e38\u6570\uff080.0001\uff09\u4ee5\u786e\u4fdd\u521d\u59cb\u6743\u91cd\u8f83\u5c0f\n    W = np.random.randn(10, 3073) * 0.0001\n    loss = L(X_train, Y_train, W)  # \u8ba1\u7b97\u5f53\u524d\u6743\u91cd W \u5bf9\u6574\u4e2a\u8bad\u7ec3\u96c6\u7684\u635f\u5931\u503c\n    # \u66f4\u65b0\u6700\u4f73\u635f\u5931\u548c\u6700\u4f73\u6743\u91cd\n    if loss &lt; bestloss:  # \u5982\u679c\u5f53\u524d\u635f\u5931\u503c\u5c0f\u4e8e\u8bb0\u5f55\u7684\u6700\u5c0f\u635f\u5931\u503c\n        bestloss = loss  # \u66f4\u65b0\u6700\u5c0f\u635f\u5931\u503c\n        bestW = W  # \u66f4\u65b0\u6700\u4f73\u6743\u91cd\u77e9\u9635\n    print('\u5728\u7b2c %d \u6b21\u5c1d\u8bd5\u4e2d\u7684\u635f\u5931\u503c\u4e3a %f\uff0c\u5f53\u524d\u6700\u5c0f\u635f\u5931\u503c\u4e3a %f' % (num, loss, bestloss))\n\n# \u8f93\u51fa\u793a\u4f8b\uff1a\n# \u5728\u7b2c 0 \u6b21\u5c1d\u8bd5\u4e2d\u7684\u635f\u5931\u503c\u4e3a 9.401632\uff0c\u5f53\u524d\u6700\u5c0f\u635f\u5931\u503c\u4e3a 9.401632\n# \u5728\u7b2c 1 \u6b21\u5c1d\u8bd5\u4e2d\u7684\u635f\u5931\u503c\u4e3a 8.959668\uff0c\u5f53\u524d\u6700\u5c0f\u635f\u5931\u503c\u4e3a 8.959668\n# ... (\u6b64\u5904\u7701\u7565\uff0c\u4ee3\u7801\u4f1a\u6301\u7eed\u8f93\u51fa 1000 \u884c)\n\n# \u4f7f\u7528\u8bad\u7ec3\u96c6\u4e0a\u8868\u73b0\u6700\u597d\u7684\u6743\u91cd\u77e9\u9635 W \u5728\u6d4b\u8bd5\u96c6\u4e0a\u8fdb\u884c\u9884\u6d4b\n# \u5047\u8bbe X_test \u5f62\u72b6\u4e3a 3073 x 10000\uff0cY_test \u4e3a\u957f\u5ea6\u4e3a 10000 \u7684\u6807\u7b7e\u6570\u7ec4\nscores = bestW.dot(Xte_cols)  # \u8ba1\u7b97\u6240\u6709\u6d4b\u8bd5\u6837\u672c\u7684\u5206\u7c7b\u5f97\u5206\uff08\u5f62\u72b6\u4e3a 10 x 10000\uff09\nYte_predict = np.argmax(scores, axis=0)  # \u9009\u62e9\u6bcf\u4e2a\u6837\u672c\u5f97\u5206\u6700\u9ad8\u7684\u7c7b\u522b\u4f5c\u4e3a\u9884\u6d4b\u7ed3\u679c\naccuracy = np.mean(Yte_predict == Yte)  # \u8ba1\u7b97\u9884\u6d4b\u7ed3\u679c\u4e0e\u771f\u5b9e\u6807\u7b7e\u7684\u5339\u914d\u6bd4\u4f8b\uff08\u51c6\u786e\u7387\uff09\n# \u8fd4\u56de\u7684\u51c6\u786e\u7387\u4e3a 0.1555\n</code></pre> <p>\u6838\u5fc3\u601d\u8def\uff1a\u8fed\u4ee3\u4f18\u5316</p> <ul> <li>\u5c40\u9650\u6027\uff1a\u627e\u5230\u5168\u5c40\u6700\u4f18\u89e3\u975e\u5e38\u56f0\u96be\uff0c\u5c24\u5176\u662f\u5728\u53c2\u6570\u7a7a\u95f4\u7ef4\u5ea6\u975e\u5e38\u9ad8\u7684\u60c5\u51b5\u4e0b\uff08\u5982\u795e\u7ecf\u7f51\u7edc\u7684\u6743\u91cd\uff09\u3002</li> <li>\u6539\u8fdb\u601d\u8def\uff1a<code>\u5c06\u4f18\u5316\u95ee\u9898\u5206\u89e3\u4e3a\u4e00\u7cfb\u5217\u66f4\u5c0f\u7684\u3001\u8fed\u4ee3\u7684\u6b65\u9aa4\uff0c\u6bcf\u4e00\u6b65\u90fd\u8bd5\u56fe\u7565\u5fae\u51cf\u5c11\u635f\u5931\u503c\uff0c\u800c\u4e0d\u662f\u8bd5\u56fe\u76f4\u63a5\u627e\u5230\u6700\u4f18\u89e3\u3002\u901a\u8fc7\u9010\u6b65\u6539\u8fdb\u6743\u91cd\u77e9\u9635\uff0c\u635f\u5931\u503c\u4f1a\u9010\u6e10\u51cf\u5c11\uff0c\u4ece\u800c\u8fbe\u5230\u66f4\u597d\u7684\u6027\u80fd\u3002</code></li> </ul>"},{"location":"CV/Lecture4_Optimization/#422-\u7b56\u7565-2\u968f\u673a\u672c\u5730\u641c\u7d22","title":"4.2.2 \u7b56\u7565 2\uff1a\u968f\u673a\u672c\u5730\u641c\u7d22","text":"<p>\u7b2c\u4e00\u4e2a\u7b56\u7565\u53ef\u4ee5\u770b\u505a\u662f\u6bcf\u8d70\u4e00\u6b65\u90fd\u5c1d\u8bd5\u51e0\u4e2a\u968f\u673a\u65b9\u5411\uff0c\u5982\u679c\u67d0\u4e2a\u65b9\u5411\u662f\u5411\u5c71\u4e0b\u7684\uff0c\u5c31\u5411\u8be5\u65b9\u5411\u8d70\u4e00\u6b65\u3002\u8fd9\u4e2a\u7b56\u7565\u57fa\u4e8e\u5c40\u90e8\u63a2\u7d22\uff0c\u901a\u8fc7\u5fae\u8c03\u521d\u59cb\u968f\u673a\u6743\u91cd\u77e9\u9635\u6765\u51cf\u5c11\u635f\u5931\u503c\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u4ece\u4e00\u4e2a\u968f\u673a\u6743\u91cd\u77e9\u9635 \\(W\\)\u5f00\u59cb\uff0c\u7136\u540e\u6dfb\u52a0\u4e00\u4e2a\u5c0f\u6270\u52a8 \\(\\delta W\\)\uff0c\u751f\u6210\u65b0\u7684\u6743\u91cd\u77e9\u9635 \\(W_{\\text{try}} = W + \\delta W\\)\u3002\u5982\u679c\u65b0\u6743\u91cd\u7684\u635f \u5931\u503c\u6bd4\u5f53\u524d\u6700\u4f18\u503c\u66f4\u5c0f\uff0c\u5c31\u66f4\u65b0\u6743\u91cd \\(W\\)\u4e3a \\(W_{\\text{try}}\\)\u3002\u6bcf\u6b21\u5c1d\u8bd5\u968f\u673a\u79fb\u52a8\u4e00\u70b9\uff0c\u53ea\u5728\u627e\u5230\u66f4\u4f4e\u635f\u5931\u65f6\u66f4\u65b0\u4f4d\u7f6e\u3002</p> <p></p> <pre><code>W  = np.random.randn(10, 3073) * 0.001  # \u751f\u6210\u4e00\u4e2a\u968f\u673a\u7684\u521d\u59cb\u6743\u91cd\u77e9\u9635 W\nbestloss = float(\"inf\")  # \u521d\u59cb\u5316\u6700\u5c0f\u635f\u5931\u503c\u4e3a\u6b63\u65e0\u7a77\n\nfor i in range(1000):  # \u8fdb\u884c 1000 \u6b21\u5c40\u90e8\u641c\u7d22\n    step_size = 0.0001  # \u8bbe\u7f6e\u6b65\u957f\uff0c\u63a7\u5236\u6270\u52a8\u7684\u5927\u5c0f\n    # \u6bcf\u6b21\u8fed\u4ee3\u65f6\uff0c\u751f\u6210\u4e00\u4e2a\u4e0e\u5f53\u524d\u6743\u91cd\u540c\u7ef4\u5ea6\u7684\u968f\u673a\u6270\u52a8 Wtry\uff0c\u5e76\u901a\u8fc7\u6b65\u957f step_size \u6765\u63a7\u5236\u6270\u52a8\u7684\u5e45\u5ea6\u3002\u8fd9\u79cd\u5c0f\u5e45\u5ea6\u7684\u6270\u52a8\u786e\u4fdd\u4e86\u6a21\u578b\u5728\u6bcf\u4e00\u6b65\u4e2d\u4ec5\u5bf9\u53c2\u6570\u8fdb\u884c\u5fae\u8c03\u3002\n    Wtry = W + np.random.randn(10, 3073) * step_size  # \u5728\u5f53\u524d\u6743\u91cd\u57fa\u7840\u4e0a\u6dfb\u52a0\u968f\u673a\u6270\u52a8\n    loss = L(Xtr_cols, Ytr, Wtry)  # \u8ba1\u7b97\u6270\u52a8\u540e\u6743\u91cd\u7684\u635f\u5931\u503c\n\n    if loss &lt; bestloss:  # \u5982\u679c\u65b0\u7684\u635f\u5931\u503c\u6bd4\u4e4b\u524d\u66f4\u5c0f\n        W = Wtry  # \u66f4\u65b0\u6743\u91cd\u77e9\u9635\u4e3a\u65b0\u7684\u6743\u91cd\n        bestloss = loss  # \u66f4\u65b0\u6700\u5c0f\u635f\u5931\u503c\n\n    print('\u7b2c %d \u6b21\u8fed\u4ee3\u7684\u635f\u5931\u503c\u4e3a %f' % (i, bestloss))\n</code></pre> <p>\u4f7f\u7528\u540c\u6837\u7684\u6570\u636e\uff081000\uff09\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u5f97\u5230 21.4% \u7684\u5206\u7c7b\u51c6\u786e\u7387\u3002\u8fd9\u4e2a\u6bd4\u7b56\u7565\u4e00\u597d\uff0c\u4f46\u662f\u4f9d\u7136\u8fc7\u4e8e\u6d6a\u8d39\u8ba1\u7b97\u8d44\u6e90\u3002</p>"},{"location":"CV/Lecture4_Optimization/#423-\u7b56\u7565-3\u8ddf\u968f\u68af\u5ea6","title":"4.2.3 \u7b56\u7565 3\uff1a\u8ddf\u968f\u68af\u5ea6","text":"<p>\u5728\u4e4b\u524d\u7684\u7b56\u7565\u4e2d\uff0c\u6211\u4eec\u968f\u673a\u5bfb\u627e\u4e00\u4e2a\u80fd\u964d\u4f4e\u635f\u5931\u7684\u65b9\u5411\uff0c\u800c\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u8ba1\u7b97\u51fa\u6700\u9661\u5ced\u7684\u4e0b\u964d\u65b9\u5411\u2014\u2014\u635f\u5931\u51fd\u6570\u7684 \u68af\u5ea6\u3002\u68af\u5ea6\u544a\u8bc9\u6211\u4eec\u5728\u591a\u7ef4\u7a7a\u95f4\u4e2d\uff0c\u5404\u4e2a\u65b9\u5411\u4e0a\u7684\u53d8\u5316\u7387\uff0c\u901a\u8fc7\u6cbf\u7740\u68af\u5ea6\u65b9\u5411\u66f4\u65b0\u53c2\u6570\uff0c\u6211\u4eec\u80fd\u591f\u66f4\u5feb\u901f\u5730\u63a5\u8fd1\u6700\u4f18\u89e3\u3002</p> <p>\u5728\u4e00\u7ef4\u51fd\u6570\u4e2d\uff0c\u659c\u7387\u662f\u51fd\u6570\u5728\u67d0\u4e00\u70b9\u7684\u77ac\u65f6\u53d8\u5316\u7387\u3002\u68af\u5ea6\u662f\u51fd\u6570\u7684\u659c\u7387\u7684\u4e00\u822c\u5316\u8868\u8fbe\uff0c\u5b83\u4e0d\u662f\u4e00\u4e2a\u503c\uff0c\u800c\u662f\u4e00\u4e2a\u5411\u91cf\u3002\u5728\u8f93\u5165\u7a7a\u95f4\u4e2d\uff0c\u68af\u5ea6\u662f\u5404\u4e2a\u7ef4\u5ea6\u7684\u659c\u7387\u7ec4\u6210\u7684\u5411\u91cf\uff08\u6216\u8005\u79f0\u4e3a\u5bfc\u6570 derivatives\uff09\u3002\u5bf9\u4e00\u7ef4\u51fd\u6570\u7684\u6c42\u5bfc\u516c\u5f0f\u5982\u4e0b\uff1a</p> \\[ \\dfrac{df(x)}{dx}= lim_{h \\rightarrow 0}\\dfrac{f(x+h)-f(x)}{h} \\] <p>\u5f53\u51fd\u6570\u6709\u591a\u4e2a\u53c2\u6570\u7684\u65f6\u5019\uff0c\u6211\u4eec\u79f0\u5bfc\u6570\u4e3a\u504f\u5bfc\u6570\u3002\u800c\u68af\u5ea6\u5c31\u662f\u5728\u6bcf\u4e2a\u7ef4\u5ea6\u4e0a\u504f\u5bfc\u6570\u6240\u5f62\u6210\u7684\u5411\u91cf\u3002</p>"},{"location":"CV/Lecture4_Optimization/#43-\u68af\u5ea6\u8ba1\u7b97","title":"4.3 \u68af\u5ea6\u8ba1\u7b97","text":"<p>\u8ba1\u7b97\u68af\u5ea6\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a\u4e00\u4e2a\u662f\u7f13\u6162\u7684\u8fd1\u4f3c\u65b9\u6cd5\uff08\u6570\u503c\u68af\u5ea6\u6cd5\uff09\uff0c\u4f46\u5b9e\u73b0\u76f8\u5bf9\u7b80\u5355\u3002\u53e6\u4e00\u4e2a\u65b9\u6cd5\uff08\u5206\u6790\u68af\u5ea6\u6cd5\uff09\u8ba1\u7b97\u8fc5\u901f\uff0c\u7ed3\u679c\u7cbe\u786e\uff0c\u4f46\u662f\u5b9e\u73b0\u65f6\u5bb9\u6613\u51fa\u9519\uff0c\u4e14\u9700\u8981\u4f7f\u7528\u5fae\u5206\u3002\u73b0\u5728\u5bf9\u4e24\u79cd\u65b9\u6cd5\u8fdb\u884c\u4ecb\u7ecd\uff1a</p>"},{"location":"CV/Lecture4_Optimization/#431-\u6570\u503c\u68af\u5ea6\u6cd5-numeric-gradient","title":"4.3.1 \u6570\u503c\u68af\u5ea6\u6cd5 Numeric gradient","text":"<p>\u6570\u503c\u68af\u5ea6\u6cd5\u662f\u4e00\u79cd\u901a\u8fc7\u6709\u9650\u5dee\u5206\u8fd1\u4f3c\u8ba1\u7b97\u68af\u5ea6\u7684\u65b9\u6cd5\u3002\u867d\u7136\u76f8\u6bd4\u5206\u6790\u68af\u5ea6\u6cd5\u5b83\u8f83\u6162\uff0c\u4f46\u5b9e\u73b0\u7b80\u5355\u4e14\u901a\u7528\uff0c\u9002\u5408\u7528\u4e8e\u8c03\u8bd5\u548c\u9a8c\u8bc1\u5206\u6790\u68af\u5ea6\u7684\u6b63\u786e\u6027\u3002\u5176\u6838\u5fc3\u601d\u60f3\u662f\u901a\u8fc7\u5728\u6bcf\u4e2a\u7ef4\u5ea6\u4e0a\u65bd\u52a0\u4e00\u4e2a\u5fae\u5c0f\u7684\u6270\u52a8\uff0c\u7136\u540e\u89c2\u5bdf\u51fd\u6570\u503c\u7684\u53d8\u5316\uff0c\u6765\u8fd1\u4f3c\u8ba1\u7b97\u8be5\u7ef4\u5ea6\u4e0a\u7684\u5bfc\u6570\u3002</p> <p>\u4e0a\u8282\u4e2d\u7684\u516c\u5f0f\u5df2\u7ecf\u7ed9\u51fa\u6570\u503c\u8ba1\u7b97\u68af\u5ea6\u7684\u65b9\u6cd5\u3002\u4e0b\u9762\u4ee3\u7801\u662f\u4e00\u4e2a\u8f93\u5165\u4e3a\u51fd\u6570 f \u548c\u5411\u91cf x\uff0c \u8ba1\u7b97 f \u7684\u68af\u5ea6\u7684\u901a\u7528\u51fd\u6570\uff0c\u5b83\u8fd4\u56de\u51fd\u6570 f \u5728\u70b9 x \u5904 \u7684\u68af\u5ea6.</p> <pre><code>def eval_numerical_gradient(f, x):\n    \"\"\"\n    \u8ba1\u7b97\u51fd\u6570 f \u5728\u70b9 x \u5904\u7684\u6570\u503c\u68af\u5ea6\u3002\n\n    \u53c2\u6570\uff1a\n    - f: \u76ee\u6807\u51fd\u6570\uff0c\u8f93\u5165\u4e3a x\uff0c\u8f93\u51fa\u4e3a\u4e00\u4e2a\u6807\u91cf\n    - x: numpy \u6570\u7ec4\uff0c\u8868\u793a\u8ba1\u7b97\u68af\u5ea6\u7684\u70b9\n\n    \u8fd4\u56de\uff1a\n    - grad: \u4e0e x \u5f62\u72b6\u76f8\u540c\u7684 numpy \u6570\u7ec4\uff0c\u8868\u793a f \u5728 x \u5904\u7684\u68af\u5ea6\n    \"\"\"\n    fx = f(x)  # \u8ba1\u7b97\u51fd\u6570\u5728\u539f\u70b9\u7684\u503c\n    grad = np.zeros_like(x)  # \u521d\u59cb\u5316\u4e0e x \u5f62\u72b6\u76f8\u540c\u7684\u68af\u5ea6\u6570\u7ec4,\u7528\u4e8e\u5b58\u50a8\u68af\u5ea6\n    h = 1e-5  # \u8bbe\u7f6e\u4e00\u4e2a\u975e\u5e38\u5c0f\u7684\u6570\u503c\uff0c\u4f5c\u4e3a\u6270\u52a8\n\n    # \u4f7f\u7528 nditer \u8fed\u4ee3 x \u4e2d\u7684\u6240\u6709\u7d22\u5f15\n    it = np.nditer(x, flags=['multi_index'], op_flags=['readwrite'])\n    while not it.finished:\n        ix = it.multi_index  # \u83b7\u53d6\u5f53\u524d\u7d22\u5f15\n        old_value = x[ix]  # \u4fdd\u5b58\u5f53\u524d\u503c\n\n        x[ix] = old_value + h  # \u5728\u5f53\u524d\u7ef4\u5ea6\u589e\u52a0 h\n        fxh = f(x)  # \u8ba1\u7b97 f(x + h)\n\n        x[ix] = old_value  # \u6062\u590d\u539f\u503c\n\n        # \u8ba1\u7b97\u8be5\u7ef4\u5ea6\u4e0a\u7684\u504f\u5bfc\u6570\n        grad[ix] = (fxh - fx) / h  # \u68af\u5ea6\u8ba1\u7b97\u516c\u5f0f\n        it.iternext()  # \u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u7ef4\u5ea6\n\n    return grad\n</code></pre> <p>\u8fed\u4ee3\u8ba1\u7b97\uff1a \u5bf9\u4e8e <code>x</code> \u4e2d\u7684\u6bcf\u4e2a\u7ef4\u5ea6\uff0c\u65bd\u52a0\u4e00\u4e2a\u5fae\u5c0f\u7684\u6b63\u5411\u6270\u52a8 <code>h</code>\uff0c\u8ba1\u7b97\u6270\u52a8\u540e\u51fd\u6570\u7684\u503c <code>f(x + h)</code>\u3002\u901a\u8fc7\u6bd4\u8f83\u539f\u51fd\u6570\u503c <code>f(x)</code> \u548c\u6270\u52a8\u540e\u51fd\u6570\u503c\u7684\u53d8\u5316\uff0c\u8ba1\u7b97\u8be5\u7ef4\u5ea6\u4e0a\u7684\u68af\u5ea6\u3002</p> <p>\u5b9e\u8df5\u8003\u91cf\uff1a\u6ce8\u610f\u5728\u6570\u5b66\u516c\u5f0f\u4e2d\uff0ch \u7684\u53d6\u503c\u662f\u8d8b\u8fd1\u4e8e 0 \u7684\uff0c\u7136\u800c\u5728\u5b9e\u9645\u4e2d\uff0c\u7528\u4e00\u4e2a\u5f88\u5c0f\u7684\u6570\u503c\uff08\u6bd4\u5982\u4f8b\u5b50\u4e2d\u7684 1e-5\uff09\u5c31\u8db3\u591f\u4e86\u3002\u5728\u4e0d\u4ea7\u751f\u6570\u503c\u8ba1\u7b97\u51fa\u9519\u7684\u7406\u60f3\u524d\u63d0\u4e0b\uff0c\u4f60\u4f1a\u4f7f\u7528\u5c3d\u53ef\u80fd\u5c0f\u7684 h\u3002</p> <ul> <li>\u4e2d\u5fc3\u5dee\u5206\u6cd5\uff1a \u4f7f\u7528 <code>f(x + h)</code> \u548c <code>f(x - h)</code> \u7684\u4e2d\u5fc3\u5dee\u5206\u516c\u5f0f\u6765\u8ba1\u7b97\u68af\u5ea6\uff0c\u6548\u679c\u66f4\u597d\uff0c\u53ef\u4ee5\u51cf\u5c11\u8bef\u5dee\u3002\u516c\u5f0f\u4e3a\uff1a\\(\\dfrac{f(x + h) - f(x - h)}{2h}\\)</li> </ul> <p>\u53ef\u4ee5\u4f7f\u7528\u4e0a\u9762\u8fd9\u4e2a\u516c\u5f0f\u6765\u8ba1\u7b97\u4efb\u610f\u51fd\u6570\u5728\u4efb\u610f\u70b9\u4e0a\u7684\u68af\u5ea6\u3002\u4e0b\u9762\u8ba1\u7b97\u6743\u91cd\u7a7a\u95f4\u4e2d\u7684\u67d0\u4e9b\u968f\u673a\u70b9\u4e0a\uff0cCIFAR-10 \u635f\u5931\u51fd\u6570\u7684\u68af\u5ea6\uff1a</p> <pre><code># \u5b9a\u4e49\u4e00\u4e2a\u5c01\u88c5\u7684 CIFAR-10 \u635f\u5931\u51fd\u6570\uff0c\u4fbf\u4e8e\u4f20\u9012\u7ed9\u6570\u503c\u68af\u5ea6\u51fd\u6570\ndef CIFAR10_loss_fun(W):\n    return L(X_train, Y_train, W)\n\n# \u751f\u6210\u4e00\u4e2a\u968f\u673a\u7684\u6743\u91cd\u77e9\u9635 W\nW = np.random.rand(10, 3073) * 0.001\n\n# \u8ba1\u7b97\u635f\u5931\u51fd\u6570\u5728 W \u5904\u7684\u68af\u5ea6\ndf = eval_numerical_gradient(CIFAR10_loss_fun, W)\n</code></pre> <p>\u68af\u5ea6\u544a\u8bc9\u6211\u4eec\u635f\u5931\u51fd\u6570\u5728\u6bcf\u4e2a\u7ef4\u5ea6\u4e0a\u7684\u659c\u7387\uff0c\u4ee5\u6b64\u6765\u8fdb\u884c\u66f4\u65b0\uff1a</p> <pre><code># \u6253\u5370\u521d\u59cb\u635f\u5931\u503c\nloss_original = CIFAR10_loss_fun(W)\nprint('original loss: %f' % (loss_original,))\n\n# \u5c1d\u8bd5\u4e0d\u540c\u7684\u6b65\u957f\uff08\u5b66\u4e60\u7387\uff09\u5e76\u89c2\u5bdf\u5bf9\u635f\u5931\u503c\u7684\u5f71\u54cd\nfor step_size_log in [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]:\n    step_size = 10 ** step_size_log  # \u6839\u636e\u5bf9\u6570\u503c\u751f\u6210\u6b65\u957f\n    W_new = W - step_size * df  # \u5411\u8d1f\u68af\u5ea6\u65b9\u5411\u66f4\u65b0\u6743\u91cd\n    loss_new = CIFAR10_loss_fun(W_new)  # \u8ba1\u7b97\u65b0\u7684\u635f\u5931\u503c\n    print('for step size %f new loss: %f' % (step_size, loss_new))\n\n# \u8f93\u51fa\u7ed3\u679c\u663e\u793a\u4e86\u4e0d\u540c\u6b65\u957f\u5bf9\u5e94\u7684\u635f\u5931\u503c\u53d8\u5316\n# original loss: 2.200718\n# for step size 1.000000e-10 new loss: 2.200652\n# for step size 1.000000e-09 new loss: 2.200057\n# for step size 1.000000e-08 new loss: 2.194116\n# for step size 1.000000e-07 new loss: 2.135493\n# for step size 1.000000e-06 new loss: 1.647802\n# for step size 1.000000e-05 new loss: 2.844355\n# for step size 1.000000e-04 new loss: 25.558142\n# for step size 1.000000e-03 new loss: 254.086573\n# for step size 1.000000e-02 new loss: 2539.370888\n# for step size 1.000000e-01 new loss: 25392.214036\n</code></pre> <ul> <li> <p>\u68af\u5ea6\u65b9\u5411\uff1a \u66f4\u65b0\u6743\u91cd\u65f6\uff0c\u5411\u7740\u68af\u5ea6\u7684\u8d1f\u65b9\u5411\u79fb\u52a8\uff0c\u5373 <code>W_new = W - step_size * df</code>\uff0c\u56e0\u4e3a\u68af\u5ea6\u6307\u5411\u7684\u662f\u635f\u5931\u51fd\u6570\u4e0a\u5347\u6700\u5feb\u7684\u65b9\u5411\uff0c\u5411\u5176\u53cd\u65b9\u5411\u79fb\u52a8\u53ef\u4ee5\u964d\u4f4e\u635f\u5931\u503c\u3002</p> </li> <li> <p>\u6b65\u957f\u9009\u62e9\uff1a \u6b65\u957f\u51b3\u5b9a\u4e86\u6bcf\u6b21\u66f4\u65b0\u6743\u91cd\u65f6\u79fb\u52a8\u7684\u8ddd\u79bb\u3002\u6b65\u957f\u8fc7\u5c0f\uff0c\u4e0b\u964d\u7a33\u5b9a\u4f46\u8fdb\u5ea6\u6162\uff1b\u6b65\u957f\u8fc7\u5927\uff0c\u53ef\u80fd\u8d8a\u8fc7\u6700\u4f18\u70b9\u5bfc\u81f4\u66f4\u9ad8\u7684\u635f\u5931\u503c\u3002</p> </li> </ul> <p></p> <p>\u5c06\u6b65\u957f\u6548\u679c\u89c6\u89c9\u5316\u7684\u56fe\u4f8b\u3002\u4ece\u67d0\u4e2a\u5177\u4f53\u7684\u70b9 W \u5f00\u59cb\u8ba1\u7b97\u68af\u5ea6\uff08\u767d\u7bad\u5934\u65b9\u5411\u662f\u8d1f\u68af\u5ea6\u65b9\u5411\uff09\uff0c\u68af\u5ea6\u544a\u8bc9\u4e86\u6211\u4eec\u635f\u5931\u51fd\u6570\u4e0b\u964d\u6700\u9661\u5ced\u7684\u65b9\u5411\u3002\u5c0f\u6b65\u957f\u4e0b\u964d\u7a33\u5b9a\u4f46\u8fdb\u5ea6\u6162\uff0c\u5927\u6b65\u957f\u8fdb\u5c55\u5feb\u4f46\u662f\u98ce\u9669\u66f4\u5927\u3002\u91c7\u53d6\u5927\u6b65\u957f\u53ef\u80fd\u5bfc\u81f4\u9519\u8fc7\u6700\u4f18\u70b9\uff0c\u8ba9\u635f\u5931\u503c\u4e0a\u5347\u3002\u6b65\u957f\uff08\u540e\u9762\u4f1a\u79f0\u5176\u4e3a \u5b66\u4e60\u7387\uff09\u5c06\u4f1a\u662f\u6211\u4eec\u5728\u8c03\u53c2\u4e2d\u6700\u91cd\u8981\u7684\u8d85\u53c2\u6570\u4e4b\u4e00\u3002</p> <ul> <li>\u6548\u7387\u95ee\u9898\uff1a\u8ba1\u7b97\u6570\u503c\u68af\u5ea6\u7684\u590d\u6742\u6027\u548c\u53c2\u6570\u7684\u91cf\u7ebf\u6027\u76f8\u5173\u3002\u5728\u672c\u4f8b\u4e2d\u6709 30730 \u4e2a\u53c2\u6570\uff0c\u6240\u4ee5\u635f\u5931\u51fd\u6570\u6bcf\u8d70\u4e00\u6b65\u5c31\u9700\u8981\u8ba1\u7b97 30731 \u6b21\u635f\u5931\u51fd\u6570\u7684\u68af\u5ea6\u3002\u73b0\u4ee3\u795e\u7ecf\u7f51\u7edc\u5f88\u5bb9\u6613\u5c31\u6709\u4e0a\u5343\u4e07\u7684\u53c2\u6570\uff0c\u56e0\u6b64\u8fd9\u4e2a\u95ee\u9898\u53ea\u4f1a\u8d8a\u53d1\u4e25\u5cfb\u3002\u663e\u7136\u8fd9\u4e2a\u7b56\u7565\u4e0d\u9002\u5408\u5927\u89c4\u6a21\u6570\u636e\uff0c\u6211\u4eec\u9700\u8981\u66f4\u597d\u7684\u7b56\u7565\u3002</li> </ul>"},{"location":"CV/Lecture4_Optimization/#432-\u5fae\u5206\u5206\u6790\u8ba1\u7b97\u68af\u5ea6-analytic-gradient","title":"4.3.2 \u5fae\u5206\u5206\u6790\u8ba1\u7b97\u68af\u5ea6 Analytic gradient","text":"<p>\u76f8\u6bd4\u6709\u9650\u5dee\u503c\u8fd1\u4f3c\u6cd5\uff0c\u5229\u7528\u5fae\u5206\u516c\u5f0f\u8ba1\u7b97\u68af\u5ea6\u66f4\u52a0\u7cbe\u786e\u4e14\u8ba1\u7b97\u6548\u7387\u66f4\u9ad8\u3002\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4ece\u635f\u5931\u51fd\u6570\u7684\u516c\u5f0f\u63a8\u5bfc\u51fa\u68af\u5ea6\u7684\u89e3\u6790\u8868\u8fbe\u5f0f\uff0c\u518d\u7528\u5b83\u8fdb\u884c\u4f18\u5316\u3002\u8fd9\u79cd\u65b9\u6cd5\u7684\u4f18\u70b9\u662f\u8ba1\u7b97\u7cbe\u5ea6\u9ad8\u3001\u901f\u5ea6\u5feb\uff1b\u4f46\u7f3a\u70b9\u662f\u63a8\u5bfc\u590d\u6742\u3001\u5bb9\u6613\u51fa\u9519\u3002\u56e0\u6b64\uff0c\u5b9e\u9645\u64cd\u4f5c\u4e2d\u5e38\u7528 \u68af\u5ea6\u68c0\u67e5 \u6765\u9a8c\u8bc1\u89e3\u6790\u68af\u5ea6\u7684\u6b63\u786e\u6027\u3002</p> <p>\u7528 SVM \u7684\u635f\u5931\u51fd\u6570\u5728\u67d0\u4e2a\u6570\u636e\u70b9\u4e0a\u7684\u8ba1\u7b97\u6765\u4e3e\u4f8b\uff1a</p> \\[ \\sum_{j!= y_i}max(0, w^T_jx_i-w^T_{y_i}x_i+\\Delta) \\] <p>\u53ef\u4ee5\u5bf9\u51fd\u6570\u8fdb\u884c\u5fae\u5206\u3002\u6bd4\u5982\uff0c\u5bf9 \\(w_{y_i}\\)\u8fdb\u884c\u5fae\u5206\u5f97\u5230\uff1a</p> \\[ \\nabla {w_{y_i}}L_i =-(\\sum_{j\\not = y_i}1(w^T_jx_i-w^T_{y_i}x_i+Delta &gt; 0))x_i \\] <p>\u8be5\u68af\u5ea6\u7684\u8ba1\u7b97\u6d89\u53ca\u4e00\u4e2a\u6307\u793a\u51fd\u6570\uff0c\u5f53\u62ec\u53f7\u5185\u7684\u6761\u4ef6\u4e3a\u771f\u65f6\uff0c\u5176\u503c\u4e3a 1\uff0c\u5426\u5219\u4e3a 0\u3002\u53ea\u9700\u8981\u8ba1\u7b97\u6ca1\u6709\u6ee1\u8db3\u8fb9\u754c\u503c\u7684\u5206\u7c7b\u7684\u6570\u91cf\uff08\u56e0\u6b64\u5bf9\u635f\u5931\u51fd\u6570\u4ea7\u751f\u4e86\u8d21\u732e\uff09\uff0c\u7136\u540e\u4e58\u4ee5 \\(x_i\\)\u5c31\u662f\u68af\u5ea6\u4e86\u3002\u6ce8\u610f\uff0c\u8fd9\u4e2a\u68af\u5ea6\u53ea\u662f\u5bf9\u5e94\u6b63\u786e\u5206\u7c7b\u7684 W \u7684\u884c\u5411\u91cf\u7684\u68af\u5ea6\uff0c\u90a3\u4e9b \\(j\\not =y_i\\)\u884c\u7684\u68af\u5ea6\u662f\uff1a</p> \\[ \\nabla_{w_j}L_i = 1(w^T_jx_i-w^T_{y_i}x_i+Delta &gt; 0)x_i \\]"},{"location":"CV/Lecture4_Optimization/#433-\u68af\u5ea6\u4e0b\u964d","title":"4.3.3 \u68af\u5ea6\u4e0b\u964d","text":"<p>\u68af\u5ea6\u4e0b\u964d\u6cd5\u7684\u6838\u5fc3\u601d\u60f3\uff0c\u5373\u901a\u8fc7\u4e0d\u65ad\u8ba1\u7b97\u68af\u5ea6\u5e76\u66f4\u65b0\u53c2\u6570\uff0c\u4f7f\u5f97\u635f\u5931\u51fd\u6570\u9010\u6e10\u964d\u4f4e\u3002</p> <pre><code># \u666e\u901a\u7684\u68af\u5ea6\u4e0b\u964d\nwhile True:\n    weights_grad = evaluate_gradient(loss_fun, data, weights)  # \u8ba1\u7b97\u5f53\u524d\u6743\u91cd\u7684\u68af\u5ea6\n    weights += -step_size * weights_grad  # \u66f4\u65b0\u6743\u91cd\uff0c\u6cbf\u68af\u5ea6\u7684\u8d1f\u65b9\u5411\u79fb\u52a8\n</code></pre> <p>\u68af\u5ea6\u4e0b\u964d\u662f\u4e00\u79cd\u8fed\u4ee3\u4f18\u5316\u7b97\u6cd5\uff0c\u5176\u76ee\u6807\u662f\u627e\u5230\u4e00\u4e2a\u4f7f\u635f\u5931\u51fd\u6570\u6700\u5c0f\u5316\u7684\u53c2\u6570\u96c6\u5408\u3002\u901a\u8fc7\u6cbf\u7740\u635f\u5931\u51fd\u6570\u68af\u5ea6\u7684\u8d1f\u65b9\u5411\u66f4\u65b0\u53c2\u6570\uff0c\u7b97\u6cd5\u8bd5\u56fe\u5728\u6bcf\u4e00\u6b65\u4e2d\u5c3d\u53ef\u80fd\u5730\u964d\u4f4e\u635f\u5931\u3002</p> <ul> <li> <p>\u68af\u5ea6\u8ba1\u7b97\uff1a\u5728\u6bcf\u6b21\u8fed\u4ee3\u4e2d\uff0c\u901a\u8fc7 <code>evaluate_gradient</code> \u51fd\u6570\u8ba1\u7b97\u635f\u5931\u51fd\u6570\u76f8\u5bf9\u4e8e\u53c2\u6570\u7684\u68af\u5ea6 <code>weights_grad</code>\u3002\u68af\u5ea6\u6307\u5411\u635f\u5931\u51fd\u6570\u4e0a\u5347\u6700\u5feb\u7684\u65b9\u5411\u3002</p> </li> <li> <p>\u53c2\u6570\u66f4\u65b0\uff1a\u6743\u91cd <code>weights</code> \u6309\u7167\u5b66\u4e60\u7387(learning rate) <code>step_size</code> \u6cbf\u7740\u8d1f\u68af\u5ea6\u65b9\u5411\u66f4\u65b0\u3002\u8fd9\u6837\u505a\u662f\u56e0\u4e3a\u8d1f\u68af\u5ea6\u65b9\u5411\u662f\u635f\u5931\u51cf\u5c11\u6700\u5feb\u7684\u65b9\u5411\u3002</p> </li> <li> <p>\u8fd9\u4e2a\u5faa\u73af\u7ed3\u6784\u4f1a\u6301\u7eed\u8fd0\u884c\uff0c\u76f4\u5230\u6ee1\u8db3\u67d0\u79cd\u505c\u6b62\u6761\u4ef6\u3002\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u5e38\u89c1\u7684\u505c\u6b62\u6761\u4ef6\u5305\u62ec\uff1a</p> <ul> <li>\u56fa\u5b9a\u8fed\u4ee3\u6b21\u6570\uff1a\u8fd0\u884c\u6307\u5b9a\u6b21\u6570\u7684\u8fed\u4ee3\uff0c\u4f8b\u5982 1000 \u6b21\u3002</li> <li>\u635f\u5931\u53d8\u5316\u5c0f\u4e8e\u67d0\u4e2a\u9608\u503c\uff1a\u5f53\u635f\u5931\u7684\u53d8\u5316\u5c0f\u4e8e\u8bbe\u5b9a\u7684\u9608\u503c\u65f6\uff0c\u8ba4\u4e3a\u5df2\u6536\u655b\u3002</li> <li>\u68af\u5ea6\u8303\u6570\u5f88\u5c0f\uff1a\u5f53\u68af\u5ea6\u7684\u8303\u6570\uff08\u5373\u68af\u5ea6\u5411\u91cf\u7684\u957f\u5ea6\uff09\u975e\u5e38\u5c0f\u65f6\uff0c\u8bf4\u660e\u5df2\u7ecf\u63a5\u8fd1\u6781\u5c0f\u503c\u70b9\u3002</li> </ul> </li> </ul> <p>Batch Gradient Descent \u6279\u91cf\u68af\u5ea6\u4e0b\u964d</p> <p></p> <p>\u5c0f\u6279\u91cf\u6570\u636e\u68af\u5ea6\u4e0b\u964d\uff08Mini-batch Gradient Descent, MBGD\uff09 \u662f\u4ecb\u4e8e\u6279\u91cf\u68af\u5ea6\u4e0b\u964d\uff08Batch Gradient Descent, BGD\uff09\u548c\u968f\u673a\u68af\u5ea6\u4e0b\u964d\uff08Stochastic Gradient Descent, SGD\uff09\u4e4b\u95f4\u7684\u4e00\u79cd\u4f18\u5316\u7b56\u7565\u3002\u5b83\u5728\u6bcf\u6b21\u8fed\u4ee3\u65f6\u4f7f\u7528\u4e00\u90e8\u5206\uff08\u5373\u5c0f\u6279\u91cf\uff09\u6570\u636e\u6765\u8ba1\u7b97\u68af\u5ea6\u5e76\u66f4\u65b0\u53c2\u6570\u3002\u8fd9\u79cd\u65b9\u6cd5\u7ed3\u5408\u4e86 BGD \u548c SGD \u7684\u4f18\u70b9\uff0c\u5728\u5927\u89c4\u6a21\u673a\u5668\u5b66\u4e60\u5e94\u7528\u4e2d\u5e7f\u6cdb\u4f7f\u7528\u3002</p> <pre><code># \u666e\u901a\u7684\u5c0f\u6279\u91cf\u6570\u636e\u68af\u5ea6\u4e0b\u964d\nwhile True:\n    data_batch = sample_training_data(data, 256)  # 256\u4e2a\u6570\u636e\n    weights_grad = evaluate_gradient(loss_fun, data_batch, weights)  # \u8ba1\u7b97\u68af\u5ea6\n    weights += - step_size * weights_grad  # \u53c2\u6570\u66f4\u65b0\n</code></pre> <ul> <li> <p><code>sample_training_data(data, 256)</code>\uff1a\u4ece\u6570\u636e\u96c6\u4e2d\u968f\u673a\u9009\u53d6 256 \u4e2a\u6837\u672c\uff0c\u4f5c\u4e3a\u5f53\u524d\u8fed\u4ee3\u7684\u5c0f\u6279\u91cf\u6570\u636e\u3002</p> </li> <li> <p><code>evaluate_gradient(loss_fun, data_batch, weights)</code>\uff1a\u8ba1\u7b97\u5c0f\u6279\u91cf\u6570\u636e\u4e0a\u7684\u635f\u5931\u51fd\u6570\u68af\u5ea6\u3002</p> </li> </ul> <p><code>\u5c0f\u6279\u91cf\u6570\u636e\u68af\u5ea6\u4e0b\u964d\u7684\u5de5\u4f5c\u539f\u7406</code></p> <ul> <li>\u6570\u636e\u6279\u6b21\uff1a\u5c0f\u6279\u91cf\u6570\u636e\u7684\u5178\u578b\u5927\u5c0f\u901a\u5e38\u4e3a 32\u300164\u3001128 \u6216 256 \u4e2a\u6837\u672c\u3002\u6bcf\u6b21\u8fed\u4ee3\u65f6\uff0c\u4ece\u8bad\u7ec3\u96c6\u4e2d\u968f\u673a\u9009\u53d6\u4e00\u4e2a\u5c0f\u6279\u91cf\u6570\u636e\u6765\u8ba1\u7b97\u68af\u5ea6\u3002</li> </ul> <p><code>\u53c2\u6570\u6570\u91cf\u7684\u9009\u62e9\u548c\u9009\u62e9\u53c2\u6570\u662fhyper parameter\uff0c\u4f46\u662f\u5f71\u54cd\u4e0d\u5927</code></p> <ul> <li>\u68af\u5ea6\u8ba1\u7b97\u4e0e\u66f4\u65b0\uff1a\u5728\u6bcf\u6b21\u8fed\u4ee3\u4e2d\uff0c\u4f7f\u7528\u5c0f\u6279\u91cf\u6570\u636e\u8ba1\u7b97\u68af\u5ea6\uff0c\u968f\u540e\u66f4\u65b0\u6a21\u578b\u53c2\u6570\u3002\u7531\u4e8e\u6bcf\u6b21\u8fed\u4ee3\u4f7f\u7528\u7684\u53ea\u662f\u6570\u636e\u7684\u4e00\u5c0f\u90e8\u5206\uff0c\u8ba1\u7b97\u901f\u5ea6\u6bd4\u5168\u6279\u91cf\u66f4\u65b0\u5feb\u5f97\u591a\uff0c\u540c\u65f6\u53c8\u6bd4\u5355\u4e2a\u6837\u672c\u7684\u66f4\u65b0\u66f4\u7a33\u5b9a\u3002</li> </ul> <p><code>\u5c0f\u6279\u91cf\u6570\u636e\u68af\u5ea6\u4e0b\u964d\u7684\u4f18\u52bf</code></p> <ul> <li> <p>\u8ba1\u7b97\u6548\u7387\u9ad8\uff1a\u76f8\u6bd4 BGD\uff0cMBGD \u7684\u8ba1\u7b97\u5f00\u9500\u66f4\u5c0f\uff0c\u56e0\u4e3a\u5b83\u4e0d\u9700\u8981\u5728\u6bcf\u6b21\u8fed\u4ee3\u65f6\u8ba1\u7b97\u6574\u4e2a\u6570\u636e\u96c6\u7684\u68af\u5ea6\uff0c\u800c\u662f\u4ece\u8bad\u7ec3\u96c6\u4e2d\u968f\u673a\u53d6\u51fa\u4e00\u90e8\u5206\u6765\u8ba1\u7b97\u68af\u5ea6\uff0c\u8fd1\u4f3c\u6574\u4e2a\u6570\u636e\u96c6\u7684\u68af\u5ea6\u3002\u800c\u4e0e SGD \u76f8\u6bd4\uff0cMBGD \u7684\u68af\u5ea6\u4f30\u8ba1\u66f4\u51c6\u786e\uff0c\u51cf\u5c11\u4e86\u53c2\u6570\u66f4\u65b0\u4e2d\u7684\u566a\u58f0\u3002</p> </li> <li> <p>\u5e73\u8861\u6536\u655b\u4e0e\u8ba1\u7b97\u5f00\u9500\uff1aMBGD \u7ed3\u5408\u4e86 BGD \u7684\u7a33\u5b9a\u6027\u548c SGD \u7684\u5feb\u901f\u6536\u655b\u6027\uff0c\u5728\u8ba1\u7b97\u6210\u672c\u548c\u6a21\u578b\u6027\u80fd\u4e4b\u95f4\u53d6\u5f97\u5e73\u8861\u3002</p> </li> </ul> <p>\u5c0f\u6279\u91cf\u6570\u636e\u7b56\u7565\u6709\u4e2a\u6781\u7aef\u60c5\u51b5\uff0c\u90a3\u5c31\u662f\u6bcf\u4e2a\u6279\u91cf\u4e2d\u53ea\u6709 1 \u4e2a\u6570\u636e\u6837\u672c\uff0c\u8fd9\u79cd\u7b56\u7565\u88ab\u79f0\u4e3a \u968f\u673a\u68af\u5ea6\u4e0b\u964d\uff08Stochastic Gradient Descent \u7b80\u79f0 SGD\uff09\uff0c\u6709\u65f6\u5019\u4e5f\u88ab\u79f0\u4e3a\u5728\u7ebf\u68af\u5ea6\u4e0b\u964d\u3002\u8fd9\u79cd\u7b56\u7565\u5728\u5b9e\u9645\u60c5\u51b5\u4e2d\u76f8\u5bf9\u5c11\u89c1\uff0c\u56e0\u4e3a\u5411\u91cf\u5316\u64cd\u4f5c\u7684\u4ee3\u7801\u4e00\u6b21\u8ba1\u7b97 100 \u4e2a\u6570\u636e \u6bd4 100 \u6b21\u8ba1\u7b97 1 \u4e2a\u6570\u636e\u8981\u9ad8\u6548\u5f88\u591a\u3002</p> <p>\u5c0f\u6279\u91cf\u6570\u636e\u7684\u5927\u5c0f\u662f\u4e00\u4e2a\u8d85\u53c2\u6570\uff0c\u4f46\u662f\u4e00\u822c\u5e76\u4e0d\u9700\u8981\u901a\u8fc7\u4ea4\u53c9\u9a8c\u8bc1\u6765\u8c03\u53c2\u3002\u5b83\u4e00\u822c\u7531\u5b58\u50a8\u5668\u7684\u9650\u5236\u6765\u51b3\u5b9a\u7684\uff0c\u6216\u8005\u5e72\u8106\u8bbe\u7f6e\u4e3a\u540c\u6837\u5927\u5c0f\uff0c\u6bd4\u5982 32\uff0c64\uff0c128 \u7b49\u3002\u4e4b\u6240\u4ee5\u4f7f\u7528 2 \u7684\u6307\u6570\uff0c\u662f\u56e0\u4e3a\u5728\u5b9e\u9645\u4e2d\u8bb8\u591a\u5411\u91cf\u5316\u64cd\u4f5c\u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u5982\u679c\u8f93\u5165\u6570\u636e\u91cf\u662f 2 \u7684\u500d\u6570\uff0c\u90a3\u4e48\u8fd0\u7b97\u66f4\u5feb\u3002\u5e76\u4e14\u5728\u6279\u91cf\u5927\u5c0f\u5408\u9002\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u5145\u5206\u5229\u7528\u8ba1\u7b97</p> <p>\u4e24\u4e2a\u6f5c\u5728\u95ee\u9898\uff1a</p> <ul> <li>\u5b66\u4e60\u7387\u5982\u679c\u8fc7\u5927\uff0c\u90a3\u4e48\u5c31\u4f1a\u51fa\u73b0\u9707\u8361\u7684\u60c5\u51b5\uff0c\u5b66\u4e60\u7387\u8fc7\u5c0f\u7684\u8bdd\uff0c\u867d\u7136\u6ca1\u6709\u9707\u8361\u60c5\u51b5\u51fa\u73b0\uff0c\u4f46\u662f\u5b66\u4e60\u901f\u5ea6\u4f1a\u5f88\u6162\uff0c\u8fd9\u4e2a\u95ee\u9898\u5728\u6280\u672f\u4e0a\u6709\u65f6\u5019\u88ab\u79f0\u4e3a\u5177\u6709\u9ad8\u6761\u4ef6\u6570\u7684\u95ee\u9898</li> </ul> <p></p> <ul> <li>\u5b58\u5728\u5c40\u90e8\u6700\u5c0f\u70b9\u548c\u978d\u70b9 saddle point\uff08<code>\u978d\u70b9\u6307\u7684\u662f\u67d0\u4e9b\u7ef4\u5ea6\u4e0a\u7684\u68af\u5ea6\u4e3a\u96f6\uff0c\u4f46\u5176\u4ed6\u7ef4\u5ea6\u4ecd\u9700\u4f18\u5316\uff0c\u4f7f\u5f97\u6a21\u578b\u65e0\u6cd5\u7ee7\u7eed\u5411\u4e0b\u4f18\u5316</code>\uff09\uff0c\u5728\u67d0\u4e9b\u7ef4\u5ea6\u4e0a\u53ef\u80fd\u65e0\u6cd5\u4f18\u5316\uff0c\u4e5f\u5c31\u662f\u9ad8\u7ef4\u5ea6\u4e0b\u4f18\u5316\u96be\u9898\uff0c\u8fd9\u6837\u6a21\u578b\u65e0\u6cd5\u8fbe\u5230\u6700\u4f73\u3002</li> </ul> <p></p> <p>\u6216\u8005\u53ef\u4ee5\u4f7f\u7528\u52a8\u91cf\u6cd5\u8fdb\u884c\u4f18\u5316\uff0c\u5c1d\u8bd5\u8d8a\u8fc7\u978d\u70b9\u548c\u5c40\u90e8\u6700\u5c0f\u70b9\uff0c\u4f1a\u4ea7\u751f\u5f88\u4e0d\u9519\u7684\u6548\u679c\uff0c\u540c\u65f6\u8fd8\u53ef\u4ee5\u6291\u5236\u9707\u8361\uff0c\u662f\u4e00\u79cd\u5f88\u6709\u7528\u7684\u65b9\u6cd5</p> <p>\u52a8\u91cf\u6cd5\u53ef\u4ee5\u89c6\u4e3a\u7ed9\u68af\u5ea6\u4e0b\u964d\u6dfb\u52a0\u4e86\u201c\u60ef\u6027\u201d\uff0c\u4f7f\u5f97\u66f4\u65b0\u65b9\u5411\u4e0d\u4ec5\u53d6\u51b3\u4e8e\u5f53\u524d\u7684\u68af\u5ea6\uff0c\u8fd8\u53d7\u8fc7\u53bb\u66f4\u65b0\u65b9\u5411\u7684\u5f71\u54cd\u3002\u516c\u5f0f\u5982\u4e0b\uff1a</p> \\[ v = \\gamma v - \\eta \\nabla_\\theta J(\\theta)\\\\ \\theta = \\theta + v \\] <p>\u5176\u4e2d\uff1a</p> <ul> <li>\\(\\gamma\\)\u662f\u52a8\u91cf\u56e0\u5b50\uff0c\u901a\u5e38\u8bbe\u4e3a 0.9\u3002</li> <li>\\(v\\)\u662f\u7d2f\u79ef\u7684\u52a8\u91cf\u3002</li> <li>\\(eta\\)\u662f\u5b66\u4e60\u7387\u3002</li> <li>\\(\\nabla_\\theta J(\\theta)\\)\u662f\u5f53\u524d\u68af\u5ea6\u3002</li> <li></li> <li></li> </ul> <p>\u901a\u8fc7\u7d2f\u79ef\u52a8\u91cf\uff0c\u6a21\u578b\u80fd\u591f\u8de8\u8d8a\u978d\u70b9\uff0c\u5e76\u5728\u9661\u5ced\u7684\u533a\u57df\u52a0\u901f\u6536\u655b\uff0c\u5728\u5e73\u5766\u7684\u533a\u57df\u51cf\u7f13\u9707\u8361\u3002</p>"},{"location":"CV/Lecture4_Optimization/#434-adagrad","title":"4.3.4 AdaGrad","text":"<p>AdaGrad\uff08Adaptive Gradient Algorithm\uff09\u662f\u4e00\u79cd\u81ea\u9002\u5e94\u5b66\u4e60\u7387\u7684\u65b9\u6cd5\uff0c\u5b83\u901a\u8fc7\u8c03\u6574\u6bcf\u4e2a\u53c2\u6570\u7684\u5b66\u4e60\u7387\u6765\u63d0\u5347\u4f18\u5316\u7684\u6548\u7387\u3002\u4e0e\u6807\u51c6\u7684\u68af\u5ea6\u4e0b\u964d\u4e0d\u540c\uff0cAdaGrad \u4f1a\u6839\u636e\u5386\u53f2\u68af\u5ea6\u7684\u7d2f\u79ef\u503c\u52a8\u6001\u8c03\u6574\u5b66\u4e60\u7387\uff0c\u4f7f\u5f97\u66f4\u65b0\u7684\u5e45\u5ea6\u80fd\u591f\u9002\u5e94\u4e0d\u540c\u7684\u53c2\u6570\u3002</p> <p>\u539f\u7406\uff1a\u5728\u6bcf\u6b21\u8fed\u4ee3\u4e2d\uff0cAdaGrad \u4f1a\u7d2f\u52a0\u68af\u5ea6\u7684\u5e73\u65b9\u503c\uff0c\u5e76\u5c06\u8fd9\u4e2a\u7d2f\u79ef\u503c\u7528\u4e8e\u8c03\u6574\u5b66\u4e60\u7387\u3002\u7531\u4e8e\u68af\u5ea6\u7684\u5e73\u65b9\u503c\u9010\u6b65\u589e\u52a0\uff0c\u5b66\u4e60\u7387\u4f1a\u9010\u6b65\u51cf\u5c11\uff0c\u4ece\u800c\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u5b9e\u73b0\u81ea\u9002\u5e94\u8c03\u6574\u3002</p> <pre><code>grad_squared = 0\nfor t in range(num_steps):\n    dw = compute_gradient(w)         # \u8ba1\u7b97\u68af\u5ea6\n    grad_squared += dw * dw          # \u7d2f\u52a0\u68af\u5ea6\u7684\u5e73\u65b9\u548c\n    w -= learning_rate * dw / (grad_squared.sqrt() + 1e-7)  # \u81ea\u9002\u5e94\u5b66\u4e60\u7387\u66f4\u65b0\n</code></pre> <p>\u4f18\u70b9\uff1a</p> <ul> <li>\u9002\u5e94\u7a00\u758f\u6570\u636e\uff1aAdaGrad \u7279\u522b\u9002\u5408\u5904\u7406\u7a00\u758f\u6570\u636e\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u6839\u636e\u5386\u53f2\u68af\u5ea6\u52a8\u6001\u8c03\u6574\u5b66\u4e60\u7387\uff0c\u4f7f\u5f97\u9891\u7e41\u66f4\u65b0\u7684\u53c2\u6570\u5b66\u4e60\u7387\u9010\u6e10\u51cf\u5c0f\uff0c\u800c\u4e0d\u5e38\u66f4\u65b0\u7684\u53c2\u6570\u5219\u4fdd\u7559\u8f83\u5927\u7684\u5b66\u4e60\u7387\u3002</li> <li>\u65e0\u9700\u624b\u52a8\u8c03\u6574\u5b66\u4e60\u7387\uff1a\u901a\u8fc7\u81ea\u52a8\u8c03\u8282\u5b66\u4e60\u7387\uff0cAdaGrad \u51cf\u8f7b\u4e86\u624b\u52a8\u8c03\u53c2\u7684\u8d1f\u62c5\u3002</li> </ul> <p>\u7f3a\u70b9\uff1a</p> <ul> <li>\u8fc7\u5ea6\u8870\u51cf\uff1a\u7531\u4e8e\u5b66\u4e60\u7387\u968f\u65f6\u95f4\u5355\u8c03\u51cf\u5c11\uff0cAdaGrad \u5728\u8bad\u7ec3\u7684\u540e\u671f\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5b66\u4e60\u7387\u8fc7\u5c0f\uff0c\u8fdb\u800c\u4f7f\u5f97\u6a21\u578b\u96be\u4ee5\u8fdb\u4e00\u6b65\u4f18\u5316\u3002</li> </ul> <p>RMSprop \u7684\u6539\u8fdb\uff1a</p> <p>\u4e3a\u4e86\u89e3\u51b3 AdaGrad \u7684\u5b66\u4e60\u7387\u4e0d\u65ad\u4e0b\u964d\u95ee\u9898\uff0cRMSprop \u5728\u8ba1\u7b97\u68af\u5ea6\u5e73\u65b9\u7d2f\u79ef\u65f6\u5f15\u5165\u4e86\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\uff08decay rate\uff09\uff0c\u907f\u514d\u7d2f\u79ef\u8fc7\u591a\u7684\u5386\u53f2\u4fe1\u606f\uff0c\u4ece\u800c\u8ba9\u5b66\u4e60\u7387\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u4fdd\u6301\u76f8\u5bf9\u7a33\u5b9a\u3002RMSprop \u5728\u5904\u7406\u975e\u51f8\u95ee\u9898\u65f6\u66f4\u4e3a\u6709\u6548\u3002</p> <pre><code>grad_squared = 0\nfor t in range(num_steps):\n    dw = compute_gradient(w)\n    grad_squared = decay_date * grad_squared + \uff081 - decay_rate) * dw * dw\n    w -= learning_rate * dw / (grad_squared.sqrt() + 1e-7)  # \u81ea\u9002\u5e94\u5b66\u4e60\u7387\u66f4\u65b0\n</code></pre> <p>decay_rate: \u8fd9\u4e2a\u53c2\u6570\u63a7\u5236\u5386\u53f2\u68af\u5ea6\u7684\u8870\u51cf\u901f\u5ea6\uff0c\u4f7f\u4f18\u5316\u7b97\u6cd5\u5bf9\u65b0\u68af\u5ea6\u4fe1\u606f\u66f4\u52a0\u654f\u611f\u3002\u5e38\u89c1\u503c\u662f 0.9\u3002</p> <p>Adam:RMSProp + Momentum</p> <p>Adam \u7ed3\u5408\u4e86 RMSprop \u548c\u52a8\u91cf\uff08Momentum\uff09\u7684\u4f18\u70b9\uff0c\u4e0d\u4ec5\u8003\u8651\u68af\u5ea6\u7684\u5747\u503c\uff0c\u8fd8\u8003\u8651\u68af\u5ea6\u7684\u65b9\u5dee\u3002Adam \u901a\u8fc7\u4e00\u9636\u77e9\u4f30\u8ba1\uff08\u52a8\u91cf\uff09\u548c\u4e8c\u9636\u77e9\u4f30\u8ba1\uff08\u68af\u5ea6\u5e73\u65b9\u7684\u6307\u6570\u79fb\u52a8\u5e73\u5747\uff09\u81ea\u9002\u5e94\u5730\u8c03\u6574\u5b66\u4e60\u7387\uff0c\u5728\u5904\u7406\u975e\u51f8\u4f18\u5316\u95ee\u9898\u548c\u566a\u58f0\u6570\u636e\u65f6\u975e\u5e38\u7a33\u5065\uff0c\u5e76\u4e14\u901a\u5e38\u4e0d\u9700\u8981\u8fc7\u591a\u7684\u8d85\u53c2\u6570\u8c03\u6574\u3002</p> <pre><code>moment1 = 0  # \u521d\u59cb\u5316\u4e00\u9636\u52a8\u91cf\nmoment2 = 0  # \u521d\u59cb\u5316\u4e8c\u9636\u52a8\u91cf\nfor t in range(num_steps):\n    dw = compute_gradient(w)  # \u8ba1\u7b97\u5f53\u524d\u53c2\u6570\u7684\u68af\u5ea6\n    moment1 = beta1 * moment1 + (1 - beta1) * dw  # \u66f4\u65b0\u4e00\u9636\u52a8\u91cf\uff08\u7c7b\u4f3c\u4e8e\u52a8\u91cf\uff09\n    moment2 = beta2 * moment2 + (1 - beta2) * dw * dw  # \u66f4\u65b0\u4e8c\u9636\u52a8\u91cf\uff08\u7c7b\u4f3c\u4e8eRMSprop\uff09\n    w -= learning_rate * moment1 / (moment2.sqrt() + 1e-7)  # \u4f7f\u7528\u81ea\u9002\u5e94\u5b66\u4e60\u7387\u66f4\u65b0\u53c2\u6570\n</code></pre> <ul> <li> <p>\u4e00\u9636\u52a8\u91cf (moment1)\uff1a <code>moment1</code> \u662f\u68af\u5ea6\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\uff0c\u7c7b\u4f3c\u4e8e\u52a8\u91cf\u4f18\u5316\u4e2d\u7684\u7d2f\u79ef\u68af\u5ea6\uff0c\u65e8\u5728\u5e73\u6ed1\u68af\u5ea6\u66f4\u65b0\u3002<code>beta1</code> \u63a7\u5236\u7740\u4e00\u9636\u52a8\u91cf\u7684\u8870\u51cf\u7387\uff0c\u901a\u5e38\u53d6\u503c\u4e3a 0.9\u3002</p> </li> <li> <p>\u4e8c\u9636\u52a8\u91cf (moment2)\uff1a <code>moment2</code> \u662f\u68af\u5ea6\u5e73\u65b9\u7684\u6307\u6570\u52a0\u6743\u79fb\u52a8\u5e73\u5747\uff0c\u7528\u4e8e\u8c03\u6574\u5b66\u4e60\u7387\u3002<code>beta2</code> \u63a7\u5236\u7740\u4e8c\u9636\u52a8\u91cf\u7684\u8870\u51cf\u7387\uff0c\u901a\u5e38\u53d6\u503c\u4e3a 0.999\u3002\u8fd9\u53ef\u4ee5\u770b\u4f5c\u662f RMSprop \u4e2d\u7684\u5747\u65b9\u6839\u79fb\u52a8\u5e73\u5747\u3002</p> </li> </ul> <p>\u5728 Adam \u4e2d\uff0c\u4e00\u822c\u8fd8\u9700\u8981\u5bf9\u4e00\u9636\u548c\u4e8c\u9636\u52a8\u91cf\u8fdb\u884c<code>\u504f\u5dee\u4fee\u6b63</code>\uff0c\u7279\u522b\u662f\u5728\u524d\u51e0\u6b21\u8fed\u4ee3\u65f6\u3002\u504f\u5dee\u4fee\u6b63\u53ef\u4ee5\u63d0\u9ad8\u7b97\u6cd5\u7684\u6536\u655b\u6027\u80fd\u3002</p> <pre><code>moment1 = 0\nmoment2 = 0\nfor t in range(1, num_steps + 1):\n    dw = compute_gradient(w)\n    moment1 = beta1 * moment1 + (1 - beta1) * dw\n    moment2 = beta2 * moment2 + (1 - beta2) * dw * dw\n\n    # \u504f\u5dee\u4fee\u6b63\n    m1_hat = moment1 / (1 - beta1**t)\n    m2_hat = moment2 / (1 - beta2**t)\n\n    w -= learning_rate * m1_hat / (m2_hat.sqrt() + 1e-7)\n</code></pre> <p>\u8fd9\u79cd\u504f\u5dee\u4fee\u6b63\u7684\u76ee\u7684\u662f\u51cf\u5c11\u521d\u59cb\u9636\u6bb5\u4f30\u8ba1\u503c\u7684\u504f\u5dee\uff0c\u5c24\u5176\u662f\u5728\u8fed\u4ee3\u6b21\u6570\u8f83\u5c11\u7684\u60c5\u51b5\u4e0b\u3002</p> <p></p>"},{"location":"CV/Lecture4_Optimization/#44-\u5c0f\u7ed3","title":"4.4 \u5c0f\u7ed3","text":"<p>\u4fe1\u606f\u6d41\u7684\u603b\u7ed3\u56fe\u4f8b\u3002\u6570\u636e\u96c6\u4e2d\u7684(x, y)\u662f\u7ed9\u5b9a\u7684\u3002\u6743\u91cd\u4ece\u4e00\u4e2a\u968f\u673a\u6570\u5b57\u5f00\u59cb\uff0c\u4e14\u53ef\u4ee5\u6539\u53d8\u3002\u5728\u524d\u5411\u4f20\u64ad\u65f6\uff0c\u8bc4\u5206\u51fd\u6570\u8ba1\u7b97\u51fa\u7c7b\u522b\u7684\u5206\u7c7b\u8bc4\u5206\u5e76\u5b58\u50a8\u5728\u5411\u91cf f \u4e2d\u3002\u635f\u5931\u51fd\u6570\u5305\u542b\u4e24\u4e2a\u90e8\u5206\uff1a\u6570\u636e\u635f\u5931\u548c\u6b63\u5219\u5316\u635f\u5931\u3002\u5176\u4e2d\uff0c\u6570\u636e\u635f\u5931\u8ba1\u7b97\u7684\u662f\u5206\u7c7b\u8bc4\u5206 f \u548c\u5b9e\u9645\u6807\u7b7e y \u4e4b\u95f4\u7684\u5dee\u5f02\uff0c\u6b63\u5219\u5316\u635f\u5931\u53ea\u662f\u4e00\u4e2a\u5173\u4e8e\u6743\u91cd\u7684\u51fd\u6570\u3002\u5728\u68af\u5ea6\u4e0b\u964d\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u8ba1\u7b97\u6743\u91cd\u7684\u68af\u5ea6\uff08\u5982\u679c\u613f\u610f\u7684\u8bdd\uff0c\u4e5f\u53ef\u4ee5\u8ba1\u7b97\u6570\u636e\u4e0a\u7684\u68af\u5ea6\uff09\uff0c\u7136\u540e\u4f7f\u7528\u5b83\u4eec\u6765\u5b9e\u73b0\u53c2\u6570\u7684\u66f4\u65b0\u3002</p> <p>\u5728\u672c\u8282\u8bfe\u4e2d\uff1a</p> <ul> <li>\u5c06\u635f\u5931\u51fd\u6570\u6bd4\u4f5c\u4e86\u4e00\u4e2a \u9ad8\u7ef4\u5ea6\u7684\u6700\u4f18\u5316\u5730\u5f62\uff0c\u5e76\u5c1d\u8bd5\u5230\u8fbe\u5b83\u7684\u6700\u5e95\u90e8\u3002\u6700\u4f18\u5316\u7684\u5de5\u4f5c\u8fc7\u7a0b\u53ef\u4ee5\u770b\u505a\u4e00\u4e2a\u8499\u7740\u773c\u775b\u7684\u5f92\u6b65\u8005\u5e0c\u671b\u6478\u7d22\u7740\u8d70\u5230\u5c71\u7684\u5e95\u90e8\u3002\u5728\u4f8b\u5b50\u4e2d\uff0c\u53ef\u89c1 SVM \u7684\u635f\u5931\u51fd\u6570\u662f\u5206\u6bb5\u7ebf\u6027\u7684\uff0c\u5e76\u4e14\u662f\u7897\u72b6\u7684\u3002</li> </ul> <p>\u901a\u8fc7\u8fed\u4ee3\u4f18\u5316\uff0c\u4ece\u968f\u673a\u521d\u59cb\u6743\u91cd\u51fa\u53d1\uff0c\u9010\u6b65\u964d\u4f4e\u635f\u5931\u503c\u3002</p> <ul> <li> <p>\u68af\u5ea6\u8868\u793a\u51fd\u6570\u5728\u5f53\u524d\u70b9\u6700\u9661\u5ced\u7684\u4e0a\u5347\u65b9\u5411\uff0c\u901a\u8fc7\u53cd\u5411\u64cd\u4f5c\u6765\u66f4\u65b0\u6743\u91cd\uff0c\u4f7f\u5f97\u635f\u5931\u6700\u5c0f\u5316\u3002\u4ecb\u7ecd\u4e86\u5229\u7528\u6709\u9650\u7684\u5dee\u503c\u6765\u8fd1\u4f3c\u8ba1\u7b97\u68af\u5ea6\u7684\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u5b9e\u73b0\u7b80\u5355\u4f46\u662f\u6548\u7387\u8f83\u4f4e\uff08\u6709\u9650\u5dee\u503c\u5c31\u662fh\uff0c\u7528\u6765\u8ba1\u7b97\u6570\u503c\u68af\u5ea6\uff09\u3002</p> </li> <li> <p>\u53c2\u6570\u66f4\u65b0\u9700\u8981\u6709\u6280\u5de7\u5730\u8bbe\u7f6e \u6b65\u957f\u3002\u4e5f\u53eb\u5b66\u4e60\u7387\u3002\u5982\u679c\u6b65\u957f\u592a\u5c0f\uff0c\u8fdb\u5ea6\u7a33\u5b9a\u4f46\u662f\u7f13\u6162\uff0c\u5982\u679c\u6b65\u957f\u592a\u5927\uff0c\u8fdb\u5ea6\u5feb\u4f46\u662f\u53ef\u80fd\u6709\u98ce\u9669\u3002</p> </li> <li> <p>\u8ba8\u8bba\u6743\u8861\u4e86\u6570\u503c\u68af\u5ea6\u6cd5\u548c\u5206\u6790\u68af\u5ea6\u6cd5\u3002\u6570\u503c\u68af\u5ea6\u6cd5\u8ba1\u7b97\u7b80\u5355\uff0c\u4f46\u7ed3\u679c\u53ea\u662f\u8fd1\u4f3c\u4e14\u8017\u8d39\u8ba1\u7b97\u8d44\u6e90\u3002\u5206\u6790\u68af\u5ea6\u6cd5\u8ba1\u7b97\u51c6\u786e\u8fc5\u901f\u4f46\u662f\u5b9e\u73b0\u5bb9\u6613\u51fa\u9519\uff0c\u800c\u4e14\u9700\u8981\u5bf9\u68af\u5ea6\u516c\u5f0f\u8fdb\u884c\u63a8\u5bfc\u7684\u6570\u5b66\u57fa\u672c\u529f\u3002\u56e0\u6b64\uff0c\u5728\u5b9e\u9645\u4e2d\u4f7f\u7528\u5206\u6790\u68af\u5ea6\u6cd5\uff0c\u7136\u540e\u4f7f\u7528 \u68af\u5ea6\u68c0\u67e5 \u6765\u68c0\u67e5\u5176\u5b9e\u73b0\u6b63\u786e\u4e0e\u5426\uff0c\u5176\u672c\u8d28\u5c31\u662f\u5c06\u5206\u6790\u68af\u5ea6\u6cd5\u7684\u7ed3\u679c\u4e0e\u6570\u503c\u68af\u5ea6\u6cd5\u7684\u8ba1\u7b97\u7ed3\u679c\u5bf9\u6bd4\u3002</p> </li> <li> <p>\u4ecb\u7ecd\u4e86 \u68af\u5ea6\u4e0b\u964d \u7b97\u6cd5\uff0c\u5b83\u5728\u5faa\u73af\u4e2d\u8fed\u4ee3\u5730\u8ba1\u7b97\u68af\u5ea6\u5e76\u66f4\u65b0\u53c2\u6570\u3002</p> </li> </ul> <p>\u9884\u544a\uff1a\u8fd9\u8282\u8bfe\u7684\u6838\u5fc3\u5185\u5bb9\u662f\uff1a\u7406\u89e3\u5e76\u80fd\u8ba1\u7b97\u635f\u5931\u51fd\u6570\u5173\u4e8e\u6743\u91cd\u7684\u68af\u5ea6\uff0c\u662f\u8bbe\u8ba1\u3001\u8bad\u7ec3\u548c\u7406\u89e3\u795e\u7ecf\u7f51\u7edc\u7684\u6838\u5fc3\u80fd\u529b\u3002\u4e0b\u8282\u4e2d\uff0c\u5c06\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528\u94fe\u5f0f\u6cd5\u5219\u6765\u9ad8\u6548\u5730\u8ba1\u7b97\u68af\u5ea6\uff0c\u4e5f\u5c31\u662f\u901a\u5e38\u6240\u8bf4\u7684 \u53cd\u5411\u4f20\u64ad\uff08 backpropagation\uff09\u673a\u5236\u3002\u8be5\u673a\u5236\u80fd\u591f\u5bf9\u5305\u542b\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u5728\u5185\u7684\u51e0\u4e4e\u6240\u6709\u7c7b\u578b\u7684\u795e\u7ecf\u7f51\u7edc\u7684\u635f\u5931\u51fd\u6570\u8fdb\u884c\u9ad8\u6548\u7684\u6700\u4f18\u5316\u3002</p>"},{"location":"CV/Lecture5_Neural_Networks/","title":"Neural Network","text":"<p> \u7ea6 8537 \u4e2a\u5b57  22 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 43 \u5206\u949f</p>"},{"location":"CV/Lecture5_Neural_Networks/#feature-transforms","title":"feature transforms","text":"<ul> <li> <p>\u4ece Geometric \u51e0\u4f55\u89c6\u89d2\u5206\u6790\uff1a\u7ebf\u6027\u5206\u7c7b\u5668\u662f\u5728\u753b\u9ad8\u7ef4\u8d85\u5e73\u9762\uff0c\u5c06\u8fd9\u4e2a\u9ad8\u7ef4\u7684\u6b27\u51e0\u91cc\u5f97\u7a7a\u95f4\u5206\u5272\u6210\u4e24\u5757</p> </li> <li> <p>\u4ece\u89c6\u89c9\u89d2\u5ea6 Vision Viewpoint \u5206\u6790\uff0c\u6211\u4eec\u8ba4\u4e3a\u7ebf\u6027\u5206\u7c7b\u5668\u53ea\u4e3a\u6bcf\u4e2a\u7c7b\u522b\u5b66\u4e60\u4e00\u4e2a\u6a21\u677f\uff0c<code>\u56e0\u6b64\u5b83\u4eec\u65e0\u6cd5\u4ee3\u8868\u540c\u4e00\u5bf9\u8c61\u7c7b\u522b\u7684\u591a\u79cd\u6a21\u5f0f\u3002</code></p> </li> </ul> <p>\u6a21\u677f\u662f\u4e00\u79cd\u7528\u4e8e\u8868\u793a\u76ee\u6807\u5bf9\u8c61\u7279\u5f81\u7684\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u4ee5\u91c7\u7528\u591a\u79cd\u5f62\u5f0f\u3002\u5728\u6a21\u677f\u5339\u914d\u548c\u6a21\u677f\u5b66\u4e60\u4efb\u52a1\u4e2d\uff0c\u6a21\u677f\u88ab\u7528\u6765\u5728\u8f93\u5165\u6570\u636e\u4e2d\u641c\u7d22\u548c\u8bc6\u522b\u76ee\u6807\u5bf9\u8c61</p> <p></p> <p>linear classifier \u7684\u5c40\u9650\u6027\uff1a\u53ea\u80fd\u5904\u7406\u7ebf\u6027\u53ef\u5206\u7684\u6570\u636e\uff1a</p> <ul> <li>\u7ebf\u6027\u5206\u7c7b\u5668\u53ea\u80fd\u901a\u8fc7\u4e00\u6761\u76f4\u7ebf\uff08\u6216\u9ad8\u7ef4\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u8d85\u5e73\u9762\uff09\u5c06\u6570\u636e\u5206\u5272\u5f00\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u7ebf\u6027\u4e0d\u53ef\u5206\u7684\u6570\u636e\uff08\u5373\u4e0d\u80fd\u7528\u4e00\u6761\u76f4\u7ebf\u6216\u4e00\u4e2a\u8d85\u5e73\u9762\u5206\u9694\u7684\u7c7b\uff09\uff0c\u5b83\u4eec\u7684\u8868\u73b0\u5f80\u5f80\u8f83\u5dee\u3002 \u6bd4\u5982\uff0cXOR \u95ee\u9898\u4e2d\uff0c\u4e24\u4e2a\u7c7b\u7684\u6570\u636e\u70b9\u65e0\u6cd5\u7528\u4e00\u6761\u76f4\u7ebf\u5206\u5f00\uff0c\u7ebf\u6027\u5206\u7c7b\u5668\u5bf9\u6b64\u65e0\u80fd\u4e3a\u529b\u3002</li> </ul> <p>\u89e3\u51b3\u65b9\u6cd5\uff1a</p> <ul> <li>\u5bf9\u4e8e\u67d0\u4e9b\u7ebf\u6027\u4e0d\u53ef\u5206\u7684\u6570\u636e\u96c6\uff0c\u6211\u4eec\u53ef\u4ee5\u63d0\u51fa\u4e00\u79cd <code>\u7279\u5f81\u53d8\u6362</code> \u7684\u65b9\u5f0f <code>\uff08feature transform\uff09</code>\uff0c\u5c06\u8fd9\u4e9b\u6570\u636e\u6620\u5c04\u5230\u7279\u5f81\u7a7a\u95f4\u53bb\u8fdb\u884c\u5206\u7c7b\uff0c\u6216\u8005\u8bf4\u627e\u5230\u4e00\u79cd\u5408\u9002\u5206\u7c7b\u7684\u6620\u5c04\u65b9\u5f0f\u6765\u5b8c\u6210\u5206\u7c7b\u4efb\u52a1\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u514b\u670d\u7ebf\u6027\u5206\u7c7b\u5668\u7684\u4e00\u4e9b\u7f3a\u70b9\uff1b\u5728\u8fd9\u91cc\u6211\u4eec\u662f\u5728\u7279\u5f81\u7a7a\u95f4\u4e2d\u8bad\u7ec3\u5206\u7c7b\u5668</li> </ul> <p></p> <p>\u8fd9\u5c31\u662f\u4e00\u4e2a \u5c06\u7b1b\u5361\u5c14\u5750\u6807\u7cfb\u53d8\u6362\u5230\u6781\u5750\u6807\u7cfb(polar coordinate)\u4e0b\u7684\u4f8b\u5b50\uff0c\u539f\u672c\u5728\u7b1b\u5361\u5c14\u5750\u6807\u7cfb\u4e0b\u7ebf\u6027\u4e0d\u53ef\u5206\u7684\u6570\u636e\u96c6\uff0c\u5728\u6781\u5750\u6807\u7cfb\u4e0b\u7ebf\u6027\u53ef\u5206\u4e86\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53ef\u4ee5\u5728\u7279\u5f81\u7a7a\u95f4\u4e0b\u6784\u5efa\u7ebf\u6027\u5206\u7c7b\u5668</p> <p>\u7279\u5f81\u53d8\u6362\u7684 \u6838\u5fc3\u601d\u60f3 \u662f\u5c06\u539f\u59cb\u8f93\u5165\u7279\u5f81\u6620\u5c04\u5230\u4e00\u4e2a \u66f4\u9ad8\u7ef4\u5ea6\u7684\u7279\u5f81\u7a7a\u95f4\uff0c\u4f7f\u5f97\u5728\u8be5\u7a7a\u95f4\u4e2d\uff0c\u539f\u672c\u7ebf\u6027\u4e0d\u53ef\u5206\u7684\u6570\u636e\u53d8\u5f97\u7ebf\u6027\u53ef\u5206\u3002\u901a\u8fc7\u7279\u5f81\u53d8\u6362\uff0c\u7ebf\u6027\u5206\u7c7b\u5668\u5728\u65b0\u7279\u5f81\u7a7a\u95f4\u4e2d\u5c31\u53ef\u4ee5\u4f7f\u7528 \u7ebf\u6027\u51b3\u7b56\u8fb9\u754c \u6765\u5206\u5272\u6570\u636e\uff0c\u4ece\u800c\u514b\u670d\u7ebf\u6027\u4e0d\u53ef\u5206\u7684\u95ee\u9898\u3002</p> <p>\u4f60\u63d0\u51fa\u7684\u89e3\u51b3\u65b9\u6cd5\u975e\u5e38\u5173\u952e\u3002\u7279\u5f81\u53d8\u6362\uff08Feature Transform\uff09\u786e\u5b9e\u662f\u89e3\u51b3\u7ebf\u6027\u5206\u7c7b\u5668\u5c40\u9650\u6027\u7684\u4e00\u79cd\u6709\u6548\u65b9\u6cd5\u3002\u4ee5\u4e0b\u662f\u5bf9\u8fd9\u4e00\u65b9\u6cd5\u7684\u8be6\u7ec6\u89e3\u91ca\u548c\u6269\u5c55\uff1a</p> <p>\u7279\u5f81\u53d8\u6362\uff08Feature Transform\uff09</p> <p>\u7279\u5f81\u53d8\u6362\u7684\u6838\u5fc3\u601d\u60f3\u662f\u5c06\u539f\u59cb\u8f93\u5165\u7279\u5f81\u6620\u5c04\u5230\u4e00\u4e2a\u66f4\u9ad8\u7ef4\u5ea6\u7684\u7279\u5f81\u7a7a\u95f4\uff0c\u4f7f\u5f97\u5728\u8be5\u7a7a\u95f4\u4e2d\uff0c\u539f\u672c\u7ebf\u6027\u4e0d\u53ef\u5206\u7684\u6570\u636e\u53d8\u5f97\u7ebf\u6027\u53ef\u5206\u3002\u901a\u8fc7\u7279\u5f81\u53d8\u6362\uff0c\u7ebf\u6027\u5206\u7c7b\u5668\u5728\u65b0\u7279\u5f81\u7a7a\u95f4\u4e2d\u5c31\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6027\u51b3\u7b56\u8fb9\u754c\u6765\u5206\u5272\u6570\u636e\uff0c\u4ece\u800c\u514b\u670d\u7ebf\u6027\u4e0d\u53ef\u5206\u7684\u95ee\u9898\u3002</p> <ol> <li> <p>\u8bbe\u8ba1\u7279\u5f81\u6620\u5c04\u51fd\u6570\uff1a</p> </li> <li> <p>\u9009\u62e9\u6216\u8bbe\u8ba1\u4e00\u4e2a\u7279\u5f81\u6620\u5c04\u51fd\u6570 \\(\\phi(x)\\)\uff0c\u5c06\u539f\u59cb\u8f93\u5165\u7279\u5f81 \\(\\textbf{x}\\) \u6620\u5c04\u5230\u4e00\u4e2a\u9ad8\u7ef4\u7a7a\u95f4 \\(\\mathbf{z} = \\phi(\\mathbf{x})\\)\u3002\u4f8b\u5982\uff1a</p> <ul> <li>\u5bf9\u4e8e\u4e8c\u6b21\u7279\u5f81\u53d8\u6362\uff0c$\\phi(\\mathbf{x}) $ \u53ef\u4ee5\u5c06\u8f93\u5165 \\(\\mathbf{x} = [x_1, x_2]\\) \u6620\u5c04\u4e3a \\(\\mathbf{z} = [x_1, x_2, x_1^2, x_2^2, x_1x_2]\\)\u3002</li> </ul> </li> <li> <p>\u5728\u7279\u5f81\u7a7a\u95f4\u4e2d\u8bad\u7ec3\u7ebf\u6027\u5206\u7c7b\u5668\uff1a</p> </li> <li> <p>\u5728\u65b0\u7684\u7279\u5f81\u7a7a\u95f4\u4e2d\u8bad\u7ec3\u7ebf\u6027\u5206\u7c7b\u5668\uff0c\u5982\u7ebf\u6027\u652f\u6301\u5411\u91cf\u673a\u3001\u7ebf\u6027\u56de\u5f52\u5206\u7c7b\u5668\u7b49\u3002\u7531\u4e8e\u6570\u636e\u5728\u9ad8\u7ef4\u7a7a\u95f4\u4e2d\u53ef\u80fd\u53d8\u5f97\u7ebf\u6027\u53ef\u5206\uff0c\u7ebf\u6027\u5206\u7c7b\u5668\u53ef\u4ee5\u5728\u6b64\u7a7a\u95f4\u4e2d\u627e\u5230\u5408\u9002\u7684\u51b3\u7b56\u8fb9\u754c\u3002</p> </li> <li> <p>\u6838\u65b9\u6cd5\u7684\u5e94\u7528\uff1a</p> </li> <li>\u4e3a\u4e86\u907f\u514d\u663e\u5f0f\u8ba1\u7b97\u9ad8\u7ef4\u7279\u5f81\uff0c\u6838\u65b9\u6cd5\u901a\u8fc7\u8ba1\u7b97\u539f\u59cb\u7279\u5f81\u7a7a\u95f4\u4e2d\u7684\u70b9\u79ef\u76f4\u63a5\u5f97\u5230\u7279\u5f81\u7a7a\u95f4\u4e2d\u7684\u70b9\u79ef\uff0c\u4ece\u800c\u5927\u5e45\u63d0\u9ad8\u8ba1\u7b97\u6548\u7387\u3002\u4f8b\u5982\uff0c\u652f\u6301\u5411\u91cf\u673a\uff08SVM\uff09\u4e2d\u4f7f\u7528\u7684\u9ad8\u65af\u6838\uff08RBF \u6838\uff09\u548c\u591a\u9879\u5f0f\u6838\u7b49\uff0c\u5c31\u662f\u8fd9\u79cd\u601d\u60f3\u7684\u5177\u4f53\u5b9e\u73b0\u3002</li> </ol>"},{"location":"CV/Lecture5_Neural_Networks/#color-histogram--histogram-of-oriented-gradients","title":"Color Histogram &amp; Histogram of Oriented Gradients","text":"<p>\u5b9a\u5411\u68af\u5ea6\u76f4\u65b9\u56fe\uff08Histogram of Oriented Gradients, HOG\uff09\u548c\u989c\u8272\u76f4\u65b9\u56fe(Color Histogram)\u662f\u4e24\u79cd\u5e38\u7528\u7684\u56fe\u50cf\u7279\u5f81\u63d0\u53d6\u65b9\u6cd5\uff0c\u5b83\u4eec\u5728\u56fe\u50cf\u5904\u7406\u4e2d\u5177\u6709\u4e0d\u540c\u7684\u4f18\u52bf\u3002</p> <p></p> <p>\u989c\u8272\u76f4\u65b9\u56fe\u901a\u8fc7\u5c06\u56fe\u50cf\u4e2d\u7684\u989c\u8272\u7a7a\u95f4\u7684 RGB \u5149 \u8c31\u8fdb\u884c\u5206\u89e3\u4e0e\u7edf\u8ba1\uff0c\u7edf\u8ba1\u56fe\u50cf\u4e2d \u6bcf\u79cd\u989c\u8272\u51fa\u73b0\u7684\u9891\u7387\u6765\u63cf\u8ff0\u56fe\u50cf\u7684\u989c\u8272\u5206\u5e03\uff0c\u8fd9\u79cd\u65b9\u5f0f\u4e22\u5f03\u4e86\u56fe\u50cf\u4e2d\u7684\u7a7a\u95f4\u4fe1\u606f\uff0c\u53ea\u5173\u5fc3\u56fe\u50cf\u4e2d\u7684\u989c\u8272\u5206\u5e03\uff0c\u66f4\u5177\u6709 \u7a7a\u95f4\u4e0d\u53d8\u6027\uff0c\u901a\u5e38\u7528\u4e8e\u56fe\u50cf\u68c0\u7d22\u548c\u5206\u7c7b\u3002<code>\u989c\u8272\u76f4\u65b9\u56fe\u7684\u4f18\u70b9\u5728\u4e8e\u5b83\u5bf9\u56fe\u50cf\u7684\u65cb\u8f6c\u3001\u5e73\u79fb\u548c\u5c3a\u5ea6\u53d8\u5316\u5177\u6709\u9c81\u68d2\u6027\uff0c\u56e0\u4e3a\u5b83\u4e0d\u4f9d\u8d56\u4e8e\u56fe\u50cf\u4e2d\u7684\u7a7a\u95f4\u5e03\u5c40\u3002</code></p> <p></p> <p>HOG \u7279\u5f81\u901a\u8fc7\u7edf\u8ba1\u56fe\u50cf\u5c40\u90e8\u533a\u57df\u5185\u7684\u68af\u5ea6\u65b9\u5411\u5206\u5e03\u6765\u63cf\u8ff0\u56fe\u50cf\u7684\u5f62\u72b6\u548c\u7eb9\u7406\u4fe1\u606f\uff0c\u7279\u522b\u9002\u5408\u6355\u6349\u7269\u4f53\u7684\u8fb9\u7f18\u548c\u8f6e\u5ed3\u3002\u4e0e\u989c\u8272\u76f4\u65b9\u56fe\u76f8\u53cd\uff0c\u629b\u5f03\u989c\u8272\u4fe1\u606f\uff0c\u4fdd\u7559\u7a7a\u95f4\u4fe1\u606f\u3002</p> <p>\u5f62\u72b6\u4e0e\u8fb9\u7f18\u68c0\u6d4b\uff1aHOG \u7279\u522b\u64c5\u957f\u6355\u6349\u7269\u4f53\u7684\u5f62\u72b6\u548c\u8f6e\u5ed3\u4fe1\u606f\uff0c\u5bf9\u5149\u7167\u548c\u5c40\u90e8\u5bf9\u6bd4\u5ea6\u5177\u6709\u8f83\u597d\u7684\u9c81\u68d2\u6027\u3002</p> <p>\u65b9\u5411\u4e0d\u53d8\u6027\uff1a\u7531\u4e8e\u68af\u5ea6\u65b9\u5411\u7684\u7edf\u8ba1\uff0cHOG \u5728\u6355\u6349\u76f8\u540c\u5f62\u72b6\u4f46\u65b9\u5411\u4e0d\u540c\u7684\u7269\u4f53\u65f6\u8868\u73b0\u826f\u597d\u3002</p>"},{"location":"CV/Lecture5_Neural_Networks/#bag-of-words-data-driven","title":"Bag-of-Words Data-Driven","text":"<p>\u89c6\u89c9\u8bcd\u888b\u6a21\u578b\uff08Visual Bag-of-Words, BoW\uff09\u662f\u4e00\u79cd\u7ecf\u5178\u7684\u56fe\u50cf\u7279\u5f81\u8868\u793a\u65b9\u6cd5\uff0c\u5b83\u5c06\u539f\u672c\u7528\u4e8e\u6587\u672c\u5904\u7406\u7684\u8bcd\u888b\u6a21\u578b\uff08Bag-of-Words, BoW\uff09\u601d\u60f3\u5f15\u5165\u5230\u8ba1\u7b97\u673a\u89c6\u89c9\u4e2d\u3002\u901a\u8fc7\u5c06\u56fe\u50cf\u63cf\u8ff0\u4e3a\u4e00\u7ec4\u201c\u89c6\u89c9\u8bcd\u201d\u7684\u51fa\u73b0\u9891\u7387\uff0c\u8fd9\u79cd\u65b9\u6cd5\u80fd\u591f\u6709\u6548\u5730\u6355\u6349\u56fe\u50cf\u7684\u5c40\u90e8\u7279\u5f81\uff0c\u5e76\u5728\u5206\u7c7b\u548c\u68c0\u7d22\u4efb\u52a1\u4e2d\u8868\u73b0\u826f\u597d\u3002</p> <p>\u968f\u673a\u8865\u4e01\u63d0\u53d6\uff1a</p> <ul> <li>\u4ece\u8bad\u7ec3\u56fe\u50cf\u4e2d\u63d0\u53d6\u5927\u91cf\u4e0d\u540c\u6bd4\u4f8b\u548c\u5927\u5c0f\u7684\u968f\u673a\u8865\u4e01\uff08patches\uff09\uff0c\u8fd9\u4e9b\u8865\u4e01\u53ef\u4ee5\u5305\u542b\u4e0d\u540c\u7684\u7eb9\u7406\u3001\u8fb9\u7f18\u548c\u989c\u8272\u4fe1\u606f\u3002</li> </ul> <p>\u7279\u5f81\u63cf\u8ff0\u4e0e\u805a\u7c7b\uff1a</p> <ul> <li>\u5bf9\u6bcf\u4e2a\u8865\u4e01\u8fdb\u884c\u7279\u5f81\u63cf\u8ff0\uff0c\u5982\u4f7f\u7528 SIFT\uff08Scale-Invariant Feature Transform\uff09\u6216 SURF\uff08Speeded-Up Robust Features\uff09\u7b49\u65b9\u6cd5\uff0c\u63d0\u53d6\u5173\u952e\u70b9\u7684\u5c40\u90e8\u7279\u5f81\u5411\u91cf\u3002</li> <li>\u5bf9\u8fd9\u4e9b\u7279\u5f81\u5411\u91cf\u8fdb\u884c\u805a\u7c7b\u5206\u6790\uff08\u901a\u5e38\u4f7f\u7528 K-means \u805a\u7c7b\uff09\uff0c\u5c06\u5176\u5f52\u4e3a KKK \u4e2a\u7c07\u3002\u6bcf\u4e2a\u7c07\u7684\u4e2d\u5fc3\u5c31\u4ee3\u8868\u4e00\u4e2a\u201c\u89c6\u89c9\u8bcd\u201d\u3002</li> </ul> <p>\u6784\u5efa\u89c6\u89c9\u8bcd\u4ee3\u7801\u672c\uff1a</p> <ul> <li>\u901a\u8fc7\u805a\u7c7b\u5f97\u5230\u7684 K \u4e2a \u89c6\u89c9\u8bcd Visual Word \u5f62\u6210\u4e86\u6240\u8c13\u7684\u201c\u4ee3\u7801\u672c\u201d\uff08codebook\uff09\uff0c\u4e5f\u88ab\u79f0\u4e3a\u201c\u89c6\u89c9\u8bcd\u5178\u201d\uff08visual vocabulary\uff09\u3002\u8fd9\u4e2a\u4ee3\u7801\u672c\u7c7b\u4f3c\u4e8e\u6587\u672c\u4e2d\u7684\u8bcd\u6c47\u8868\uff0c\u7528\u6765\u63cf\u8ff0\u8bad\u7ec3\u96c6\u4e2d\u5e38\u89c1\u7684\u89c6\u89c9\u7279\u5f81\u3002</li> </ul> <p>\u56fe\u50cf\u7f16\u7801\uff1a</p> <ul> <li>\u5bf9\u4e8e\u6bcf\u4e2a\u65b0\u56fe\u50cf\uff0c\u7528\u4ee3\u7801\u672c\u4e2d\u7684\u89c6\u89c9\u8bcd\u5bf9\u5176\u8fdb\u884c\u7f16\u7801\u3002\u5177\u4f53\u505a\u6cd5\u662f\uff0c\u5c06\u56fe\u50cf\u4e2d\u7684\u5c40\u90e8\u7279\u5f81\u6620\u5c04\u5230\u6700\u8fd1\u7684\u89c6\u89c9\u8bcd\uff0c\u5e76\u7edf\u8ba1\u6bcf\u4e2a\u89c6\u89c9\u8bcd\u5728\u56fe\u50cf\u4e2d\u51fa\u73b0\u7684\u9891\u7387\uff0c\u5f62\u6210\u4e00\u4e2a\u89c6\u89c9\u8bcd\u76f4\u65b9\u56fe\u3002</li> </ul> <p>\u5206\u7c7b\u4e0e\u68c0\u7d22\uff1a</p> <ul> <li>\u751f\u6210\u7684\u89c6\u89c9\u8bcd\u76f4\u65b9\u56fe\u5411\u91cf\u4f5c\u4e3a\u56fe\u50cf\u7684\u7279\u5f81\u8868\u793a\uff0c\u63a5\u4e0b\u6765\u53ef\u4ee5\u8f93\u5165\u5230\u5206\u7c7b\u5668\uff08\u5982\u652f\u6301\u5411\u91cf\u673a SVM\uff09\u4e2d\u8fdb\u884c\u8bad\u7ec3\u548c\u5206\u7c7b\uff0c\u6216\u7528\u4e8e\u56fe\u50cf\u68c0\u7d22\u3002</li> </ul> <p></p> <p>\u9c81\u68d2\u6027\uff1a\u89c6\u89c9\u8bcd\u888b\u6a21\u578b\u5bf9\u56fe\u50cf\u7684\u65cb\u8f6c\u3001\u7f29\u653e\u3001\u5149\u7167\u53d8\u5316\u5177\u6709\u8f83\u597d\u7684\u9c81\u68d2\u6027\uff0c\u56e0\u4e3a\u5b83\u4f9d\u8d56\u4e8e\u5c40\u90e8\u7279\u5f81\u800c\u975e\u6574\u4f53\u56fe\u50cf\u3002</p> <p>\u53ef\u6269\u5c55\u6027\uff1a\u4ee3\u7801\u672c\u7684\u5927\u5c0f K \u53ef\u4ee5\u8c03\u8282\uff0c\u9002\u5e94\u4e0d\u540c\u89c4\u6a21\u7684\u6570\u636e\u96c6\u548c\u5e94\u7528\u573a\u666f\u3002</p> <p>\u53ef\u7ec4\u5408\u6027\uff1a\u89c6\u89c9\u8bcd\u888b\u6a21\u578b\u53ef\u4ee5\u4e0e\u5176\u4ed6\u7279\u5f81\u63d0\u53d6\u5668\u548c\u5206\u7c7b\u5668\u7ec4\u5408\uff0c\u63d0\u5347\u5206\u7c7b\u6027\u80fd\u3002</p> <p></p> <p><code>\u5728\u5de6\u4fa7\u63a5\u6536\u56fe\u50cf\u7684\u539f\u59cb\u50cf\u7d20\uff0c\u53f3\u4fa7\u8fdb\u884cpredict\u5206\u7c7b\u7684\u5206\u6570\u6216\u8005\u6982\u7387\uff0c\u5728\u8bad\u7ec3\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5e76\u4e0d\u4ec5\u4ec5\u8c03\u6574\u6700\u540e\u4e00\u5c42\u7684\u53c2\u6570\uff0c\u800c\u662f\u6574\u4e2a\u7cfb\u7edf\u7684\u53c2\u6570\uff0cmaximize the performance of classification</code></p> <ul> <li>feature extractor \u7279\u5f81\u63d0\u53d6\u5668</li> </ul> <p>\u7279\u5f81\u63d0\u53d6\u5668\u7684\u4f5c\u7528\u662f\u4ece\u539f\u59cb\u56fe\u50cf\u6570\u636e\u4e2d\u63d0\u53d6\u51fa\u80fd\u591f\u8868\u5f81\u56fe\u50cf\u5185\u5bb9\u7684\u5173\u952e\u7279\u5f81\u3002\u8fd9\u4e9b\u7279\u5f81\u901a\u5e38\u662f\u9ad8\u7ef4\u7684\u3001\u7ecf\u8fc7\u5904\u7406\u7684\u5411\u91cf\uff0c\u5b83\u4eec\u643a\u5e26\u4e86\u56fe\u50cf\u7684\u91cd\u8981\u4fe1\u606f\uff0c\u540c\u65f6\u4e22\u5f03\u4e86\u4e0d\u5fc5\u8981\u7684\u7ec6\u8282\u548c\u566a\u58f0\u3002\u7279\u5f81\u63d0\u53d6\u5668\u7684\u6548\u679c\u76f4\u63a5\u5f71\u54cd\u540e\u7eed\u6a21\u578b\u7684\u5206\u7c7b\u6216\u8bc6\u522b\u6027\u80fd\u3002</p> <p>\u624b\u5de5\u8bbe\u8ba1\u7684\u7279\u5f81\uff1a</p> <ul> <li>SIFT\uff08Scale-Invariant Feature Transform\uff09\uff1a\u63d0\u53d6\u5c3a\u5ea6\u4e0d\u53d8\u7684\u5173\u952e\u70b9\uff0c\u9002\u7528\u4e8e\u5404\u79cd\u5c3a\u5ea6\u548c\u65cb\u8f6c\u7684\u56fe\u50cf\u3002</li> <li>HOG\uff08Histogram of Oriented Gradients\uff09\uff1a\u57fa\u4e8e\u68af\u5ea6\u65b9\u5411\u5206\u5e03\uff0c\u6355\u6349\u7269\u4f53\u7684\u8fb9\u7f18\u548c\u5f62\u72b6\u3002</li> <li>\u989c\u8272\u76f4\u65b9\u56fe\uff1a\u63cf\u8ff0\u56fe\u50cf\u4e2d\u7684\u989c\u8272\u5206\u5e03\uff0c\u5e38\u7528\u4e8e\u56fe\u50cf\u68c0\u7d22\u3002</li> </ul> <p>\u6570\u636e\u9a71\u52a8\u7684\u7279\u5f81\uff1a</p> <ul> <li>\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff08CNN\uff09\uff1a\u901a\u8fc7\u591a\u5c42\u5377\u79ef\u5c42\u81ea\u52a8\u5b66\u4e60\u56fe\u50cf\u7684\u9ad8\u5c42\u6b21\u7279\u5f81\uff0c\u662f\u5f53\u524d\u6700\u6d41\u884c\u7684\u7279\u5f81\u63d0\u53d6\u65b9\u6cd5\u3002</li> <li>\u89c6\u89c9\u8bcd\u888b\u6a21\u578b\uff08BoW\uff09\uff1a\u5c06\u5c40\u90e8\u7279\u5f81\u805a\u7c7b\u6210\u89c6\u89c9\u8bcd\u5178\uff0c\u7528\u89c6\u89c9\u8bcd\u7684\u76f4\u65b9\u56fe\u8868\u793a\u56fe\u50cf\u3002</li> </ul> <ul> <li>learnable model \u53ef\u5b66\u4e60\u6a21\u578b</li> </ul> <p>\u53ef\u5b66\u4e60\u6a21\u578b\u662f\u6307\u901a\u8fc7\u6570\u636e\u9a71\u52a8\u7684\u65b9\u5f0f\u8c03\u6574\u5176\u5185\u90e8\u53c2\u6570\uff0c\u4ee5\u4f18\u5316\u76ee\u6807\u51fd\u6570\u7684\u6a21\u578b\u3002\u53ef\u5b66\u4e60\u6a21\u578b\u7684\u8f93\u5165\u901a\u5e38\u662f\u7279\u5f81\u63d0\u53d6\u5668\u751f\u6210\u7684\u7279\u5f81\u5411\u91cf\uff0c\u8f93\u51fa\u5219\u662f\u9884\u6d4b\u7ed3\u679c\uff0c\u5982\u56fe\u50cf\u5206\u7c7b\u3001\u7269\u4f53\u68c0\u6d4b\u6216\u56fe\u50cf\u5206\u5272\u7b49\u4efb\u52a1\u7684\u7ed3\u679c\u3002</p> <ul> <li> <p>\u652f\u6301\u5411\u91cf\u673a\uff08SVM\uff09\uff1a\u7ebf\u6027\u6216\u975e\u7ebf\u6027\u6a21\u578b\uff0c\u7528\u4e8e\u4e8c\u5206\u7c7b\u6216\u591a\u5206\u7c7b\u4efb\u52a1\uff0c\u64c5\u957f\u5904\u7406\u9ad8\u7ef4\u6570\u636e\u3002</p> </li> <li> <p>k-\u8fd1\u90bb\uff08k-NN\uff09\uff1a\u57fa\u4e8e\u8ddd\u79bb\u5ea6\u91cf\u7684\u65b9\u6cd5\uff0c\u9002\u7528\u4e8e\u7b80\u5355\u5206\u7c7b\u4efb\u52a1\u3002</p> </li> <li> <p>\u795e\u7ecf\u7f51\u7edc\uff1a</p> </li> <li> <p>\u591a\u5c42\u611f\u77e5\u5668\uff08MLP\uff09\uff1a\u4f20\u7edf\u7684\u5168\u8fde\u63a5\u795e\u7ecf\u7f51\u7edc\uff0c\u9002\u5408\u5904\u7406\u7ecf\u8fc7\u7279\u5f81\u63d0\u53d6\u7684\u4f4e\u7ef4\u6570\u636e\u3002</p> </li> <li> <p>\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff08CNN\uff09\uff1a\u7528\u4e8e\u76f4\u63a5\u5904\u7406\u56fe\u50cf\u6570\u636e\uff0c\u7ed3\u5408\u7279\u5f81\u63d0\u53d6\u4e0e\u5206\u7c7b\u529f\u80fd\u3002</p> </li> </ul>"},{"location":"CV/Lecture5_Neural_Networks/#\u795e\u7ecf\u7f51\u7edc\u6982\u8ff0","title":"\u795e\u7ecf\u7f51\u7edc\u6982\u8ff0","text":"<p>\u795e\u7ecf\u7f51\u7edc\u662f\u4e00\u79cd\u80fd\u591f\u5b66\u4e60\u590d\u6742\u6620\u5c04\u5173\u7cfb\u7684\u7b97\u6cd5\uff0c\u901a\u8fc7\u591a\u5c42\u975e\u7ebf\u6027\u53d8\u6362\uff0c\u5c06\u8f93\u5165\u6570\u636e\u6620\u5c04\u5230\u8f93\u51fa\u7c7b\u522b\u3002\u4e0e\u7ebf\u6027\u5206\u7c7b\u5668\u76f8\u6bd4\uff0c\u795e\u7ecf\u7f51\u7edc\u5f15\u5165\u4e86\u6fc0\u6d3b\u51fd\u6570\uff0c\u4f7f\u5f97\u6a21\u578b\u80fd\u591f\u62df\u5408\u66f4\u52a0\u590d\u6742\u7684\u975e\u7ebf\u6027\u6570\u636e\u3002</p> <p>\u5728\u7ebf\u6027\u5206\u7c7b\u4e00\u8282\u4e2d\uff0c\u5728\u7ed9\u51fa\u56fe\u50cf\u7684\u60c5\u51b5\u4e0b\uff0c\u662f\u4f7f\u7528 \\(f = Wx\\) \u6765\u8ba1\u7b97\u4e0d\u540c\u89c6\u89c9\u7c7b\u522b\u7684\u8bc4\u5206\uff0c\u5176\u4e2d \\(W\\) \u662f\u4e00\u4e2a\u77e9\u9635\uff0c\\(x\\) \u662f\u4e00\u4e2a\u8f93\u5165\u5217\u5411\u91cf\uff0c\u5b83\u5305\u542b\u4e86\u56fe\u50cf\u7684\u5168\u90e8\u50cf\u7d20\u6570\u636e\u3002\u5728\u4f7f\u7528\u6570\u636e\u5e93 CIFAR-10 \u7684\u6848\u4f8b\u4e2d\uff0c\\(x\\) \u662f\u4e00\u4e2a [\\(3072 \\times 1\\)] \u7684\u5217\u5411\u91cf\uff0c\\(W\\) \u662f\u4e00\u4e2a [\\(10\\times 3072\\)] \u7684\u77e9\u9635\uff0c\u6240\u4ee5\u8f93\u51fa\u7684\u8bc4\u5206\u662f\u4e00\u4e2a\u5305\u542b 10 \u4e2a\u5206\u7c7b\u8bc4\u5206\u7684\u5411\u91cf\u3002</p>"},{"location":"CV/Lecture5_Neural_Networks/#\u4e24\u5c42\u795e\u7ecf\u7f51\u7edc\u7684\u7ed3\u6784\u4e0e\u8ba1\u7b97","title":"\u4e24\u5c42\u795e\u7ecf\u7f51\u7edc\u7684\u7ed3\u6784\u4e0e\u8ba1\u7b97","text":"<p>\u795e\u7ecf\u7f51\u7edc\u4e0e\u7ebf\u6027\u5206\u7c7b\u5668\u7684\u4e3b\u8981\u533a\u522b\u5728\u4e8e\u5b83\u5f15\u5165\u4e86 \u9690\u85cf\u5c42\u548c\u975e\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\u3002\u8fd9 <code>\u4e2a\u975e\u7ebf\u6027\u90e8\u5206\u6253\u7834\u4e86\u7ebf\u6027\u6a21\u578b\u7684\u5c40\u9650\uff0c\u4f7f\u5f97\u7f51\u7edc\u53ef\u4ee5\u5904\u7406\u590d\u6742\u7684\u975e\u7ebf\u6027\u95ee\u9898\u3002</code></p> <p>\u795e\u7ecf\u7f51\u7edc\u7684\u8ba1\u7b97\u516c\u5f0f\u662f \\(s = W_2max(0, W_1x)\\)\u3002</p> \\[ f = W_2\\max(0, W_1x)\\\\ W_2\\in \\mathbb{R}^{C\\times H}\\quad W_1\\in \\mathbb{R}^{H\\times D}\\quad x\\in \\mathbb{R}^{D} \\] <ul> <li>x \u662f\u8f93\u5165\u5411\u91cf\uff08\u56fe\u50cf\u50cf\u7d20\uff09</li> <li>\\(W_1\\) \u662f\u7b2c\u4e00\u5c42\u6743\u91cd\u77e9\u9635\uff0c\u5c06\u8f93\u5165\u5411\u91cf\u6620\u5c04\u5230\u9690\u85cf\u5c42</li> <li>\\(max(0,W_1x)\\) \u662f\u6fc0\u6d3b\u51fd\u6570 ReLU \u7684\u5e94\u7528\uff0c\u5b83\u5c06\u8d1f\u503c\u7f6e\u4e3a\u96f6\uff0c\u4fdd\u7559\u6b63\u503c</li> <li>\\(W_2\\) \u662f\u7b2c\u4e8c\u5c42\u7684\u6743\u91cd\u77e9\u9635\uff0c\u5c06\u9690\u85cf\u5c42\u8f93\u51fa\u6620\u5c04\u5230\u6700\u7ec8\u5206\u7c7b\u8bc4\u5206\u3002</li> </ul> <p>\u4e3e\u4e2a\u4f8b\u5b50\u6765\u8bf4\uff0c\\(W_1\\) \u53ef\u4ee5\u662f\u4e00\u4e2a [\\(100 \\times 3072\\)] \u7684\u77e9\u9635\uff0c\u5176\u4f5c\u7528\u662f\u5c06\u8f93\u5165\u4ece 3072 \u7ef4\u7684\u50cf\u7d20\u7a7a\u95f4\u6620\u5c04\u5230 100 \u7ef4\u7684\u9690\u85cf\u5c42\u3002\u51fd\u6570 \\(max(0,-)\\) \u662f\u975e\u7ebf\u6027\u7684\uff0c\u5b83\u4f1a\u4f5c\u7528\u5230\u6bcf\u4e2a\u5143\u7d20\u3002\u6fc0\u6d3b\u51fd\u6570 ReLU \u7684\u8f93\u51fa\u4e3a\u4e00\u4e2a 100 \u7ef4\u7684\u5411\u91cf\u3002\\(W_2\\) \u7684\u7ef4\u5ea6\u4e3a [\\(10 \\times 100\\)]\uff0c\u5c06 100 \u7ef4\u5411\u91cf\u6620\u5c04\u5230 10 \u4e2a\u5206\u7c7b\u8bc4\u5206\u3002\u7f51\u7edc\u7684\u53c2\u6570 \\(W_1\\) \u548c \\(W_2\\) \u662f\u901a\u8fc7\u68af\u5ea6\u4e0b\u964d\u4f18\u5316\u7684\u3002\u68af\u5ea6\u901a\u8fc7\u53cd\u5411\u4f20\u64ad\u8ba1\u7b97\uff0c\u53cd\u5411\u4f20\u64ad\u5229\u7528\u94fe\u5f0f\u6cd5\u5219\u9010\u5c42\u8ba1\u7b97\u6bcf\u4e2a\u53c2\u6570\u7684\u68af\u5ea6\uff0c\u4ece\u800c\u66f4\u65b0\u5b83\u4eec\uff0c\u4ee5\u6700\u5c0f\u5316\u635f\u5931\u51fd\u6570\u3002</p> <p>\u6ce8\u610f\u975e\u7ebf\u6027\u51fd\u6570\u5728\u8ba1\u7b97\u4e0a\u662f\u81f3\u5173\u91cd\u8981\u7684\uff0c\u5982\u679c\u7565\u53bb\u8fd9\u4e00\u6b65\uff0c\u90a3\u4e48\u4e24\u4e2a\u77e9\u9635\u5c06\u4f1a\u5408\u4e8c\u4e3a\u4e00\uff0c\u5bf9\u4e8e\u5206\u7c7b\u7684\u8bc4\u5206\u8ba1\u7b97\u5c06\u91cd\u65b0\u53d8\u6210\u5173\u4e8e\u8f93\u5165\u7684\u7ebf\u6027\u51fd\u6570\u3002\u8fd9\u4e2a\u975e\u7ebf\u6027\u51fd\u6570\u5c31\u662f\u6539\u53d8\u7684\u5173\u952e\u70b9</p> <p>\u5982\u679c\u6ca1\u6709\u6fc0\u6d3b\u51fd\u6570\uff0c\\(f = W_2max(0,W_1x)\\)\u5c06\u53d8\u4e3a\\(s =W_2W_1x\\)\uff0c\u672c\u8d28\u4e0a\u4f9d\u7136\u662f\u4e00\u4e2a\u7ebf\u6027\u5206\u7c7b\u5668</p> <p>\u4e00\u4e2a\u4e09\u5c42\u7684\u795e\u7ecf\u7f51\u7edc\u53ef\u4ee5\u7c7b\u6bd4\u5730\u770b\u505a \\(s = W_3max(0, W_2max(0, W_1x)\\)</p> <ul> <li>\u8f93\u5165\u5c42\uff1a \\(x\\) \u662f\u8f93\u5165\u5411\u91cf\uff0c\u901a\u5e38\u8868\u793a\u4e3a\u4e00\u4e2a\u5217\u5411\u91cf\uff0c\u5305\u542b\u539f\u59cb\u6570\u636e\u7279\u5f81\uff08\u4f8b\u5982\u56fe\u50cf\u7684\u50cf\u7d20\u503c\uff09\u3002</li> <li>\u7b2c\u4e00\u5c42\u6743\u91cd\uff1a\u77e9\u9635 \\(W_1\\) \u5c06\u8f93\u5165\u5411\u91cf \\(x\\) \u6620\u5c04\u5230\u7b2c\u4e00\u5c42\u9690\u85cf\u5355\u5143\u3002\u5047\u8bbe \\(W_1\\) \u7684\u7ef4\u5ea6\u4e3a [\\(H_1 \\times D\\)]\uff0c\u5176\u4e2d \\(D\\) \u662f\u8f93\u5165\u5411\u91cf\u7684\u7ef4\u5ea6\uff0c \\(H_1\\) \u662f\u7b2c\u4e00\u9690\u85cf\u5c42\u7684\u7ef4\u5ea6\u3002</li> <li>\u7b2c\u4e00\u5c42\u6fc0\u6d3b\uff1a\u7ecf\u8fc7 \\(W_1\\) \u53d8\u6362\u540e\uff0c\u5e94\u7528 ReLU \u6fc0\u6d3b\u51fd\u6570 \\(\\max(0, W_1x)\\) \uff0c\u5f15\u5165\u975e\u7ebf\u6027\u3002\u6b64\u65f6\uff0c\u8f93\u51fa\u4e3a\u4e00\u4e2a \\(H_1\\) \u7ef4\u7684\u5411\u91cf\u3002</li> <li>\u7b2c\u4e8c\u5c42\u6743\u91cd\uff1a\u77e9\u9635 \\(W_2\\) \u5c06\u7b2c\u4e00\u5c42\u7684\u8f93\u51fa\u6620\u5c04\u5230\u7b2c\u4e8c\u5c42\u9690\u85cf\u5355\u5143\uff0c\u7ef4\u5ea6\u4e3a [\\(H_2 \\times H_1\\)]\uff0c\u5176\u4e2d \\(H_2\\) \u662f\u7b2c\u4e8c\u9690\u85cf\u5c42\u7684\u7ef4\u5ea6\u3002</li> <li>\u7b2c\u4e8c\u5c42\u6fc0\u6d3b\uff1a\u518d\u6b21\u5e94\u7528 ReLU \u51fd\u6570\uff0c\u5f97\u5230\u7b2c\u4e8c\u5c42\u7684\u6fc0\u6d3b\u8f93\u51fa \\(\\max(0, W_2 \\max(0, W_1x))\\) \uff0c\u6b64\u65f6\u8f93\u51fa\u4e3a\u4e00\u4e2a \\(H_2\\) \u7ef4\u7684\u5411\u91cf\u3002</li> <li>\u7b2c\u4e09\u5c42\u6743\u91cd\uff1a\u77e9\u9635 W_3 \u5c06\u7b2c\u4e8c\u5c42\u7684\u8f93\u51fa\u6620\u5c04\u5230\u6700\u7ec8\u7684\u5206\u7c7b\u8bc4\u5206\uff0c\u7ef4\u5ea6\u4e3a [\\(C \\times H_2\\)]\uff0c\u5176\u4e2d \\(C\\) \u662f\u5206\u7c7b\u7c7b\u522b\u7684\u6570\u91cf\u3002</li> </ul> <p>\u9690\u5c42\u7684\u5c3a\u5bf8\uff08 H_1, H_2 \u7b49\uff09\u662f\u8d85\u53c2\u6570\uff0c\u51b3\u5b9a\u4e86\u7f51\u7edc\u7684\u8868\u8fbe\u80fd\u529b\u548c\u8ba1\u7b97\u590d\u6742\u5ea6\u3002\u9690\u5c42\u5c3a\u5bf8\u8d8a\u5927\uff0c\u7f51\u7edc\u7684\u62df\u5408\u80fd\u529b\u8d8a\u5f3a\uff0c\u4f46\u4e5f\u53ef\u80fd\u66f4\u5bb9\u6613\u8fc7\u62df\u5408\u3002\u6b64\u5916\uff0c\u589e\u52a0\u5c42\u6570\u548c\u6bcf\u5c42\u7684\u795e\u7ecf\u5143\u6570\u91cf\u8fd8\u4f1a\u663e\u8457\u589e\u52a0\u8ba1\u7b97\u8d44\u6e90\u7684\u9700\u6c42\u3002</p> <p>\u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u8fd9\u79cd\u56fe\u5f62\u5316\u7684\u5f62\u5f0f\u6765\u8868\u793a\u795e\u7ecf\u7f51\u7edc\uff0c\u56e0\u4e3a\u5176\u4e2d\u7684\u6bcf\u4e2a\u90e8\u5206\u90fd\u76f8\u4e92\u8fde\u63a5\uff0c\u6240\u4ee5\u4e5f\u88ab\u79f0\u4e3a<code>\u5168\u8fde\u63a5\u795e\u7ecf\u7f51\u7edc Fully-connected neural network\uff0c\u901a\u5e38\u4e5f\u88ab\u79f0\u4e3amulti-layer-perceptron \u591a\u5c42\u611f\u77e5\u673a</code></p> <p></p> <p>\u8f93\u5165\u7684\u5411\u91cf x\uff0c\u5168\u90e8\u53c2\u4e0e\u5f71\u54cd\u9690\u85cf\u5c42\u7684\u5411\u91cf h\uff0c\u5411\u91cf h\uff0c\u5168\u90e8\u5143\u7d20\u53c2\u4e0e\u5f71\u54cd\u8f93\u51fa\u7684\u5411\u91cf s</p> <p></p> <p>\u795e\u7ecf\u7f51\u7edc\u5982\u4f55\u89e3\u51b3\u4e00\u4e2a class \u5177\u6709\u591a\u4e2a mode \u7684\u95ee\u9898\uff08\u7ebf\u6027\u5206\u7c7b\u5668\u53ea\u9002\u7528\u4e8e\u4e00\u4e2a\u6a21\u677f\uff0c\u6240\u4ee5\u5bf9\u4e8e\u9a6c\u7684\u5934\u671d\u5411\u5de6\u8fb9\u548c\u9a6c\u7684\u5934\u671d\u5411\u53f3\u8fb9\uff0c\u65e0\u6cd5\u533a\u5206\u3002\uff09</p> <ul> <li>W1 \u7684\u4f5c\u7528\u662f\u4ece\u539f\u59cb\u8f93\u5165\u6570\u636e\u4e2d<code>\u63d0\u53d6\u521d\u7ea7\u7279\u5f81</code>\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u56fe\u50cf\u6570\u636e\uff0c\\(W_1\\) \u53ef\u4ee5\u68c0\u6d4b\u5230\u56fe\u50cf\u4e2d\u7684\u57fa\u672c\u8fb9\u7f18\u3001\u7eb9\u7406\u6216\u5c40\u90e8\u6a21\u5f0f\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u7406\u89e3\u4e3a\u5c06\u56fe\u50cf\u4ece\u50cf\u7d20\u7a7a\u95f4\u8f6c\u6362\u5230\u4e00\u4e2a\u66f4\u9ad8\u7ef4\u7684\u7279\u5f81\u7a7a\u95f4\u3002</li> </ul> <p>\u5728\u4f60\u63d0\u5230\u7684\u9a6c\u7684\u4f8b\u5b50\u4e2d\uff0c\\(W_1\\) \u53ef\u4ee5\u6355\u6349\u5230\u201c\u9a6c\u5934\u7684\u8f6e\u5ed3\u201d\u6216\u201c\u9a6c\u7684\u817f\u201d\u7684\u7279\u5f81\uff0c\u65e0\u8bba\u5b83\u4eec\u671d\u5411\u54ea\u4e2a\u65b9\u5411\u3002</p> <ul> <li>W2 \u7684\u4f5c\u7528\u662f\u5c06\u7b2c\u4e00\u5c42\u7684\u521d\u7ea7\u7279\u5f81<code>\u7ec4\u5408\u6210\u66f4\u52a0\u590d\u6742\u7684\u6a21\u5f0f</code>\u3002\u4f8b\u5982\uff0c\u5b83\u53ef\u4ee5\u5c06\u201c\u9a6c\u7684\u5934\u201d\u548c\u201c\u9a6c\u7684\u817f\u201d\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u5f62\u6210\u6574\u4f53\u7684\u201c\u9a6c\u201d\u7684\u6982\u5ff5\u3002\u8fd9\u4e2a\u7ec4\u5408\u8fc7\u7a0b\u4f7f\u5f97\u6a21\u578b\u80fd\u591f\u6355\u6349\u66f4\u9ad8\u5c42\u6b21\u7684\u8bed\u4e49\u4fe1\u606f\u3002</li> </ul> <p>\u5728\u9a6c\u7684\u4f8b\u5b50\u4e2d\uff0c\\(W_2\\) \u53ef\u4ee5\u5b66\u4f1a\u8bc6\u522b\u201c\u9a6c\u201d\u7684\u6574\u4f53\u5f62\u8c61\uff0c\u65e0\u8bba\u5b83\u7684\u5934\u662f\u671d\u5de6\u8fd8\u662f\u671d\u53f3\u3002</p> <p>\u795e\u7ecf\u7f51\u7edc\u7684\u4f18\u8d8a\u6027\uff1a</p> <p>\u591a\u5c42\u7279\u5f81\u63d0\u53d6\uff1a</p> <ul> <li>\u795e\u7ecf\u7f51\u7edc\u7684\u591a\u5c42\u7ed3\u6784\u5141\u8bb8\u5b83<code>\u9010\u5c42\u63d0\u53d6\u548c\u7ec4\u5408\u7279\u5f81</code>\u3002\u7b2c\u4e00\u5c42\u53ef\u4ee5\u8bc6\u522b\u5c40\u90e8\u7684\u57fa\u672c\u7279\u5f81\uff08\u5982\u8fb9\u7f18\u6216\u65b9\u5411\uff09\uff0c\u800c\u540e\u7eed\u5c42\u5c06\u8fd9\u4e9b\u57fa\u672c\u7279\u5f81\u7ec4\u5408\u6210\u66f4\u590d\u6742\u7684\u6a21\u5f0f\uff08\u5982\u6574\u4f53\u5f62\u72b6\uff09\u3002</li> </ul> <p>\u975e\u7ebf\u6027\u53d8\u6362\uff1a</p> <ul> <li>\u6bcf\u4e00\u5c42\u4e4b\u95f4\u7684\u975e\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\uff08\u5982 ReLU\uff09\u4f7f\u5f97\u6a21\u578b\u53ef\u4ee5\u5904\u7406\u590d\u6742\u7684\u975e\u7ebf\u6027\u6a21\u5f0f\u3002\u8fd9\u610f\u5473\u7740\u5373\u4f7f\u9a6c\u7684\u5934\u90e8\u4f4d\u7f6e\u4e0d\u540c\uff0c\u7f51\u7edc\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7<code>\u5b66\u4e60\u4e0d\u540c\u7684\u6fc0\u6d3b\u6a21\u5f0f\u6765\u8bc6\u522b\u51fa\u5b83\u662f\u540c\u4e00\u5339\u9a6c\u3002</code></li> </ul> <p>\u5e73\u79fb\u548c\u65cb\u8f6c\u4e0d\u53d8\u6027\uff1a</p> <ul> <li>\u901a\u8fc7\u8bad\u7ec3\uff0c\u7f51\u7edc\u53ef\u4ee5\u5b66\u4f1a\u8bc6\u522b\u51fa\u56fe\u50cf\u4e2d\u76f8\u540c\u7684\u5bf9\u8c61\uff0c\u5373\u4f7f\u5b83\u4eec\u7ecf\u5386\u4e86<code>\u65cb\u8f6c\u3001\u7f29\u653e\u6216\u955c\u50cf\u7b49\u53d8\u6362</code>\u3002\u6bd4\u5982\uff0c\u7b2c\u4e00\u5c42\u53ef\u4ee5\u68c0\u6d4b\u5230\u9a6c\u7684\u5934\u90e8\u8fb9\u7f18\uff0c\u800c\u65e0\u8bba\u5b83\u671d\u5411\u54ea\u4e2a\u65b9\u5411\uff0c\u7b2c\u4e8c\u5c42\u901a\u8fc7\u7ec4\u5408\u8fd9\u4e9b\u7279\u5f81\uff0c\u4ecd\u7136\u53ef\u4ee5\u6b63\u786e\u5730\u8bc6\u522b\u4e3a\u201c\u9a6c\u201d\u3002</li> </ul>"},{"location":"CV/Lecture5_Neural_Networks/#\u795e\u7ecf\u7f51\u7edc\u7684\u51e0\u4f55\u89e3\u91ca","title":"\u795e\u7ecf\u7f51\u7edc\u7684\u51e0\u4f55\u89e3\u91ca","text":"<p>\u9762\u5bf9\u4e00\u4e2a\u7ebf\u6027\u53ef\u5206\u7684\u6570\u636e\u96c6\uff0c\u7ebf\u6027\u5206\u7c7b\u5668\u7684\u529f\u80fd\u5c31\u662f\u627e\u5230\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u8d85\u5e73\u9762\uff0c\u53ef\u4ee5\u5bf9\u4e0d\u540c\u7684\u6570\u636e\u8fdb\u884c\u5206\u5272\uff0c\u4f46\u662f\u5b58\u5728\u67d0\u4e9b\u7ebf\u6027\u4e0d\u53ef\u5206\u7684\u6570\u636e\u96c6\uff0c\u8fd9\u4e2a\u65f6\u5019\uff0c\u5c31\u65e0\u6cd5\u4f7f\u7528\u8d85\u5e73\u9762\u8fdb\u884c\u5206\u5272\u4e86\uff0c\u6216\u8005\u8bf4\u627e\u4e0d\u5230\u4e00\u79cd\u7ebf\u6027\u65b9\u5f0f\u8fdb\u884c\u5206\u5272\uff0c\u6bd4\u5982\u8bf4\u4e0b\u9762\u7684\u6570\u636e\u96c6</p> <p></p> <p>\u6211\u4eec\u53d1\u73b0\uff0c\u627e\u4e0d\u5230\u4e00\u4e2a\u5408\u9002\u7684\u53d8\u6362\u77e9\u9635 \\(W\\) \u6765\u5206\u5272\u8fd9\u4e2a\u6570\u636e\u96c6\uff0c\u6240\u4ee5\u5c31\u9700\u8981\u627e\u5230\u4e00\u79cd\u975e\u7ebf\u6027\u65b9\u5f0f\u6765\u5206\u5272\uff0c\u4e5f\u5c31\u662f\u6fc0\u6d3b\u51fd\u6570\u7684\u65b9\u5f0f\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5b8c\u6210\u67d0\u4e9b\u65e0\u6cd5\u7ebf\u6027\u5206\u5272\u7684\u6570\u636e\u96c6\u7684\u5206\u5272\uff0c\u6bd4\u5982\u8bf4\u4e0b\u9762\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5c31\u662f\u4f7f\u7528 ReLu \u51fd\u6570\u8fdb\u884c\u7279\u5f81\u53d8\u6362\uff0cReLU(z)=max(0,z) \u5b83\u5c06\u8f93\u5165\u7684\u8d1f\u503c\u53d8\u4e3a 0\uff0c\u6b63\u503c\u4fdd\u6301\u4e0d\u53d8\u3002\u8fd9\u79cd\u975e\u7ebf\u6027\u53d8\u6362\u80fd\u591f\u6539\u53d8\u6570\u636e\u7684\u51e0\u4f55\u7ed3\u6784\uff0c\u4f7f\u5f97\u539f\u672c\u7ebf\u6027\u4e0d\u53ef\u5206\u7684\u6570\u636e\u5728\u53d8\u6362\u540e\u7684\u7a7a\u95f4\u4e2d\u53d8\u5f97\u53ef\u5206\u3002</p> <p></p> <p>\u539f\u59cb\u7684 A \u8c61\u9650\uff0c\u6cbf\u7740 h1 \u548c h2 \u65b9\u5411\uff0c\u6570\u503c\u90fd\u5728\u589e\u5927\uff0c\u5bf9\u5e94\u53d8\u6362\u5750\u6807\u540e\u7684\u7b2c\u4e00\u8c61\u9650\u3002\u540c\u7406\u5bf9\u4e8e B \u8c61\u9650\uff0c\u6cbf\u7740 h1 \u65b9\u5411\u503c\u51cf\u5c0f\uff0c\u6cbf\u7740 h2 \u65b9\u5411\u503c\u589e\u5927\uff0c\u5bf9\u5e94\u5750\u6807\u53d8\u6362\u4e4b\u540e\u7684\u7b2c\u4e8c\u8c61\u9650</p> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6570\u636e\u70b9\u88ab\u6620\u5c04\u5230\u65b0\u7a7a\u95f4\u7684\u4e0d\u540c\u8c61\u9650\u548c\u5750\u6807\u8f74\u4e0a\uff0c\u4ece\u800c\u53ef\u4ee5\u901a\u8fc7\u7ebf\u6027\u8d85\u5e73\u9762\u8fdb\u884c\u5206\u5272\u3002</p> <p></p> <p>\u901a\u8fc7\u7ec4\u5408\u591a\u4e2a\u5c42\u548c\u975e\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\uff0c\u795e\u7ecf\u7f51\u7edc\u80fd\u591f\u5728\u9ad8\u7ef4\u7a7a\u95f4\u4e2d\u5f62\u6210\u590d\u6742\u7684\u51b3\u7b56\u8fb9\u754c\u3002\u8fd9\u4f7f\u5f97\u5b83\u53ef\u4ee5\u5904\u7406\u5404\u79cd\u590d\u6742\u7684\u5206\u7c7b\u95ee\u9898\u3002\u7b2c\u4e00\u5f20\u56fe\u5c55\u793a\u4e86\u4e00\u4e2a\u795e\u7ecf\u7f51\u7edc\u5982\u4f55\u5904\u7406\u975e\u7ebf\u6027\u6570\u636e\u96c6\u3002\u901a\u8fc7\u591a\u5c42\u7f51\u7edc\u548c\u975e\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\uff08\u5982 ReLU\u3001tanh \u7b49\uff09\uff0c\u795e\u7ecf\u7f51\u7edc\u53ef\u4ee5\u5b66\u4e60\u590d\u6742\u7684\u51b3\u7b56\u8fb9\u754c\u3002\u8fd9\u4f7f\u5f97\u5b83\u80fd\u591f\u5f88\u597d\u5730\u5c06\u6570\u636e\u5206\u5272\u4e3a\u4e0d\u540c\u7684\u7c7b\u522b\uff0c\u5373\u4f7f\u8fd9\u4e9b\u7c7b\u522b\u65e0\u6cd5\u901a\u8fc7\u7b80\u5355\u7684\u7ebf\u6027\u5206\u5272\u6765\u533a\u5206\u3002</p> <p></p> <p>\u7b2c\u4e8c\u5f20\u56fe\u5f3a\u8c03\u4e86\u4f7f\u7528\u6b63\u5219\u5316\u53c2\u6570\u6765\u9632\u6b62\u8fc7\u62df\u5408\u3002\u6b63\u5219\u5316\u901a\u8fc7\u589e\u52a0\u635f\u5931\u51fd\u6570\u4e2d\u7684\u60e9\u7f5a\u9879\u6765\u6291\u5236\u6743\u91cd\u7684\u8fc7\u5ea6\u589e\u957f\uff0c\u907f\u514d\u6a21\u578b\u5bf9\u8bad\u7ec3\u6570\u636e\u7684\u8fc7\u5ea6\u62df\u5408\u3002\u901a\u8fc7\u589e\u5927\u6b63\u5219\u5316\u53c2\u6570\uff08\u5982 L2 \u6b63\u5219\u5316\u4e2d\u7684 \\(\\lambda\\)\uff09\uff0c\u800c\u4e0d\u662f\u51cf\u5c0f\u9690\u85cf\u5c42\u7684\u7ef4\u6570\uff0c\u6a21\u578b\u80fd\u591f\u4fdd\u6301\u5176\u590d\u6742\u5ea6\uff0c\u540c\u65f6\u964d\u4f4e\u8fc7\u62df\u5408\u7684\u98ce\u9669\u3002</p> <p></p> <p></p> <p></p> <p>Universal Approximation Theorem \u662f\u795e\u7ecf\u7f51\u7edc\u7406\u8bba\u4e2d\u7684\u4e00\u4e2a\u91cd\u8981\u7ed3\u679c\uff0c\u5b83\u9610\u660e\u4e86\u795e\u7ecf\u7f51\u7edc\u7684\u5f3a\u5927\u8868\u8fbe\u80fd\u529b\u3002\u8be5\u5b9a\u7406\u8868\u660e\uff0c\u53ea\u8981\u6709\u8db3\u591f\u7684\u9690\u85cf\u5c42\u795e\u7ecf\u5143\uff0c\u5e26\u6709\u975e\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\u7684\u524d\u9988\u795e\u7ecf\u7f51\u7edc\u53ef\u4ee5\u903c\u8fd1\u4efb\u4f55\u8fde\u7eed\u51fd\u6570\uff0c\u4e14\u8bef\u5dee\u53ef\u4ee5\u4efb\u610f\u5c0f\u3002\u8fd9\u610f\u5473\u7740\u795e\u7ecf\u7f51\u7edc\u7406\u8bba\u4e0a\u53ef\u4ee5\u5b66\u4e60\u5e76\u8868\u793a\u4efb\u4f55\u590d\u6742\u7684\u51fd\u6570\u6620\u5c04\uff0c\u65e0\u8bba\u662f\u5206\u7c7b\u4efb\u52a1\u8fd8\u662f\u56de\u5f52\u4efb\u52a1\u3002</p> <p>\u6536\u655b\u6027\uff1a\u5b9a\u7406\u4fdd\u8bc1\u4e86\u5b58\u5728\u4e00\u4e2a\u7f51\u7edc\u53ef\u4ee5\u903c\u8fd1\u76ee\u6807\u51fd\u6570\uff0c\u4f46\u4e0d\u4fdd\u8bc1\u5b9e\u9645\u8bad\u7ec3\u65f6\u4e00\u5b9a\u80fd\u627e\u5230\u8fd9\u4e00\u6700\u4f18\u7f51\u7edc\u3002</p> <p>\u8ba1\u7b97\u4ee3\u4ef7\uff1a\u9700\u8981\u8db3\u591f\u591a\u7684\u795e\u7ecf\u5143\uff0c\u4f46\u5b9e\u9645\u8ba1\u7b97\u8d44\u6e90\u6709\u9650\uff0c\u8fc7\u591a\u7684\u795e\u7ecf\u5143\u53ef\u80fd\u5bfc\u81f4\u8ba1\u7b97\u590d\u6742\u6027\u548c\u8bad\u7ec3\u65f6\u95f4\u589e\u52a0\u3002</p> <p>\u8fc7\u62df\u5408\u98ce\u9669\uff1a\u9690\u85cf\u5c42\u795e\u7ecf\u5143\u6570\u91cf\u592a\u591a\u65f6\uff0c\u53ef\u80fd\u5bfc\u81f4\u6a21\u578b\u8bb0\u4f4f\u8bad\u7ec3\u6570\u636e\u800c\u5931\u53bb\u6cdb\u5316\u80fd\u529b\u3002</p> <p>convex function</p> <p>\u4e00\u4e2a\u51fd\u6570 f(x) \u88ab\u79f0\u4e3a\u51f8\u51fd\u6570\uff0c\u5982\u679c\u5bf9\u4e8e\u4efb\u610f\u7684\u4e24\u4e2a\u70b9 \\(x_1\\) \u548c \\(x_2\\) \u4ee5\u53ca \\(t \\in [0, 1]\\) \uff0c\u4ee5\u4e0b\u4e0d\u7b49\u5f0f\u6210\u7acb\uff1a</p> \\[ f(tx_1 + (1 - t)x_2) \\leq t f(x_1) + (1 - t) f(x_2) \\] <p>\u8fd9\u610f\u5473\u7740\u8fde\u63a5\u51fd\u6570\u56fe\u50cf\u4e2d\u4efb\u610f\u4e24\u70b9\u7684\u76f4\u7ebf\u603b\u662f\u4f4d\u4e8e\u51fd\u6570\u56fe\u50cf\u7684\u4e0a\u65b9\u6216\u4e0e\u5176\u91cd\u5408\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u51f8\u51fd\u6570\u7684\u56fe\u50cf\u603b\u662f\u5448\u73b0\u201c\u7897\u201d\u5f62\uff08\u5f00\u53e3\u5411\u4e0a\uff09\uff0c\u6ca1\u6709\u5c40\u90e8\u51f9\u9677\u6216\u6ce2\u5cf0\u3002</p> <p>\u51f8\u51fd\u6570\u7684\u7279\u6027</p> <ol> <li> <p>\u5168\u5c40\u6700\u4f18\u6027\uff1a\u5bf9\u4e8e\u51f8\u51fd\u6570\uff0c<code>\u4efb\u610f\u7684\u5c40\u90e8\u6700\u5c0f\u503c\u90fd\u662f\u5168\u5c40\u6700\u5c0f\u503c</code>\u3002\u8fd9\u662f\u51f8\u51fd\u6570\u6700\u91cd\u8981\u7684\u7279\u6027\u4e4b\u4e00\uff0c\u6781\u5927\u5730\u7b80\u5316\u4e86\u4f18\u5316\u95ee\u9898\u7684\u6c42\u89e3\u3002</p> </li> <li> <p>\u51f8\u96c6\u4e0e\u51fd\u6570\u7684\u5173\u7cfb\uff1a\u5982\u679c \\(f(x)\\) \u662f\u51f8\u7684\uff0c\u90a3\u4e48\u5b83\u7684\u4e0b\u8d85\u6c34\u5e73\u96c6\uff08\u5373 \\(\\{x : f(x) \\leq c\\}\\)\u662f\u51f8\u96c6\u3002</p> </li> <li> <p>\u4e00\u9636\u6761\u4ef6\uff1a\u5982\u679c \\( f(x) \\) \u5728\u67d0\u4e2a\u533a\u95f4\u5185\u53ef\u5fae\u4e14\u662f\u51f8\u7684\uff0c\u90a3\u4e48\u51fd\u6570\u56fe\u50cf\u5728\u4efb\u610f\u70b9\u4e0a\u7684\u5207\u7ebf\u6c38\u8fdc\u4e0d\u4f1a\u5728\u51fd\u6570\u56fe\u50cf\u7684\u4e0b\u65b9\u3002\u8fd9\u53ef\u4ee5\u7528\u4ee5\u4e0b\u4e0d\u7b49\u5f0f\u8868\u793a\uff1a    $$    f(y) \\geq f(x) + \\nabla f(x)^T (y - x) \\quad \\text{for all } x, y    $$    \u5176\u4e2d \\(\\nabla f(x)\\) \u662f\u5728\u70b9 \\(x\\) \u5904\u7684\u68af\u5ea6\u3002</p> </li> </ol> <p>\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u975e\u51f8\u51fd\u6570\u53ef\u80fd\u6709\u591a\u4e2a\u5c40\u90e8\u6700\u5c0f\u503c\uff0c\u56e0\u6b64\u5f88\u96be\u627e\u5230\u5168\u5c40\u6700\u4f18\u89e3\u3002\u6df1\u5ea6\u5b66\u4e60\u4e2d\u7684\u8bb8\u591a\u76ee\u6807\u51fd\u6570\u662f\u975e\u51f8\u7684\uff0c\u8fd9\u4f7f\u5f97\u68af\u5ea6\u4e0b\u964d\u6cd5\u7b49\u4f18\u5316\u65b9\u6cd5\u7684\u6548\u679c\u8f83\u4e0d\u786e\u5b9a\u3002\u7136\u800c\uff0c\u901a\u8fc7\u6dfb\u52a0\u6b63\u5219\u5316\u3001\u5408\u7406\u521d\u59cb\u5316\u53c2\u6570\u3001\u4f7f\u7528\u52a8\u91cf\u6216\u81ea\u9002\u5e94\u4f18\u5316\u5668\u7b49\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u63d0\u9ad8\u4f18\u5316\u6548\u679c\u3002</p>"},{"location":"CV/Lecture5_Neural_Networks/#\u4ee3\u7801\u5b9e\u73b0","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<p>\u8fd9\u4e2a Python \u4ee3\u7801\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u4e24\u5c42\u795e\u7ecf\u7f51\u7edc\uff0c\u5e76\u4f7f\u7528\u68af\u5ea6\u4e0b\u964d\u6cd5\u8fdb\u884c\u8bad\u7ec3\u3002\u5b83\u7684\u4efb\u52a1\u662f\u6700\u5c0f\u5316\u7f51\u7edc\u7684\u9884\u6d4b\u8f93\u51fa\uff08<code>y_pred</code>\uff09\u4e0e\u76ee\u6807\u8f93\u51fa\uff08<code>y</code>\uff09\u4e4b\u95f4\u7684\u5747\u65b9\u8bef\u5dee\u635f\u5931</p> <pre><code>import numpy as np\nfrom numpy.random import randn\n\nN, Din, H, Dout = 64, 1000, 100, 10\nx, y = randn(N, Din), randn(N, Dout)\nw1, w2 = randn(Din, H), randn(H, Dout)\nfor t in range(10000):\n    h = 1.0 / (1.0 + np.exp(-x.dot(w1)))  # Sigmoid \u6fc0\u6d3b\u51fd\u6570\n    y_pred = h.dot(w2)\n    loss = np.square(y_pred - y).sum()\n    dy_pred = 2.0 (y_pred - y)\n    dw2 = h.T.dot(dy_pred)\n    dh = dy_pred.dot(w2.T)\n    dw1 = x.T.dot(dh * h * (1 - h))\n    w1 -= 1e-4 * dw1\n    w2 -= 1e-4 * dw2\n</code></pre> <ul> <li>\u521d\u59cb\u5316\uff1a</li> </ul> <p><code>x</code>\uff1a\u8f93\u5165\u6570\u636e\uff0c\u5f62\u72b6\u4e3a <code>(N, Din)</code>\u3002</p> <p><code>y</code>\uff1a\u76ee\u6807\u8f93\u51fa\u6570\u636e\uff0c\u5f62\u72b6\u4e3a <code>(N, Dout)</code>\u3002</p> <p><code>w1</code>\uff1a\u8f93\u5165\u5c42\u5230\u9690\u85cf\u5c42\u7684\u6743\u91cd\u77e9\u9635\uff0c\u5f62\u72b6\u4e3a <code>(Din, H)</code>\u3002</p> <p><code>w2</code>\uff1a\u9690\u85cf\u5c42\u5230\u8f93\u51fa\u5c42\u7684\u6743\u91cd\u77e9\u9635\uff0c\u5f62\u72b6\u4e3a <code>(H, Dout)</code>\u3002</p> <ul> <li>\u524d\u5411\u4f20\u64ad\uff08Forward Pass\uff09</li> </ul> <pre><code>h = 1.0 / (1.0 + np.exp(-x.dot(w1)))  # Sigmoid \u6fc0\u6d3b\u51fd\u6570\ny_pred = h.dot(w2)\n</code></pre> <p><code>1.0 / (1.0 + np.exp(-x.dot(w1)))</code> \u5e94\u7528\u4e86 Sigmoid \u6fc0\u6d3b\u51fd\u6570\uff0c\u5c06\u9690\u85cf\u5c42\u7684\u8f93\u51fa\u9650\u5236\u5728 <code>(0, 1)</code> \u4e4b\u95f4\u3002</p> <ul> <li>\u53cd\u5411\u4f20\u64ad\uff08Backward Pass\uff09</li> </ul> <pre><code>dy_pred = 2.0 * (y_pred - y)\ndw2 = h.T.dot(dy_pred)\ndh = dy_pred.dot(w2.T)\ndw1 = x.T.dot(dh * h * (1 - h))\n</code></pre> <p>\u524d\u5411\u4f20\u64ad\u516c\u5f0f:</p> \\[ h = \\sigma(XW_1) = \\frac{1}{1 + e^{-XW_1}}\\\\ y_{\\text{pred}} = hW_2 \\] <p>\u635f\u5931\u51fd\u6570:</p> \\[ L = \\sum \\left(y_{\\text{pred}} - y\\right)^2 \\] <p>\u53cd\u5411\u4f20\u64ad\u516c\u5f0f:</p> <p>\u8f93\u51fa\u5c42\u68af\u5ea6:</p> \\[ \\frac{\\partial L}{\\partial W_2} =\\frac{\\partial L}{\\partial  y_{\\text{pred}} }  \\cdot   \\frac{\\partial  y_{\\text{pred}} }{{\\partial W_2}}= h^T \\cdot \\frac{\\partial L}{\\partial y_{\\text{pred}}} = h^T \\cdot 2(y_{\\text{pred}} - y) \\] <p>\u9690\u85cf\u5c42\u68af\u5ea6:</p> \\[    \\frac{\\partial L}{\\partial W_1} = X^T \\cdot \\left(\\frac{\\partial L}{\\partial h} \\cdot h(1 - h)\\right) \\] <p>\u8be5\u4ee3\u7801\u4e2d\uff0c\u6574\u4e2a\u6d41\u7a0b\u4e3a\uff1a\u524d\u5411\u4f20\u64ad -&gt; \u635f\u5931\u8ba1\u7b97 -&gt; \u53cd\u5411\u4f20\u64ad -&gt; \u68af\u5ea6\u66f4\u65b0\uff0c\u4ece\u800c\u4e0d\u65ad\u4f18\u5316\u795e\u7ecf\u7f51\u7edc\u7684\u6743\u91cd\uff0c\u4f7f\u9884\u6d4b\u8f93\u51fa\u66f4\u52a0\u63a5\u8fd1\u76ee\u6807\u503c\u3002</p>"},{"location":"CV/Lecture5_Neural_Networks/#\u5e38\u7528\u6fc0\u6d3b\u51fd\u6570","title":"\u5e38\u7528\u6fc0\u6d3b\u51fd\u6570","text":"<p>\u6bcf\u4e2a\u6fc0\u6d3b\u51fd\u6570\uff08\u6216\u975e\u7ebf\u6027\u51fd\u6570\uff09\u7684\u8f93\u5165\u90fd\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u7136\u540e\u5bf9\u5176\u8fdb\u884c\u67d0\u79cd\u56fa\u5b9a\u7684\u6570\u5b66\u64cd\u4f5c\u3002\u4e0b\u9762\u662f\u5728\u5b9e\u8df5\u4e2d\u53ef\u80fd\u9047\u5230\u7684\u51e0\u79cd\u6fc0\u6d3b\u51fd\u6570\uff1a</p> <p></p> <p></p> <p>\u5de6\u8fb9\u662f Sigmoid \u975e\u7ebf\u6027\u51fd\u6570\uff0c\u5c06\u5b9e\u6570\u538b\u7f29\u5230 [0,1] \u4e4b\u95f4\u3002\u53f3\u8fb9\u662f tanh \u51fd\u6570\uff0c\u5c06\u5b9e\u6570\u538b\u7f29\u5230 [-1,1]\u3002</p> <p>Sigmoid\u3002 sigmoid \u975e\u7ebf\u6027\u51fd\u6570\u7684\u6570\u5b66\u516c\u5f0f\u662f \\(\\sigma(x)= \\dfrac{1}{(1+e^{-x})}\\)\uff0c\u51fd\u6570\u56fe\u50cf\u5982\u4e0a\u56fe\u7684\u5de6\u8fb9\u6240\u793a\u3002\u5728\u524d\u4e00\u8282\u4e2d\u5df2\u7ecf\u63d0\u5230\u8fc7\uff0c\u5b83\u8f93\u5165\u5b9e\u6570\u503c\u5e76\u5c06\u5176 \"\u6324\u538b\" \u5230 0 \u5230 1 \u8303\u56f4\u5185\u3002\u66f4\u5177\u4f53\u5730\u8bf4\uff0c\u5f88\u5927\u7684\u8d1f\u6570\u53d8\u6210 0\uff0c\u5f88\u5927\u7684\u6b63\u6570\u53d8\u6210 1\u3002\u968f\u7740\u5bf9\u6df1\u5c42\u795e\u7ecf\u7f51\u7edc\u7406\u89e3\u7684\u52a0\u6df1\uff0c\u5c24\u5176\u662f\u5728\u6df1\u5ea6\u5b66\u4e60\u7684\u53d1\u5c55\u4e2d\uff0cSigmoid \u51fd\u6570\u9010\u6e10\u88ab\u5176\u4ed6\u6fc0\u6d3b\u51fd\u6570\u6240\u53d6\u4ee3\uff0c\u539f\u56e0\u4e3b\u8981\u662f\u7531\u4e8e\u4ee5\u4e0b\u4e24\u4e2a\u5173\u952e\u7f3a\u9677\uff1a</p> <ol> <li>\u68af\u5ea6\u6d88\u5931\u95ee\u9898</li> </ol> <p>Sigmoid \u51fd\u6570\u7684\u8f93\u51fa\u8303\u56f4\u5728 0 \u5230 1 \u4e4b\u95f4\uff0c\u4e14\u5176\u5bfc\u6570\u5728\u63a5\u8fd1\u8fd9\u4e24\u4e2a\u6781\u503c\uff08\u5373 0 \u6216 1\uff09\u65f6\u4f1a\u8d8b\u8fd1\u4e8e 0\u3002\u8fd9\u610f\u5473\u7740\u5f53\u8f93\u5165\u503c\u5f88\u5927\u6216\u5f88\u5c0f\u65f6\uff0cSigmoid \u51fd\u6570\u7684\u68af\u5ea6\u51e0\u4e4e\u4e3a\u96f6\u3002\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u4e9b\u5c0f\u68af\u5ea6\u5c06\u4f1a\u88ab\u9010\u5c42\u4f20\u64ad\uff0c\u4f7f\u5f97\u7f51\u7edc\u7684\u6743\u91cd\u66f4\u65b0\u53d8\u5f97\u975e\u5e38\u7f13\u6162\uff0c\u751a\u81f3\u505c\u6b62\u66f4\u65b0\u3002\u8fd9\u4e00\u73b0\u8c61\u88ab\u79f0\u4e3a\u68af\u5ea6\u6d88\u5931\u95ee\u9898\uff08vanishing gradient problem\uff09\uff0c\u4e25\u91cd\u963b\u788d\u4e86\u6df1\u5c42\u7f51\u7edc\u7684\u8bad\u7ec3\u3002</p> <p>\u56de\u5fc6\u4e00\u4e0b\uff0c\u5728\u53cd\u5411\u4f20\u64ad\u7684\u65f6\u5019\uff0c<code>\u8fd9\u4e2a\uff08\u5c40\u90e8\uff09\u68af\u5ea6\u5c06\u4f1a\u4e0e\u6574\u4e2a\u635f\u5931\u51fd\u6570\u5173\u4e8e\u8be5\u95e8\u5355\u5143\u8f93\u51fa\u7684\u68af\u5ea6\u76f8\u4e58\u3002</code>\u56e0\u6b64\uff0c\u5982\u679c\u5c40\u90e8\u68af\u5ea6\u975e\u5e38\u5c0f\uff0c\u90a3\u4e48\u76f8\u4e58\u7684\u7ed3\u679c\u4e5f\u4f1a\u63a5\u8fd1\u96f6\uff0c\u8fd9\u4f1a\u6709\u6548\u5730 \"\u6740\u6b7b\" \u68af\u5ea6\uff0c\u51e0\u4e4e\u5c31\u6709\u6ca1\u6709\u4fe1\u53f7\u901a\u8fc7\u795e\u7ecf\u5143\u4f20\u5230\u6743\u91cd\u518d\u5230\u6570\u636e\u4e86\u3002</p> <ol> <li>\u975e\u96f6\u4e2d\u5fc3\u6027</li> </ol> <p>Sigmoid \u51fd\u6570\u7684\u8f93\u51fa\u8303\u56f4\u662f (0, 1)\uff0c<code>\u8fd9\u610f\u5473\u7740\u5b83\u7684\u8f93\u51fa\u4e0d\u662f\u96f6\u4e2d\u5fc3\u7684</code>\u3002\u5728\u53cd\u5411\u4f20\u64ad\u4e2d\uff0c\u5982\u679c\u8f93\u5165\u5230\u4e00\u4e2a\u795e\u7ecf\u5143\u7684\u6570\u636e\u603b\u662f\u6b63\u6570\uff08\u5373 \\(x &gt; 0\\)\uff09\uff0c\u5219\u8be5\u795e\u7ecf\u5143\u7684\u8f93\u51fa\u4e5f\u662f\u6b63\u6570\u3002\u8fd9\u5c06\u5bfc\u81f4\u68af\u5ea6\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\u8981\u4e48\u5168\u90e8\u4e3a\u6b63\uff0c\u8981\u4e48\u5168\u90e8\u4e3a\u8d1f\uff0c\u4ece\u800c<code>\u9020\u6210\u53c2\u6570\u66f4\u65b0\u65f6\u7684\u201c\u952f\u9f7f\u5f62\u201d\u9707\u8361\uff0c\u51cf\u7f13\u6536\u655b\u901f\u5ea6</code>\u3002\u867d\u7136\u901a\u8fc7\u589e\u52a0\u6570\u636e\u7684\u6279\u91cf\u548c\u5176\u4ed6\u624b\u6bb5\u53ef\u4ee5\u90e8\u5206\u7f13\u89e3\u8fd9\u4e00\u95ee\u9898\uff0c\u4f46\u5b83\u4ecd\u7136\u5bf9\u7f51\u7edc\u7684\u8bad\u7ec3\u6548\u7387\u4ea7\u751f\u4e0d\u5229\u5f71\u54cd\u3002</p> <p>\u56e0\u4e3a\u5982\u679c\u8f93\u5165\u795e\u7ecf\u5143\u7684\u6570\u636e\u603b\u662f\u6b63\u6570\uff08\u6bd4\u5982\u5728 \\(f = w^Tx+b\\) \u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\uff09\\(x &gt; 0\\)\uff0c\u90a3\u4e48\u5173\u4e8e \\(w\\) \u7684\u68af\u5ea6\u5728\u53cd\u5411\u4f20\u64ad\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5c06\u4f1a\u8981\u4e48\u5168\u90e8\u662f\u6b63\u6570\uff0c\u8981\u4e48\u5168\u90e8\u662f\u8d1f\u6570\uff08\u5177\u4f53\u4f9d\u6574\u4e2a\u8868\u8fbe\u5f0f \\(f\\) \u800c\u5b9a\uff09\u3002\u8fd9\u5c06\u4f1a\u5bfc\u81f4\u68af\u5ea6\u4e0b\u964d\u6743\u91cd\u66f4\u65b0\u65f6\u51fa\u73b0 z \u5b57\u578b\u7684\u4e0b\u964d\u3002</p> <p>Tanh\u3002 Tanh\uff08\u53cc\u66f2\u6b63\u5207\uff09\u51fd\u6570\u662f\u4e00\u79cd\u5e38\u7528\u7684\u6fc0\u6d3b\u51fd\u6570\uff0c\u5176\u8f93\u51fa\u8303\u56f4\u4e3a [-1, 1]\uff0c\u4e0e Sigmoid \u51fd\u6570\u76f8\u4f3c\uff0c\u5b83\u4e5f\u5b58\u5728\u9971\u548c\u95ee\u9898\uff0c\u4f46 Tanh \u7684\u4e00\u4e2a\u663e\u8457\u4f18\u52bf\u662f\u5b83\u7684\u8f93\u51fa\u662f\u96f6\u4e2d\u5fc3\u7684\u3002\u8fd9\u610f\u5473\u7740 Tanh \u7684\u8f93\u51fa\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\u4e0d\u4f1a\u5f15\u8d77\u50cf Sigmoid \u90a3\u6837\u7684\u68af\u5ea6\u9707\u8361\u95ee\u9898\uff0c\u56e0\u6b64\u5728\u795e\u7ecf\u7f51\u7edc\u7684\u8bad\u7ec3\u4e2d\u5f80\u5f80\u8868\u73b0\u5f97\u66f4\u597d\u3002</p> <p>\u68af\u5ea6\u6d88\u5931\uff1a\u5c3d\u7ba1 Tanh \u7684\u96f6\u4e2d\u5fc3\u8f93\u51fa\u662f\u4e00\u5927\u4f18\u52bf\uff0c\u4f46\u5b83\u4ecd\u7136\u9762\u4e34\u68af\u5ea6\u6d88\u5931\u95ee\u9898\u3002\u5f53\u8f93\u5165\u8fdc\u79bb\u96f6\uff08\u5373\u975e\u5e38\u5927\u6216\u975e\u5e38\u5c0f\uff09\u65f6\uff0cTanh \u7684\u68af\u5ea6\u4f1a\u63a5\u8fd1 0\uff0c\u4ece\u800c\u5bfc\u81f4\u6df1\u5c42\u7f51\u7edc\u4e2d\u68af\u5ea6\u4f20\u64ad\u7684\u56f0\u96be\u3002</p> <p>Tanh \u51fd\u6570\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u7ecf\u8fc7\u653e\u5927\u548c\u4f4d\u79fb\u7684 Sigmoid \u51fd\u6570\uff0c\u5176\u516c\u5f0f\u4e3a \\(\\tanh(x) = 2\\sigma(2x) - 1\\)\uff0c\u5176\u4e2d \\(\\sigma(x)\\) \u662f Sigmoid \u51fd\u6570\u3002\u8fd9\u79cd\u5173\u7cfb\u8868\u660e\uff0cTanh \u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u53ef\u4ee5\u88ab\u89c6\u4e3a Sigmoid \u7684\u6539\u8fdb\u7248\u672c\u3002</p> <p></p> <p>\u5de6\u8fb9\u662f ReLU\uff08\u6821\u6b63\u7ebf\u6027\u5355\u5143\uff1aRectified Linear Unit\uff09\u6fc0\u6d3b\u51fd\u6570\uff0c\u5f53 \\(x = 0\\) \u65f6\u51fd\u6570\u503c\u4e3a 0\u3002\u5f53 \\(x &gt; 0\\) \u51fd\u6570\u7684\u659c\u7387\u4e3a 1\u3002\u53f3\u8fb9\u662f\u4ece [Krizhevsky__][41]\u7b49\u7684\u8bba\u6587\u4e2d\u622a\u53d6\u7684\u56fe\u8868\uff0c\u6307\u660e<code>\u4f7f\u7528 ReLU \u6bd4\u4f7f\u7528 tanh \u7684\u6536\u655b\u5feb 6 \u500d\u3002</code></p> <p>\u4f18\u70b9\uff1a</p> <ol> <li>\u52a0\u901f\u6536\u655b</li> </ol> <p>\u76f8\u8f83\u4e8e sigmoid \u548c tanh \u51fd\u6570\uff0cReLU \u5bf9\u4e8e\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u7684\u6536\u655b\u6709\u5de8\u5927\u7684\u52a0\u901f\u4f5c\u7528\uff08 [Krizhevsky __][41]\u7b49\u7684\u8bba\u6587\u6307\u51fa\u6709 6 \u500d\u4e4b\u591a\uff09\u3002\u636e\u79f0\u8fd9\u662f\u7531\u5b83\u7684\u7ebf\u6027\uff0c\u975e\u9971\u548c\u7684\u516c\u5f0f\u5bfc\u81f4\u7684\u3002</p> <ol> <li>\u8ba1\u7b97\u7b80\u5355</li> </ol> <p>sigmoid \u548c tanh \u795e\u7ecf\u5143\u542b\u6709\u6307\u6570\u8fd0\u7b97\u7b49\u8017\u8d39\u8ba1\u7b97\u8d44\u6e90\u7684\u64cd\u4f5c\uff0c\u800c ReLU \u53ef\u4ee5\u7b80\u5355\u5730\u901a\u8fc7\u5bf9\u4e00\u4e2a\u77e9\u9635\u8fdb\u884c\u9608\u503c\u8ba1\u7b97\u5f97\u5230\u3002</p> <p>\u7f3a\u70b9\uff1a</p> <ol> <li>\"Dying ReLU\" \u95ee\u9898\uff1a\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c ReLU \u795e\u7ecf\u5143\u63a5\u6536\u5230\u975e\u5e38\u5927\u7684\u8d1f\u68af\u5ea6\uff0c\u5b83\u53ef\u80fd\u6c38\u8fdc\u5904\u4e8e\u96f6\u8f93\u51fa\u72b6\u6001\uff0c\u8fd9\u610f\u5473\u7740\u795e\u7ecf\u5143\u518d\u4e5f\u4e0d\u4f1a\u6fc0\u6d3b\uff0c\u5bfc\u81f4\u7f51\u7edc\u7684\u90e8\u5206\u5355\u5143\u6c38\u4e45\u5931\u6548\u3002\u8fd9\u4e2a\u95ee\u9898\u901a\u5e38\u88ab\u79f0\u4e3a\u201cReLU \u6b7b\u4ea1\u201d\u3002</li> </ol> <p>\u4f8b\u5982\uff0c\u5982\u679c\u5b66\u4e60\u7387\u8bbe\u7f6e\u5f97\u592a\u9ad8\uff0c\u53ef\u80fd\u4f1a\u53d1\u73b0\u7f51\u7edc\u4e2d 40%\u7684\u795e\u7ecf\u5143\u90fd\u4f1a\u6b7b\u6389\uff08\u5728\u6574\u4e2a\u8bad\u7ec3\u96c6\u4e2d\u8fd9\u4e9b\u795e\u7ecf\u5143\u90fd\u4e0d\u4f1a\u88ab\u6fc0\u6d3b\uff09\u3002\u901a\u8fc7\u5408\u7406\u8bbe\u7f6e\u5b66\u4e60\u7387\uff0c\u8fd9\u79cd\u60c5\u51b5\u7684\u53d1\u751f\u6982\u7387\u4f1a\u964d\u4f4e\u3002</p> <p>Leaky ReLU\uff1aLeaky ReLU \u662f\u4e3a\u89e3\u51b3 \"ReLU \u6b7b\u4ea1\" \u95ee\u9898\u7684\u5c1d\u8bd5\u3002ReLU \u4e2d\u5f53 x&lt; 0 \u65f6\uff0c\u51fd\u6570\u503c\u4e3a 0\u3002Leaky ReLU \u4e3a\u8d1f\u6570\u8f93\u5165\u63d0\u4f9b\u4e86\u4e00\u4e2a\u975e\u5e38\u5c0f\u7684\u659c\u7387\uff08\u4f8b\u5982 0.01\uff09\uff0c\u800c\u4e0d\u662f\u5c06\u8d1f\u6570\u76f4\u63a5\u6620\u5c04\u4e3a\u96f6\u3002\u5176\u516c\u5f0f\u4e3a\uff1a</p> \\[ f(x) = \\begin{cases} x &amp; \\text{if } x &gt; 0 \\\\ \\alpha x &amp; \\text{if } x \\leq 0 \\end{cases} \\] <p>\u5176\u4e2d \\(\\alpha\\) \u662f\u4e00\u4e2a\u5c0f\u5e38\u6570\u3002\u8fd9\u79cd\u8bbe\u8ba1\u5141\u8bb8\u8d1f\u6570\u8f93\u5165\u4e5f\u80fd\u4ea7\u751f\u5c0f\u7684\u8d1f\u68af\u5ea6\uff0c\u4ece\u800c\u51cf\u5c11\u795e\u7ecf\u5143\u201c\u6b7b\u4ea1\u201d\u7684\u53ef\u80fd\u6027\u3002</p> <p><code>Maxout \u662f\u4e00\u79cd\u901a\u7528\u5316\u7684\u6fc0\u6d3b\u51fd\u6570\uff0c\u5b83\u901a\u8fc7\u9009\u62e9\u4e24\u4e2a\u7ebf\u6027\u51fd\u6570\u7684\u6700\u5927\u503c\u6765\u6784\u5efa\u6fc0\u6d3b\u8f93\u51fa</code>\u3002\u5176\u51fd\u6570\u516c\u5f0f\u4e3a\uff1a</p> \\[ f(x) = \\max(w^T_1x + b_1, w^T_2x + b_2) \\] <p>Maxout \u662f\u5bf9 ReLU \u548c leaky ReLU \u7684\u4e00\u822c\u5316\u5f52\u7eb3\uff0c\u5b83\u7684\u51fd\u6570\u662f\uff1a\\(max(w^T_1x+b_1, w^T_2x+b_2)\\)\u3002ReLU \u548c Leaky ReLU \u90fd\u662f\u8fd9\u4e2a\u516c\u5f0f\u7684\u7279\u6b8a\u60c5\u51b5\uff08\u6bd4\u5982 ReLU \u5c31\u662f\u5f53 \\(w_1, b_1 = 0\\) \u7684\u65f6\u5019\uff09\u3002\u8fd9\u6837 Maxout \u795e\u7ecf\u5143\u5c31\u62e5\u6709 ReLU \u5355\u5143\u7684\u6240\u6709\u4f18\u70b9\uff08\u7ebf\u6027\u64cd\u4f5c\u548c\u4e0d\u9971\u548c\uff09\uff0c\u800c\u6ca1\u6709\u5b83\u7684\u7f3a\u70b9\uff08\u6b7b\u4ea1\u7684 ReLU \u5355\u5143\uff09\u3002</p> <ol> <li>\u907f\u514d\u201c\u6b7b\u4ea1\u201dReLU \u95ee\u9898:\u5728\u8bad\u7ec3\u6df1\u5c42\u795e\u7ecf\u7f51\u7edc\u65f6\u66f4\u52a0\u9c81\u68d2</li> <li>\u66f4\u5f3a\u7684\u8868\u8fbe\u80fd\u529b:Maxout \u662f\u5bf9 ReLU \u548c Leaky ReLU \u7684\u4e00\u822c\u5316</li> <li>\u7ebf\u6027\u4e14\u4e0d\u9971\u548c:\u5e2e\u52a9\u89e3\u51b3\u68af\u5ea6\u6d88\u5931\u95ee\u9898\u5e76\u52a0\u5feb\u8bad\u7ec3\u8fc7\u7a0b\u3002</li> </ol> <p>Maxout \u7684\u7f3a\u70b9</p> <ol> <li>\u53c2\u6570\u6570\u91cf\u7ffb\u500d\uff1a\u6bcf\u4e2a Maxout \u795e\u7ecf\u5143\u9700\u8981\u53cc\u500d\u7684\u53c2\u6570\uff0c\u56e0\u4e3a\u5b83\u8ba1\u7b97\u4e86\u4e24\u4e2a\u7ebf\u6027\u51fd\u6570\u7684\u6700\u5927\u503c\u3002\u8fd9\u4f7f\u5f97\u7f51\u7edc\u7684\u53c2\u6570\u6570\u91cf\u5927\u5e45\u589e\u52a0\uff0c\u4ece\u800c\u53ef\u80fd\u5bfc\u81f4\u8ba1\u7b97\u8d44\u6e90\u7684\u9700\u6c42\u548c\u5b58\u50a8\u6210\u672c\u7684\u663e\u8457\u4e0a\u5347\u3002\u968f\u7740\u7f51\u7edc\u6df1\u5ea6\u548c\u5bbd\u5ea6\u7684\u589e\u52a0\uff0c\u8fd9\u4e00\u95ee\u9898\u5c06\u66f4\u52a0\u7a81\u51fa\u3002</li> <li>\u8ba1\u7b97\u590d\u6742\u6027\u589e\u52a0\uff1a\u7531\u4e8e Maxout \u9700\u8981\u8ba1\u7b97\u4e24\u4e2a\u7ebf\u6027\u51fd\u6570\u7684\u6700\u5927\u503c\uff0c\u5b83\u7684\u8ba1\u7b97\u590d\u6742\u6027\u9ad8\u4e8e ReLU\u3002\u5bf9\u4e8e\u975e\u5e38\u6df1\u7684\u7f51\u7edc\uff0cMaxout \u7684\u8ba1\u7b97\u5f00\u9500\u53ef\u80fd\u6210\u4e3a\u74f6\u9888\u3002</li> </ol> <p>\u5c3d\u7ba1 Maxout \u5177\u6709\u5f3a\u5927\u7684\u8868\u8fbe\u80fd\u529b\u548c\u89e3\u51b3 ReLU \u7f3a\u9677\u7684\u4f18\u52bf\uff0c\u4f46\u5176\u8f83\u9ad8\u7684\u53c2\u6570\u548c\u8ba1\u7b97\u5f00\u9500\u4f7f\u5f97\u5b83\u66f4\u9002\u7528\u4e8e\u9700\u8981\u9ad8\u6a21\u578b\u590d\u6742\u6027\u4e14\u8ba1\u7b97\u8d44\u6e90\u5145\u88d5\u7684\u573a\u666f\u3002</p>"},{"location":"CV/Lecture5_Neural_Networks/#\u795e\u7ecf\u5143-neuron-\u5efa\u6a21","title":"\u795e\u7ecf\u5143 neuron \u5efa\u6a21","text":""},{"location":"CV/Lecture5_Neural_Networks/#\u751f\u7269\u52a8\u673a\u4e0e\u8fde\u63a5","title":"\u751f\u7269\u52a8\u673a\u4e0e\u8fde\u63a5","text":"<p>\u5927\u8111\u7684\u57fa\u672c\u8ba1\u7b97\u5355\u4f4d\u662f \u795e\u7ecf\u5143\uff08neuron\uff09\u3002\u4eba\u7c7b\u7684\u795e\u7ecf\u7cfb\u7edf\u4e2d\u5927\u7ea6\u6709 860 \u4ebf\u4e2a\u795e\u7ecf\u5143\uff0c\u5b83\u4eec\u88ab\u5927\u7ea6 10<sup>14-10</sup>15 \u4e2a \u7a81\u89e6\uff08synapses\uff09 \u8fde\u63a5\u8d77\u6765\u3002\u4e0b\u9762\u56fe\u8868\u7684\u5de6\u8fb9\u5c55\u793a\u4e86\u4e00\u4e2a\u751f\u7269\u5b66\u7684\u795e\u7ecf\u5143\uff0c\u53f3\u8fb9\u5c55\u793a\u4e86\u4e00\u4e2a\u5e38\u7528\u7684\u6570\u5b66\u6a21\u578b\u3002\u6bcf\u4e2a\u795e\u7ecf\u5143\u90fd\u4ece\u5b83\u7684\u591a\u4e2a \u6811\u7a81(debdrite) \u83b7\u5f97\u8f93\u5165\u4fe1\u53f7\uff0c\u7136\u540e\u6cbf\u7740\u5b83\u552f\u4e00\u7684 \u8f74\u7a81\uff08axon\uff09 \u4ea7\u751f\u8f93\u51fa\u4fe1\u53f7\u3002\u8f74\u7a81\u5728\u672b\u7aef\u4f1a\u9010\u6e10\u5206\u679d\uff0c\u901a\u8fc7\u7a81\u89e6\u548c\u5176\u4ed6\u795e\u7ecf\u5143\u7684\u6811\u7a81\u76f8\u8fde\u3002<code>\u4eba\u5de5\u795e\u7ecf\u5143\u5219\u901a\u8fc7\u52a0\u6743\u7684\u8f93\u5165\u4fe1\u53f7\u548c\u504f\u5dee\u8ba1\u7b97\u4e00\u4e2a\u6fc0\u6d3b\u503c\uff0c\u5e76\u6839\u636e\u6fc0\u6d3b\u51fd\u6570\u51b3\u5b9a\u8f93\u51fa\u4fe1\u53f7\u3002</code></p> <p>\u5728\u4e0b\u56fe\u53f3\u4fa7\u7684\u795e\u7ecf\u5143\u8ba1\u7b97\u6a21\u578b\u4e2d\uff0c\u6cbf\u7740\u8f74\u7a81\u4f20\u64ad\u7684\u4fe1\u53f7\u5c06\u57fa\u4e8e\u7a81\u89e6\u7684\u7a81\u89e6\u5f3a\u5ea6\uff0c\u4e0e\u5176\u4ed6\u795e\u7ecf\u5143\u7684\u6811\u7a81\u8fdb\u884c\u4e58\u6cd5\u4ea4\u4e92\u3002\u7a81\u89e6\u7684\u5f3a\u5ea6\uff08\u4e5f\u5c31\u662f\u6743\u91cd \\(w_i\\)\uff09\uff0c\u662f\u53ef\u5b66\u4e60\u7684\uff0c\u4e14\u53ef\u4ee5\u63a7\u5236\u4e00\u4e2a\u795e\u7ecf\u5143\u5bf9\u4e8e\u53e6\u4e00\u4e2a\u795e\u7ecf\u5143\u7684\u5f71\u54cd\u5f3a\u5ea6\uff08\u8fd8\u53ef\u4ee5\u63a7\u5236\u5f71\u54cd\u65b9\u5411\uff1a\u4f7f\u5176\u5174\u594b\uff08\u6b63\u6743\u91cd\uff09\u6216\u4f7f\u5176\u6291\u5236\uff08\u8d1f\u6743\u91cd\uff09\uff09\u3002</p> <p>\u5728\u57fa\u672c\u6a21\u578b\u4e2d\uff0c\u5176\u4ed6\u795e\u7ecf\u5143\u7684\u6811\u7a81\u5c06\u4fe1\u53f7\uff08\u4e5f\u5c31\u662f\u8f93\u5165 \\(x_i\\)\uff09\u4f20\u9012\u5230\u7ec6\u80de\u4f53\uff0c\u4fe1\u53f7\u5728\u7ec6\u80de\u4f53\u4e2d\u76f8\u52a0\uff08\u4e0b\u56fe\u53f3\u4fa7\u7684 \\(\\Sigma w_ix_i+b\\))\u3002\u6c42\u548c\u540e\u7684\u4fe1\u53f7\u4f20\u9012\u5230\u6fc0\u6d3b\u51fd\u6570\uff0c\u6fc0\u6d3b\u51fd\u6570\u5bf9\u6c42\u548c\u4fe1\u53f7\u8fdb\u884c\u975e\u7ebf\u6027\u53d8\u6362\uff0c\u8f93\u51fa\u7ed3\u679c\u7528\u4e8e\u51b3\u5b9a\u795e\u7ecf\u5143\u662f\u5426\u6fc0\u6d3b\u53ca\u6fc0\u6d3b\u7a0b\u5ea6\u3002</p> <p>\u6362\u53e5\u8bdd\u8bf4\uff0c\u6bcf\u4e2a\u795e\u7ecf\u5143\u90fd\u5bf9\u5b83\u7684\u8f93\u5165\u548c\u6743\u91cd\u8fdb\u884c\u70b9\u79ef\uff0c\u7136\u540e\u52a0\u4e0a\u504f\u5dee\uff0c\u6700\u540e\u4f7f\u7528\u975e\u7ebf\u6027\u51fd\u6570\uff08\u6216\u79f0\u4e3a\u6fc0\u6d3b\u51fd\u6570\uff09\u3002\u672c\u4f8b\u4e2d\u4f7f\u7528\u7684\u662f sigmoid \u51fd\u6570 \\(\\sigma(x)= 1/(1+e^{-x})\\)\u3002</p> <p>\u7c97\u7cd9\u6a21\u578b\uff1a\u8981\u6ce8\u610f\u8fd9\u4e2a\u5bf9\u4e8e\u751f\u7269\u795e\u7ecf\u5143\u7684\u5efa\u6a21\u662f\u975e\u5e38\u7c97\u7cd9\u7684\uff1a\u5728\u5b9e\u9645\u4e2d\uff0c\u6709\u5f88\u591a\u4e0d\u540c\u7c7b\u578b\u7684\u795e\u7ecf\u5143\uff0c\u6bcf\u79cd\u90fd\u6709\u4e0d\u540c\u7684\u5c5e\u6027\u3002\u751f\u7269\u795e\u7ecf\u5143\u7684\u6811\u7a81\u53ef\u4ee5\u8fdb\u884c\u590d\u6742\u7684\u975e\u7ebf\u6027\u8ba1\u7b97\u3002\u7a81\u89e6\u5e76\u4e0d\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u6743\u91cd\uff0c\u5b83\u4eec\u662f\u590d\u6742\u7684\u975e\u7ebf\u6027\u52a8\u6001\u7cfb\u7edf\u3002</p>"},{"location":"CV/Lecture5_Neural_Networks/#\u4f5c\u4e3a\u7ebf\u6027\u5206\u7c7b\u5668\u7684\u5355\u4e2a\u795e\u7ecf\u5143","title":"\u4f5c\u4e3a\u7ebf\u6027\u5206\u7c7b\u5668\u7684\u5355\u4e2a\u795e\u7ecf\u5143","text":"<p>\u795e\u7ecf\u5143\u6a21\u578b\u901a\u8fc7\u5bf9\u8f93\u5165\u4fe1\u53f7\u8fdb\u884c\u52a0\u6743\u6c42\u548c\uff0c\u7136\u540e\u901a\u8fc7\u6fc0\u6d3b\u51fd\u6570\uff08\u5982 sigmoid \u51fd\u6570\uff09\u5c06\u5176\u8f93\u51fa\u4e3a\u4e00\u4e2a\u6982\u7387\u503c\u3002\u8fd9\u4e2a\u8f93\u51fa\u53ef\u4ee5\u76f4\u63a5\u7528\u4e8e\u4e8c\u5206\u7c7b\u4efb\u52a1\uff1a</p> <ul> <li><code>\u5f53\u795e\u7ecf\u5143\u8f93\u51fa\u63a5\u8fd1 1 \u65f6\uff0c\u8868\u793a\u795e\u7ecf\u5143\u201c\u559c\u6b22\u201d\u8f93\u5165\uff0c\u610f\u5473\u7740\u8f93\u5165\u5c5e\u4e8e\u67d0\u4e2a\u7279\u5b9a\u7c7b\u522b\u3002</code></li> <li><code>\u5f53\u8f93\u51fa\u63a5\u8fd1 0 \u65f6\uff0c\u8868\u793a\u795e\u7ecf\u5143\u201c\u4e0d\u559c\u6b22\u201d\u8f93\u5165\uff0c\u610f\u5473\u7740\u8f93\u5165\u4e0d\u5c5e\u4e8e\u8be5\u7c7b\u522b\u3002</code></li> </ul> <p>\u56e0\u6b64\uff0c\u5355\u4e2a\u795e\u7ecf\u5143\u6a21\u578b\u80fd\u591f\u5212\u5206\u8f93\u5165\u7a7a\u95f4\u4e3a\u4e24\u4e2a\u7ebf\u6027\u5206\u9694\u7684\u533a\u57df\uff0c\u8fd9\u7c7b\u4f3c\u4e8e\u7ebf\u6027\u5206\u7c7b\u5668\u7684\u884c\u4e3a\u3002</p> <p>\u4e8c\u5206\u7c7b Softmax \u5206\u7c7b\u5668\u3002\u5728\u4e8c\u5206\u7c7b\u4efb\u52a1\u4e2d\uff0csigmoid \u51fd\u6570\u7684\u8f93\u51fa\u53ef\u4ee5\u88ab\u89e3\u91ca\u4e3a\u67d0\u4e2a\u7c7b\u522b\u7684\u6982\u7387 \\(P(y_i = 1|x_i; w)\\)\u3002\u53e6\u4e00\u7c7b\u522b\u7684\u6982\u7387\u5219\u662f \\(P(y_i = 0|x_i; w) = 1 - P(y_i = 1|x_i; w)\\)\uff0c\u56e0\u4e3a\u603b\u6982\u7387\u4e3a 1\u3002\u57fa\u4e8e\u8fd9\u4e2a\u6982\u7387\u5206\u5e03\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ea4\u53c9\u71b5\u635f\u5931\u6765\u4f18\u5316\u795e\u7ecf\u5143\u53c2\u6570\uff0c\u4ece\u800c\u5f97\u5230\u4e00\u4e2a\u4e8c\u5206\u7c7b\u7684 Softmax \u5206\u7c7b\u5668\uff08\u5373\u903b\u8f91\u56de\u5f52\u6a21\u578b\uff09\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u795e\u7ecf\u5143\u7684\u8f93\u51fa\u5927\u4e8e 0.5 \u65f6\uff0c\u6a21\u578b\u9884\u6d4b\u8f93\u5165\u5c5e\u4e8e\u7b2c\u4e00\u4e2a\u7c7b\u522b\u3002</p> <p>\u4e8c\u5206\u7c7b SVM \u5206\u7c7b\u5668\u3002\u901a\u8fc7\u5728\u795e\u7ecf\u5143\u8f93\u51fa\u7aef\u589e\u52a0\u4e00\u4e2a\u6700\u5927\u8fb9\u754c\u6298\u53f6\u635f\u5931\uff08hinge loss\uff09\u51fd\u6570\uff0c\u795e\u7ecf\u5143\u53ef\u4ee5\u7528\u4f5c\u652f\u6301\u5411\u91cf\u673a\uff08SVM\uff09\u7684\u4e8c\u5206\u7c7b\u5668\u3002\u6700\u5927\u8fb9\u754c\u6298\u53f6\u635f\u5931\u5f3a\u8c03\u5206\u7c7b\u8fb9\u754c\u7684\u6700\u5927\u5316\uff0c\u4f7f\u5206\u7c7b\u5668\u66f4\u52a0\u9c81\u68d2\u3002</p> <p>\u7406\u89e3\u6b63\u5219\u5316\u3002\u5728 SVM/Softmax \u7684\u4f8b\u5b50\u4e2d\uff0c\u6b63\u5219\u5316\u9879\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u79cd\u201c<code>\u9010\u6e10\u9057\u5fd8</code>\u201d\u7684\u673a\u5236\u3002\u5b83\u901a\u8fc7<code>\u5f15\u5bfc\u6743\u91cd\u9010\u6e10\u8d8b\u5411\u4e8e 0</code>\uff0c\u4ece\u800c<code>\u9632\u6b62\u6a21\u578b\u8fc7\u62df\u5408</code>\u3002\u8fd9\u79cd\u65b9\u5f0f\u5728\u751f\u7269\u5b66\u4e0a\u7c7b\u4f3c\u4e8e\u7a81\u89e6\u7684\u957f\u671f\u8870\u51cf\uff0c\u5373\u7a81\u89e6\u5f3a\u5ea6\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u9010\u6e10\u51cf\u5f31\u3002</p>"},{"location":"CV/Lecture6_Backpropagation/","title":"Backpropagation","text":"<p> \u7ea6 5878 \u4e2a\u5b57  107 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 31 \u5206\u949f</p>"},{"location":"CV/Lecture6_Backpropagation/#\u7b80\u4ecb","title":"\u7b80\u4ecb","text":"<p>\u53cd\u5411\u4f20\u64ad\u662f\u4e00\u79cd\u901a\u8fc7\u94fe\u5f0f\u6cd5\u5219\u9012\u5f52\u8ba1\u7b97\u8868\u8fbe\u5f0f\u68af\u5ea6\u7684\u65b9\u6cd5\uff0c\u5e7f\u6cdb\u5e94\u7528\u4e8e\u795e\u7ecf\u7f51\u7edc\u7684\u4f18\u5316\u3002\u4ee5\u4e0b\u662f\u672c\u8282\u5185\u5bb9\u7684\u63d0\u70bc\uff1a</p> <ul> <li> <p>\u6838\u5fc3\u95ee\u9898 : \u7ed9\u5b9a\u51fd\u6570 f(x) \uff0c\u5176\u4e2d x \u662f\u8f93\u5165\u6570\u636e\u7684\u5411\u91cf\uff0c\u76ee\u6807\u662f\u8ba1\u7b97\u51fd\u6570 f \u5173\u4e8e x \u7684\u68af\u5ea6 \\(\\nabla f(x)\\) \u3002\u5728\u795e\u7ecf\u7f51\u7edc\u4e2d\uff0c\u51fd\u6570 f \u901a\u5e38\u5bf9\u5e94\u4e8e\u635f\u5931\u51fd\u6570 L \uff0c\u8f93\u5165 x \u5305\u542b\u8bad\u7ec3\u6570\u636e\u548c\u795e\u7ecf\u7f51\u7edc\u7684\u53c2\u6570\uff08\u5982\u6743\u91cd W \u548c\u504f\u5dee b \uff09\u3002\u8ba1\u7b97\u8fd9\u4e9b\u53c2\u6570\u7684\u68af\u5ea6\uff0c\u662f\u4f18\u5316\u6a21\u578b\u7684\u5173\u952e\u6b65\u9aa4\u3002</p> </li> <li> <p>\u94fe\u5f0f\u6cd5\u5219\u4e0e\u9012\u5f52\u8ba1\u7b97 :\u53cd\u5411\u4f20\u64ad\u57fa\u4e8e\u94fe\u5f0f\u6cd5\u5219\uff0c\u901a\u8fc7\u9012\u5f52\u5730\u8ba1\u7b97\u6bcf\u5c42\u8f93\u51fa\u76f8\u5bf9\u4e8e\u8f93\u5165\u7684\u5bfc\u6570\uff0c\u6700\u7ec8\u83b7\u53d6\u635f\u5931\u51fd\u6570\u5bf9\u5404\u5c42\u53c2\u6570\u7684\u68af\u5ea6\u3002\u8fd9\u4e00\u8fc7\u7a0b\u5c06\u635f\u5931\u51fd\u6570\u7684\u6574\u4f53\u5f71\u54cd\u5206\u89e3\u5230\u6bcf\u4e2a\u53c2\u6570\u4e0a\uff0c\u4f7f\u5f97\u795e\u7ecf\u7f51\u7edc\u7684\u8bad\u7ec3\u6210\u4e3a\u53ef\u80fd</p> </li> </ul>"},{"location":"CV/Lecture6_Backpropagation/#\u68af\u5ea6\u4e0e\u94fe\u5f0f\u6cd5\u5219","title":"\u68af\u5ea6\u4e0e\u94fe\u5f0f\u6cd5\u5219","text":""},{"location":"CV/Lecture6_Backpropagation/#\u7b80\u5355\u8868\u8fbe\u5f0f\u548c\u7406\u89e3\u68af\u5ea6","title":"\u7b80\u5355\u8868\u8fbe\u5f0f\u548c\u7406\u89e3\u68af\u5ea6","text":"<ol> <li> <p>\u51fd\u6570\u5b9a\u4e49\u53ca\u5176\u504f\u5bfc\u6570\uff1a</p> </li> <li> <p>\u8003\u8651\u4e00\u4e2a\u7b80\u5355\u7684\u4e8c\u5143\u4e58\u6cd5\u51fd\u6570 f(x, y) = xy \u3002</p> </li> <li>\u5bf9 x \u548c y \u4e24\u4e2a\u53d8\u91cf\u5206\u522b\u6c42\u504f\u5bfc\u6570\uff0c\u53ef\u4ee5\u5f97\u5230\uff1a<ul> <li>\u5bf9 x \u7684\u504f\u5bfc\u6570\u4e3a y \u3002</li> <li>\u5bf9 y \u7684\u504f\u5bfc\u6570\u4e3a x \u3002</li> </ul> </li> </ol> <p>\u89e3\u91ca\uff1a</p> <ul> <li>\u5bfc\u6570\u7684\u610f\u4e49\u5728\u4e8e\uff1a\u5b83\u8868\u793a\u5728\u67d0\u4e2a\u70b9\u9644\u8fd1\uff0c\u51fd\u6570\u503c\u76f8\u5bf9\u4e8e\u67d0\u4e2a\u53d8\u91cf\u7684\u53d8\u5316\u7387\u3002</li> <li> <p>\u5bfc\u6570\u672c\u8d28\u4e0a\u662f\u51fd\u6570\u5bf9\u4e8e\u53d8\u91cf\u53d8\u5316\u7684\u654f\u611f\u5ea6\u3002\u6bd4\u5982\uff0c\u5bf9\u4e8e f(x, y) = xy \uff0c\u82e5 x = 4 \u4e14 y = -3 \uff0c\u51fd\u6570\u503c\u4e3a -12\uff0c\u800c\u6b64\u65f6 x \u7684\u5bfc\u6570\u4e3a -3\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c x \u7a0d\u5fae\u589e\u52a0\u4e00\u4e9b\uff0c\u51fd\u6570\u503c\u4f1a\u51cf\u5c11\uff0c\u5e76\u4e14\u51cf\u5c11\u7684\u91cf\u662f x \u589e\u91cf\u7684\u4e09\u500d\uff08\u7531\u4e8e\u8d1f\u53f7\uff09\u3002\u540c\u7406\uff0c\u5982\u679c y \u589e\u52a0\u4e00\u70b9\uff0c\u51fd\u6570\u503c\u4e5f\u4f1a\u589e\u52a0\uff0c\u5e76\u4e14\u589e\u52a0\u7684\u91cf\u662f y \u589e\u91cf\u7684\u56db\u500d\u3002</p> </li> <li> <p>\u68af\u5ea6\u7684\u6982\u5ff5\uff1a</p> </li> <li> <p>\u68af\u5ea6\u662f\u7531\u6240\u6709\u504f\u5bfc\u6570\u7ec4\u6210\u7684\u5411\u91cf\u3002\u4f8b\u5982\u5bf9\u4e8e f(x, y) = xy \uff1a</p> <ul> <li>\u68af\u5ea6\u5411\u91cf\u4e3a [y, x] \u3002</li> </ul> </li> </ul> <p>\u89e3\u91ca\uff1a</p> <ul> <li> <p>\u867d\u7136\u68af\u5ea6\u662f\u4e00\u4e2a\u5411\u91cf\uff0c\u4f46\u4eba\u4eec\u6709\u65f6\u4f1a\u7b80\u5355\u5730\u8bf4\u201cx \u4e0a\u7684\u68af\u5ea6\u201d\u6216\u201cy \u4e0a\u7684\u68af\u5ea6\u201d\u6765\u8868\u793a\u5bf9\u8fd9\u4e24\u4e2a\u53d8\u91cf\u7684\u654f\u611f\u5ea6\u3002</p> </li> <li> <p>\u6700\u5927\u503c\u64cd\u4f5c\u7684\u5bfc\u6570\uff1a</p> </li> <li>\u5bf9\u4e8e f(x, y) = \\max(x, y) \uff1a<ul> <li>\u82e5 x \u5927\u4e8e\u6216\u7b49\u4e8e y \uff0c\u5219\u5bf9 x \u7684\u5bfc\u6570\u4e3a 1\uff0c\u5bf9 y \u7684\u5bfc\u6570\u4e3a 0\uff1b</li> <li>\u82e5 y \u5927\u4e8e\u6216\u7b49\u4e8e x \uff0c\u5219\u5bf9 y \u7684\u5bfc\u6570\u4e3a 1\uff0c\u5bf9 x \u7684\u5bfc\u6570\u4e3a 0\u3002</li> </ul> </li> </ul>"},{"location":"CV/Lecture6_Backpropagation/#\u4f7f\u7528\u94fe\u5f0f\u6cd5\u5219\u8ba1\u7b97\u590d\u5408\u8868\u8fbe\u5f0f","title":"\u4f7f\u7528\u94fe\u5f0f\u6cd5\u5219\u8ba1\u7b97\u590d\u5408\u8868\u8fbe\u5f0f","text":"<p>\u4e3a\u4e86\u8ba1\u7b97\u590d\u5408\u8868\u8fbe\u5f0f\u7684\u68af\u5ea6\uff0c\u94fe\u5f0f\u6cd5\u5219\u901a\u8fc7\u5c06\u590d\u6742\u8868\u8fbe\u5f0f\u62c6\u89e3\u4e3a\u591a\u4e2a\u7b80\u5355\u8868\u8fbe\u5f0f\uff0c\u5e76\u9010\u6b65\u8ba1\u7b97\u6bcf\u4e2a\u4e2d\u95f4\u53d8\u91cf\u7684\u68af\u5ea6\uff0c\u6700\u7ec8\u5c06\u7ed3\u679c\u7ec4\u5408\u8d77\u6765\u3002\u4ee5\u4e0b\u662f\u5bf9\u8fd9\u4e00\u8fc7\u7a0b\u7684\u8be6\u7ec6\u89e3\u6790\uff1a</p> <p>\u8003\u8651\u4e00\u4e2a\u590d\u5408\u51fd\u6570 f(x, y, z) = (x + y)z \u3002\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u53ef\u4ee5\u5206\u89e3\u6210\u4e24\u90e8\u5206\uff1a</p> <ol> <li>q = x + y</li> <li>f = qz</li> </ol> <p>\u5bf9\u4e8e\u4e2d\u95f4\u53d8\u91cf q = x + y \uff1a</p> <ul> <li>\\(\\frac{\\partial q}{\\partial x} = 1\\)</li> <li>\\(\\frac{\\partial q}{\\partial y} = 1\\)</li> </ul> <p>\u5bf9\u4e8e\u6700\u7ec8\u51fd\u6570 f = qz \uff1a</p> <ul> <li>\\(\\frac{\\partial f}{\\partial q} = z\\)</li> <li>\\(\\frac{\\partial f}{\\partial z} = q\\)</li> </ul> <p>\u73b0\u5728\u6211\u4eec\u5173\u5fc3\u7684\u662f f \u76f8\u5bf9\u4e8e\u539f\u59cb\u8f93\u5165\u53d8\u91cf x \u3001 y \u548c z \u7684\u68af\u5ea6\uff0c\u800c\u4e0d\u662f\u4e2d\u95f4\u53d8\u91cf q \u7684\u68af\u5ea6\u3002\u94fe\u5f0f\u6cd5\u5219\u544a\u8bc9\u6211\u4eec\uff0c\u8ba1\u7b97\u590d\u5408\u51fd\u6570\u7684\u68af\u5ea6\u65f6\uff0c\u53ef\u4ee5\u5c06\u5404\u90e8\u5206\u68af\u5ea6\u76f8\u4e58\uff1a</p> <ul> <li>\\(\\frac{\\partial f}{\\partial x} = \\frac{\\partial f}{\\partial q} \\cdot \\frac{\\partial q}{\\partial x} = z \\cdot 1 = z\\)</li> <li>\\(\\frac{\\partial f}{\\partial y} = \\frac{\\partial f}{\\partial q} \\cdot \\frac{\\partial q}{\\partial y} = z \\cdot 1 = z\\)</li> <li>\\(\\frac{\\partial f}{\\partial z} = q = x + y\\)</li> </ul>"},{"location":"CV/Lecture6_Backpropagation/#\u53cd\u5411\u4f20\u64ad","title":"\u53cd\u5411\u4f20\u64ad","text":""},{"location":"CV/Lecture6_Backpropagation/#\u76f4\u89c2\u7406\u89e3","title":"\u76f4\u89c2\u7406\u89e3","text":"<p>\u53cd\u5411\u4f20\u64ad\u662f\u795e\u7ecf\u7f51\u7edc\u8bad\u7ec3\u7684\u6838\u5fc3\u7b97\u6cd5\uff0c\u5b83\u901a\u8fc7\u94fe\u5f0f\u6cd5\u5219\u6709\u6548\u5730\u8ba1\u7b97\u6bcf\u4e2a\u53c2\u6570\u5bf9\u635f\u5931\u51fd\u6570\u7684\u5f71\u54cd\u3002\u4e3a\u4e86\u76f4\u89c2\u7406\u89e3\u53cd\u5411\u4f20\u64ad\uff0c\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a<code>\u5728\u7f51\u7edc\u4e2d\u9010\u5c42\u4f20\u64ad\u7684\u68af\u5ea6\u4fe1\u53f7\uff0c\u7c7b\u4f3c\u4e8e\u95e8\u5355\u5143\u4e4b\u95f4\u7684\u201c\u6d88\u606f\u4f20\u9012\u201d</code>\u3002</p> <ul> <li>\u524d\u5411\u4f20\u64ad\u4e0e\u5c40\u90e8\u8ba1\u7b97</li> </ul> <p>\u5728\u524d\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e2a\u95e8\u5355\u5143\uff08\u5982\u52a0\u6cd5\u95e8\u3001\u4e58\u6cd5\u95e8\u7b49\uff09\u63a5\u6536\u8f93\u5165\u5e76\u8ba1\u7b97\u4e24\u4e2a\u7ed3\u679c\uff1a</p> <ol> <li>\u8f93\u51fa\u503c\uff1a\u8fd9\u662f\u95e8\u5355\u5143\u5bf9\u8f93\u5165\u7684\u76f4\u63a5\u8ba1\u7b97\u7ed3\u679c\u3002</li> <li>\u5c40\u90e8\u68af\u5ea6\uff1a\u8fd9\u662f\u95e8\u5355\u5143\u7684\u8f93\u51fa\u5bf9\u5176\u8f93\u5165\u7684\u5bfc\u6570\u3002\u4f8b\u5982\uff0c\u52a0\u6cd5\u95e8\u7684\u5c40\u90e8\u68af\u5ea6\u603b\u662f+1\uff0c\u56e0\u4e3a\u52a0\u6cd5\u5bf9\u8f93\u5165\u7684\u53d8\u5316\u6709\u7ebf\u6027\u5f71\u54cd\u3002</li> </ol> <p>\u8fd9\u4e9b\u8ba1\u7b97\u90fd\u662f\u5c40\u90e8\u7684\uff0c\u4e0d\u9700\u8981\u8003\u8651\u7f51\u7edc\u7684\u6574\u4f53\u7ed3\u6784\u3002</p> <ul> <li>\u53cd\u5411\u4f20\u64ad\u4e2d\u7684\u94fe\u5f0f\u6cd5\u5219</li> </ul> <p>\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u6574\u4e2a\u7f51\u7edc\u7684\u8f93\u51fa\u68af\u5ea6\u88ab\u9010\u6b65\u4f20\u9012\u56de\u6bcf\u4e2a\u95e8\u5355\u5143\u3002\u6bcf\u4e2a\u95e8\u5355\u5143\u63a5\u6536\u5230\u4ece\u4e0b\u6e38\u4f20\u9012\u6765\u7684\u68af\u5ea6\uff0c\u5e76\u5c06\u5176\u4e58\u4ee5\u81ea\u5df1\u7684\u5c40\u90e8\u68af\u5ea6\uff0c\u4ee5\u8ba1\u7b97\u8be5\u95e8\u5355\u5143\u7684\u8f93\u5165\u53d8\u91cf\u7684\u68af\u5ea6\uff0c\u4ece\u800c\u5f97\u5230\u6574\u4e2a\u7f51\u7edc\u7684\u8f93\u51fa\u5bf9\u8be5\u95e8\u5355\u5143\u7684\u6bcf\u4e2a\u8f93\u5165\u503c\u7684\u68af\u5ea6\u3002</p> <p>\u5177\u4f53\u793a\u4f8b\uff1a\u52a0\u6cd5\u95e8\u6536\u5230\u4e86\u8f93\u5165 [-2, 5]\uff0c\u8ba1\u7b97\u8f93\u51fa\u662f 3\u3002\u65e2\u7136\u8fd9\u4e2a\u95e8\u662f\u52a0\u6cd5\u64cd\u4f5c\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e24\u4e2a\u8f93\u5165\u7684\u5c40\u90e8\u68af\u5ea6\u90fd\u662f+1\u3002\u7f51\u7edc\u7684\u5176\u4f59\u90e8\u5206\u8ba1\u7b97\u51fa\u6700\u7ec8\u503c\u4e3a-12\u3002\u5728\u53cd\u5411\u4f20\u64ad\u65f6\u5c06\u9012\u5f52\u5730\u4f7f\u7528\u94fe\u5f0f\u6cd5\u5219\uff0c\u7b97\u5230\u52a0\u6cd5\u95e8\uff08\u662f\u4e58\u6cd5\u95e8\u7684\u8f93\u5165\uff09\u7684\u65f6\u5019\uff0c\u77e5\u9053\u52a0\u6cd5\u95e8\u7684\u8f93\u51fa\u7684\u68af\u5ea6\u662f-4\u3002\u5982\u679c\u7f51\u7edc\u5982\u679c\u60f3\u8981\u8f93\u51fa\u503c\u66f4\u9ad8\uff0c\u90a3\u4e48\u53ef\u4ee5\u8ba4\u4e3a\u5b83\u4f1a\u60f3\u8981\u52a0\u6cd5\u95e8\u7684\u8f93\u51fa\u66f4\u5c0f\u4e00\u70b9\uff08\u56e0\u4e3a\u8d1f\u53f7\uff09\uff0c\u800c\u4e14\u8fd8\u6709\u4e00\u4e2a 4 \u7684\u500d\u6570\u3002\u7ee7\u7eed\u9012\u5f52\u5e76\u5bf9\u68af\u5ea6\u4f7f\u7528\u94fe\u5f0f\u6cd5\u5219\uff0c\u52a0\u6cd5\u95e8\u62ff\u5230\u68af\u5ea6\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u68af\u5ea6\u5206\u522b\u4e58\u5230\u6bcf\u4e2a\u8f93\u5165\u503c\u7684\u5c40\u90e8\u68af\u5ea6\uff08\u5c31\u662f\u8ba9-4 \u4e58\u4ee5 x \u548c y \u7684\u5c40\u90e8\u68af\u5ea6\uff0cx \u548c y \u7684\u5c40\u90e8\u68af\u5ea6\u90fd\u662f 1\uff0c\u6240\u4ee5\u6700\u7ec8\u90fd\u662f-4\uff09\u3002\u53ef\u4ee5\u770b\u5230\u5f97\u5230\u4e86\u60f3\u8981\u7684\u6548\u679c\uff1a\u5982\u679c x\uff0cy \u51cf\u5c0f\uff08\u5b83\u4eec\u7684\u68af\u5ea6\u4e3a\u8d1f\uff09\uff0c\u90a3\u4e48\u52a0\u6cd5\u95e8\u7684\u8f93\u51fa\u503c\u51cf\u5c0f\uff0c\u8fd9\u4f1a\u8ba9\u4e58\u6cd5\u95e8\u7684\u8f93\u51fa\u503c\u589e\u5927\u3002</p> <p>\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u52a0\u6cd5\u95e8\u3001\u4e58\u6cd5\u95e8\u548c\u53d6\u6700\u5927\u503c\u95e8\u5355\u5143\u7684\u884c\u4e3a\u53ef\u4ee5\u901a\u8fc7\u76f4\u89c2\u7684\u65b9\u5f0f\u7406\u89e3\uff0c\u8fd9\u6709\u52a9\u4e8e\u8c03\u8bd5\u795e\u7ecf\u7f51\u7edc\u5e76\u786e\u4fdd\u68af\u5ea6\u7684\u6b63\u786e\u4f20\u64ad\u3002</p> <p></p> <ul> <li> <p>\u52a0\u6cd5\u95e8\u5355\u5143 \u65e0\u8bba\u8f93\u5165\u7684\u6570\u503c\u662f\u591a\u5c11\uff0c\u68af\u5ea6\u90fd\u4f1a\u88ab\u5e73\u7b49\u5730\u5206\u914d\u7ed9\u6240\u6709\u7684\u8f93\u5165\u3002\u8fd9\u662f\u56e0\u4e3a\u52a0\u6cd5\u64cd\u4f5c\u7684\u5c40\u90e8\u68af\u5ea6\u90fd\u662f\u7b80\u5355\u7684+1\uff0c\u56e0\u6b64\u8f93\u51fa\u7684\u68af\u5ea6\u4e0d\u53d8\u5730\u4f20\u9012\u7ed9\u6bcf\u4e00\u4e2a\u8f93\u5165\u3002\u56e0\u4e3a\u4e58\u4ee5 1.0 \u4fdd\u6301\u4e0d\u53d8\u3002<code>\u4e0a\u4f8b\u4e2d\uff0c\u52a0\u6cd5\u95e8\u628a\u68af\u5ea6 2.00 \u4e0d\u53d8\u4e14\u76f8\u7b49\u5730\u8def\u7531\u7ed9\u4e86\u4e24\u4e2a\u8f93\u5165\u3002</code></p> </li> <li> <p>\u53d6\u6700\u5927\u503c\u95e8\u5355\u5143 \u53d6\u6700\u5927\u503c\u95e8\u5355\u5143\u7684\u884c\u4e3a\u7a0d\u5fae\u590d\u6742\u4e00\u4e9b\u3002<code>\u5b83\u6839\u636e\u8f93\u5165\u7684\u503c\u9009\u62e9\u5c06\u68af\u5ea6\u4f20\u9012\u7ed9\u54ea\u4e2a\u8f93\u5165\u3002</code>\u5177\u4f53\u6765\u8bf4\uff0c\u5b83\u53ea\u5c06\u68af\u5ea6\u4f20\u9012\u7ed9\u524d\u5411\u4f20\u64ad\u4e2d\u503c\u6700\u5927\u7684\u90a3\u4e2a\u8f93\u5165\u3002\u56e0\u4e3a\u6700\u5927\u503c\u64cd\u4f5c\u7684\u5c40\u90e8\u68af\u5ea6\u5bf9\u4e8e\u6700\u5927\u7684\u8f93\u5165\u662f 1\uff0c\u5bf9\u4e8e\u5176\u4ed6\u8f93\u5165\u5219\u662f 0\uff0c\u56e0\u6b64\u53ea\u6709\u6700\u5927\u7684\u8f93\u5165\u4f1a\u63a5\u6536\u5230\u68af\u5ea6\u3002\u4e0a\u4f8b\u4e2d\uff0c\u7531\u4e8e z \u7684\u503c\u6bd4 w \u5927\uff0c\u6240\u4ee5\u5c06\u68af\u5ea6\u4f20\u7ed9 z\uff0c\u56e0\u6b64 z \u7684\u68af\u5ea6\u662f 2\uff0cw \u7684\u68af\u5ea6\u662f 0</p> </li> <li> <p>\u4e58\u6cd5\u95e8\u5355\u5143 \u4e58\u6cd5\u95e8\u5355\u5143\u7684\u884c\u4e3a\u6700\u4e3a\u590d\u6742\u3002\u5176\u5c40\u90e8\u68af\u5ea6\u4e3a\u8f93\u5165\u7684\u53e6\u4e00\u4e2a\u53d8\u91cf\u503c\uff0c\u5e76\u4e14\u5b83\u4eec\u76f8\u4e92\u4ea4\u6362\u4f4d\u7f6e\u540e\u518d\u76f8\u4e58\uff0c\u7136\u540e\u901a\u8fc7\u94fe\u5f0f\u6cd5\u5219\u4e58\u4ee5\u4e0a\u6e38\u7684\u68af\u5ea6\u3002\u56e0\u6b64\uff0c<code>\u68af\u5ea6\u7684\u5927\u5c0f\u4e0d\u4ec5\u53d6\u51b3\u4e8e\u8f93\u5165\u7684\u5927\u5c0f\uff0c\u8fd8\u53d6\u51b3\u4e8e\u4e0a\u6e38\u68af\u5ea6\u7684\u5927\u5c0f</code>\u3002\u5728\u4f60\u7684\u4f8b\u5b50\u4e2d\uff0c<code>x</code> \u7684\u68af\u5ea6\u8ba1\u7b97\u4e3a <code>-4.00 * 2.00 = -8.00</code>\u3002</p> </li> </ul> <p>\u975e\u76f4\u89c2\u5f71\u54cd\u53ca\u5176\u7ed3\u679c\u3002\u6ce8\u610f\u4e00\u79cd\u6bd4\u8f83\u7279\u6b8a\u7684\u60c5\u51b5\uff0c\u5982\u679c\u4e58\u6cd5\u95e8\u5355\u5143\u7684\u5176\u4e2d\u4e00\u4e2a\u8f93\u5165\u975e\u5e38\u5c0f\uff0c\u800c\u53e6\u4e00\u4e2a\u8f93\u5165\u975e\u5e38\u5927\uff0c\u90a3\u4e48\u4e58\u6cd5\u95e8\u7684\u64cd\u4f5c\u5c06\u4f1a\u4e0d\u662f\u90a3\u4e48\u76f4\u89c2\uff1a\u5b83\u5c06\u4f1a\u628a\u5927\u7684\u68af\u5ea6\u5206\u914d\u7ed9\u5c0f\u7684\u8f93\u5165\uff0c\u628a\u5c0f\u7684\u68af\u5ea6\u5206\u914d\u7ed9\u5927\u7684\u8f93\u5165\u3002\u5728\u7ebf\u6027\u5206\u7c7b\u5668\u4e2d\uff0c\u6743\u91cd\u548c\u8f93\u5165\u662f\u8fdb\u884c\u70b9\u79ef \\(w^Tx_i\\)\uff0c\u8fd9 d \u8bf4\u660e\u8f93\u5165\u6570\u636e\u7684\u5927\u5c0f\u5bf9\u4e8e\u6743\u91cd\u68af\u5ea6\u7684\u5927\u5c0f\u6709\u5f71\u54cd\u3002\u4f8b\u5982\uff0c\u5728\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u5bf9\u6240\u6709\u8f93\u5165\u6570\u636e\u6837\u672c \\(x_i\\) \u4e58\u4ee5 1000\uff0c\u90a3\u4e48\u6743\u91cd\u7684\u68af\u5ea6\u5c06\u4f1a\u589e\u5927 1000 \u500d\uff0c\u8fd9\u6837\u5c31\u5fc5\u987b\u964d\u4f4e\u5b66\u4e60\u7387\u6765\u5f25\u8865\u3002</p> <p>\u4ece\u53cd\u5411\u4f20\u64ad\u7684\u89d2\u5ea6\u770b\uff0c\u6570\u636e\u9884\u5904\u7406\u975e\u5e38\u91cd\u8981\u3002\u672a\u9002\u5f53\u9884\u5904\u7406\u7684\u6570\u636e\u4f1a\u5bfc\u81f4\u68af\u5ea6\u7684\u5267\u70c8\u6ce2\u52a8\uff0c\u4ece\u800c\u5f71\u54cd\u6a21\u578b\u7684\u8bad\u7ec3\u8fc7\u7a0b\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u6570\u636e\u8fc7\u5927\uff0c\u6743\u91cd\u68af\u5ea6\u4e5f\u4f1a\u8fc7\u5927\uff0c\u5bfc\u81f4\u5b66\u4e60\u7387\u7684\u8c03\u6574\u3002\u8fd9\u8bf4\u660e\uff0c\u5373\u4f7f\u5fae\u5c0f\u7684\u6570\u636e\u53d8\u5316\uff0c\u4e5f\u53ef\u80fd\u5bf9\u8bad\u7ec3\u8fc7\u7a0b\u4ea7\u751f\u6df1\u8fdc\u7684\u5f71\u54cd\u3002</p>"},{"location":"CV/Lecture6_Backpropagation/#\u6a21\u5757\u5316sigmoid-\u4f8b\u5b50","title":"\u6a21\u5757\u5316\uff1aSigmoid \u4f8b\u5b50","text":"<p>\u8003\u8651\u4ee5\u4e0b\u8868\u8fbe\u5f0f\uff1a</p> \\[ f(w, x) = \\frac{1}{1 + e^{-(w_0x_0 + w_1x_1 + w_2)}} \\] <p>\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u63cf\u8ff0\u4e86\u4e00\u4e2a\u542b\u6709\u8f93\u5165 \\(\\mathbf{x}\\) \u548c\u6743\u91cd \\(\\mathbf{w}\\) \u7684\u4e8c\u7ef4\u795e\u7ecf\u5143\uff0c\u8be5\u795e\u7ecf\u5143\u4f7f\u7528\u4e86 Sigmoid \u6fc0\u6d3b\u51fd\u6570\u3002\u5728\u8fd9\u91cc\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u51fd\u6570\u770b\u4f5c\u662f\u7531\u591a\u4e2a\u201c\u95e8\u201d\u7ec4\u6210\u7684\u3002</p> <p>\u4f7f\u7528 Sigmoid \u6fc0\u6d3b\u51fd\u6570\u7684\u4e8c\u7ef4\u795e\u7ecf\u5143\u7684\u4f8b\u5b50\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\u8f93\u5165\u4e3a \\([x_0, x_1]\\)\uff0c\u53ef\u5b66\u4e60\u7684\u6743\u91cd\u4e3a \\([w_0, w_1, w_2]\\)\u3002\u795e\u7ecf\u5143\u5bf9\u8f93\u5165\u6570\u636e\u8fdb\u884c\u70b9\u79ef\u8fd0\u7b97\uff0c\u7136\u540e\u5176\u6fc0\u6d3b\u503c\u88ab Sigmoid \u51fd\u6570\u538b\u7f29\u5230 0 \u5230 1 \u4e4b\u95f4\u3002</p> <p>Sigmoid \u51fd\u6570\u7684\u68af\u5ea6\u63a8\u5bfc</p> <p>\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u51fd\u6570\u64cd\u4f5c\u7684\u957f\u94fe\u6761\uff0c\u94fe\u6761\u4e0a\u7684\u95e8\u90fd\u5bf9 w \u548c x \u7684\u70b9\u79ef\u7ed3\u679c\u8fdb\u884c\u64cd\u4f5c\u3002\u8be5\u51fd\u6570\u88ab\u79f0\u4e3a Sigmoid \u51fd\u6570 \\(\\sigma(x)\\)\u3002Sigmoid \u51fd\u6570\u5173\u4e8e\u5176\u8f93\u5165\u7684\u6c42\u5bfc\u53ef\u4ee5\u7b80\u5316\u4e3a\uff1a</p> \\[ \\sigma(x) = \\frac{1}{1 + e^{-x}} \\] \\[ \\frac{d\\sigma(x)}{dx} = \\frac{e^{-x}}{(1 + e^{-x})^2} = \\left(\\frac{1 + e^{-x} - 1}{1 + e^{-x}}\\right)\\left(\\frac{1}{1 + e^{-x}}\\right) = (1 - \\sigma(x))\\sigma(x) \\] <p>\u8fd9\u79cd\u7b80\u5316\u4f7f\u5f97\u68af\u5ea6\u8ba1\u7b97\u66f4\u52a0\u76f4\u63a5\u3002\u4f8b\u5982\uff0cSigmoid \u51fd\u6570\u7684\u8f93\u5165\u4e3a 1.0\uff0c\u5219\u524d\u5411\u4f20\u64ad\u5f97\u5230\u7684\u8f93\u51fa\u4e3a 0.73\u3002\u6839\u636e\u4e0a\u9762\u7684\u516c\u5f0f\uff0c\u5c40\u90e8\u68af\u5ea6\u4e3a \\((1 - 0.73) \\times 0.73 \\approx 0.2\\)\u3002\u8fd9\u4e0e\u5148\u524d\u7684\u8ba1\u7b97\u6d41\u7a0b\u76f8\u6bd4\u66f4\u4e3a\u7b80\u6d01\uff0c\u56e0\u6b64\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u5c06\u8fd9\u4e9b\u64cd\u4f5c\u6253\u5305\u8fdb\u4e00\u4e2a\u5355\u72ec\u7684\u95e8\u5355\u5143\u662f\u975e\u5e38\u6709\u7528\u7684\u3002\u8fd9\u4e2a\u795e\u7ecf\u5143\u7684\u53cd\u5411\u4f20\u64ad\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4ee3\u7801\u5b9e\u73b0\uff1a</p> <pre><code># \u5047\u8bbe\u4e00\u4e9b\u968f\u673a\u6570\u636e\u548c\u6743\u91cd\nw = [2, -3, -3]  # \u6743\u91cd w0, w1, w2\nx = [-1, -2]     # \u8f93\u5165 x0, x1\n\n# \u524d\u5411\u4f20\u64ad\ndot = w[0] * x[0] + w[1] * x[1] + w[2]  # \u8ba1\u7b97\u52a0\u6743\u548c (w0*x0 + w1*x1 + w2)\nf = 1.0 / (1 + math.exp(-dot))           # \u901a\u8fc7 sigmoid \u6fc0\u6d3b\u51fd\u6570\u5f97\u5230\u8f93\u51fa f\n\n# \u53cd\u5411\u4f20\u64ad\nddot = (1 - f) * f                       # \u8ba1\u7b97 dot \u5bf9\u5e94\u7684\u68af\u5ea6\uff0c\u4f7f\u7528 sigmoid \u51fd\u6570\u7684\u5bfc\u6570\ndx = [w[0] * ddot, w[1] * ddot]          # \u8ba1\u7b97\u635f\u5931\u51fd\u6570\u5bf9\u8f93\u5165 x \u7684\u68af\u5ea6\ndw = [x[0] * ddot, x[1] * ddot, 1.0 * ddot] # \u8ba1\u7b97\u635f\u5931\u51fd\u6570\u5bf9\u6743\u91cd w \u7684\u68af\u5ea6\n</code></pre>"},{"location":"CV/Lecture6_Backpropagation/#\u53cd\u5411\u4f20\u64ad\u5b9e\u8df5\u5206\u6bb5\u8ba1\u7b97","title":"\u53cd\u5411\u4f20\u64ad\u5b9e\u8df5\uff1a\u5206\u6bb5\u8ba1\u7b97","text":"<p>\u5047\u8bbe\u51fd\u6570\u4e3a\uff1a</p> \\[ f(x, y) = \\frac{x + \\sigma(y)}{\\sigma(x) + (x+y)^2} \\\\ \\sigma(z) = \\frac{1}{1 + e^{-z}} \\] <p>\u9700\u8981\u5f3a\u8c03\u7684\u662f\uff0c\u5982\u679c\u5bf9\\(x\\) \u6216 \\(y\\) \u8fdb\u884c\u5fae\u5206\u8fd0\u7b97\uff0c\u8fd0\u7b97\u7ed3\u675f\u540e\u4f1a\u5f97\u5230\u4e00\u4e2a\u5de8\u5927\u800c\u590d\u6742\u7684\u8868\u8fbe\u5f0f\u3002\u7136\u800c\u505a\u5982\u6b64\u590d\u6742\u7684\u8fd0\u7b97\u5b9e\u9645\u4e0a\u5e76\u65e0\u5fc5\u8981\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u9700\u8981\u4e00\u4e2a\u660e\u786e\u7684\u51fd\u6570\u6765\u8ba1\u7b97\u68af\u5ea6\uff0c\u53ea\u9700\u77e5\u9053\u5982\u4f55\u4f7f\u7528\u53cd\u5411\u4f20\u64ad\u8ba1\u7b97\u68af\u5ea6\u5373\u53ef\u3002\u4e0b\u9762\u662f\u6784\u5efa\u524d\u5411\u4f20\u64ad\u7684\u4ee3\u7801\u6a21\u5f0f\uff1a</p> <pre><code>import math\n\nx = 3  # \u793a\u4f8b\u6570\u503c\ny = -4\n\n# \u524d\u5411\u4f20\u64ad\nsigy = 1.0 / (1 + math.exp(-y))  # \u5206\u5b50\u4e2d\u7684 sigmoid(y)           #(1)\nnum = x + sigy                        # \u5206\u5b50                            #(2)\nsigx = 1.0 / (1 + math.exp(-x))  # \u5206\u6bcd\u4e2d\u7684 sigmoid(x)            #(3)\nxpy = x + y                           # x + y                          #(4)\nxpysqr = xpy ** 2                     # (x + y) ^ 2                    #(5)\nden = sigx + xpysqr                 # \u5206\u6bcd                            #(6)\ninvden = 1.0 / den                   # \u5206\u6bcd\u7684\u5012\u6570                     #(7)\nf = num * invden                     # \u6700\u7ec8\u7ed3\u679c                        #(8)\n</code></pre> <p>\u6ce8\u610f\u5728\u6784\u5efa\u4ee3\u7801 s \u65f6\u521b\u5efa\u4e86\u591a\u4e2a\u4e2d\u95f4\u53d8\u91cf\uff0c\u6bcf\u4e2a\u90fd\u662f\u6bd4\u8f83\u7b80\u5355\u7684\u8868\u8fbe\u5f0f\uff0c\u5b83\u4eec\u8ba1\u7b97\u5c40\u90e8\u68af\u5ea6\u7684\u65b9\u6cd5\u662f\u5df2\u77e5\u7684\u3002\u8fd9\u6837\u8ba1\u7b97\u53cd\u5411\u4f20\u64ad\u5c31\u7b80\u5355\u4e86\uff1a\u6211\u4eec\u5bf9\u524d\u5411\u4f20\u64ad\u65f6\u4ea7\u751f\u6bcf\u4e2a\u53d8\u91cf(sigy, num, sigx, xpy, xpysqr, den, invden)\u8fdb\u884c\u56de\u4f20\u3002\u6211\u4eec\u4f1a\u6709\u540c\u6837\u6570\u91cf\u7684\u53d8\u91cf\uff0c\u4f46\u662f\u90fd\u4ee5 d \u5f00\u5934\uff0c\u7528\u6765\u5b58\u50a8\u5bf9\u5e94\u53d8\u91cf\u7684\u68af\u5ea6\u3002\u6ce8\u610f\u5728\u53cd\u5411\u4f20\u64ad\u7684\u6bcf\u4e00\u5c0f\u5757\u4e2d\u90fd\u5c06\u5305\u542b\u4e86\u8868\u8fbe\u5f0f\u7684\u5c40\u90e8\u68af\u5ea6\uff0c\u7136\u540e\u6839\u636e\u4f7f\u7528\u94fe\u5f0f\u6cd5\u5219\u4e58\u4ee5\u4e0a\u6e38\u68af\u5ea6\u3002\u5bf9\u4e8e\u6bcf\u884c\u4ee3\u7801\uff0c\u6211\u4eec\u5c06\u6307\u660e\u5176\u5bf9\u5e94\u7684\u662f\u524d\u5411\u4f20\u64ad\u7684\u54ea\u90e8\u5206\u3002</p> <pre><code># \u56de\u4f20 f = num * invden\ndnum = invden              # \u5bf9\u5e94 num \u7684\u68af\u5ea6                          #(8)\ndinvden = num              # \u5bf9\u5e94 invden \u7684\u68af\u5ea6                        #(8)\n\n# \u56de\u4f20 invden = 1.0 / den\ndden = (-1.0 / (den**2)) * dinvden  # \u5bf9\u5e94 den \u7684\u68af\u5ea6                 #(7)\n\n# \u56de\u4f20 den = sigx + xpysqr\ndsigx = (1) * dden         # \u5bf9\u5e94 sigx \u7684\u68af\u5ea6                         #(6)\ndxpysqr = (1) * dden       # \u5bf9\u5e94 xpysqr \u7684\u68af\u5ea6                       #(6)\n\n# \u56de\u4f20 xpysqr = xpy**2\ndxpy = (2 * xpy) * dxpysqr  # \u5bf9\u5e94 xpy \u7684\u68af\u5ea6                         #(5)\n\n# \u56de\u4f20 xpy = x + y\ndx = (1) * dxpy            # \u5bf9\u5e94 x \u7684\u68af\u5ea6                            #(4)\ndy = (1) * dxpy            # \u5bf9\u5e94 y \u7684\u68af\u5ea6                            #(4)\n\n# \u56de\u4f20 sigx = 1.0 / (1 + math.exp(-x))\ndx += ((1 - sigx) * sigx) * dsigx  # \u6ce8\u610f\u8fd9\u91cc\u662f +=, \u56e0\u4e3a\u6709\u591a\u5904\u5bf9 dx \u7684\u8d21\u732e #(3)\n\n# \u56de\u4f20 num = x + sigy\ndx += (1) * dnum           # \u518d\u6b21\u5bf9 x \u7684\u8d21\u732e                           #(2)\ndsigy = (1) * dnum         # \u5bf9\u5e94 sigy \u7684\u68af\u5ea6                          #(2)\n\n# \u56de\u4f20 sigy = 1.0 / (1 + math.exp(-y))\ndy += ((1 - sigy) * sigy) * dsigy  # \u5bf9\u5e94 y \u7684\u68af\u5ea6                     #(1)\n</code></pre> <p>\u9700\u8981\u6ce8\u610f\u7684\u4e00\u4e9b\u4e1c\u897f\uff1a</p> <p>\u5bf9\u524d\u5411\u4f20\u64ad\u53d8\u91cf\u8fdb\u884c\u7f13\u5b58\uff1a\u5728\u8ba1\u7b97\u53cd\u5411\u4f20\u64ad\u65f6\uff0c\u524d\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\u5f97\u5230\u7684\u4e00\u4e9b\u4e2d\u95f4\u53d8\u91cf\u975e\u5e38\u6709\u7528\u3002\u5728\u5b9e\u9645\u64cd\u4f5c\u4e2d\uff0c\u6700\u597d\u4ee3\u7801\u5b9e\u73b0\u5bf9\u4e8e\u8fd9\u4e9b\u4e2d\u95f4\u53d8\u91cf\u7684\u7f13\u5b58\uff0c\u8fd9\u6837\u5728\u53cd\u5411\u4f20\u64ad\u7684\u65f6\u5019\u4e5f\u80fd\u7528\u4e0a\u5b83\u4eec\u3002\u5982\u679c\u8fd9\u6837\u505a\u8fc7\u4e8e\u56f0\u96be\uff0c\u4e5f\u53ef\u4ee5\uff08\u4f46\u662f\u6d6a\u8d39\u8ba1\u7b97\u8d44\u6e90\uff09\u91cd\u65b0\u8ba1\u7b97\u5b83\u4eec\u3002</p> <p>\u5728\u4e0d\u540c\u5206\u652f\u7684\u68af\u5ea6\u8981\u76f8\u52a0\uff1a\u5982\u679c\u53d8\u91cf x\uff0cy \u5728\u524d\u5411\u4f20\u64ad\u7684\u8868\u8fbe\u5f0f\u4e2d\u51fa\u73b0\u591a\u6b21\uff0c\u90a3\u4e48\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\u7684\u65f6\u5019\u5c31\u8981\u975e\u5e38\u5c0f\u5fc3\uff0c\u4f7f\u7528 += \u800c\u4e0d\u662f = \u6765\u7d2f\u8ba1\u8fd9\u4e9b\u53d8\u91cf\u7684\u68af\u5ea6\uff08\u4e0d\u7136\u5c31\u4f1a\u9020\u6210\u8986\u5199\uff09\u3002\u8fd9\u662f\u9075\u5faa\u4e86\u5728\u5fae\u79ef\u5206\u4e2d\u7684\u591a\u5143\u94fe\u5f0f\u6cd5\u5219\uff0c\u8be5\u6cd5\u5219\u6307\u51fa\u5982\u679c\u53d8\u91cf\u5728\u7ebf\u8def\u4e2d\u5206\u652f\u8d70\u5411\u4e0d\u540c\u7684\u90e8\u5206\uff0c\u90a3\u4e48\u68af\u5ea6\u5728\u56de\u4f20\u7684\u65f6\u5019\uff0c\u5c31\u5e94\u8be5\u8fdb\u884c\u7d2f\u52a0\u3002</p>"},{"location":"CV/Lecture6_Backpropagation/#\u7528\u5411\u91cf\u5316\u64cd\u4f5c\u8ba1\u7b97\u68af\u5ea6","title":"\u7528\u5411\u91cf\u5316\u64cd\u4f5c\u8ba1\u7b97\u68af\u5ea6","text":"<p>\u5f97\u5230\u7684\u5b9e\u9645\u4e0a\u662f\u96c5\u514b\u6bd4\u77e9\u9635\uff0c\u8fd9\u4e2a\u77e9\u9635\u53ef\u4ee5\u63cf\u8ff0\u6bcf\u4e2a\u8f93\u51fa\u5bf9\u8f93\u5165\u7684\u5f71\u54cd.\u96c5\u514b\u6bd4\u77e9\u9635\u8868\u793a\u8f93\u51fa\u5411\u91cf\u4e2d\u6bcf\u4e2a\u5143\u7d20\u5bf9\u8f93\u5165\u5411\u91cf\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u504f\u5bfc\u6570\u3002</p> <p>\u8003\u8651\u4e00\u4e2a\u5e38\u89c1\u7684\u6df1\u5ea6\u5b66\u4e60\u64cd\u4f5c\uff1a\u77e9\u9635\u4e58\u6cd5\u3002\u5047\u8bbe\u6211\u4eec\u6709\u4e24\u4e2a\u77e9\u9635 W \u548c X\uff0c\u5b83\u4eec\u7684\u4e58\u79ef\u662f\u4e00\u4e2a\u77e9\u9635 D\uff1a\\(D = W \\cdot X\\)</p> <p>\u5728\u53cd\u5411\u4f20\u64ad\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u9700\u8981\u8ba1\u7b97\u635f\u5931\u51fd\u6570 L \u5bf9 W \u548c X \u7684\u68af\u5ea6\u3002\u8fd9\u5c31\u9700\u8981\u77e5\u9053 L \u5bf9 D \u7684\u68af\u5ea6 \\(\\frac{\\partial L}{\\partial D}\\)\uff0c\u5e76\u4f7f\u7528\u94fe\u5f0f\u6cd5\u5219\u6765\u8ba1\u7b97 \\(\\frac{\\partial L}{\\partial W}\\) \u548c \\(\\frac{\\partial L}{\\partial X}\\)\uff1a</p> \\[ \\frac{\\partial L}{\\partial W} =\\frac{\\partial L}{\\partial D} \\cdot \\frac{\\partial D}{\\partial W}= \\frac{\\partial L}{\\partial D} \\cdot X^T\\\\ \\frac{\\partial L}{\\partial X} = W^T \\cdot \\frac{\\partial L}{\\partial D} \\] <p>\u7ef4\u5ea6\u5206\u6790\u662f\u7406\u89e3\u5411\u91cf\u5316\u64cd\u4f5c\u68af\u5ea6\u8ba1\u7b97\u7684\u5173\u952e\u3002\u5047\u8bbe\uff1a</p> <ul> <li>W \u7684\u7ef4\u5ea6\u662f [\\(n \\times p\\)]</li> <li>X \u7684\u7ef4\u5ea6\u662f [\\(p \\times m\\)]</li> <li>D \u7684\u7ef4\u5ea6\u662f [\\(n \\times m\\)]</li> </ul> <p>\u90a3\u4e48\uff0c\u68af\u5ea6 \\(\\frac{\\partial L}{\\partial D}\\) \u7684\u7ef4\u5ea6\u662f [\\(n \\times m\\)] \uff0c\u800c\u901a\u8fc7\u94fe\u5f0f\u6cd5\u5219\u5f97\u5230\u7684 \\(\\dfrac{\\partial L}{\\partial W}\\) \u548c \\(\\dfrac{\\partial L}{\\partial X}\\) \u7684\u7ef4\u5ea6\u5206\u522b\u662f\uff1a</p> <ul> <li>\\(\\dfrac{\\partial L}{\\partial W} = [n \\times p]\\)</li> <li>\\(\\dfrac{\\partial L}{\\partial X} = [p \\times m]\\)</li> </ul> <p>\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u4fdd\u8ba1\u7b97\u7684\u6b63\u786e\u6027\u548c\u7ef4\u5ea6\u5339\u914d\u3002</p> <pre><code>    # \u524d\u5411\u4f20\u64ad\n    W = np.random.randn(5, 10)\n    X = np.random.randn(10, 3)\n    D = W.dot(X)\n\n    # \u5047\u8bbe\u6211\u4eec\u5f97\u5230\u4e86 D \u7684\u68af\u5ea6\n    dD = np.random.randn(*D.shape) # \u548c D \u4e00\u6837\u7684\u5c3a\u5bf8\n    dW = dD.dot(X.T) #.T \u5c31\u662f\u5bf9\u77e9\u9635\u8fdb\u884c\u8f6c\u7f6e\n    dX = W.T.dot(dD)\n</code></pre> <p><code>_\u63d0\u793a\uff1a\u8981\u5206\u6790\u7ef4\u5ea6\uff01_\u6ce8\u610f\u4e0d\u9700\u8981\u53bb\u8bb0\u5fc6 dW \u548c dX \u7684\u8868\u8fbe\uff0c\u56e0\u4e3a\u5b83\u4eec\u5f88\u5bb9\u6613\u901a\u8fc7\u7ef4\u5ea6\u63a8\u5bfc\u51fa\u6765\u3002\u4f8b\u5982\uff0c\u6743\u91cd\u7684\u68af\u5ea6 dW \u7684\u5c3a\u5bf8\u80af\u5b9a\u548c\u6743\u91cd\u77e9\u9635 W \u7684\u5c3a\u5bf8\u662f\u4e00\u6837\u7684\uff0c\u800c\u8fd9\u53c8\u662f\u7531 X \u548c dD \u7684\u77e9\u9635\u4e58\u6cd5\u51b3\u5b9a\u7684\uff08\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d X \u548c W \u90fd\u662f\u6570\u5b57\u4e0d\u662f\u77e9\u9635\uff09\u3002\u603b\u6709\u4e00\u4e2a\u65b9\u5f0f\u662f\u80fd\u591f\u8ba9\u7ef4\u5ea6\u4e4b\u95f4\u80fd\u591f\u5bf9\u7684\u4e0a\u7684\u3002\u4f8b\u5982\uff0cX \u7684\u5c3a\u5bf8\u662f [10x3]\uff0cdD \u7684\u5c3a\u5bf8\u662f [5x3]\uff0c\u5982\u679c\u4f60\u60f3\u8981 dW \u548c W \u7684\u5c3a\u5bf8\u662f [5x10]\uff0c\u90a3\u5c31\u8981 dD.dot(X.T)\u3002</code></p> <p>\u77e9\u9635\u76f8\u4e58\u53cd\u5411\u4f20\u64ad\u7684\u901a\u7528\u7b56\u7565</p> <p>\u5047\u8bbe\u6211\u4eec\u6709\u5982\u4e0b\u7684\u77e9\u9635\u4e58\u6cd5\u64cd\u4f5c\uff1a\\(Y = X \\cdot W\\)</p> <p>\u5176\u4e2d\uff1a</p> <ul> <li>X \u662f\u4e00\u4e2a\u7ef4\u5ea6\u4e3a[\\(N\u00d7D\\)] \u7684\u8f93\u5165\u77e9\u9635\u3002</li> <li>W \u662f\u4e00\u4e2a\u7ef4\u5ea6\u4e3a[\\(D\u00d7M\\)] \u7684\u6743\u91cd\u77e9\u9635\u3002</li> <li>Y \u662f\u7ed3\u679c\u77e9\u9635\uff0c\u7ef4\u5ea6\u4e3a[\\(N\u00d7M\\)]\u3002</li> </ul> <p>\u5728\u53cd\u5411\u4f20\u64ad\u4e2d\uff0c\u6211\u4eec\u4ece\u635f\u5931\u51fd\u6570 L \u5bf9\u8f93\u51fa\u77e9\u9635 Y \u7684\u68af\u5ea6\u5f00\u59cb\uff0c\u8bb0\u4f5c \\(\\dfrac{\\partial L}{\\partial Y}\\)\uff0c\u7ef4\u5ea6\u4e3a[N\u00d7M]\u3002\u76ee\u6807\u662f\u8ba1\u7b97\u8f93\u5165\u77e9\u9635 X \u548c\u6743\u91cd\u77e9\u9635 W \u7684\u68af\u5ea6\uff0c\u5373 \\(\\dfrac{\\partial L}{\\partial X}\\) \u548c \\(\\dfrac{\\partial L}{\\partial W}\\)\u3002</p> <p></p> <p>\u5bf9\u4e8e\u8f93\u5165\u77e9\u9635 X \u4e2d\u7684\u5143\u7d20 \\(x_{11}\\) \uff1a</p> <ol> <li> <p>\u524d\u5411\u4f20\u64ad\uff1a\u5728\u77e9\u9635\u4e58\u6cd5 \\(Y = X \\cdot W\\) \u4e2d\uff0c\u8f93\u51fa\u77e9\u9635 Y \u7684\u7b2c\u4e00\u884c\u7b2c\u4e00\u5217\u7684\u5143\u7d20 \\(y_{11}\\) \u662f X \u7684\u7b2c\u4e00\u884c\u4e0e W \u7684\u7b2c\u4e00\u5217\u7684\u4e58\u79ef\u3002\\(y_{11} = \\sum_{k=1}^{D} x_{1k} \\cdot w_{k1}\\)</p> </li> <li> <p>\u53cd\u5411\u4f20\u64ad\uff1a\u5bf9\u4e8e\u5143\u7d20 \\(x_{11}\\)\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u5176\u5bf9 \\(y_{11}\\) \u7684\u5bfc\u6570\uff1a\\(\\dfrac{\\partial y_{11}}{\\partial x_{11}} = w_{11}\\)</p> </li> </ol> <p>\u901a\u8fc7\u94fe\u5f0f\u6cd5\u5219\uff0c\u635f\u5931\u51fd\u6570 L \u5bf9 \\(x_{11}\\) \u7684\u5bfc\u6570\u4e3a\uff1a\\(\\dfrac{\\partial L}{\\partial x_{11}} = \\dfrac{\\partial y_{11}}{\\partial x_{11}} \\cdot \\dfrac{\\partial L}{\\partial y_{11}}\\)</p> \\[ \\frac{\\mathrm{d} L }{\\mathrm{d} x_{11}}=\\frac{\\mathrm{d} y }{\\mathrm{d} x_{11}}\\cdot \\frac{\\mathrm{d} L }{\\mathrm{d} y} \\] <p>\u7c7b\u4f3c\u7684\u53ef\u4ee5\u63a8\u5e7f\u5230 y \u7684\u6240\u6709\u5143\u7d20\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5f97\u5230 y \u5bf9 x_11 \u7684\u5bfc\u6570\u4ee5\u53ca y \u5bf9 x \u7684\u5bfc\u6570 </p> <p>\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u82e5\u77e9\u9635 WWW \u6216 XXX \u662f\u7a00\u758f\u7684\uff0c\u53ef\u4ee5\u5229\u7528\u7a00\u758f\u77e9\u9635\u4e58\u6cd5\u4f18\u5316\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u4ece\u800c\u63d0\u9ad8\u8ba1\u7b97\u6548\u7387\u3002\u7a00\u758f\u77e9\u9635\u7684\u8ba1\u7b97\u53ef\u4ee5\u663e\u8457\u964d\u4f4e\u5185\u5b58\u548c\u8ba1\u7b97\u9700\u6c42\uff0c\u662f\u5728\u5927\u89c4\u6a21\u6570\u636e\u96c6\u4e0a\u8bad\u7ec3\u6a21\u578b\u65f6\u7684\u5173\u952e\u4f18\u5316\u624b\u6bb5\u3002</p>"},{"location":"CV/Lecture6_Backpropagation/#pytorch-\u5b9e\u6218\u81ea\u5b9a\u4e49\u51fd\u6570\u7684\u81ea\u52a8\u6c42\u5bfc","title":"PyTorch \u5b9e\u6218\uff1a\u81ea\u5b9a\u4e49\u51fd\u6570\u7684\u81ea\u52a8\u6c42\u5bfc","text":""},{"location":"CV/Lecture6_Backpropagation/#\u4e3a\u4ec0\u4e48\u8981\u81ea\u5b9a\u4e49\u51fd\u6570","title":"\u4e3a\u4ec0\u4e48\u8981\u81ea\u5b9a\u4e49\u51fd\u6570","text":"<p>\u5728 PyTorch \u4e2d\uff0c\u6c42\u5bfc\u64cd\u4f5c\u662f\u81ea\u52a8\u5b8c\u6210\u7684\uff0c\u901a\u8fc7\u6b63\u786e\u7684\u51fd\u6570\u5d4c\u5957\u6216\u7f51\u7edc\u5d4c\u5957\uff0c\u5373\u53ef\u5b9e\u73b0\u81ea\u52a8\u6c42\u5bfc\uff0c\u65e0\u9700\u624b\u52a8\u8ba1\u7b97\u590d\u6742\u7684\u5bfc\u6570\u3002\u7136\u800c\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u81ea\u52a8\u6c42\u5bfc\u5e76\u4e0d\u9002\u7528\u3002\u8fd9\u901a\u5e38\u53d1\u751f\u5728\u9700\u8981\u5b9e\u73b0\u67d0\u4e9b\u4e0d\u53ef\u5bfc\u64cd\u4f5c\u6216\u5b9a\u5236\u5316\u7684\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u3002\u4e3a\u6b64\uff0cPyTorch \u63d0\u4f9b\u4e86\u6269\u5c55 <code>torch.autograd</code> \u7684\u529f\u80fd\uff0c\u4f7f\u7528\u6237\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6c42\u5bfc\u65b9\u5f0f\u3002</p> <p>\u573a\u666f\u4e00\uff1a\u4e0d\u53ef\u5bfc\u64cd\u4f5c \u6709\u4e9b\u64cd\u4f5c\u672c\u8d28\u4e0a\u662f\u4e0d\u53ef\u5bfc\u7684\uff0c\u6216\u8005\u5176\u5bfc\u6570\u5728\u6807\u51c6\u5e93\u4e2d\u6ca1\u6709\u76f4\u63a5\u5b9e\u73b0\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u8bbe\u8ba1\u4e00\u4e2a\u7279\u5b9a\u7684\u6fc0\u6d3b\u51fd\u6570\u6216\u635f\u5931\u51fd\u6570\uff0c\u8fd9\u4e9b\u51fd\u6570\u65e0\u6cd5\u901a\u8fc7\u73b0\u6709\u7684\u81ea\u52a8\u6c42\u5bfc\u673a\u5236\u5904\u7406\u3002</p> <p>\u573a\u666f\u4e8c\uff1a\u5b9a\u5236\u635f\u5931\u51fd\u6570 \u6709\u65f6\uff0c\u4e3a\u4e86\u5b9e\u73b0\u66f4\u597d\u7684\u5b66\u4e60\u6548\u679c\uff0c\u4f60\u53ef\u80fd\u4f1a\u8bbe\u8ba1\u4e00\u4e2a\u65b0\u7684\u635f\u5931\u51fd\u6570\u3002\u6b64\u65f6\uff0c\u5fc5\u987b\u660e\u786e\u8be5\u51fd\u6570\u7684\u8ba1\u7b97\u8fc7\u7a0b\u548c\u6c42\u5bfc\u65b9\u5f0f\uff0c\u4ee5\u4fbf\u5728\u53cd\u5411\u4f20\u64ad\u65f6\u6b63\u786e\u5730\u66f4\u65b0\u53c2\u6570\u3002</p>"},{"location":"CV/Lecture6_Backpropagation/#\u81ea\u52a8\u68af\u5ea6\u7684\u5b58\u50a8\u4e0e\u6e05\u7406","title":"\u81ea\u52a8\u68af\u5ea6\u7684\u5b58\u50a8\u4e0e\u6e05\u7406","text":"<p>\u5728\u6211\u4eec\u8ba1\u7b97\u5173\u4e8e\u5f20\u91cf\u7684\u68af\u5ea6\u4e4b\u524d\uff0c\u9700\u8981\u4e00\u4e2a\u5730\u65b9\u6765\u5b58\u50a8\u68af\u5ea6\u3002 \u91cd\u8981\u7684\u662f\uff0c<code>\u6211\u4eec\u4e0d\u4f1a\u5728\u6bcf\u6b21\u5bf9\u4e00\u4e2a\u53c2\u6570\u6c42\u5bfc\u65f6\u90fd\u5206\u914d\u65b0\u7684\u5185\u5b58</code>\u3002 \u56e0\u4e3a\u6211\u4eec\u7ecf\u5e38\u4f1a\u6210\u5343\u4e0a\u4e07\u6b21\u5730\u66f4\u65b0\u76f8\u540c\u7684\u53c2\u6570\uff0c\u6bcf\u6b21\u90fd\u5206\u914d\u65b0\u7684\u5185\u5b58\u53ef\u80fd\u5f88\u5feb\u5c31\u4f1a\u5c06\u5185\u5b58\u8017\u5c3d\u3002 \u6ce8\u610f\uff0c\u4e00\u4e2a\u6807\u91cf\u51fd\u6570\u5173\u4e8e\u5411\u91cf\u7684\u68af\u5ea6\u662f\u5411\u91cf\uff0c\u5e76\u4e14\u4e0e\u5411\u91cf\u5177\u6709\u76f8\u540c\u7684\u5f62\u72b6\u3002</p> <ol> <li>\u6b63\u786e\u4f7f\u7528 <code>requires_grad=True</code></li> </ol> <p>\u5728\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\u8ba1\u7b97\u65f6\uff0cPyTorch \u4f1a\u81ea\u52a8\u8ba1\u7b97\u548c\u5b58\u50a8\u68af\u5ea6\u3002\u7136\u800c\uff0c\u5fc5\u987b\u63d0\u524d\u544a\u77e5 PyTorch \u54ea\u4e9b\u5f20\u91cf\u9700\u8981\u68af\u5ea6\u3002\u901a\u8fc7\u8bbe\u7f6e <code>requires_grad=True</code>\uff0c\u53ef\u4ee5\u786e\u4fdd PyTorch \u5728\u8ba1\u7b97\u65f6\u4fdd\u7559\u68af\u5ea6\u4fe1\u606f\u3002\u5982\u679c\u4e0d\u8bbe\u7f6e\uff0c\u5219\u8ba1\u7b97\u8fc7\u7a0b\u4e0d\u4f1a\u8ddf\u8e2a\u8fd9\u4e9b\u5f20\u91cf\u7684\u68af\u5ea6\uff0c\u5bfc\u81f4\u540e\u7eed\u7684\u53cd\u5411\u4f20\u64ad\u64cd\u4f5c\u5931\u8d25\u6216\u62a5\u9519\u3002</p> <pre><code>x = torch.tensor([1.0, 2.0, 3.0])  # \u521b\u5efa\u8f93\u5165\u5f20\u91cf\nx.requires_grad_(True)  # \u542f\u7528\u68af\u5ea6\u8ffd\u8e2a\ny = torch.dot(x, x)  # \u8ba1\u7b97 y = x^2\ny.backward()  # \u53cd\u5411\u4f20\u64ad\u8ba1\u7b97\u68af\u5ea6\nprint(x.grad)  # \u8f93\u51fa\u68af\u5ea6\n</code></pre> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u8bbe\u7f6e\u4e86 <code>x.requires_grad_(True)</code>\uff0c\u56e0\u6b64 PyTorch \u4f1a\u8ddf\u8e2a <code>x</code> \u7684\u68af\u5ea6\uff0c\u6700\u7ec8\u5728 <code>y.backward()</code> \u8c03\u7528\u65f6\u53ef\u4ee5\u6b63\u786e\u8ba1\u7b97\u5e76\u8f93\u51fa <code>x</code> \u7684\u68af\u5ea6\u3002</p> <ol> <li>\u9519\u8bef\u987a\u5e8f\u5bfc\u81f4\u7684\u9519\u8bef</li> </ol> <pre><code>x=torch.tensor([1.0,2.0,3.0])#\u8f93\u5165\u7684\u5f20\u91cf\ny=torch.dot(x,x)#\u8fdb\u884c\u8ba1\u7b97\nx.requires_grad_(True)#\u8868\u793a\u8fd9\u4e2a\u5f20\u91cf\u9700\u8981\u8fdb\u884c\u6c42\u5bfc\uff0c\u5426\u5219\u4e0d\u4f1a\u5b58\u50a8\u5176\u68af\u5ea6\ny.backward()#\u4ece\u6700\u7ec8\u7aef\u5f00\u59cb\u53cd\u5411\u4f20\u64ad\nx.grad#\u663e\u793a x \u7684\u68af\u5ea6\n</code></pre> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u7531\u4e8e <code>requires_grad_(True)</code> \u5728\u8ba1\u7b97\u4e4b\u540e\u8bbe\u7f6e\uff0cPyTorch \u65e0\u6cd5\u8ddf\u8e2a\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u7684\u68af\u5ea6\uff0c\u56e0\u6b64\u5728\u8c03\u7528 <code>y.backward()</code> \u65f6\u4f1a\u62a5\u9519\u3002\u8fd9\u8868\u660e\u542f\u7528\u68af\u5ea6\u8ffd\u8e2a\u5fc5\u987b\u5728\u8ba1\u7b97\u4e4b\u524d\u5b8c\u6210\u3002</p> <ol> <li>\u6e05\u9664\u7d2f\u79ef\u7684\u68af\u5ea6</li> </ol> <pre><code>\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cPyTorch \u4f1a\u7d2f\u79ef\u68af\u5ea6\uff0c\u6211\u4eec\u9700\u8981\u6e05\u9664\u4e4b\u524d\u7684\u503c\nx.grad.zero_()\n</code></pre> <ol> <li>\u975e\u6807\u91cf\u8f93\u51fa\u7684\u68af\u5ea6\u8ba1\u7b97</li> </ol> <p>\u5f53 <code>y</code> \u4e0d\u662f\u6807\u91cf\u65f6\uff0c\u5411\u91cf <code>y</code> \u5173\u4e8e\u5411\u91cf <code>x</code> \u7684\u5bfc\u6570\u7684\u6700\u81ea\u7136\u89e3\u91ca\u662f\u4e00\u4e2a\u77e9\u9635\u3002 \u5bf9\u4e8e\u9ad8\u9636\u548c\u9ad8\u7ef4\u7684 <code>y</code> \u548c <code>x</code>\uff0c\u6c42\u5bfc\u7684\u7ed3\u679c\u53ef\u4ee5\u662f\u4e00\u4e2a\u9ad8\u9636\u5f20\u91cf\u3002</p> <p>\u5f53\u8f93\u51fa\u662f\u975e\u6807\u91cf\u65f6\uff0cPyTorch \u9700\u8981\u77e5\u9053\u5982\u4f55\u5904\u7406\u8fd9\u4e2a\u5f20\u91cf\u3002\u901a\u5e38\uff0c\u6700\u5e38\u89c1\u7684\u505a\u6cd5\u662f\u8ba1\u7b97\u6279\u91cf\u4e2d\u6bcf\u4e2a\u6837\u672c\u7684\u68af\u5ea6\u4e4b\u548c\uff0c\u8fd9\u4e5f\u662f\u5927\u591a\u6570\u635f\u5931\u51fd\u6570\u7684\u9ed8\u8ba4\u884c\u4e3a\u3002</p> <pre><code>\u5bf9\u975e\u6807\u91cf\u8c03\u7528 backward \u9700\u8981\u4f20\u5165\u4e00\u4e2a gradient \u53c2\u6570\uff0c\u8be5\u53c2\u6570\u6307\u5b9a\u5fae\u5206\u51fd\u6570\u5173\u4e8e self \u7684\u68af\u5ea6\u3002\n# \u672c\u4f8b\u53ea\u60f3\u6c42\u504f\u5bfc\u6570\u7684\u548c\uff0c\u6240\u4ee5\u4f20\u9012\u4e00\u4e2a 1 \u7684\u68af\u5ea6\u662f\u5408\u9002\nx.grad.zero_()  # \u6e05\u9664\u5148\u524d\u7684\u68af\u5ea6\ny = x * x  # \u8ba1\u7b97 y\n# \u7b49\u4ef7\u4e8e y.backward(torch.ones(len(x)))\ny.sum().backward()  # \u8ba1\u7b97 y \u5bf9 x \u7684\u68af\u5ea6\nprint(x.grad)  # \u8f93\u51fa\u68af\u5ea6\n</code></pre> <p>\u6ce8\u610f\uff0c\u6df1\u5ea6\u5b66\u4e60\u4e2d\u4e00\u822c\u5bf9\u6807\u91cf\u6c42\u5bfc\uff08\u4e3b\u8981\u662f\u8bc4\u4ef7\u6307\u6807\u548c Loss\uff09\uff0c\u5982\u679c\u635f\u5931\u51fd\u6570\u662f\u5411\u91cf\uff0c\u90a3\u4e48\u53ef\u80fd\u5bfc\u81f4\u7ef4\u5ea6\u8d8a\u6765\u8d8a\u5927</p>"},{"location":"CV/Lecture6_Backpropagation/#\u6c42\u5bfc\u539f\u7406","title":"\u6c42\u5bfc\u539f\u7406","text":"<p>\u5728 PyTorch \u4e2d\uff0c\u81ea\u52a8\u6c42\u5bfc\u7684\u5b9e\u73b0\u57fa\u4e8e\u8ba1\u7b97\u56fe\u7684\u6982\u5ff5\u3002\u8ba1\u7b97\u56fe\u662f\u4e00\u79cd<code>\u6709\u5411\u65e0\u73af\u56fe\uff08DAG\uff09</code>\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u4ee3\u8868\u4e00\u4e2a\u64cd\u4f5c\uff08\u4f8b\u5982\u52a0\u6cd5\u3001\u4e58\u6cd5\u7b49\uff09\uff0c\u8fb9\u8868\u793a\u8fd9\u4e9b\u64cd\u4f5c\u7684\u4f9d\u8d56\u5173\u7cfb\u3002\u5728\u524d\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0cPyTorch \u4f1a\u52a8\u6001\u6784\u5efa\u8fd9\u4e2a\u8ba1\u7b97\u56fe\uff0c\u5e76\u5728\u53cd\u5411\u4f20\u64ad\u65f6\u4f9d\u636e\u8ba1\u7b97\u56fe\u6765\u8ba1\u7b97\u68af\u5ea6\u3002</p> <p></p> <p>\u5728\u524d\u5411\u4f20\u64ad\u65f6\uff0cPyTorch \u4f1a\u6839\u636e\u64cd\u4f5c\u7684\u987a\u5e8f\u6784\u5efa\u8ba1\u7b97\u56fe\u3002\u6bcf\u4e2a\u64cd\u4f5c\u8282\u70b9\u90fd\u4f1a\u4fdd\u5b58\u5bf9\u5e94\u7684\u68af\u5ea6\u8ba1\u7b97\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u5c06\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\u88ab\u8c03\u7528\u3002</p> <p>\u53cd\u5411\u4f20\u64ad\u7684\u6838\u5fc3\u601d\u60f3\u662f\u5229\u7528\u94fe\u5f0f\u6cd5\u5219\uff08\u94fe\u5f0f\u6c42\u5bfc\uff09\u8ba1\u7b97\u68af\u5ea6\u3002\u5728\u8ba1\u7b97\u56fe\u4e2d\uff0c\u4ece\u8f93\u51fa\u8282\u70b9\u5f00\u59cb\uff0c\u68af\u5ea6\u4f1a\u6cbf\u7740\u56fe\u4e2d\u8fb9\u53cd\u5411\u4f20\u64ad\u5230\u6bcf\u4e2a\u8f93\u5165\u8282\u70b9\uff0c\u76f4\u5230\u6240\u6709\u8282\u70b9\u7684\u68af\u5ea6\u90fd\u88ab\u8ba1\u7b97\u51fa\u6765\u3002</p> <p>\u6ce8\u610f\uff0cPyTorch \u7684\u81ea\u52a8\u6c42\u5bfc\u672c\u8d28\u4e0a\u662f\u4e00\u79cd\u6570\u503c\u6c42\u5bfc\uff0c\u800c\u4e0d\u662f\u7b26\u53f7\u6c42\u5bfc\u3002<code>\u8fd9\u610f\u5473\u7740 PyTorch \u4f9d\u8d56\u4e8e\u8ba1\u7b97\u56fe\u4e2d\u7684\u6bcf\u4e2a\u64cd\u4f5c\u8282\u70b9\u5b58\u50a8\u7684\u68af\u5ea6\u8ba1\u7b97\u65b9\u6cd5</code>\uff0c\u800c\u4e0d\u662f\u89e3\u6790\u51fd\u6570\u7684\u5bfc\u6570\u516c\u5f0f\u3002</p> <p></p>"},{"location":"CV/Lecture6_Backpropagation/#\u81ea\u5b9a\u4e49\u51fd\u6570\u5b8c\u6210\u6c42\u5bfc","title":"\u81ea\u5b9a\u4e49\u51fd\u6570\u5b8c\u6210\u6c42\u5bfc","text":"<p>\u5728 PyTorch \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u81ea\u5b9a\u4e49 <code>torch.autograd.Function</code> \u7c7b\uff0c\u624b\u52a8\u5b9e\u73b0\u524d\u5411\u4f20\u64ad\u548c\u53cd\u5411\u4f20\u64ad\u7684\u8fc7\u7a0b\u3002\u8fd9\u6709\u52a9\u4e8e\u6211\u4eec\u66f4\u6df1\u5165\u5730\u7406\u89e3\u53cd\u5411\u4f20\u64ad\u7684\u673a\u5236\uff0c\u5e76\u4e14\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u5b9e\u73b0\u66f4\u590d\u6742\u6216\u81ea\u5b9a\u4e49\u7684\u64cd\u4f5c\u3002</p> <p></p> <p>\u6211\u4eec\u60f3\u81ea\u5df1\u5b9a\u4e49\u4e00\u4e2a\u53ef\u4ee5\u53cd\u5411\u4f20\u64ad\u7684\u51fd\u6570\uff0c\u90a3\u4e48\u8fd9\u4e2a\u51fd\u6570\u8981\u5b9a\u4e49\u6210\u7c7b\uff0c\u5e76\u4e14\u9700\u8981\u7ee7\u627f <code>torch.autograd.Function</code> \u7c7b\uff0c\u540c\u65f6\u5206\u522b\u5b9a\u4e49 <code>forward</code> \u548c <code>backward</code> \u65b9\u6cd5\uff0c\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u662f\u5b9e\u73b0\u6b63\u5411\u63a8\u7406\u548c\u53cd\u5411\u4f20\u64ad\u7684\u5173\u952e\uff0c\u6211\u4eec\u4ee5\u4e00\u4e2a\u7b80\u5355\u7684\u5e73\u65b9\u51fd\u6570\u4e3a\u4f8b\u770b\u770b\u5982\u4f55\u5b9e\u73b0\u7684</p> <pre><code>class SquareFunction(torch.autograd.Function):\n    @staticmethod\n    def forward(ctx, input):\n        # \u6b63\u5411\u4f20\u64ad\u7684\u903b\u8f91\n        ctx.save_for_backward(input)  # \u4fdd\u5b58\u8f93\u5165\uff0c\u4ee5\u4fbf\u5728\u53cd\u5411\u4f20\u64ad\u65f6\u4f7f\u7528\n        return input * input # \u8ba1\u7b97\u8f93\u51fa\n\n    @staticmethod\n    def backward(ctx, grad_output):\n        # \u53cd\u5411\u4f20\u64ad\u7684\u903b\u8f91\n        input, = ctx.saved_tensors  # \u83b7\u53d6\u4fdd\u5b58\u7684\u8f93\u5165\n        grad_input = grad_output * 2 * input  # \u8ba1\u7b97\u8f93\u5165\u7684\u68af\u5ea6\n        print(f\"grad_output: {grad_output}\")  # \u8f93\u51fa grad_output \u7684\u503c\n        return grad_input\n</code></pre> <p><code>forward</code> \u65b9\u6cd5\uff1a</p> <ul> <li><code>ctx.save_for_backward(input)</code>\uff1a\u5728\u6b63\u5411\u4f20\u64ad\u65f6\uff0c\u4fdd\u5b58\u8f93\u5165 <code>input</code>\uff0c\u4ee5\u4fbf\u5728\u53cd\u5411\u4f20\u64ad\u65f6\u4f7f\u7528\u3002\u8fd9\u662f\u5b9e\u73b0\u53cd\u5411\u4f20\u64ad\u6240\u9700\u4fe1\u606f\u7684\u5173\u952e\u6b65\u9aa4\u3002</li> <li>\u8fd4\u56de\u503c <code>input * input</code>\uff1a\u8fd9\u662f\u6b63\u5411\u4f20\u64ad\u7684\u8f93\u51fa\u7ed3\u679c\u3002</li> </ul> <p><code>backward</code> \u65b9\u6cd5\uff1a</p> <ul> <li><code>ctx.saved_tensors</code>\uff1a\u83b7\u53d6\u6b63\u5411\u4f20\u64ad\u4e2d\u4fdd\u5b58\u7684\u5f20\u91cf\uff0c\u8fd9\u91cc\u662f <code>input</code>\u3002</li> <li><code>grad_output * 2 * input</code>\uff1a\u6839\u636e\u94fe\u5f0f\u6cd5\u5219\u8ba1\u7b97\u68af\u5ea6\u3002<code>grad_output</code> \u662f\u4ece\u4e0a\u6e38\u4f20\u9012\u8fc7\u6765\u7684\u68af\u5ea6\uff0c<code>2 * input</code> \u662f\u5e73\u65b9\u51fd\u6570\u7684\u5bfc\u6570\u3002</li> </ul> <p><code>ctx</code> \u662f\u201c\u4e0a\u4e0b\u6587\u201d\uff08context\uff09\uff0c\u7528\u4e8e\u5728\u6b63\u5411\u4f20\u64ad\u548c\u53cd\u5411\u4f20\u64ad\u4e4b\u95f4\u5b58\u50a8\u4fe1\u606f\u3002\u8fd9\u4e2a\u4e0a\u4e0b\u6587\u5bf9\u8c61\u662f\u7279\u522b\u4e3a\u6bcf\u6b21\u64cd\u4f5c\u6216\u51fd\u6570\u8c03\u7528\u521b\u5efa\u7684\uff0c\u53ef\u4ee5\u7528\u6765\u4fdd\u5b58\u7528\u4e8e\u8ba1\u7b97\u68af\u5ea6\u7684\u4efb\u4f55\u4fe1\u606f</p> <p>\u4e3a\u4e86\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684 <code>SquareFunction</code>\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u7528\u5176 <code>apply</code> \u65b9\u6cd5\u3002</p> <pre><code># \u5b9a\u4e49\u8f93\u5165\u5f20\u91cf\uff0c\u5e76\u5f00\u542f\u81ea\u52a8\u6c42\u5bfc\nx = torch.tensor([2.0], requires_grad=True)\n# \u4f7f\u7528\u81ea\u5b9a\u4e49\u51fd\u6570\u8fdb\u884c\u524d\u5411\u4f20\u64ad\ny = SquareFunction.apply(x)\n# \u8fdb\u884c\u53cd\u5411\u4f20\u64ad\ny.backward()\n# \u6253\u5370\u7ed3\u679c\nprint(f\"x: {x}\")\nprint(f\"y: {y}\")\nprint(f\"x\u7684\u68af\u5ea6: {x.grad}\")\n</code></pre> <p>\u5728\u53cd\u5411\u4f20\u64ad\u4e2d\uff0c\u4e0a\u6e38\u4f20\u9012\u8fc7\u6765\u7684\u68af\u5ea6 <code>grad_output</code> \u5e76\u4e0d\u603b\u662f\u7b49\u4e8e 2\u3002<code>grad_output</code> \u7684\u503c\u53d6\u51b3\u4e8e\u8ba1\u7b97\u56fe\u4e2d\u66f4\u4e0a\u5c42\u7684\u64cd\u4f5c\u3002\u5177\u4f53\u6765\u8bf4\uff0c<code>grad_output</code> \u662f\u635f\u5931\u51fd\u6570\u76f8\u5bf9\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u8f93\u51fa\u7684\u68af\u5ea6\uff0c\u4e5f\u5c31\u662f \\(\\frac{\\partial L}{\\partial y}\\)\u3002\u8fd9\u4e2a\u503c\u662f\u7531\u4e0a\u5c42\u8282\u70b9\u7684\u68af\u5ea6\u8ba1\u7b97\u51b3\u5b9a\u7684\uff0c\u800c\u4e0d\u662f\u56fa\u5b9a\u4e3a\u67d0\u4e2a\u5e38\u6570\u3002</p> <p>\u5728\u4e4b\u524d\u7684\u4f8b\u5b50\u4e2d\uff0c<code>grad_output</code> \u7684\u5b9e\u9645\u503c\u53d6\u51b3\u4e8e\u5982\u4f55\u5b9a\u4e49\u548c\u8c03\u7528 <code>y.backward()</code>\uff0c\u800c\u4e0d\u662f\u7b80\u5355\u5730\u7b49\u4e8e 2\u3002</p> <p>\\(\\frac{\\partial L}{\\partial y}\\) \u662f\u4e0a\u6e38\u4f20\u9012\u8fc7\u6765\u7684\u68af\u5ea6\uff0c\u5728\u4ee3\u7801\u4e2d\u5bf9\u5e94 <code>grad_output</code>\u3002</p> <p>\\(\\frac{\\partial y}{\\partial x}\\) \u662f\u5f53\u524d\u5c42\u7684\u68af\u5ea6\u3002</p>"},{"location":"CV/Lecture6_Backpropagation/#\u5c0f\u7ed3","title":"\u5c0f\u7ed3","text":"<ul> <li>\u5206\u6bb5\u8ba1\u7b97\u548c\u94fe\u5f0f\u6cd5\u5219\u7684\u5e94\u7528\u6b63\u662f\u53cd\u5411\u4f20\u64ad\u9ad8\u6548\u6027\u548c\u6a21\u5757\u5316\u5b9e\u73b0\u7684\u5173\u952e\u3002\u6b63\u5982\u4f60\u6240\u8bf4\uff0c\u5728\u6df1\u5ea6\u5b66\u4e60\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u4e0d\u4f1a\u624b\u52a8\u8ba1\u7b97\u5b8c\u6574\u7684\u68af\u5ea6\u8868\u8fbe\u5f0f\uff0c\u800c\u662f\u4f9d\u8d56\u81ea\u52a8\u5fae\u5206\u6846\u67b6\uff08\u5982 PyTorch\uff09\u901a\u8fc7\u5206\u89e3\u548c\u94fe\u5f0f\u6cd5\u5219\u4e00\u6b65\u6b65\u8ba1\u7b97\u5c40\u90e8\u68af\u5ea6\uff0c\u6700\u7ec8\u7ec4\u5408\u6210\u6574\u4f53\u7684\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u3002</li> <li>\u4e0b\u4e00\u6b65\uff0c\u5b9a\u4e49\u548c\u8bad\u7ec3\u795e\u7ecf\u7f51\u7edc\u5c06\u81ea\u7136\u5ef6\u7eed\u8fd9\u4e00\u57fa\u7840\uff0c\u4f7f\u7528\u53cd\u5411\u4f20\u64ad\u9ad8\u6548\u8c03\u6574\u7f51\u7edc\u53c2\u6570\u3002\u901a\u8fc7\u5b9a\u4e49\u524d\u5411\u4f20\u64ad\u7ed3\u6784\u3001\u9009\u62e9\u5408\u9002\u7684\u635f\u5931\u51fd\u6570\u548c\u4f18\u5316\u5668\uff0c\u4f60\u5c06\u80fd\u591f\u8bad\u7ec3\u6a21\u578b\u4ee5\u6700\u5c0f\u5316\u635f\u5931\uff0c\u4ece\u800c\u63d0\u9ad8\u6a21\u578b\u7684\u9884\u6d4b\u80fd\u529b\u3002\u81f3\u4e8e\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff08ConvNets\uff09\uff0c\u867d\u7136\u5b83\u4eec\u5f15\u5165\u4e86\u7a7a\u95f4\u5c42\u6b21\u4e0a\u7684\u590d\u6742\u6027\uff0c\u4f46\u6838\u5fc3\u601d\u60f3\u4ecd\u7136\u4f9d\u8d56\u4e8e\u4f60\u5df2\u7ecf\u638c\u63e1\u7684\u53cd\u5411\u4f20\u64ad\u673a\u5236\u3002</li> </ul>"},{"location":"CV/Lecture7_ConvolutionalNetworks/","title":"Convolutional Neural Networks","text":"<p> \u7ea6 12305 \u4e2a\u5b57  20 \u884c\u4ee3\u7801  \u9884\u8ba1\u9605\u8bfb\u65f6\u95f4 62 \u5206\u949f</p>"},{"location":"CV/Lecture7_ConvolutionalNetworks/#\u6982\u5ff5","title":"\u6982\u5ff5","text":"<p>\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff08CNN\uff0c\u6216\u79f0 ConvNet\uff09\u662f\u4e13\u95e8\u4e3a\u5904\u7406\u56fe\u50cf\u548c\u89c6\u9891\u6570\u636e\u800c\u8bbe\u8ba1\u7684\u795e\u7ecf\u7f51\u7edc\uff0c\u5b83\u4eec\u901a\u8fc7\u5f15\u5165\u5377\u79ef\u64cd\u4f5c\u6765\u6355\u6349\u8f93\u5165\u6570\u636e\u4e2d\u7684\u7a7a\u95f4\u548c\u5c40\u90e8\u6a21\u5f0f\u4fe1\u606f\u3002\u4e0e\u4f20\u7edf\u7684\u5168\u8fde\u63a5\u795e\u7ecf\u7f51\u7edc\u76f8\u6bd4\uff0cCNN \u5728\u5904\u7406\u89c6\u89c9\u6570\u636e\u65f6\u5177\u6709\u66f4\u5f3a\u7684\u8868\u73b0\u529b\u548c\u6548\u7387\u3002</p>"},{"location":"CV/Lecture7_ConvolutionalNetworks/#\u7ed3\u6784\u6982\u8ff0","title":"\u7ed3\u6784\u6982\u8ff0","text":"<p>\u5728\u4e0a\u4e00\u7ae0\u4e2d\uff0c\u795e\u7ecf\u7f51\u7edc\u7684\u8f93\u5165\u662f\u4e00\u4e2a\u5411\u91cf\uff0c\u7136\u540e\u5728\u4e00\u7cfb\u5217\u7684\u9690\u85cf\u5c42\u4e2d\u5bf9\u5b83\u505a\u53d8\u6362\u3002\u6bcf\u4e2a\u9690\u5c42\u90fd\u662f\u7531\u82e5\u5e72\u7684\u795e\u7ecf\u5143\u7ec4\u6210\uff0c\u6bcf\u4e2a\u795e\u7ecf\u5143\u90fd\u4e0e\u524d\u4e00\u5c42\u4e2d\u7684\u6240\u6709\u795e\u7ecf\u5143\u8fde\u63a5\u3002\u4f46\u662f\u5728\u4e00\u4e2a\u9690\u5c42\u4e2d\uff0c\u795e\u7ecf\u5143\u76f8\u4e92\u72ec\u7acb\u4e0d\u8fdb\u884c\u4efb\u4f55\u8fde\u63a5\u3002\u6700\u540e\u7684\u5168\u8fde\u63a5\u5c42\u88ab\u79f0\u4e3a \"\u8f93\u51fa\u5c42\"\uff0c\u5728\u5206\u7c7b\u95ee\u9898\u4e2d\uff0c\u5b83\u8f93\u51fa\u7684\u503c\u88ab\u770b\u505a\u662f\u4e0d\u540c\u7c7b\u522b\u7684\u8bc4\u5206\u503c\u3002</p> <p>\u5e38\u89c4\u795e\u7ecf\u7f51\u7edc\u5bf9\u4e8e\u5927\u5c3a\u5bf8\u56fe\u50cf\u6548\u679c\u4e0d\u5c3d\u4eba\u3002\u5728 CIFAR-10 \u4e2d\uff0c\u56fe\u50cf\u7684\u5c3a\u5bf8\u662f \\(32\\times32\\times3\\)\uff08\u5bbd\u9ad8\u5747\u4e3a 32 \u50cf\u7d20\uff0c3 \u4e2a\u989c\u8272\u901a\u9053\uff09\uff0c\u56e0\u6b64\uff0c\u5bf9\u5e94\u7684\u7684\u5e38\u89c4\u795e\u7ecf\u7f51\u7edc\u7684\u7b2c\u4e00\u4e2a\u9690\u5c42\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u5355\u72ec\u7684\u5168\u8fde\u63a5\u795e\u7ecf\u5143\u5c31\u6709 \\(32\\times32\\times3 = 3072\\) \u4e2a\u6743\u91cd\u3002\u8fd9\u4e2a\u6570\u91cf\u770b\u8d77\u6765\u8fd8\u53ef\u4ee5\u63a5\u53d7\uff0c\u4f46\u662f\u5f88\u663e\u7136\u8fd9\u4e2a\u5168\u8fde\u63a5\u7684\u7ed3\u6784\u4e0d\u9002\u7528\u4e8e\u66f4\u5927\u5c3a\u5bf8\u7684\u56fe\u50cf\u3002\u4e3e\u4f8b\u8bf4\u6765\uff0c\u4e00\u4e2a\u5c3a\u5bf8\u4e3a \\(200\\times200\\times3\\) \u7684\u56fe\u50cf\uff0c\u4f1a\u8ba9\u795e\u7ecf\u5143\u5305\u542b\\(200\\times200\\times3 = 120000\\)\u4e2a\u6743\u91cd\u503c\u3002\u5982\u6b64\u5e9e\u5927\u7684\u53c2\u6570\u6570\u91cf\u4e0d\u4ec5\u5bfc\u81f4<code>\u8ba1\u7b97\u8d44\u6e90\u7684\u6d6a\u8d39</code>\uff0c\u8fd8\u5bb9\u6613\u5bfc\u81f4\u6a21\u578b\u7684<code>\u8fc7\u62df\u5408</code>\u3002</p> <p>CNN \u901a\u8fc7\u5229\u7528\u8f93\u5165\u6570\u636e\u7684\u7a7a\u95f4\u7ed3\u6784\u6765\u51cf\u5c11\u53c2\u6570\u6570\u91cf\uff0c\u5e76\u63d0\u9ad8\u6a21\u578b\u7684\u5b66\u4e60\u80fd\u529b\u3002\u4e0e\u5e38\u89c4\u795e\u7ecf\u7f51\u7edc\u4e0d\u540c\uff0c\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u7684\u5404\u5c42\u4e2d\u7684\u795e\u7ecf\u5143\u662f 3 \u7ef4\u6392\u5217\u7684\uff1a\u5bbd\u5ea6\u3001\u9ad8\u5ea6 \u548c \u6df1\u5ea6\uff08\u8fd9\u91cc\u7684 \u6df1\u5ea6 \u6307\u7684\u662f\u8be5\u5c42\u7279\u5f81\u56fe\u7684\u6570\u91cf\uff0c\u800c\u4e0d\u662f\u6574\u4e2a\u7f51\u7edc\u7684\u6df1\u5ea6\uff0c\u6574\u4e2a\u7f51\u7edc\u7684\u6df1\u5ea6\u6307\u7684\u662f\u7f51\u7edc\u7684\u5c42\u6570\uff09\u3002</p> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff0cCIFAR-10 \u4e2d\u7684\u56fe\u50cf\u662f\u4f5c\u4e3a\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u7684\u8f93\u5165\uff0c\u8be5\u6570\u636e\u4f53\u7684\u7ef4\u5ea6\u662f \\(32\\times32\\times3\\)\uff08\u5bbd\u5ea6\uff0c\u9ad8\u5ea6\u548c\u6df1\u5ea6\uff09\u3002\u6bcf\u4e00\u5c42\u7684\u795e\u7ecf\u5143\u53ea\u4e0e\u524d\u4e00\u5c42\u7684\u5c0f\u533a\u57df\uff08\u79f0\u4e3a\u611f\u53d7\u91ce\uff09\u8fde\u63a5\uff0c\u800c\u4e0d\u662f\u91c7\u53d6\u5168\u8fde\u63a5\u65b9\u5f0f\u3002\u8fd9\u6837\uff0c\u5377\u79ef\u5c42\u7684\u6bcf\u4e2a\u795e\u7ecf\u5143\u53ea\u8d1f\u8d23\u68c0\u6d4b\u5c40\u90e8\u7279\u5f81\uff08\u4f8b\u5982\u8fb9\u7f18\u3001\u89d2\u70b9\u7b49\uff09\uff0c\u7136\u540e\u8fd9\u4e9b\u5c40\u90e8\u7279\u5f81\u9010\u5c42\u7ec4\u5408\uff0c\u5f62\u6210\u5bf9\u6574\u4e2a\u56fe\u50cf\u7684\u5168\u5c40\u7406\u89e3\u3002\u5bf9\u4e8e\u7528\u6765\u5206\u7c7b CIFAR-10 \u4e2d\u7684\u56fe\u50cf\u7684\u5377\u79ef\u7f51\u7edc\uff0c\u5176\u6700\u540e\u7684\u8f93\u51fa\u5c42\u7684\u7ef4\u5ea6\u662f \\(1\\times1\\times10\\)\uff0c\u56e0\u4e3a\u5728\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u7ed3\u6784\u7684\u6700\u540e\u90e8\u5206\u5c06\u4f1a\u628a\u5168\u5c3a\u5bf8\u7684\u56fe\u50cf\u538b\u7f29\u4e3a\u5305\u542b\u5206\u7c7b\u8bc4\u5206\u7684\u4e00\u4e2a\u5411\u91cf\uff0c\u5411\u91cf\u662f\u5728\u6df1\u5ea6\u65b9\u5411\u6392\u5217\u7684\u3002</p> <p></p> <p>\u5de6\u8fb9\u662f\u4e00\u4e2a 3 \u5c42\u7684\u5e38\u89c4\u795e\u7ecf\u7f51\u7edc\uff0c\u6bcf\u4e00\u5c42\u7684\u795e\u7ecf\u5143\u4e0e\u524d\u4e00\u5c42\u7684\u6240\u6709\u795e\u7ecf\u5143\u5168\u8fde\u63a5\u3002\u53f3\u8fb9\u662f\u4e00\u4e2a\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff0c\u56fe\u4f8b\u4e2d\u7f51\u7edc\u5c06\u5b83\u7684\u795e\u7ecf\u5143\u90fd\u6392\u5217\u6210 3 \u4e2a\u7ef4\u5ea6\uff08\u5bbd\u3001\u9ad8\u548c\u6df1\u5ea6\uff09\u3002\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u7684\u6bcf\u4e00\u5c42\u90fd\u5c06 3D \u7684\u8f93\u5165\u6570\u636e\u53d8\u5316\u4e3a\u795e\u7ecf\u5143 3D \u7684\u6fc0\u6d3b\u6570\u636e\u5e76\u8f93\u51fa\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u7ea2\u8272\u7684\u8f93\u5165\u5c42\u88c5\u7684\u662f\u56fe\u50cf\uff0c\u6240\u4ee5\u5b83\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u5c31\u662f\u56fe\u50cf\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\uff0c\u5b83\u7684\u6df1\u5ea6\u662f 3\uff08\u4ee3\u8868\u4e86\u7ea2\u3001\u7eff\u3001\u84dd 3 \u79cd\u989c\u8272\u901a\u9053\uff09\u3002</p>"},{"location":"CV/Lecture7_ConvolutionalNetworks/#\u6838\u5fc3\u7279\u6027\u548c\u4e0d\u540c\u7684-layer","title":"\u6838\u5fc3\u7279\u6027\u548c\u4e0d\u540c\u7684 layer","text":"<p>\u4e00\u4e2a\u7b80\u5355\u7684\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u662f\u7531\u5404\u79cd\u5c42\u6309\u7167\u987a\u5e8f\u6392\u5217\u7ec4\u6210\uff0c\u7f51\u7edc\u4e2d\u7684\u6bcf\u4e2a\u5c42\u4f7f\u7528\u4e00\u4e2a\u53ef\u4ee5\u5fae\u5206\u7684\u51fd\u6570\u5c06\u6fc0\u6d3b\u6570\u636e\u4ece\u4e00\u4e2a\u5c42\u4f20\u9012\u5230\u53e6\u4e00\u4e2a\u5c42\u3002\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u4e3b\u8981\u7531\u4e09\u79cd\u7c7b\u578b\u7684\u5c42\u6784\u6210\uff1a\u5377\u79ef\u5c42\uff0c\u6c60\u5316\uff08Pooling\uff09\u5c42 \u548c \u5168\u8fde\u63a5\u5c42\uff08\u5168\u8fde\u63a5\u5c42\u548c\u5e38\u89c4\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u4e00\u6837\uff09\u3002\u901a\u8fc7\u5c06\u8fd9\u4e9b\u5c42\u53e0\u52a0\u8d77\u6765\uff0c\u5c31\u53ef\u4ee5\u6784\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u3002</p> <p><code>\u4e00\u4e2a\u7528\u4e8e CIFAR-10 \u56fe\u50cf\u6570\u636e\u5206\u7c7b\u7684\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u7684\u7ed3\u6784\u53ef\u4ee5\u662f [\u8f93\u5165\u5c42-\u5377\u79ef\u5c42-ReLU \u5c42-\u6c60\u5316\u5c42-\u5168\u8fde\u63a5\u5c42]\u3002</code></p> <ul> <li> <p>\u8f93\u5165 [\\(32\\times32\\times3\\)] \u5b58\u6709\u56fe\u50cf\u7684\u539f\u59cb\u50cf\u7d20\u503c\uff0c\u672c\u4f8b\u4e2d\u56fe\u50cf\u5bbd\u9ad8\u5747\u4e3a 32\uff0c\u6709 3 \u4e2a\u989c\u8272\u901a\u9053\u3002</p> </li> <li> <p>\u5377\u79ef\u5c42\u4f7f\u7528\u591a\u4e2a\u5377\u79ef\u6838\uff08\u6ee4\u6ce2\u5668\uff09\u5728\u8f93\u5165\u56fe\u50cf\u4e0a\u6ed1\u52a8\uff0c\u6bcf\u4e2a\u5377\u79ef\u6838\u8ba1\u7b97\u5c40\u90e8\u533a\u57df\u4e0e\u81ea\u8eab\u6743\u91cd\u7684\u5185\u79ef\u3002\u5185\u79ef\u503c\u8868\u793a\u8be5\u533a\u57df\u4e0e\u5377\u79ef\u6838\u7684\u5339\u914d\u7a0b\u5ea6\u3002\uff08\u8fd9\u4e2a\u5185\u79ef\u4f5c\u4e3a\u5143\u7d20\u7ec4\u6210\u4e0b\u4e00\u5f20\u7279\u5f81\u56fe\uff0c\u5176\u542b\u4e49\u4e3a\u4e0e\u6a21\u7248\u5339\u914d\u7684\u7a0b\u5ea6\uff09\uff0c\u540c\u65f6\u6bcf\u4e2a\u5377\u79ef\u6838\u90fd\u6709\u4e00\u4e2a\u504f\u5dee\u9879\u3002\u5377\u79ef\u5c42\u4f1a\u8ba1\u7b97\u6240\u6709\u795e\u7ecf\u5143\u7684\u8f93\u51fa\u3002\u5982\u679c\u6211\u4eec\u4f7f\u7528 12 \u4e2a\u6ee4\u6ce2\u5668\uff08\u4e5f\u53eb\u4f5c\u6838\uff09\uff0c\u8f93\u51fa\u5c3a\u5bf8\u4e3a<code>[32x32x12]</code>\uff0c12 \u4e2a\u7279\u5f81\u56fe\uff0c\u6bcf\u4e2a\u7279\u5f81\u56fe\u8868\u793a\u4e0d\u540c\u7684\u5c40\u90e8\u7279\u5f81\uff08\u5982\u8fb9\u7f18\u3001\u7eb9\u7406\u7b49\uff09\u3002</p> </li> </ul> <p>\u5377\u79ef\u64cd\u4f5c\uff08Convolution Operation\uff09</p> <p>\u5728\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u4e2d\uff0c\u5377\u79ef\u5c42\u53d6\u4ee3\u4e86\u4f20\u7edf\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u5168\u8fde\u63a5\u5c42\u3002\u5377\u79ef\u5c42\u4f7f\u7528 <code>\u5377\u79ef\u6838</code>\uff08\u6216\u79f0\u4e3a\u6ee4\u6ce2\u5668\uff09\u5728\u8f93\u5165\u56fe\u50cf\u4e0a\u6ed1\u52a8\uff0c\u901a\u8fc7\u4e0e\u56fe\u50cf\u5c40\u90e8\u533a\u57df\u8fdb\u884c\u70b9\u79ef\u8fd0\u7b97\u6765\u63d0\u53d6\u7279\u5f81\u3002\u5377\u79ef\u64cd\u4f5c\u7684\u5173\u952e\u5728\u4e8e\u5b83\u4fdd\u7559\u4e86\u56fe\u50cf\u7684\u7a7a\u95f4\u7ed3\u6784\uff0c\u5229\u7528\u4e86\u56fe\u50cf\u50cf\u7d20\u4e4b\u95f4\u7684\u7a7a\u95f4\u5173\u7cfb\u3002</p> <ul> <li>\u5c40\u90e8\u8fde\u63a5\u6027\uff1a\u5377\u79ef\u5c42\u4e2d\u7684\u6bcf\u4e2a\u795e\u7ecf\u5143\u53ea\u4e0e\u4e0a\u4e00\u5c42\u7684 <code>\u5c40\u90e8\u533a\u57df</code> \u8fde\u63a5\uff0c\u800c\u4e0d\u662f\u4e0e\u6240\u6709\u795e\u7ecf\u5143\u8fde\u63a5\uff0c\u8fd9\u663e\u8457 <code>\u51cf\u5c11\u4e86\u53c2\u6570\u6570\u91cf</code>\u3002</li> <li>\u6743\u91cd\u5171\u4eab\uff1a<code>\u540c\u4e00\u4e2a\u5377\u79ef\u6838\u5728\u56fe\u50cf\u7684\u4e0d\u540c\u4f4d\u7f6e\u5171\u4eab\u6743\u91cd</code>\uff0c\u8fd9\u8fdb\u4e00\u6b65\u51cf\u5c11\u4e86\u6a21\u578b\u7684\u53c2\u6570\uff0c\u5e76\u4f7f\u6a21\u578b\u80fd\u591f\u5728\u4e0d\u540c\u56fe\u50cf\u4f4d\u7f6e\u4e0a\u68c0\u6d4b\u76f8\u540c\u7684\u7279\u5f81\u3002</li> </ul> <p>\u5377\u79ef\u5c42\u7684\u67b6\u6784\u8bbe\u8ba1</p> <ul> <li>\u6df1\u5ea6\uff08Depth\uff09\uff1a\u5377\u79ef\u6838\u7684\u6570\u91cf\u51b3\u5b9a\u4e86\u8f93\u51fa\u7279\u5f81\u56fe\u7684\u6df1\u5ea6\u3002</li> <li>\u6b65\u5e45\uff08Stride\uff09\uff1a\u5377\u79ef\u6838\u5728\u56fe\u50cf\u4e0a\u79fb\u52a8\u7684\u6b65\u957f\uff0c\u6b65\u5e45\u8d8a\u5927\uff0c\u8f93\u51fa\u7279\u5f81\u56fe\u8d8a\u5c0f\u3002</li> <li>\u586b\u5145\uff08Padding\uff09\uff1a\u4e3a\u4e86\u4fdd\u6301\u8f93\u51fa\u7279\u5f81\u56fe\u7684\u5c3a\u5bf8\uff0c\u53ef\u4ee5\u5728\u8f93\u5165\u56fe\u50cf\u8fb9\u7f18\u6dfb\u52a0\u989d\u5916\u7684\u50cf\u7d20\uff08\u901a\u5e38\u4e3a\u96f6\uff09\u3002</li> </ul> <ul> <li>ReLU \u5c42\u5c06\u4f1a\u9010\u4e2a\u5143\u7d20\u5730\u8fdb\u884c\u6fc0\u6d3b\u51fd\u6570\u64cd\u4f5c\uff0c\u6bd4\u5982\u4f7f\u7528\u4ee5 0 \u4e3a\u9608\u503c\u7684\\(f(x) = max(0,x)\\)\u4f5c\u4e3a\u6fc0\u6d3b\u51fd\u6570\u3002\u8be5\u5c42\u5bf9\u6570\u636e\u5c3a\u5bf8\u6ca1\u6709\u6539\u53d8\uff0c\u8fd8\u662f [32x32x12]\u3002</li> </ul> <p>\u6fc0\u6d3b\u51fd\u6570\uff08Activation Function\uff09</p> <p>\u5377\u79ef\u5c42\u7684\u8f93\u51fa\u901a\u5e38\u901a\u8fc7\u975e\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\u5904\u7406\uff0c\u4f8b\u5982 ReLU\uff08Rectified Linear Unit\uff09\uff0c\u4ee5\u5f15\u5165\u975e\u7ebf\u6027\uff0c\u4f7f\u6a21\u578b\u80fd\u591f\u8868\u793a\u66f4\u590d\u6742\u7684\u7279\u5f81\u3002</p> <ul> <li>\u6c60\u5316\u5c42\u5728\u5728\u7a7a\u95f4\u7ef4\u5ea6\uff08\u5bbd\u5ea6\u548c\u9ad8\u5ea6\uff09\u4e0a\u8fdb\u884c\u964d\u91c7\u6837\uff08downsampling\uff09\u64cd\u4f5c\uff0c\u901a\u5e38\u662f\u6700\u5927\u6c60\u5316\uff08Max Pooling\uff09\uff0c\u5c06\u5c40\u90e8\u533a\u57df\uff08\u5982 2x2 \u7a97\u53e3\uff09\u5185\u7684\u6700\u5927\u503c\u4f5c\u4e3a\u8f93\u51fa\uff0c\u51cf\u5c11\u7a7a\u95f4\u7ef4\u5ea6\u3002\u8f93\u51fa\u5c3a\u5bf8\uff1a<code>[16x16x12]</code>\uff0c\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u5747\u51cf\u534a\uff0c\u6df1\u5ea6\u4e0d\u53d8\u3002</li> </ul> <p>\u6c60\u5316\u5c42\uff08Pooling Layer\uff09</p> <p>\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u4e2d\u901a\u5e38\u5305\u542b\u6c60\u5316\u5c42\uff0c\u4e3b\u8981\u7528\u4e8e <code>\u4e0b\u91c7\u6837\uff08downsampling\uff09</code>\uff0c\u4ee5 \u51cf\u5c11\u7279\u5f81\u56fe\u7684\u5c3a\u5bf8\uff0c\u964d\u4f4e\u8ba1\u7b97\u590d\u6742\u5ea6\uff0c\u5e76\u589e\u52a0\u6a21\u578b\u7684\u7a7a\u95f4\u4e0d\u53d8\u6027\u3002\u6700\u5e38\u89c1\u7684\u6c60\u5316\u64cd\u4f5c\u662f\u6700\u5927\u6c60\u5316\uff08Max Pooling\uff09\uff0c\u5b83\u5728\u5c40\u90e8\u533a\u57df\u5185\u53d6\u6700\u5927\u503c\u4f5c\u4e3a\u8f93\u51fa\u3002</p> <ul> <li>\u5168\u8fde\u63a5\u5c42\u5c06\u4f1a\u8ba1\u7b97\u5206\u7c7b\u8bc4\u5206\uff0c\u7279\u5f81\u56fe<code>[16x16x12]</code>\uff0c\u9700\u8981\u5c55\u5e73\u6210\u4e00\u4e2a\u5411\u91cf\u3002\u5c06\u5c55\u5e73\u7684\u7279\u5f81\u5411\u91cf\u4e0e\u5168\u8fde\u63a5\u5c42\u7684\u6743\u91cd\u77e9\u9635\u76f8\u4e58\uff0c\u5e76\u52a0\u4e0a\u504f\u7f6e\uff0c\u8f93\u51fa\u5206\u7c7b\u5f97\u5206\u3002\u6570\u636e\u5c3a\u5bf8\u53d8\u4e3a [\\(1\\times1\\times10\\)]\uff0c\u5176\u4e2d 10 \u4e2a\u6570\u5b57\u5bf9\u5e94\u7684\u5c31\u662f CIFAR-10 \u4e2d 10 \u4e2a\u7c7b\u522b\u7684\u5206\u7c7b\u8bc4\u5206\u503c\u3002</li> </ul> <p>\u5168\u8fde\u63a5\u5c42\uff08Fully Connected Layer\uff09</p> <p>\u5728\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u7684\u6700\u540e\uff0c\u901a\u5e38\u4f1a\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u5168\u8fde\u63a5\u5c42\u3002\u8fd9\u4e9b\u5c42\u5c06\u5377\u79ef\u548c\u6c60\u5316\u5c42\u63d0\u53d6\u7684\u7279\u5f81\u6620\u5c04\u5230\u8f93\u51fa\u7c7b\u522b\u3002<code>\u5168\u8fde\u63a5\u5c42\u5c06\u5377\u79ef\u7f51\u7edc\u7684\u8f93\u51fa\u5c55\u5e73\u4e3a\u4e00\u7ef4\u5411\u91cf</code>\uff0c\u5e76\u901a\u8fc7 Softmax \u6216 SVM \u7b49\u635f\u5931\u51fd\u6570\u8fdb\u884c\u5206\u7c7b\u3002</p> <p>\u603b\u7ed3\uff1a</p> <ul> <li> <p>\u5c42\u6b21\u7ed3\u6784\uff1a\u901a\u8fc7\u5377\u79ef\u5c42\u63d0\u53d6\u56fe\u50cf\u7279\u5f81\uff0cReLU \u5c42\u5f15\u5165\u975e\u7ebf\u6027\uff0c\u6c60\u5316\u5c42\u964d\u91c7\u6837\u5e76\u51cf\u5c11\u7279\u5f81\u56fe\u5c3a\u5bf8\uff0c\u6700\u540e\u5168\u8fde\u63a5\u5c42\u751f\u6210\u5206\u7c7b\u8bc4\u5206\u3002</p> </li> <li> <p>\u53c2\u6570\u548c\u8d85\u53c2\u6570\uff1a\u5377\u79ef\u5c42\u548c\u5168\u8fde\u63a5\u5c42\u542b\u6709\u53ef\u8bad\u7ec3\u7684\u6743\u91cd\u53c2\u6570\uff0c\u800c ReLU \u5c42\u548c\u6c60\u5316\u5c42\u6ca1\u6709\u53c2\u6570\u3002\u8d85\u53c2\u6570\u5305\u62ec\u6ee4\u6ce2\u5668\u5927\u5c0f\u3001\u6570\u91cf\u3001\u6b65\u5e45\u3001\u586b\u5145\u65b9\u5f0f\u4ee5\u53ca\u6c60\u5316\u7a97\u53e3\u5927\u5c0f\u3002</p> </li> <li> <p>\u7279\u5f81\u63d0\u53d6\u548c\u5206\u7c7b\uff1aCNN \u9010\u5c42\u5c06\u56fe\u50cf\u4ece\u539f\u59cb\u50cf\u7d20\u503c\u8f6c\u5316\u4e3a\u9ad8\u5c42\u6b21\u7279\u5f81\uff0c\u6700\u7ec8\u7528\u4e8e\u56fe\u50cf\u5206\u7c7b\u3002</p> </li> </ul> <p>\u4f18\u70b9</p> <ul> <li>\u7a7a\u95f4\u4e0d\u53d8\u6027\uff1a\u5377\u79ef\u64cd\u4f5c\u4fdd\u7559\u4e86\u8f93\u5165\u7684\u7a7a\u95f4\u4fe1\u606f\uff0c\u4f7f\u5f97\u6a21\u578b\u80fd\u591f\u8bc6\u522b\u51fa\u5728\u4e0d\u540c\u4f4d\u7f6e\u7684\u76f8\u540c\u7279\u5f81\u3002</li> <li>\u53c2\u6570\u6548\u7387\uff1a\u901a\u8fc7\u5c40\u90e8\u8fde\u63a5\u548c\u6743\u91cd\u5171\u4eab\uff0cCNN \u5927\u5e45\u51cf\u5c11\u4e86\u6a21\u578b\u53c2\u6570\uff0c\u4f7f\u5f97\u8bad\u7ec3\u66f4\u52a0\u9ad8\u6548\u3002</li> <li>\u81ea\u52a8\u7279\u5f81\u63d0\u53d6\uff1aCNN \u53ef\u4ee5\u81ea\u52a8\u5b66\u4e60\u548c\u63d0\u53d6\u591a\u5c42\u6b21\u7684\u7279\u5f81\uff0c\u4ece\u4f4e\u7ea7\u8fb9\u7f18\u548c\u7eb9\u7406\u5230\u9ad8\u7ea7\u7684\u5bf9\u8c61\u548c\u5f62\u72b6\u3002</li> </ul>"},{"location":"CV/Lecture7_ConvolutionalNetworks/#\u5377\u79ef\u5c42","title":"\u5377\u79ef\u5c42","text":""},{"location":"CV/Lecture7_ConvolutionalNetworks/#\u5377\u79ef\u64cd\u4f5c","title":"\u5377\u79ef\u64cd\u4f5c","text":"<ol> <li>\u5355\u6b21\u5377\u79ef\u64cd\u4f5c\u793a\u610f\u56fe</li> </ol> <p>\u5728\u8fd9\u5f20\u793a\u610f\u56fe\u4e2d\uff0c\u5377\u79ef\u64cd\u4f5c\u5c55\u793a\u4e86\u5982\u4f55\u5229\u7528\u4e00\u4e2a\u5377\u79ef\u6838\u626b\u63cf\u8f93\u5165\u56fe\u50cf\u7684\u6bcf\u4e2a\u5c40\u90e8\u533a\u57df\u5e76\u751f\u6210\u5bf9\u5e94\u7684\u8f93\u51fa\u503c\u3002\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <p>\u8f93\u5165\uff1a\u5de6\u4fa7\u4e3a\u8f93\u5165\u56fe\u50cf\u7684\u4e00\u90e8\u5206\uff0c\u8868\u793a\u4e00\u4e2a\u5c40\u90e8\u7684\u50cf\u7d20\u533a\u57df\u3002</p> <p>\u5377\u79ef\u6838\uff1a\u5377\u79ef\u6838\u5728\u56fe\u50cf\u4e0a\u6ed1\u52a8\uff0c\u5728\u6bcf\u4e2a\u4f4d\u7f6e\u8ba1\u7b97\u56fe\u50cf\u5c40\u90e8\u533a\u57df\u4e0e\u5377\u79ef\u6838\u4e4b\u95f4\u7684\u5185\u79ef\u3002\u8fd9\u79cd\u5185\u79ef\u8ba1\u7b97\u662f\u7ebf\u6027\u64cd\u4f5c\uff0c\u5373\u5c06\u8f93\u5165\u533a\u57df\u7684\u6bcf\u4e2a\u50cf\u7d20\u503c\u4e0e\u5377\u79ef\u6838\u5bf9\u5e94\u7684\u6743\u91cd\u76f8\u4e58\u540e\u6c42\u548c\u3002</p> <p>\u8f93\u51fa\uff1a\u5185\u79ef\u7684\u7ed3\u679c\u5f62\u6210\u4e00\u4e2a\u8f93\u51fa\u503c\uff0c\u8868\u793a\u8be5\u5c40\u90e8\u533a\u57df\u4e0e\u5377\u79ef\u6838\u7279\u5f81\u7684\u5339\u914d\u7a0b\u5ea6\u3002\u8fd9\u4e9b\u8f93\u51fa\u503c\u7ec4\u6210\u7279\u5f81\u56fe\uff08Feature Map\uff09\uff0c\u5982\u56fe\u53f3\u4fa7\u6240\u793a\u3002</p> <p>\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff0c\u4e00\u4e2a\u5377\u79ef\u6838\u5c31\u8868\u793a\u4e00\u79cd\u7279\u5f81\uff0c\u8f93\u51fa\u7684\u7ed3\u679c\u5c31\u662f\u5377\u79ef\u6838\u5728\u6b64\u5904\u8fdb\u884c\u5339\u914d\u64cd\u4f5c\u7684\u5f97\u5206\u6216\u8005\u76f8\u4f3c\u5ea6\uff0c\u5f97\u5206\u8d8a\u9ad8\uff0c<code>\u8bf4\u660e\u6b64\u5904\u5c40\u90e8\u56fe\u50cf\u5c31\u4e0e\u5377\u79ef\u6838\u8981\u5bfb\u627e\u7684\u7279\u5f81\u8d8a\u76f8\u4f3c</code>\uff0c\u7136\u540e\u5377\u79ef\u6838\u7684\u53c2\u6570\u662f\u53ef\u4ee5\u6539\u53d8\u7684\uff0c\u6216\u8005\u8bf4\u662f\u53ef\u5b66\u4e60\u7684\uff0c\u4e5f\u5c31\u662f\u5377\u79ef\u6838\u8981\u5bfb\u627e\u7684\u7279\u5f81\u662f\u4f1a\u53d8\u5316\u7684\uff0c\u5377\u79ef\u6838\u4f1a\u53bb\u5bfb\u627e\u6700\u6709\u7528\u7684\u7279\u5f81\uff0c\u6216\u8005\u8bf4\u6700\u6709\u52a9\u4e8e\u964d\u4f4e\u5206\u7c7b\u8bef\u5dee\u7684\u7279\u5f81\uff09</p> <ol> <li>\u591a\u7ef4\u5377\u79ef\u6838\u8868\u793a</li> </ol> <p></p> <p>\u8fd9\u91cc\u6709\u516d\u4e2a\u5377\u79ef\u6838\uff0c\u6bcf\u4e2a\u5377\u79ef\u6838\u7684\u5927\u5c0f\u4e3a <code>[3x5x5]</code>\uff0c\u5176\u4e2d <code>3</code> \u8868\u793a\u901a\u9053\u6570\uff08\u5bf9\u5e94 RGB\uff09\uff0c<code>5x5</code> \u8868\u793a\u7a7a\u95f4\u5c3a\u5bf8\u3002</p> <p>\u591a\u4e2a\u5377\u79ef\u6838\u5806\u53e0\u5728\u4e00\u8d77\uff0c\u5f62\u6210\u4e00\u4e2a\u56db\u7ef4\u5f20\u91cf\u3002\u5bf9\u4e8e\u5377\u79ef\u5c42\u6765\u8bf4\uff0c\u8f93\u5165\u56fe\u50cf\u7684\u6bcf\u4e2a\u5c40\u90e8\u533a\u57df\u4e0e\u6bcf\u4e2a\u5377\u79ef\u6838\u8fdb\u884c\u8fd0\u7b97\u540e\uff0c\u4f1a\u751f\u6210\u4e00\u4e2a\u7279\u5f81\u56fe\u3002</p> <p>\u8fd9\u91cc\u6709 6 \u4e2a\u5377\u79ef\u6838\uff0c\u56e0\u6b64\u5c06\u751f\u6210 6 \u5f20\u7279\u5f81\u56fe\uff0c\u8868\u793a\u4e0d\u540c\u7684\u5377\u79ef\u6838\u5728\u56fe\u50cf\u4e0a\u63d0\u53d6\u5230\u7684\u4e0d\u540c\u7279\u5f81\u3002</p> <ol> <li>\u5377\u79ef\u64cd\u4f5c\u540e\u751f\u6210\u7279\u5f81\u56fe</li> </ol> <p></p> <p>\u5982\u679c\u6211\u4eec\u8fdb\u884c\u591a\u6b21\u5377\u79ef\u64cd\u4f5c\uff0c\u90a3\u4e48\u4e00\u5f20 3*32*32 \u7684\u56fe\u7247\uff0c\u7ecf\u8fc7\u5927\u5c0f\u4e3a 6*3*5*5 \u7684\u5377\u79ef\u6838\u5377\u79ef\uff0c\u5c31\u5f97\u5230\u516d\u5f20\u7279\u5f81\u56fe\uff0c\u5927\u5c0f\u4e3a 6*28*28</p> <p>\u4f46\u662f\uff0c\u6211\u4eec\u5e76\u4e0d\u80fd\u76f4\u63a5\u8fd9\u6837\u64cd\u4f5c\uff0c\u56e0\u4e3a\u5b9e\u9645\u4e0a\u5377\u79ef\u662f\u7ebf\u6027\u64cd\u4f5c\uff0c\u591a\u4e2a\u5377\u79ef\u4ecd\u7136\u662f\u7ebf\u6027\u7f51\u7edc\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u52a0\u4e0a<code>\u6fc0\u6d3b\u51fd\u6570</code>\uff0c\u8fd9\u6837\u624d\u53ef\u4ee5\u66f4\u597d\u7684\u5b66\u4e60</p> <ol> <li>\u6fc0\u6d3b\u51fd\u6570\u793a\u610f\u56fe</li> </ol> <p></p> <p>\u6b64\u56fe\u5c55\u793a\u4e86\u5728\u5377\u79ef\u64cd\u4f5c\u540e\u6dfb\u52a0\u6fc0\u6d3b\u51fd\u6570\u7684\u6b65\u9aa4\uff1a</p> <ul> <li>\u5377\u79ef\u7684\u7ebf\u6027\u7279\u6027\uff1a\u5377\u79ef\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u7ebf\u6027\u64cd\u4f5c\uff0c\u8fd9\u610f\u5473\u7740\u5373\u4f7f\u8fdb\u884c\u591a\u6b21\u5377\u79ef\uff0c\u7f51\u7edc\u4ecd\u7136\u662f\u7ebf\u6027\u7684\uff0c\u4e0d\u5177\u5907\u590d\u6742\u7684\u8868\u793a\u80fd\u529b\u3002</li> <li>\u6fc0\u6d3b\u51fd\u6570\uff1a\u4e3a\u4e86\u5f15\u5165\u975e\u7ebf\u6027\u7279\u6027\uff0c\u9700\u8981\u5728\u5377\u79ef\u64cd\u4f5c\u540e\u52a0\u4e0a\u975e\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\u3002\u5e38\u7528\u7684\u6fc0\u6d3b\u51fd\u6570\u5305\u62ec ReLU\uff08<code>max(0, x)</code>\uff09\uff0c\u5b83\u4f1a\u5c06\u8d1f\u503c\u7f6e\u4e3a 0\uff0c\u4fdd\u7559\u6b63\u503c\u4e0d\u53d8\u3002\u901a\u8fc7\u6fc0\u6d3b\u51fd\u6570\uff0c\u7f51\u7edc\u53ef\u4ee5\u5b66\u4e60\u66f4\u590d\u6742\u7684\u7279\u5f81\u3002</li> </ul> <p>\u6982\u8ff0\u548c\u76f4\u89c2\u4ecb\u7ecd\uff1a\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u5f20 32x32 \u50cf\u7d20\u7684 RGB \u56fe\u50cf\u4f5c\u4e3a\u8f93\u5165\uff0c\u7b2c\u4e00\u5c42\u5377\u79ef\u5c42\u4f7f\u7528\u4e00\u4e2a 5x5x3 \u7684\u6ee4\u6ce2\u5668\u3002\u8fd9\u4e2a\u6ee4\u6ce2\u5668\u7684\u4f5c\u7528\u5c31\u50cf\u4e00\u4e2a\u201c\u6a21\u677f\u201d\uff0c\u5b83\u4f1a\u6ed1\u52a8\u5728\u56fe\u50cf\u7684\u4e0d\u540c\u533a\u57df\u4e0a\uff0c\u68c0\u6d4b\u6bcf\u4e2a\u533a\u57df\u4e2d\u662f\u5426\u5b58\u5728\u7279\u5b9a\u7684\u89c6\u89c9\u6a21\u5f0f\uff08\u4f8b\u5982\u4e00\u6761\u8fb9\u7f18\uff09\u3002<code>\u5982\u679c\u6ee4\u6ce2\u5668\u201c\u5339\u914d\u201d\u5230\u56fe\u50cf\u4e2d\u7684\u7279\u5f81\uff0c\u5b83\u7684\u8f93\u51fa\uff08\u6fc0\u6d3b\u503c\uff09\u5c31\u4f1a\u9ad8\uff0c\u53cd\u4e4b\u5219\u4f4e\u3002\u901a\u8fc7\u5377\u79ef\u64cd\u4f5c\u751f\u6210\u7684\u6fc0\u6d3b\u56fe\u5c55\u793a\u4e86\u6ee4\u6ce2\u5668\u5bf9\u6574\u4e2a\u56fe\u50cf\u7684\u53cd\u5e94\u3002</code></p> <p>\u5047\u5982\u6211\u4eec\u6709\u591a\u4e2a\u6ee4\u6ce2\u5668\uff0c\u6bcf\u4e2a\u6ee4\u6ce2\u5668\u90fd\u80fd\u68c0\u6d4b\u4e0d\u540c\u7684\u7279\u5f81\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u6ee4\u6ce2\u5668\u53ef\u80fd\u4e13\u95e8\u68c0\u6d4b\u6c34\u5e73\u8fb9\u7f18\uff0c\u53e6\u4e00\u4e2a\u5219\u68c0\u6d4b\u5782\u76f4\u8fb9\u7f18\uff0c\u6700\u7ec8\u751f\u6210\u591a\u4e2a\u4e0d\u540c\u7684\u6fc0\u6d3b\u56fe\uff0c\u5728\u6df1\u5ea6\u65b9\u5411\u4e0a\u5c42\u53e0\u8d77\u6765\u5c31\u751f\u6210\u4e86\u8f93\u51fa\u6570\u636e\u3002</p> <p>\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u795e\u7ecf\u5143\u8fde\u63a5\u548c\u53c2\u6570\u5171\u4eab</p> <ul> <li>\u5c40\u90e8\u8fde\u63a5\u4e0e\u611f\u53d7\u91ce</li> </ul> <p>\u5728\u5377\u79ef\u5c42\u4e2d\uff0c\u795e\u7ecf\u5143\u5e76\u4e0d\u662f\u50cf\u5168\u8fde\u63a5\u5c42\u90a3\u6837\u4e0e\u524d\u4e00\u5c42\u7684\u6240\u6709\u795e\u7ecf\u5143\u76f8\u8fde\u3002\u76f8\u53cd\uff0c\u5b83\u4eec\u4ec5\u4e0e\u8f93\u5165\u6570\u636e\u7684\u4e00\u4e2a\u5c40\u90e8\u533a\u57df\u8fde\u63a5\u3002\u8fd9\u79cd\u5c40\u90e8\u8fde\u63a5\u7684\u533a\u57df\u79f0\u4e3a\u795e\u7ecf\u5143\u7684 \u611f\u53d7\u91ce\uff08receptive field\uff09\uff0c\u5b83\u5bf9\u5e94\u5377\u79ef\u6838\u7684\u7a7a\u95f4\u5c3a\u5bf8\u3002\u4f8b\u5982\uff0c\u5982\u679c\u5377\u79ef\u6838\u7684\u5927\u5c0f\u662f <code>5x5</code>\uff0c\u90a3\u4e48\u611f\u53d7\u91ce\u7684\u7a7a\u95f4\u5c3a\u5bf8\u5c31\u662f <code>5x5</code>\u3002</p> <p>\u7a7a\u95f4\u4e0a\u7684\u5c40\u90e8\u8fde\u63a5\uff1a\u795e\u7ecf\u5143\u53ea\u4e0e\u8f93\u5165\u56fe\u50cf\u7684\u4e00\u4e2a\u5c0f\u5757\u76f8\u8fde\uff0c\u800c\u975e\u6574\u4e2a\u56fe\u50cf\u3002\u8fd9\u79cd\u5c40\u90e8\u8fde\u63a5\u7684\u8bbe\u8ba1\u57fa\u4e8e\u56fe\u50cf\u7684\u5c40\u90e8\u76f8\u5173\u6027\uff0c\u5141\u8bb8\u7f51\u7edc\u96c6\u4e2d\u5173\u6ce8\u56fe\u50cf\u7684\u5c40\u90e8\u7279\u5f81\uff0c\u5982\u8fb9\u7f18\u3001\u89d2\u70b9\u7b49\u3002</p> <p>\u6df1\u5ea6\u4e0a\u7684\u5168\u8fde\u63a5\uff1a\u867d\u7136\u5728\u7a7a\u95f4\u4e0a\u662f\u5c40\u90e8\u8fde\u63a5\uff0c\u4f46\u5728\u6df1\u5ea6\u7ef4\u5ea6\u4e0a\uff0c\u795e\u7ecf\u5143\u4e0e\u8f93\u5165\u6570\u636e\u7684\u6240\u6709\u901a\u9053\u90fd\u8fde\u63a5\u3002\u8fd9\u610f\u5473\u7740\u8f93\u5165\u56fe\u50cf\u7684\u6bcf\u4e2a\u989c\u8272\u901a\u9053\uff08\u5982 RGB \u56fe\u50cf\u7684 3 \u4e2a\u901a\u9053\uff09\u90fd\u53c2\u4e0e\u8ba1\u7b97\u3002</p> <ul> <li>\u53c2\u6570\u5171\u4eab</li> </ul> <p>\u5377\u79ef\u5c42\u4e2d\u7684\u53c2\u6570\u5171\u4eab\u673a\u5236\u610f\u5473\u7740<code>\u540c\u4e00\u4e2a\u6ee4\u6ce2\u5668\uff08\u5377\u79ef\u6838\uff09\u5728\u8f93\u5165\u6570\u636e\u7684\u4e0d\u540c\u4f4d\u7f6e\u91cd\u590d\u4f7f\u7528</code>\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5377\u79ef\u5c42\u7684\u6bcf\u4e2a\u795e\u7ecf\u5143\u867d\u7136\u53ea\u89c2\u5bdf\u8f93\u5165\u6570\u636e\u7684\u4e00\u4e2a\u5c0f\u533a\u57df\uff0c\u4f46\u8fd9\u4e2a\u5c0f\u533a\u57df\u5bf9\u5e94\u7684\u53c2\u6570\uff08\u5373\u6ee4\u6ce2\u5668\u7684\u6743\u91cd\uff09\u5728\u7a7a\u95f4\u4e0a\u662f\u5171\u4eab\u7684\u3002</p> <p>\u5171\u4eab\u53c2\u6570\u7684\u6548\u679c\uff1a\u8fd9\u79cd\u53c2\u6570\u5171\u4eab\u65b9\u5f0f\u4f7f\u5f97\u5377\u79ef\u5c42\u53ef\u4ee5\u6709\u6548\u5730\u68c0\u6d4b\u76f8\u540c\u7684\u7279\u5f81\u5728\u4e0d\u540c\u7684\u7a7a\u95f4\u4f4d\u7f6e\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c<code>\u4e00\u4e2a\u5377\u79ef\u6838\u5982\u679c\u80fd\u591f\u5728\u56fe\u50cf\u7684\u4e00\u90e8\u5206\u68c0\u6d4b\u5230\u8fb9\u7f18\uff0c\u5b83\u4e5f\u80fd\u5728\u5176\u4ed6\u90e8\u5206\u68c0\u6d4b\u5230\u76f8\u540c\u7684\u8fb9\u7f18</code>\u3002\u8fd9\u79cd\u5171\u4eab\u673a\u5236\u51cf\u5c11\u4e86\u6a21\u578b\u53c2\u6570\u7684\u6570\u91cf\uff0c\u63d0\u5347\u4e86\u7f51\u7edc\u7684\u6cdb\u5316\u80fd\u529b\u3002</p> <ul> <li><code>\u4e3e\u4f8b\u8bf4\u660e</code></li> </ul> <p>\u4f8b 1\uff1a\u5047\u8bbe\u8f93\u5165\u6570\u636e\u662f\u4e00\u4e2a <code>32x32x3</code> \u7684 RGB \u56fe\u50cf\uff08\u5982 CIFAR-10 \u56fe\u50cf\uff09\uff0c\u5377\u79ef\u5c42\u4f7f\u7528 <code>5x5x3</code> \u7684\u6ee4\u6ce2\u5668\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5377\u79ef\u5c42\u4e2d\u7684\u6bcf\u4e2a\u795e\u7ecf\u5143\u90fd\u53ea\u4e0e <code>5x5</code> \u7a7a\u95f4\u533a\u57df\u548c <code>3</code> \u4e2a\u989c\u8272\u901a\u9053\u8fde\u63a5\uff0c\u56e0\u6b64\u6bcf\u4e2a\u795e\u7ecf\u5143\u6709 <code>5x5x3 = 75</code> \u4e2a\u6743\u91cd\uff0c\u518d\u52a0\u4e0a\u4e00\u4e2a\u504f\u7f6e\u53c2\u6570\u3002</p> <p>\u4f8b 2\uff1a\u5982\u679c\u8f93\u5165\u6570\u636e\u7684\u5c3a\u5bf8\u662f <code>16x16x20</code>\uff0c\u5e76\u4e14\u611f\u53d7\u91ce\u7684\u5c3a\u5bf8\u662f <code>3x3</code>\uff0c\u90a3\u4e48\u5377\u79ef\u5c42\u4e2d\u7684\u6bcf\u4e2a\u795e\u7ecf\u5143\u5c06\u4e0e\u8f93\u5165\u6570\u636e\u7684\u4e00\u4e2a <code>3x3x20</code> \u533a\u57df\u76f8\u8fde\uff0c\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a\u795e\u7ecf\u5143\u6709 <code>3x3x20 = 180</code> \u4e2a\u6743\u91cd\u3002</p> <p></p> <p>\u5de6\u8fb9\uff1a\u5de6\u4fa7\u7684\u793a\u610f\u56fe\u5c55\u793a\u4e86\u5377\u79ef\u5c42\u4e2d\u7684\u795e\u7ecf\u5143\u5982\u4f55\u8fde\u63a5\u5230\u8f93\u5165\u6570\u636e\u7684\u4e00\u4e2a\u5c40\u90e8\u533a\u57df\u3002\u7ea2\u8272\u533a\u57df\u8868\u793a\u8f93\u5165\u6570\u636e\uff0c\u84dd\u8272\u8868\u793a\u5377\u79ef\u5c42\u4e2d\u7684\u795e\u7ecf\u5143\u3002\u53ef\u4ee5\u770b\u5230\uff0c\u5377\u79ef\u5c42\u4e2d\u7684\u795e\u7ecf\u5143\u53ea\u4e0e\u8f93\u5165\u6570\u636e\u7684\u4e00\u4e2a\u7a7a\u95f4\u533a\u57df\uff08\u611f\u53d7\u91ce\uff09\u8fde\u63a5\uff0c\u800c\u5728\u6df1\u5ea6\u65b9\u5411\u4e0a\uff0c\u5219\u4e0e\u6240\u6709\u8f93\u5165\u901a\u9053\uff08\u5982\u989c\u8272\u901a\u9053\uff09\u8fde\u63a5\u3002</p> <p>\u53f3\u8fb9\uff1a\u795e\u7ecf\u7f51\u7edc\u7ae0\u8282\u4e2d\u4ecb\u7ecd\u7684\u795e\u7ecf\u5143\u4fdd\u6301\u4e0d\u53d8\uff0c\u5b83\u4eec\u8fd8\u662f\u8ba1\u7b97\u6743\u91cd\u548c\u8f93\u5165\u7684\u5185\u79ef\uff0c\u7136\u540e\u8fdb\u884c\u6fc0\u6d3b\u51fd\u6570\u8fd0\u7b97\uff0c\u53ea\u662f\u5b83\u4eec\u7684\u8fde\u63a5\u88ab\u9650\u5236\u5728\u4e00\u4e2a\u5c40\u90e8\u7a7a\u95f4\u3002</p>"},{"location":"CV/Lecture7_ConvolutionalNetworks/#\u8d85\u53c2\u6570\u5206\u6790\u6df1\u5ea6\u6b65\u957f\u548c\u96f6\u586b\u5145","title":"\u8d85\u53c2\u6570\u5206\u6790\uff1a\u6df1\u5ea6\u3001\u6b65\u957f\u548c\u96f6\u586b\u5145","text":"<p>\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff08CNN\uff09\u7684\u8f93\u51fa\u7279\u5f81\u56fe\u7684\u7a7a\u95f4\u6392\u5217\u53d7\u591a\u4e2a\u8d85\u53c2\u6570\u7684\u5f71\u54cd\uff0c\u5305\u62ec\u6df1\u5ea6\u3001\u6b65\u957f\u548c\u96f6\u586b\u5145\u3002\u8fd9\u4e9b\u8d85\u53c2\u6570\u4e0d\u4ec5\u51b3\u5b9a\u4e86\u8f93\u51fa\u7279\u5f81\u56fe\u7684\u5c3a\u5bf8\uff0c\u8fd8\u5f71\u54cd\u4e86\u7279\u5f81\u56fe\u7684\u5206\u8fa8\u7387\u548c\u4fe1\u606f\u4fdd\u7559\u7a0b\u5ea6\u3002</p> <ol> <li>\u6df1\u5ea6\uff08Depth\uff09\uff1a</li> <li>\u6df1\u5ea6\u5bf9\u5e94\u4e8e\u8f93\u51fa\u7279\u5f81\u56fe\u7684\u901a\u9053\u6570\uff0c\u7b49\u540c\u4e8e\u4f7f\u7528\u7684\u6ee4\u6ce2\u5668\u7684\u6570\u91cf\u3002\u6bcf\u4e2a\u6ee4\u6ce2\u5668\u5728\u8f93\u5165\u6570\u636e\u4e2d\u5bfb\u627e\u4e0d\u540c\u7684\u7279\u5f81\uff0c\u4f8b\u5982\u8fb9\u7f18\u3001\u989c\u8272\u6591\u70b9\u7b49\u3002\u56e0\u6b64\uff0c\u8f93\u51fa\u7279\u5f81\u56fe\u7684\u6df1\u5ea6\u662f\u7531\u6ee4\u6ce2\u5668\u7684\u6570\u91cf\u51b3\u5b9a\u7684\u3002\u6bcf\u4e2a\u6df1\u5ea6\u5217\u4e2d\u7684\u795e\u7ecf\u5143\u5171\u4eab\u76f8\u540c\u7684\u611f\u53d7\u91ce\uff0c\u4f46\u5728\u4e0d\u540c\u901a\u9053\u4e0a\u6fc0\u6d3b\u3002</li> <li>\u6b65\u957f\uff08Stride\uff09\uff1a</li> <li>\u6b65\u957f\u51b3\u5b9a\u4e86\u5377\u79ef\u6838\u5728\u8f93\u5165\u56fe\u50cf\u4e0a\u6ed1\u52a8\u7684\u8ddd\u79bb\u3002<code>\u8f83\u5c0f\u7684\u6b65\u957f\uff08\u5982 1\uff09\u610f\u5473\u7740\u5377\u79ef\u6838\u9010\u50cf\u7d20\u79fb\u52a8\uff0c\u8fd9\u4f1a\u4ea7\u751f\u66f4\u5927\u7684\u8f93\u51fa\u7279\u5f81\u56fe</code>\u3002\u8f83\u5927\u7684\u6b65\u957f\uff08\u5982 2\uff09\u5219\u610f\u5473\u7740\u6bcf\u6b21\u79fb\u52a8\u591a\u4e2a\u50cf\u7d20\uff0c\u8fd9\u5c06\u5bfc\u81f4\u8f93\u51fa\u7279\u5f81\u56fe\u5c3a\u5bf8\u51cf\u5c0f\u3002</li> <li>\u6b65\u957f\u5f71\u54cd\u8f93\u51fa\u7279\u5f81\u56fe\u7684\u5206\u8fa8\u7387\uff1a<code>\u6b65\u957f\u8d8a\u5927\uff0c\u8f93\u51fa\u7279\u5f81\u56fe\u8d8a\u5c0f\uff0c\u5206\u8fa8\u7387\u4e5f\u8d8a\u4f4e\u3002\u5927\u6b65\u957f\u901a\u5e38\u7528\u4e8e\u51cf\u5c0f\u7279\u5f81\u56fe\u7684\u7a7a\u95f4\u5c3a\u5bf8\u3002</code></li> <li>\u96f6\u586b\u5145\uff08Zero-padding\uff09\uff1a</li> <li>\u96f6\u586b\u5145\u662f\u5728\u8f93\u5165\u56fe\u50cf\u7684\u8fb9\u7f18\u586b\u5145\u989d\u5916\u7684\u96f6\u50cf\u7d20\uff0c\u4ee5\u63a7\u5236\u8f93\u51fa\u7279\u5f81\u56fe\u7684\u7a7a\u95f4\u5c3a\u5bf8\u3002\u96f6\u586b\u5145\u7684\u76ee\u7684\u662f\u907f\u514d\u5728\u5377\u79ef\u8fc7\u7a0b\u4e2d\u4e22\u5931\u8fb9\u7f18\u4fe1\u606f\uff0c\u6216\u8005\u4fdd\u6301\u8f93\u51fa\u7279\u5f81\u56fe\u4e0e\u8f93\u5165\u56fe\u50cf\u5728\u7a7a\u95f4\u5c3a\u5bf8\u4e0a\u7684\u4e00\u81f4\u6027\u3002</li> <li>\u901a\u8fc7\u9002\u5f53\u7684\u96f6\u586b\u5145\uff0c<code>\u53ef\u4ee5\u786e\u4fdd\u8f93\u51fa\u7279\u5f81\u56fe\u7684\u5c3a\u5bf8\u4e0e\u8f93\u5165\u56fe\u50cf\u76f8\u540c</code>\uff0c\u6216\u8005\u6839\u636e\u9700\u8981\u8c03\u6574\u4e3a\u7279\u5b9a\u5927\u5c0f\u3002</li> </ol> <p>\u8f93\u51fa\u7279\u5f81\u56fe\u7a7a\u95f4\u5c3a\u5bf8\u8ba1\u7b97</p> \\[ \u8f93\u51fa\u5c3a\u5bf8 = \\dfrac{W - F + 2P}{S} + 1 \\] <ul> <li> <p>W \u662f\u8f93\u5165\u56fe\u50cf\u7684\u5c3a\u5bf8\uff08\u5047\u8bbe\u9ad8\u5ea6\u548c\u5bbd\u5ea6\u76f8\u7b49\uff09\u3002</p> </li> <li> <p>F \u662f\u5377\u79ef\u6838\u7684\u5c3a\u5bf8\u3002</p> </li> <li> <p>P \u662f\u96f6\u586b\u5145\u7684\u6570\u91cf\u3002</p> </li> <li> <p>S \u662f\u6b65\u957f\u3002</p> </li> </ul> <p>\u4f8b 1\uff1a\u5047\u8bbe\u8f93\u5165\u56fe\u50cf\u5c3a\u5bf8\u4e3a \\(W = 7\\)\uff0c\u5377\u79ef\u6838\u5c3a\u5bf8 \\(F = 3\\)\uff0c\u6b65\u957f \\(S = 1\\)\uff0c\u96f6\u586b\u5145 \\(P = 0\\)\u3002\u90a3\u4e48\u8f93\u51fa\u7279\u5f81\u56fe\u7684\u5c3a\u5bf8\u4e3a\uff1a</p> <p>\\(\\text{\u8f93\u51fa\u5c3a\u5bf8} = \\dfrac{7 - 3 + 2(0)}{1} + 1 = 5\\)</p> <p>\u4f8b 2\uff1a\u5982\u679c\u4f7f\u7528\u76f8\u540c\u7684\u8f93\u5165\u56fe\u50cf\u548c\u5377\u79ef\u6838\uff0c\u4f46\u6b65\u957f\\(S = 2\\)\uff0c\u5219\u8f93\u51fa\u7279\u5f81\u56fe\u7684\u5c3a\u5bf8\u4e3a\uff1a</p> <p>\\(\\text{\u8f93\u51fa\u5c3a\u5bf8} = \\dfrac{7 - 3 + 2(0)}{2} + 1 = 3\\)</p> <p></p> <p>\u7a7a\u95f4\u6392\u5217\u7684\u56fe\u793a\u3002\u5728\u672c\u4f8b\u4e2d\u53ea\u6709\u4e00\u4e2a\u7a7a\u95f4\u7ef4\u5ea6\uff08x \u8f74\uff09\uff0c\u795e\u7ecf\u5143\u7684\u611f\u53d7\u91ce\u5c3a\u5bf8 F = 3\uff0c\u8f93\u5165\u5c3a\u5bf8 W = 5\uff0c<code>\u96f6\u586b\u5145 P = 1</code>\u3002\u5de6\u8fb9\uff1a\u795e\u7ecf\u5143\u4f7f\u7528\u7684\u6b65\u957f S = 1\uff0c\u6240\u4ee5\u8f93\u51fa\u5c3a\u5bf8\u662f(5-3+2)/1+1 = 5\u3002\u53f3\u8fb9\uff1a\u795e\u7ecf\u5143\u7684\u6b65\u957f S = 2\uff0c\u5219\u8f93\u51fa\u5c3a\u5bf8\u662f(5-3+2)/2+1 = 3\u3002\u6ce8\u610f\u5f53\u6b65\u957f S = 3 \u65f6\u662f\u65e0\u6cd5\u4f7f\u7528\u7684\uff0c\u56e0\u4e3a\u5b83\u65e0\u6cd5\u6574\u9f50\u5730\u7a7f\u8fc7\u6570\u636e\u4f53\u3002\u4ece\u7b49\u5f0f\u4e0a\u6765\u8bf4\uff0c\u56e0\u4e3a(5-3+2)= 4 \u662f\u4e0d\u80fd\u88ab 3 \u6574\u9664\u7684\u3002</p> <p>\u672c\u4f8b\u4e2d\uff0c\u795e\u7ecf\u5143\u7684\u6743\u91cd\u662f [1,0,-1]\uff0c\u663e\u793a\u5728\u56fe\u7684\u53f3\u4e0a\u89d2\uff0c\u504f\u5dee\u503c\u4e3a 0\u3002\u8fd9\u4e9b\u6743\u91cd\u662f\u88ab\u6240\u6709\u9ec4\u8272\u7684\u795e\u7ecf\u5143\u5171\u4eab\u7684</p>"},{"location":"CV/Lecture7_ConvolutionalNetworks/#\u4f7f\u7528\u96f6\u586b\u5145","title":"\u4f7f\u7528\u96f6\u586b\u5145","text":"<p>\u96f6\u586b\u5145\uff08Zero-padding\uff09\u5728\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff08CNN\uff09\u4e2d\u7684\u4f5c\u7528\u4e3b\u8981\u4f53\u73b0\u5728\u4e24\u4e2a\u65b9\u9762\uff1a\u4fdd\u6301\u8f93\u51fa\u7279\u5f81\u56fe\u7684\u5c3a\u5bf8\u4e0e\u8f93\u5165\u4e00\u81f4\uff0c\u4ee5\u53ca\u907f\u514d\u8fb9\u7f18\u4fe1\u606f\u4e22\u5931\u3002\u901a\u8fc7\u5408\u7406\u4f7f\u7528\u96f6\u586b\u5145\uff0c\u53ef\u4ee5\u6709\u6548\u5730\u89e3\u51b3\u5377\u79ef\u64cd\u4f5c\u4e2d\u9047\u5230\u7684\u4e00\u4e9b\u5c3a\u5bf8\u9650\u5236\u95ee\u9898\uff0c\u5c24\u5176\u662f\u5f53\u6b65\u957f\u548c\u6ee4\u6ce2\u5668\u5c3a\u5bf8\u7684\u7ec4\u5408\u4e0d\u9002\u7528\u4e8e\u8f93\u5165\u56fe\u50cf\u65f6\u3002</p> <ul> <li>\u4fdd\u6301\u7a7a\u95f4\u7ef4\u5ea6\u4e0d\u53d8</li> </ul> <p>\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5f53\u611f\u53d7\u91ce\u4e3a 3 \u4e14\u6b65\u957f\u4e3a 1 \u65f6\uff0c\u901a\u8fc7\u4f7f\u7528\u96f6\u586b\u5145 \\(P = 1\\)\uff0c\u53ef\u4ee5\u786e\u4fdd\u8f93\u51fa\u7279\u5f81\u56fe\u7684\u7a7a\u95f4\u7ef4\u5ea6\u4e0e\u8f93\u5165\u76f8\u540c\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c<code>\u5982\u679c\u4e0d\u4f7f\u7528\u96f6\u586b\u5145\uff0c\u8f93\u51fa\u7279\u5f81\u56fe\u7684\u7a7a\u95f4\u7ef4\u5ea6\u5c06\u51cf\u5c11\u81f3 3</code>\u3002\u8fd9\u79cd\u4fdd\u6301\u8f93\u5165\u4e0e\u8f93\u51fa\u7a7a\u95f4\u7ef4\u5ea6\u4e00\u81f4\u7684\u7b56\u7565\u5728\u6df1\u5c42\u5377\u79ef\u7f51\u7edc\u4e2d\u5f88\u5e38\u89c1\uff0c\u56e0\u4e3a\u5b83\u4f7f\u7f51\u7edc\u80fd\u591f\u9010\u5c42\u63d0\u53d6\u7279\u5f81\uff0c\u540c\u65f6\u4fdd\u6301\u56fe\u50cf\u7684\u7a7a\u95f4\u5206\u8fa8\u7387\u3002</p> <ul> <li>\u6b65\u957f\u7684\u9650\u5236\u4e0e\u6709\u6548\u8bbe\u7f6e</li> </ul> <p>\u5bf9\u4e8e\u67d0\u4e9b\u6b65\u957f\u548c\u6ee4\u6ce2\u5668\u5c3a\u5bf8\u7ec4\u5408\uff0c\u5982\u679c\u4e0d\u4f7f\u7528\u96f6\u586b\u5145\uff0c\u8f93\u51fa\u7279\u5f81\u56fe\u7684\u5c3a\u5bf8\u8ba1\u7b97\u53ef\u80fd\u65e0\u6cd5\u5f97\u5230\u6574\u6570\u7ed3\u679c\u3002\u4f8b\u5982\uff0c\u8f93\u5165\u5c3a\u5bf8\u4e3a 10\uff0c\u6ee4\u6ce2\u5668\u5c3a\u5bf8\u4e3a 3\uff0c\u6b65\u957f\u4e3a 2\uff0c\u4e0d\u4f7f\u7528\u96f6\u586b\u5145\u65f6\uff0c\u8ba1\u7b97\u7ed3\u679c\u4e3a \\(\\dfrac{10-3+0}{2}+1 = 4.5\\)\uff0c\u4e0d\u662f\u6574\u6570\uff0c\u8fd9\u5c31\u662f\u8bf4\u795e\u7ecf\u5143\u4e0d\u80fd\u6574\u9f50\u5bf9\u79f0\u5730\u6ed1\u8fc7\u8f93\u5165\u6570\u636e\u4f53,\u8fd9\u663e\u7136\u662f\u65e0\u6548\u7684\u8bbe\u7f6e\u3002\u4e3a\u907f\u514d\u6b64\u7c7b\u95ee\u9898\uff0c\u901a\u5e38\u9700\u8981\u8c03\u6574\u96f6\u586b\u5145\u6216\u6b65\u957f\uff0c\u4f7f\u5f97\u8ba1\u7b97\u7ed3\u679c\u4e3a\u6574\u6570\u3002</p>"},{"location":"CV/Lecture7_ConvolutionalNetworks/#\u53c2\u6570\u5171\u4eab","title":"\u53c2\u6570\u5171\u4eab","text":"<ol> <li>\u53c2\u6570\u5171\u4eab\u7684\u539f\u7406</li> </ol> <p>\u5728\u6807\u51c6\u7684\u5168\u8fde\u63a5\u795e\u7ecf\u7f51\u7edc\u4e2d\uff0c\u6bcf\u4e2a\u795e\u7ecf\u5143\u90fd\u6709\u5176\u72ec\u7acb\u7684\u6743\u91cd\u548c\u504f\u5dee\uff0c\u4e0e\u524d\u4e00\u5c42\u7684\u6240\u6709\u795e\u7ecf\u5143\u76f8\u8fde\u3002\u7136\u800c\uff0c\u5728\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u4e2d\uff0c\u57fa\u4e8e\u8fd9\u6837\u4e00\u4e2a\u5047\u8bbe\uff1a<code>\u5982\u679c\u67d0\u4e2a\u7279\u5f81\u5728\u8f93\u5165\u6570\u636e\u7684\u67d0\u4e2a\u4f4d\u7f6e\u6709\u7528\uff0c\u90a3\u4e48\u5728\u5176\u4ed6\u4f4d\u7f6e\u4e5f\u5f88\u53ef\u80fd\u6709\u7528</code>\u3002\u8fd9\u4e2a\u5047\u8bbe\u88ab\u79f0\u4e3a<code>\u5e73\u79fb\u4e0d\u53d8\u6027</code>\uff0c\u610f\u5473\u7740\u7279\u5f81\u5728\u4e0d\u540c\u4f4d\u7f6e\u4e0a\u7684\u8868\u793a\u53ef\u4ee5\u662f\u76f8\u540c\u7684\u3002\u56e0\u6b64\uff0c\u901a\u8fc7\u5c06\u540c\u4e00\u7ec4\u6743\u91cd\uff08\u5373\u6ee4\u6ce2\u5668\uff09\u5e94\u7528\u4e8e\u8f93\u5165\u7684\u4e0d\u540c\u533a\u57df\uff0c\u7f51\u7edc\u53ef\u4ee5\u5171\u4eab\u8fd9\u4e9b\u6743\u91cd\uff0c\u4ece\u800c\u51cf\u5c11\u9700\u8981\u5b66\u4e60\u7684\u53c2\u6570\u6570\u91cf\u3002</p> <ol> <li>\u53c2\u6570\u5171\u4eab\u7684\u5b9e\u9645\u5e94\u7528</li> </ol> <p>\u4ee5\u6587\u4e2d\u63d0\u5230\u7684\u5377\u79ef\u5c42\u4e3a\u4f8b\uff0c\u5047\u8bbe\u8f93\u5165\u6570\u636e\u4f53\u7684\u5c3a\u5bf8\u4e3a [55x55x96]\uff0c\u6bcf\u4e2a\u5377\u79ef\u6838\u7684\u5c3a\u5bf8\u4e3a [11x11x3]\uff0c\u4e14\u7f51\u7edc\u4f7f\u7528\u4e86 96 \u4e2a\u4e0d\u540c\u7684\u6ee4\u6ce2\u5668\u3002\u5982\u679c\u4e0d\u8fdb\u884c\u53c2\u6570\u5171\u4eab\uff0c\u6bcf\u4e2a\u795e\u7ecf\u5143\u5c06\u72ec\u7acb\u5b66\u4e60\u5176\u5bf9\u5e94\u7684\u53c2\u6570\uff0c\u8fd9\u5c06\u5bfc\u81f4\u5927\u91cf\u53c2\u6570\u3002\u4f8b\u5982\uff0c\u5728\u4e00\u4e2a [55x55] \u7684\u6df1\u5ea6\u5207\u7247\u4e2d\uff0c\u5171\u6709 55x55 = 3025 \u4e2a\u795e\u7ecf\u5143\uff0c\u6bcf\u4e2a\u795e\u7ecf\u5143\u9700\u8981\u5b66\u4e60 11x11x3 = 363 \u4e2a\u53c2\u6570\u3002\u8fd9\u610f\u5473\u7740\u5728\u6ca1\u6709\u53c2\u6570\u5171\u4eab\u7684\u60c5\u51b5\u4e0b\uff0c\u5377\u79ef\u5c42\u5c06\u62e5\u6709\u4e0a\u4ebf\u4e2a\u53c2\u6570\uff08$290400\\times364 = 105,705,600 $\u4e2a\uff09\uff0c\u96be\u4ee5\u5b9e\u9645\u5e94\u7528\u3002</p> <p>\u901a\u8fc7\u53c2\u6570\u5171\u4eab\uff0c\u540c\u4e00\u6ee4\u6ce2\u5668\u88ab\u5e94\u7528\u4e8e\u6bcf\u4e2a\u7a7a\u95f4\u4f4d\u7f6e\uff0c\u4ece\u800c\u4f7f\u6bcf\u4e2a\u6df1\u5ea6\u5207\u7247\u4e2d\u7684\u6240\u6709\u795e\u7ecf\u5143\u5171\u4eab\u540c\u4e00\u7ec4\u6743\u91cd\u548c\u504f\u5dee\u3002\u8fd9\u6837\uff0c\u5377\u79ef\u5c42\u53ea\u9700\u5b66\u4e60\u6bcf\u4e2a\u6df1\u5ea6\u5207\u7247\u4e2d\u7684 34,944 (\\(96\\times11\\times11\\times3 = 34,848\\))\u4e2a\u53c2\u6570\uff08\u5305\u62ec\u504f\u5dee\uff09\uff0c\u5927\u5927\u51cf\u5c11\u4e86\u53c2\u6570\u7684\u6570\u91cf\u3002\u8fd9\u4e0d\u4ec5\u964d\u4f4e\u4e86\u6a21\u578b\u7684\u8ba1\u7b97\u590d\u6742\u5ea6\uff0c\u8fd8\u51cf\u8f7b\u4e86\u8fc7\u62df\u5408\u7684\u98ce\u9669\u3002</p> <p>\u6ce8\u610f\uff0c\u5982\u679c\u5728\u4e00\u4e2a\u6df1\u5ea6\u5207\u7247\u4e2d\u7684\u6240\u6709\u6743\u91cd\u90fd\u4f7f\u7528\u540c\u4e00\u4e2a\u6743\u91cd\u5411\u91cf\uff0c\u90a3\u4e48\u5377\u79ef\u5c42\u7684\u524d\u5411\u4f20\u64ad\u5728\u6bcf\u4e2a\u6df1\u5ea6\u5207\u7247\u4e2d\u53ef\u4ee5\u770b\u505a\u662f\u5728\u8ba1\u7b97\u795e\u7ecf\u5143\u6743\u91cd\u548c\u8f93\u5165\u6570\u636e\u4f53\u7684 \u5377\u79ef\uff08\u8fd9\u5c31\u662f \"\u5377\u79ef\u5c42\" \u540d\u5b57\u7531\u6765\uff09\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u603b\u662f\u5c06\u8fd9\u4e9b\u6743\u91cd\u96c6\u5408\u79f0\u4e3a \u6ee4\u6ce2\u5668\uff08filter\uff09\uff08\u6216 \u5377\u79ef\u6838\uff08kernel\uff09\uff09\uff0c\u56e0\u4e3a\u5b83\u4eec\u548c\u8f93\u5165\u8fdb\u884c\u4e86\u5377\u79ef\u3002</p> <p></p> <p>Numpy \u4f8b\u5b50\uff1a\u4e3a\u4e86\u8ba9\u8ba8\u8bba\u66f4\u52a0\u7684\u5177\u4f53\uff0c\u6211\u4eec\u7528\u4ee3\u7801\u6765\u5c55\u793a\u4e0a\u8ff0\u601d\u8def\u3002\u5047\u8bbe\u8f93\u5165\u6570\u636e\u4f53\u662f numpy \u6570\u7ec4 X\u3002\u90a3\u4e48\uff1a</p> <ul> <li>\u4e00\u4e2a\u4f4d\u4e8e (x, y) \u7684\u6df1\u5ea6\u5217\uff08\u6216\u7ea4\u7ef4\uff09\u5c06\u4f1a\u662f \\(X [x, y,:]\\)\u3002</li> <li> <p>\u5728\u6df1\u5ea6\u4e3a d \u5904\u7684\u6df1\u5ea6\u5207\u7247\uff0c\u6216\u6fc0\u6d3b\u56fe\u5e94\u8be5\u662f \\(X [:,:, d]\\)\u3002</p> </li> <li> <p>\u8f93\u5165\u548c\u53c2\u6570\u8bf4\u660e</p> </li> </ul> <p>\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u4e09\u7ef4\u8f93\u5165\u6570\u636e <code>X</code>\uff0c\u5176\u5c3a\u5bf8\u4e3a <code>(11, 11, 4)</code>\uff0c\u5373\u8f93\u5165\u6570\u636e\u7684\u9ad8\u5ea6\u4e3a 11\uff0c\u5bbd\u5ea6\u4e3a 11\uff0c\u6df1\u5ea6\u4e3a 4\u3002\u6211\u4eec\u8fd8\u5047\u8bbe\u6709\u4e24\u4e2a\u5377\u79ef\u6ee4\u6ce2\u5668\uff08\u6216\u6743\u91cd\u77e9\u9635\uff09\uff0c<code>W0</code> \u548c <code>W1</code>\uff0c\u5b83\u4eec\u7684\u5c3a\u5bf8\u4e3a <code>(5, 5, 4)</code>\uff0c\u8868\u793a\u6bcf\u4e2a\u6ee4\u6ce2\u5668\u5728\u9ad8\u5ea6\u548c\u5bbd\u5ea6\u65b9\u5411\u8986\u76d6 5x5 \u533a\u57df\uff0c\u6df1\u5ea6\u4e0e\u8f93\u5165\u6570\u636e\u76f8\u540c\uff08\u5373 4\uff09\u3002\u6b64\u5916\uff0c\u6bcf\u4e2a\u6ee4\u6ce2\u5668\u8fd8\u6709\u4e00\u4e2a\u504f\u5dee <code>b0</code> \u548c <code>b1</code>\u3002</p> <ol> <li>\u5377\u79ef\u8f93\u51fa\u7684\u8ba1\u7b97</li> </ol> <p>\u6839\u636e\u8f93\u5165\u6570\u636e <code>X</code> \u7684\u5c3a\u5bf8 <code>(11, 11, 4)</code>\u3001\u6ee4\u6ce2\u5668\u5c3a\u5bf8 <code>(5, 5, 4)</code>\u3001\u6b65\u957f <code>S = 2</code>\uff0c\u4ee5\u53ca\u96f6\u586b\u5145 <code>P = 0</code>\uff0c\u8f93\u51fa\u6570\u636e <code>V</code> \u7684\u7a7a\u95f4\u5c3a\u5bf8\u4e3a\uff1a</p> <p>$$    \\text{Output size} = \\left( \\frac{11 - 5}{2} + 1 \\right) \\times \\left( \\frac{11 - 5}{2} + 1 \\right) = 4 \\times 4    $$</p> <p>\u56e0\u6b64\uff0c\u8f93\u51fa\u6570\u636e\u4f53 <code>V</code> \u7684\u5c3a\u5bf8\u4e3a <code>(4, 4, 2)</code>\uff0c\u5176\u4e2d\u6df1\u5ea6\u4e3a 2 \u8868\u793a\u6709\u4e24\u4e2a\u6fc0\u6d3b\u56fe\u3002</p> <ol> <li> <p>\u9010\u6b65\u7406\u89e3\u5377\u79ef\u64cd\u4f5c</p> </li> <li> <p>\u7b2c\u4e00\u5c42\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e <code>(0,0,0)</code>\uff1a</p> <p>\u516c\u5f0f\uff1a<code>V[0, 0, 0] = np.sum(X[:5, :5, :] * W0) + b0</code></p> <p>\u89e3\u91ca\uff1a\u53d6\u8f93\u5165\u6570\u636e <code>X</code> \u7684\u524d 5 \u884c\u548c\u524d 5 \u5217\uff0c\u4ee5\u53ca\u6240\u6709\u6df1\u5ea6\u7684\u5207\u7247\uff0c\u4e0e\u6ee4\u6ce2\u5668 <code>W0</code> \u5bf9\u5e94\u5143\u7d20\u76f8\u4e58\uff0c\u7136\u540e\u6c42\u548c\uff0c\u52a0\u4e0a\u504f\u5dee <code>b0</code>\u3002</p> </li> <li> <p>\u7b2c\u4e00\u5c42\u7684\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e <code>(1,0,0)</code>\uff1a</p> <p>\u516c\u5f0f\uff1a<code>V[1, 0, 0] = np.sum(X[2:7, :5, :] * W0) + b0</code></p> <p>\u89e3\u91ca\uff1a\u7531\u4e8e\u6b65\u957f\u4e3a 2\uff0c\u56e0\u6b64\u5728 x \u65b9\u5411\u4e0a\u79fb\u52a8 2 \u4e2a\u50cf\u7d20\uff0c\u5bf9\u65b0\u7684\u533a\u57df <code>[2:7, :5, :]</code> \u8fdb\u884c\u76f8\u540c\u64cd\u4f5c\u3002</p> </li> <li> <p>\u7b2c\u4e8c\u5c42\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff080\uff0c0\uff0c1\uff09</p> <p><code>V[0, 0, 1] = np.sum(X[:5, :5, :] * W1) + b1</code></p> <ul> <li>\u8f93\u5165\u7684\u7a97\u53e3 <code>X[:5, :5, :]</code> \u4ee3\u8868\u4ece\u8f93\u5165 <code>X</code> \u4e2d\u9009\u53d6 <code>[0:5]</code> \u884c\u3001<code>[0:5]</code> \u5217\u7684\u533a\u57df\u53ca\u5176\u5168\u90e8\u6df1\u5ea6\u3002</li> <li>\u4e0e\u6ee4\u6ce2\u5668 <code>W1</code> \u6267\u884c\u9010\u5143\u7d20\u76f8\u4e58\uff0c\u7136\u540e\u6c42\u548c\uff0c\u5e76\u52a0\u4e0a\u504f\u5dee <code>b1</code>\uff0c\u5f97\u5230\u8f93\u51fa\u6fc0\u6d3b\u56fe <code>V</code> \u5728\u4f4d\u7f6e <code>[0, 0]</code> \u7684\u503c\u3002</li> </ul> </li> <li> <p><code>V[2, 3, 1] = np.sum(X[4:9, 6:11, :] * W1) + b1</code></p> <ul> <li>\u540c\u65f6\u5728\u884c\u548c\u5217\u65b9\u5411\u4e0a\u5404\u6ed1\u52a8 2 \u4e2a\u4f4d\u7f6e\uff0c\u8f93\u5165\u7a97\u53e3\u4e3a <code>[4:9]</code> \u884c\u548c <code>[6:11]</code> \u5217\u3002</li> <li>\u8ba1\u7b97\u5f97\u5230 <code>V</code> \u5728\u4f4d\u7f6e <code>[2, 3]</code> \u7684\u503c\u3002</li> </ul> </li> <li> <p>Numpy \u5b9e\u73b0</p> </li> </ol> <pre><code>import numpy as np\n\n# \u521d\u59cb\u5316\u8f93\u5165\u6570\u636e X \u548c\u6ee4\u6ce2\u5668 W0, W1\nX = np.random.rand(11, 11, 4)  # \u8f93\u5165\u6570\u636e\nW0 = np.random.rand(5, 5, 4)   # \u7b2c\u4e00\u4e2a\u6ee4\u6ce2\u5668\nW1 = np.random.rand(5, 5, 4)   # \u7b2c\u4e8c\u4e2a\u6ee4\u6ce2\u5668\nb0 = np.random.rand()          # \u7b2c\u4e00\u4e2a\u6ee4\u6ce2\u5668\u7684\u504f\u5dee\nb1 = np.random.rand()          # \u7b2c\u4e8c\u4e2a\u6ee4\u6ce2\u5668\u7684\u504f\u5dee\n\n# \u521d\u59cb\u5316\u8f93\u51fa\u6570\u636e V\nV = np.zeros((4, 4, 2))  # \u8f93\u51fa\u6570\u636e\uff0c(4, 4, 2) \u5c3a\u5bf8\n\n# \u8ba1\u7b97\u5377\u79ef\u5c42\u7684\u8f93\u51fa V\nfor i in range(4):\n    for j in range(4):\n        V[i, j, 0] = np.sum(X[i*2:i*2+5, j*2:j*2+5, :] * W0) + b0  # \u7b2c\u4e00\u4e2a\u6fc0\u6d3b\u56fe\n        V[i, j, 1] = np.sum(X[i*2:i*2+5, j*2:j*2+5, :] * W1) + b1  # \u7b2c\u4e8c\u4e2a\u6fc0\u6d3b\u56fe\n\n# \u6fc0\u6d3b\u51fd\u6570\uff08ReLU\uff09\nV = np.maximum(0, V)  # ReLU \u6fc0\u6d3b\n</code></pre> <p>\u5377\u79ef\u5c42\u7684\u6027\u8d28\u603b\u7ed3</p> <p>\u5728\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff08CNN\uff09\u4e2d\uff0c\u5377\u79ef\u5c42\u5177\u6709\u4ee5\u4e0b\u51e0\u4e2a\u5173\u952e\u6027\u8d28\u548c\u8d85\u53c2\u6570\u914d\u7f6e\uff1a</p> <ol> <li> <p>\u8f93\u5165\u6570\u636e\u4f53\u7684\u5c3a\u5bf8\uff1a</p> <ul> <li>\u8bb0\u4e3a \\(W_1 \\times H_1 \\times D_1\\) \uff1a<ul> <li>\\(W_1\\) \u662f\u8f93\u5165\u6570\u636e\u7684\u5bbd\u5ea6\u3002</li> <li>\\(H_1\\) \u662f\u8f93\u5165\u6570\u636e\u7684\u9ad8\u5ea6\u3002</li> <li>\\(D_1\\) \u662f\u8f93\u5165\u6570\u636e\u7684\u6df1\u5ea6\uff08\u901a\u5e38\u662f\u901a\u9053\u6570\uff0c\u4f8b\u5982 RGB \u56fe\u50cf\u7684\u6df1\u5ea6\u4e3a 3\uff09\u3002</li> </ul> </li> </ul> </li> <li> <p>\u56db\u4e2a\u8d85\u53c2\u6570\uff1a</p> <ul> <li>\u6ee4\u6ce2\u5668\u7684\u6570\u91cf K \uff1a<ul> <li>K \u8868\u793a\u5377\u79ef\u5c42\u4f7f\u7528\u7684\u6ee4\u6ce2\u5668\uff08\u6216\u5377\u79ef\u6838\uff09\u7684\u6570\u91cf\uff0c\u51b3\u5b9a\u8f93\u51fa\u6570\u636e\u4f53\u7684\u6df1\u5ea6\u3002</li> </ul> </li> <li>\u6ee4\u6ce2\u5668\u7684\u7a7a\u95f4\u5c3a\u5bf8 F \uff1a<ul> <li>F \u8868\u793a\u6ee4\u6ce2\u5668\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\uff0c\u901a\u5e38\u662f\u6b63\u65b9\u5f62\uff0c\u4f8b\u5982 F = 3 \u4ee3\u8868 \\(3 \\times 3\\) \u7684\u6ee4\u6ce2\u5668\u3002</li> </ul> </li> <li>\u6b65\u957f S \uff1a<ul> <li>S \u8868\u793a\u6ee4\u6ce2\u5668\u5728\u8f93\u5165\u6570\u636e\u4f53\u4e0a\u6ed1\u52a8\u7684\u6b65\u5e45\u3002\u8f83\u5c0f\u7684\u6b65\u957f\u4f1a\u4ea7\u751f\u66f4\u5927\u7684\u8f93\u51fa\u6570\u636e\u4f53\u3002</li> </ul> </li> <li>\u96f6\u586b\u5145\u6570\u91cf P \uff1a<ul> <li>P \u8868\u793a\u5728\u8f93\u5165\u6570\u636e\u4f53\u7684\u8fb9\u7f18\u8fdb\u884c\u96f6\u586b\u5145\u7684\u6570\u91cf\uff0c\u4ee5\u63a7\u5236\u8f93\u51fa\u6570\u636e\u7684\u7a7a\u95f4\u5c3a\u5bf8\u3002</li> </ul> </li> </ul> </li> <li> <p>\u8f93\u51fa\u6570\u636e\u4f53\u7684\u5c3a\u5bf8\uff1a</p> <ul> <li>\u8bb0\u4e3a \\(W_2 \\times H_2 \\times D_2\\) \uff1a<ul> <li>\u8f93\u51fa\u5bbd\u5ea6 \\(W_2 = \\frac{W_1 - F + 2P}{S} + 1\\)</li> <li>\u8f93\u51fa\u9ad8\u5ea6 \\(H_2 = \\frac{H_1 - F + 2P}{S} + 1\\)</li> <li>\u8f93\u51fa\u6df1\u5ea6 \\(D_2 = K\\) \uff08\u7531\u6ee4\u6ce2\u5668\u7684\u6570\u91cf\u51b3\u5b9a\uff09</li> </ul> </li> </ul> </li> <li> <p>\u53c2\u6570\u5171\u4eab\uff1a</p> <ul> <li>\u6bcf\u4e2a\u6ee4\u6ce2\u5668\u5305\u542b \\(F \\times F \\times D_1\\) \u4e2a\u6743\u91cd\u548c\u4e00\u4e2a\u504f\u5dee\u3002\u56e0\u6b64\u5377\u79ef\u5c42\u4e00\u5171\u5177\u6709 \\(F \\times F \\times D_1 \\times K\\) \u4e2a\u6743\u91cd\u548c K \u4e2a\u504f\u7f6e\u3002</li> </ul> </li> <li> <p>\u8f93\u51fa\u6570\u636e\u7684\u751f\u6210\uff1a</p> <ul> <li>\u5728\u8f93\u51fa\u6570\u636e\u4f53\u4e2d\uff0c\u7b2c d \u4e2a\u6df1\u5ea6\u5207\u7247\uff08\u5373 \\(W_2 \\times H_2\\) \u7684\u4e8c\u7ef4\u77e9\u9635\uff09\u662f\u901a\u8fc7\u5c06\u7b2c d \u4e2a\u6ee4\u6ce2\u5668\u5728\u8f93\u5165\u6570\u636e\u4e0a\u8fdb\u884c\u6709\u6548\u5377\u79ef\u8fd0\u7b97\u5e76\u52a0\u4e0a\u5bf9\u5e94\u7684\u504f\u5dee\u5f97\u5230\u7684\u3002</li> </ul> </li> </ol> <p>\u7528\u77e9\u9635\u4e58\u6cd5\u5b9e\u73b0\uff1a\u5377\u79ef\u8fd0\u7b97\u672c\u8d28\u4e0a\u5c31\u662f\u5728\u6ee4\u6ce2\u5668\u548c\u8f93\u5165\u6570\u636e\u7684\u5c40\u90e8\u533a\u57df\u95f4\u505a\u70b9\u79ef\u3002\u5377\u79ef\u5c42\u7684\u5e38\u7528\u5b9e\u73b0\u65b9\u5f0f\u5c31\u662f\u5229\u7528\u8fd9\u4e00\u70b9\uff0c\u5c06\u5377\u79ef\u5c42\u7684\u524d\u5411\u4f20\u64ad\u53d8\u6210\u4e00\u4e2a\u5de8\u5927\u7684\u77e9\u9635\u4e58\u6cd5\uff1a</p> <ol> <li> <p>\u8f93\u5165\u6570\u636e\u5c55\u5f00\uff08im2col \u64cd\u4f5c\uff09\uff1a</p> </li> <li> <p>\u5047\u8bbe\u8f93\u5165\u56fe\u50cf\u5c3a\u5bf8\u4e3a <code>[227x227x3]</code>\uff0c\u6ee4\u6ce2\u5668\u5c3a\u5bf8\u4e3a <code>[11x11x3]</code>\uff0c\u6b65\u957f\u4e3a <code>4</code>\u3002</p> </li> <li> <p>im2col \u64cd\u4f5c\u5c06\u8f93\u5165\u4e2d\u7684\u6bcf\u4e2a\u611f\u53d7\u91ce\u62c9\u4f38\u4e3a\u5217\u5411\u91cf\u3002\u4f8b\u5982\uff0c\u5c3a\u5bf8\u4e3a <code>[11x11x3]</code> \u7684\u611f\u53d7\u91ce\u4f1a\u88ab\u62c9\u4f38\u4e3a\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>11x11x3 = 363</code> \u7684\u5217\u5411\u91cf\u3002</p> </li> <li> <p>\u5bf9\u6574\u4e2a\u8f93\u5165\u56fe\u50cf\u8fdb\u884c\u8be5\u64cd\u4f5c\uff0c\u5f97\u5230\u4e00\u4e2a\u77e9\u9635 <code>X_col</code>\uff0c\u5176\u4e2d\u6bcf\u5217\u662f\u4e00\u4e2a\u611f\u53d7\u91ce\u7684\u5c55\u5f00\u3002\u56e0\u4e3a\u6b65\u957f\u4e3a <code>4</code>\uff0c\u8f93\u51fa\u5bbd\u9ad8\u4e3a <code>(227-11)/4+1 = 55</code>\uff0c\u6240\u4ee5 <code>X_col</code> \u7684\u5c3a\u5bf8\u4e3a <code>[363x3025]</code>\uff0c\u5373\u6709 <code>55x55=3025</code> \u5217\u3002</p> </li> <li> <p>\u6ee4\u6ce2\u5668\u5c55\u5f00\uff1a</p> </li> <li> <p>\u5047\u8bbe\u6709 <code>96</code> \u4e2a\u5c3a\u5bf8\u4e3a <code>[11x11x3]</code> \u7684\u6ee4\u6ce2\u5668\u3002</p> </li> <li> <p>\u6ee4\u6ce2\u5668\u88ab\u5c55\u5f00\u6210\u884c\u5411\u91cf\uff0c\u7ec4\u6210\u77e9\u9635 <code>W_row</code>\uff0c\u5c3a\u5bf8\u4e3a <code>[96x363]</code>\u3002</p> </li> <li> <p>\u77e9\u9635\u4e58\u6cd5\uff1a</p> </li> <li> <p>\u5377\u79ef\u8fd0\u7b97\u53d8\u4e3a\u77e9\u9635\u4e58\u6cd5 <code>np.dot(W_row, X_col)</code>\uff0c\u8f93\u51fa\u77e9\u9635\u5c3a\u5bf8\u4e3a <code>[96x3025]</code>\uff0c\u5373\u6bcf\u4e2a\u6ee4\u6ce2\u5668\u5728\u6bcf\u4e2a\u611f\u53d7\u91ce\u4f4d\u7f6e\u7684\u70b9\u79ef\u7ed3\u679c\u3002</p> </li> <li> <p>\u7ed3\u679c\u91cd\u6574\uff1a</p> </li> <li>\u5c06\u77e9\u9635\u4e58\u6cd5\u7684\u7ed3\u679c\u91cd\u65b0\u6574\u5f62\u4e3a\u5408\u7406\u7684\u8f93\u51fa\u5c3a\u5bf8 <code>[55x55x96]</code>\u3002</li> </ol> <p>\u7f3a\u70b9\uff1aim2col \u64cd\u4f5c\u53ef\u80fd\u5bfc\u81f4\u5185\u5b58\u6d88\u8017\u589e\u52a0\uff0c\u56e0\u4e3a\u8f93\u5165\u6570\u636e\u7684\u67d0\u4e9b\u503c\u4f1a\u88ab\u91cd\u590d\u5b58\u50a8\u5728\u4e0d\u540c\u5217\u4e2d\u3002</p>"},{"location":"CV/Lecture7_ConvolutionalNetworks/#\u6c60\u5316\u5c42","title":"\u6c60\u5316\u5c42","text":"<p>\u901a\u5e38\uff0c\u5728\u8fde\u7eed\u7684\u5377\u79ef\u5c42\u4e4b\u95f4\u4f1a\u5468\u671f\u6027\u5730\u63d2\u5165\u4e00\u4e2a\u6c60\u5316\u5c42\u3002<code>\u5b83\u7684\u4f5c\u7528\u662f\u9010\u6e10\u964d\u4f4e\u6570\u636e\u4f53\u7684\u7a7a\u95f4\u5c3a\u5bf8\uff0c\u8fd9\u6837\u7684\u8bdd\u5c31\u80fd\u51cf\u5c11\u7f51\u7edc\u4e2d\u53c2\u6570\u7684\u6570\u91cf\uff0c\u4f7f\u5f97\u8ba1\u7b97\u8d44\u6e90\u8017\u8d39\u53d8\u5c11\uff0c\u4e5f\u80fd\u6709\u6548\u63a7\u5236\u8fc7\u62df\u5408\u3002</code></p> <p>\u6c60\u5316\u5c42\u7684\u64cd\u4f5c\u672c\u8d28\u4e0a\u662f\u5bf9\u8f93\u5165\u7279\u5f81\u56fe\u7684\u6bcf\u4e2a\u6df1\u5ea6\u5207\u7247\u8fdb\u884c\u72ec\u7acb\u7684\u964d\u91c7\u6837\u3002\u6700\u5e38\u7528\u7684\u662f\u6700\u5927\u6c60\u5316\uff08Max Pooling\uff09\uff0c\u5b83\u5728\u6bcf\u4e2a 2x2 \u533a\u57df\u5185\u9009\u62e9\u6700\u5927\u503c\u4f5c\u4e3a\u8f93\u51fa\u3002\u6df1\u5ea6\u4fdd\u6301\u4e0d\u53d8\u3002\u6c60\u5316\u5c42\u7684\u4e00\u4e9b\u516c\u5f0f\uff1a</p> <ul> <li>\u6c60\u5316\u5c42\u7684\u8f93\u51fa\u5c3a\u5bf8 \\(H_{out} \\times W_{out}\\) \u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u516c\u5f0f\u8ba1\u7b97\uff1a</li> </ul> \\[ H_{out} = \\frac{H_{in} - F + 2P}{S} + 1 \\] \\[ W_{out} = \\frac{W_{in} - F + 2P}{S} + 1 \\] <p>\u5176\u4e2d\uff1a</p> <ul> <li>\\(H_{in}\\) \u548c \\(W_{in}\\) \u5206\u522b\u662f\u8f93\u5165\u7279\u5f81\u56fe\u7684\u9ad8\u5ea6\u548c\u5bbd\u5ea6\u3002</li> <li>\\(F\\) \u662f\u6c60\u5316\u7a97\u53e3\u7684\u5c3a\u5bf8\uff08\u901a\u5e38\u662f 2x2 \u7684\u5927\u5c0f\uff0c\u8868\u793a F=2\uff09\u3002</li> <li>\\(P\\) \u662f\u586b\u5145\uff08padding\uff09\u7684\u5927\u5c0f\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u4e3a 0\u3002</li> <li> <p>\\(S\\) \u662f\u6c60\u5316\u7684\u6b65\u957f\uff08stride\uff09\uff0c\u901a\u5e38\u4e3a 2\u3002</p> </li> <li> <p>\u5728\u6c60\u5316\u5c42\u4e2d\u5f88\u5c11\u4f7f\u7528\u96f6\u586b\u5145</p> </li> <li> <p>\u5bf9\u4e8e\u6bcf\u4e2a\u6df1\u5ea6\u5207\u7247\u4e2d\u7684 \\(2 \\times 2\\) \u533a\u57df\uff0c\u6c60\u5316\u64cd\u4f5c\u5982\u4e0b\uff1a</p> </li> </ul> \\[ M_{ij} = \\max \\{ x_{i,j}, x_{i,j+1}, x_{i+1,j}, x_{i+1,j+1} \\} \\] <ul> <li> <p>\\(x_{i,j}\\) \u662f\u8f93\u5165\u7279\u5f81\u56fe\u5728\u4f4d\u7f6e \\((i, j)\\) \u7684\u50cf\u7d20\u503c\u3002</p> </li> <li> <p>\u6c60\u5316\u5c42\u7684\u4e00\u4e2a\u5173\u952e\u4f5c\u7528\u662f\u51cf\u5c11\u540e\u7eed\u5c42\u7684\u53c2\u6570\u6570\u91cf\u3002\u5047\u8bbe\u8f93\u5165\u7279\u5f81\u56fe\u7684\u5927\u5c0f\u4e3a \\(H_{in} \\times W_{in} \\times D\\)\uff08\u9ad8\u5ea6\u3001\u9ad8\u5ea6\u548c\u6df1\u5ea6\uff09\uff0c\u6c60\u5316\u540e\u8f93\u51fa\u7684\u5927\u5c0f\u4e3a \\(H_{out} \\times W_{out} \\times D\\)\uff0c\u90a3\u4e48\u53c2\u6570\u6570\u91cf\u51cf\u5c11\u7684\u6bd4\u7387\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u516c\u5f0f\u4f30\u7b97\uff1a</p> </li> </ul> \\[ \\text{Reduction Ratio} = \\frac{H_{in} \\times W_{in}}{H_{out} \\times W_{out}} \\] <p>\u6c60\u5316\u7684\u4e0d\u540c\u5f62\u5f0f\u4e0e\u9009\u62e9</p> <p>\u6c60\u5316\u64cd\u4f5c\u4e0d\u4ec5\u9650\u4e8e\u6700\u5927\u6c60\u5316\u3002\u8fd8\u6709\u5e73\u5747\u6c60\u5316\uff08Average Pooling\uff09\u548c L2 \u8303\u5f0f\u6c60\u5316\uff08L2-norm Pooling\uff09\u3002\u7136\u800c\uff0c\u5b9e\u8df5\u8868\u660e\u6700\u5927\u6c60\u5316\u901a\u5e38\u6548\u679c\u66f4\u597d\uff0c\u56e0\u4e3a\u5b83\u80fd\u591f\u63d0\u53d6\u7279\u5f81\u56fe\u4e2d\u66f4\u5177\u8fa8\u8bc6\u5ea6\u7684\u4fe1\u606f\u3002</p> <ul> <li> <p>\u91cd\u53e0\u6c60\u5316\uff08Overlapping Pooling\uff09\uff1a\u8fd9\u79cd\u6c60\u5316\u65b9\u5f0f\u4f7f\u7528\u8f83\u5927\u7684\u6ee4\u6ce2\u5668\u5c3a\u5bf8\u548c\u8f83\u5c0f\u7684\u6b65\u957f\uff08\u5982 <code>F=3, S=2</code>\uff09\uff0c\u4fdd\u7559\u66f4\u591a\u7684\u7279\u5f81\u4fe1\u606f\uff0c\u4f46\u8ba1\u7b97\u590d\u6742\u5ea6\u66f4\u9ad8\u3002</p> </li> <li> <p>\u5e38\u7528\u6c60\u5316\u5f62\u5f0f\uff1a\u66f4\u5e38\u89c1\u7684\u914d\u7f6e\u662f <code>F=2, S=2</code>\uff0c\u4ee5\u5e73\u8861\u8ba1\u7b97\u6548\u7387\u4e0e\u4fe1\u606f\u4fdd\u7559\u3002</p> </li> </ul> <p></p> <p>\u6c60\u5316\u5c42\u5728\u8f93\u5165\u6570\u636e\u4f53\u7684\u6bcf\u4e2a\u6df1\u5ea6\u5207\u7247\u4e0a\uff0c\u72ec\u7acb\u5730\u5bf9\u5176\u8fdb\u884c\u7a7a\u95f4\u4e0a\u7684\u964d\u91c7\u6837\u3002\u5de6\u8fb9\uff1a\u672c\u4f8b\u4e2d\uff0c\u8f93\u5165\u6570\u636e\u4f53\u5c3a\u5bf8$ [224\\times224\\times64] \\(\u88ab\u964d\u91c7\u6837\u5230\u4e86\\) [112\\times112\\times64]$\uff0c\u91c7\u53d6\u7684\u6ee4\u6ce2\u5668\u5c3a\u5bf8\u662f 2\uff0c\u6b65\u957f\u4e3a 2\uff0c\u800c\u6df1\u5ea6\u4e0d\u53d8\u3002\u53f3\u8fb9\uff1a\u6700\u5e38\u7528\u7684\u964d\u91c7\u6837\u64cd\u4f5c\u662f\u53d6\u6700\u5927\u503c\uff0c\u4e5f\u5c31\u662f\u6700\u5927\u6c60\u5316\uff0c\u8fd9\u91cc\u6b65\u957f\u4e3a 2\uff0c\u6bcf\u4e2a\u53d6\u6700\u5927\u503c\u64cd\u4f5c\u662f\u4ece 4 \u4e2a\u6570\u5b57\u4e2d\u9009\u53d6\uff08\u5373 2x2 \u7684\u65b9\u5757\u533a\u57df\u4e2d)\u3002</p> <p>\u53cd\u5411\u4f20\u64ad\uff1a \u5728\u53cd\u5411\u4f20\u64ad\u65f6\uff0c<code>\u6c60\u5316\u5c42\u53ea\u5c06\u68af\u5ea6\u4f20\u9012\u7ed9\u6c60\u5316\u533a\u57df\u5185\u7684\u6700\u5927\u503c\u5143\u7d20</code>\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u5728\u524d\u5411\u4f20\u64ad\u65f6\uff0c<code>\u7f51\u7edc\u4f1a\u8bb0\u5f55\u4e0b\u6700\u5927\u503c\u5143\u7d20\u7684\u7d22\u5f15\uff08\u5373\u201c\u9053\u5c94\u201d\uff09</code>\uff0c\u4ece\u800c\u5728\u53cd\u5411\u4f20\u64ad\u4e2d\u9ad8\u6548\u5730\u56de\u4f20\u68af\u5ea6\u3002</p> <p>\u4e0d\u4f7f\u7528\u6c60\u5316\u5c42\uff1a\u5c3d\u7ba1\u6c60\u5316\u5c42\u662f\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u5e38\u89c1\u7ec4\u4ef6\uff0c\u4f46\u8fd1\u5e74\u6765\u6709\u7814\u7a76\u5c1d\u8bd5\u5b8c\u5168\u53bb\u9664\u6c60\u5316\u5c42\uff0c\u91c7\u7528\u66f4\u5927\u7684\u5377\u79ef\u6b65\u957f\u6765\u8fbe\u5230\u540c\u6837\u7684\u964d\u91c7\u6837\u6548\u679c\u3002\u4f8b\u5982\u5728 All Convolutional Net \u4e2d\uff0c\u901a\u8fc7\u4ec5\u4f7f\u7528\u5377\u79ef\u64cd\u4f5c\u6765\u51cf\u5c11\u7279\u5f81\u56fe\u7684\u7a7a\u95f4\u5c3a\u5bf8\u3002\u5bf9\u4e8e\u751f\u6210\u6a21\u578b\u5982 \u53d8\u5316\u81ea\u7f16\u7801\u5668\uff08<code>VAEs\uff1avariational autoencoders</code>\uff09 \u548c <code>GANs\uff1agenerative adversarial networks</code>\uff0c\u4e0d\u4f7f\u7528\u6c60\u5316\u5c42\u4e5f\u6709\u5176\u72ec\u7279\u7684\u4f18\u52bf\u3002</p>"},{"location":"CV/Lecture7_ConvolutionalNetworks/#\u5f52\u4e00\u5316\u5c42","title":"\u5f52\u4e00\u5316\u5c42","text":"<p>\u5f52\u4e00\u5316\u65b9\u5f0f\u7684\u4f5c\u7528\uff0c<code>\u5176\u76ee\u7684\u662f\u4f7f\u7f51\u7edc\u66f4\u5bb9\u6613\u8bad\u7ec3\uff0c\u52a0\u901f\u6a21\u578b\u7684\u6536\u655b\uff0c\u5e76\u63d0\u9ad8\u6a21\u578b\u7684\u7a33\u5b9a\u6027\u548c\u6027\u80fd</code>\u3002\uff08\u6216\u8005\u8bf4\u53ef\u4ee5\u4f7f\u5f97\u8f93\u51fa\u5177\u6709\u96f6\u5747\u503c\u548c\u5355\u4f4d\u65b9\u5dee\uff09\uff0c\u5e38\u89c1\u7684\u65b9\u5f0f\u79f0\u4e3a<code>\u6279\u91cf\u5f52\u4e00\u5316</code>\uff0c\u5373 <code>Batch Normalization</code></p> <p>\u6279\u91cf\u5f52\u4e00\u5316\u7684\u6838\u5fc3\u601d\u60f3\u662f\u5728\u6bcf\u4e2a\u6279\u6b21\u4e2d\u5bf9\u7f51\u7edc\u4e2d\u7684\u4e2d\u95f4\u6fc0\u6d3b\u503c\u8fdb\u884c\u5f52\u4e00\u5316\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5b83\u901a\u8fc7\u5bf9\u6bcf\u4e2a\u5c0f\u6279\u91cf\uff08batch\uff09\u7684\u6fc0\u6d3b\u503c\u8fdb\u884c\u5747\u503c\u548c\u65b9\u5dee\u7684\u6807\u51c6\u5316\uff0c\u4f7f\u5176\u5177\u6709\u96f6\u5747\u503c\u548c\u5355\u4f4d\u65b9\u5dee\u3002\u516c\u5f0f\u5982\u4e0b\uff1a</p> \\[ \\hat{x} = \\frac{x - \\mu_B}{\\sqrt{\\sigma_B^2 + \\epsilon}} \\] <p>\u5176\u4e2d\uff1a</p> <ul> <li>\\(x\\) \u662f\u8f93\u5165\u7684\u6fc0\u6d3b\u503c\u3002</li> <li>\\(\\mu_B\\) \u548c \\(\\sigma_B^2\\) \u5206\u522b\u662f\u5f53\u524d\u6279\u6b21\u6fc0\u6d3b\u503c\u7684\u5747\u503c\u548c\u65b9\u5dee\u3002</li> <li>\\(\\epsilon\\) \u662f\u4e00\u4e2a\u5c0f\u7684\u6b63\u6570\uff0c\u7528\u4e8e\u907f\u514d\u9664\u96f6\u9519\u8bef\u3002</li> </ul> <p></p> <p><code>\u4f7f\u7f51\u7edc\u66f4\u5bb9\u6613\u8bad\u7ec3\uff0c\u52a0\u901f\u6a21\u578b\u7684\u6536\u655b\uff0c\u5e76\u63d0\u9ad8\u6a21\u578b\u7684\u7a33\u5b9a\u6027\u548c\u6027\u80fd</code></p> <ul> <li><code>\u5185\u90e8\u534f\u53d8\u91cf\u504f\u79fb\uff08Internal Covariate Shift</code>\uff09: \u5185\u90e8\u534f\u53d8\u91cf\u504f\u79fb\u6307\u7684\u662f\uff0c\u7531\u4e8e\u4e0a\u4e00\u5c42\u53c2\u6570\u7684\u53d8\u5316\u5bfc\u81f4\u5f53\u524d\u5c42\u8f93\u5165\u5206\u5e03\u7684\u53d8\u5316\uff0c\u8fdb\u800c\u4f7f\u5f97\u6a21\u578b\u7684\u8bad\u7ec3\u66f4\u52a0\u56f0\u96be\u3002\u6279\u91cf\u5f52\u4e00\u5316\u901a\u8fc7\u6807\u51c6\u5316\u8f93\u5165\u6570\u636e\uff0c\u51cf\u5c11\u4e86\u8fd9\u79cd\u504f\u79fb\uff0c\u4f7f\u5f97\u7f51\u7edc\u6bcf\u4e00\u5c42\u7684\u8f93\u5165\u4fdd\u6301\u7a33\u5b9a\uff0c\u4ece\u800c\u63d0\u9ad8\u4e86\u4f18\u5316\u6548\u7387\u3002</li> <li>\u901a\u8fc7\u5f15\u5165\u6279\u91cf\u5f52\u4e00\u5316\uff0c\u7f51\u7edc\u7684\u6bcf\u4e00\u5c42\u80fd\u591f\u5904\u7406\u7a33\u5b9a\u4e14\u5f52\u4e00\u5316\u7684\u8f93\u5165\uff0c<code>\u51cf\u5c11\u4e86\u8bad\u7ec3\u4e2d\u7684\u68af\u5ea6\u6d88\u5931\u548c\u68af\u5ea6\u7206\u70b8\u95ee\u9898</code>\u3002\u6b63\u5982\u56fe\u793a\u6240\u793a\uff0c\u6279\u91cf\u5f52\u4e00\u5316\u52a0\u901f\u4e86\u7f51\u7edc\u7684\u6536\u655b\uff0c\u4f7f\u5f97\u8bad\u7ec3\u66f4\u4e3a\u9ad8\u6548\u3002</li> </ul>"},{"location":"CV/Lecture7_ConvolutionalNetworks/#\u5168\u8fde\u63a5\u5c42","title":"\u5168\u8fde\u63a5\u5c42","text":"<p>\u5728\u5168\u8fde\u63a5\u5c42\u4e2d\uff0c\u795e\u7ecf\u5143\u5bf9\u4e8e\u524d\u4e00\u5c42\u4e2d\u7684\u6240\u6709\u6fc0\u6d3b\u6570\u636e\u662f\u5168\u90e8\u8fde\u63a5\u7684\uff0c\u8fd9\u4e2a\u5e38\u89c4\u795e\u7ecf\u7f51\u7edc\u4e2d\u4e00\u6837\u3002\u5b83\u4eec\u7684\u6fc0\u6d3b\u53ef\u4ee5\u5148\u7528\u77e9\u9635\u4e58\u6cd5\uff0c\u518d\u52a0\u4e0a\u504f\u5dee\u3002\u66f4\u591a\u7ec6\u8282\u8bf7\u67e5\u770b\u795e\u7ecf\u7f51\u7edc\u7ae0\u8282\u3002</p>"},{"location":"CV/Lecture7_ConvolutionalNetworks/#\u628a\u5168\u8fde\u63a5\u5c42\u8f6c\u5316\u6210\u5377\u79ef\u5c42","title":"\u628a\u5168\u8fde\u63a5\u5c42\u8f6c\u5316\u6210\u5377\u79ef\u5c42","text":"<p>\u5168\u8fde\u63a5\u5c42\u548c\u5377\u79ef\u5c42\u4e4b\u95f4\u552f\u4e00\u7684\u4e0d\u540c\u5c31\u662f\u5377\u79ef\u5c42\u4e2d\u7684\u795e\u7ecf\u5143\u53ea\u4e0e\u8f93\u5165\u6570\u636e\u4e2d\u7684\u4e00\u4e2a\u5c40\u90e8\u533a\u57df\u8fde\u63a5\uff0c\u5e76\u4e14\u5728\u5377\u79ef\u5217\u4e2d\u7684\u795e\u7ecf\u5143\u5171\u4eab\u53c2\u6570\u3002\u4f46\u5176\u672c\u8d28\u90fd\u662f\u901a\u8fc7\u6743\u91cd\u4e0e\u8f93\u5165\u8ba1\u7b97\u70b9\u79ef\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u5728\u7406\u8bba\u4e0a\u548c\u5b9e\u8df5\u4e2d\u5c06\u4e8c\u8005\u76f8\u4e92\u8f6c\u5316\u3002</p> <ul> <li>\u5377\u79ef\u5c42\u8f6c\u5316\u4e3a\u5168\u8fde\u63a5\u5c42</li> </ul> <p>\u5377\u79ef\u5c42\u53ef\u4ee5\u88ab\u8f6c\u5316\u4e3a\u7b49\u6548\u7684\u5168\u8fde\u63a5\u5c42\u3002\u8fd9\u79cd\u8f6c\u5316\u7684\u6743\u91cd\u77e9\u9635\u901a\u5e38\u662f\u5de8\u5927\u7684\u3001\u7a00\u758f\u7684\uff0c\u5e76\u4e14\u5177\u6709\u5757\u7ed3\u6784\u3002\u5176\u4e2d\u7684\u5927\u90e8\u5206\u5757\u4e2d\u5143\u7d20\u76f8\u7b49\uff0c\u53cd\u6620\u4e86\u5377\u79ef\u5c42\u7684\u5c40\u90e8\u8fde\u63a5\u548c\u53c2\u6570\u5171\u4eab\u7279\u6027\u3002\u9664\u4e86\u67d0\u4e9b\u7279\u5b9a\u5757\uff08\u8fd9\u662f\u56e0\u4e3a\u6709\u5c40\u90e8\u8fde\u63a5\uff09\uff0c\u5176\u4f59\u90e8\u5206\u90fd\u662f\u96f6\u3002</p> <ul> <li>\u5168\u8fde\u63a5\u5c42\u8f6c\u5316\u4e3a\u5377\u79ef\u5c42</li> </ul> <p>\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u5c06\u5168\u8fde\u63a5\u5c42\u8f6c\u5316\u4e3a\u5377\u79ef\u5c42\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u66f4\u52a0\u6709\u7528\uff0c\u5c24\u5176\u5728\u5904\u7406\u4e0d\u540c\u8f93\u5165\u5c3a\u5bf8\u7684\u60c5\u51b5\u4e0b\u3002\u4e00\u4e2a\u5178\u578b\u7684\u5168\u8fde\u63a5\u5c42\u53ef\u4ee5\u88ab\u89c6\u4e3a\u4e00\u4e2a\u5377\u79ef\u5c42\uff0c<code>\u5176\u4e2d\u6ee4\u6ce2\u5668\u7684\u5c3a\u5bf8\u4e0e\u8f93\u5165\u6570\u636e\u7684\u7a7a\u95f4\u5c3a\u5bf8\u76f8\u540c</code>\uff0c\u8fd9\u6837\u5377\u79ef\u64cd\u4f5c\u4ec5\u4ea7\u751f\u4e00\u4e2a\u5355\u4e00\u7684\u8f93\u51fa\u3002</p> <p>\u6211\u4eec\u4ee5 AlexNet \u4e3a\u4f8b\uff0c\u5047\u8bbe\u7f51\u7edc\u7684\u8f93\u5165\u662f\u4e00\u5f20\u5c3a\u5bf8\u4e3a <code>224x224x3</code> \u7684\u56fe\u50cf\uff0c\u7ecf\u8fc7\u591a\u5c42\u5377\u79ef\u548c\u6c60\u5316\u64cd\u4f5c\u540e\uff0c\u6700\u7ec8\u8f93\u51fa\u7684\u6fc0\u6d3b\u6570\u636e\u4f53\u7684\u5c3a\u5bf8\u4e3a <code>7x7x512</code>(\u901a\u8fc7\u4f7f\u7528 5 \u4e2a\u6c60\u5316\u5c42\u6765\u5bf9\u8f93\u5165\u6570\u636e\u8fdb\u884c\u7a7a\u95f4\u4e0a\u7684\u964d\u91c7\u6837\uff0c\u6bcf\u6b21\u5c3a\u5bf8\u4e0b\u964d\u4e00\u534a\uff0c\u6240\u4ee5\u6700\u7ec8\u7a7a\u95f4\u5c3a\u5bf8\u4e3a \\(224/2/2/2/2/2 = 7\\))\u3002\u63a5\u4e0b\u6765\u662f\u4e09\u5c42\u5168\u8fde\u63a5\u5c42\uff1a</p> <p>\u7b2c\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42\uff1a4096 \u4e2a\u795e\u7ecf\u5143\uff0c\u63a5\u6536 <code>7x7x512</code> \u7684\u8f93\u5165\u3002</p> <p>\u7b2c\u4e8c\u4e2a\u5168\u8fde\u63a5\u5c42\uff1a4096 \u4e2a\u795e\u7ecf\u5143\uff0c\u63a5\u6536\u7b2c\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42\u7684\u8f93\u51fa\u3002</p> <p>\u7b2c\u4e09\u4e2a\u5168\u8fde\u63a5\u5c42\uff1a1000 \u4e2a\u795e\u7ecf\u5143\uff0c\u8f93\u51fa\u7c7b\u522b\u6982\u7387\u3002</p> <ol> <li> <p>\u5c06\u7b2c\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42\u8f6c\u5316\u4e3a\u5377\u79ef\u5c42</p> </li> <li> <p>\u539f\u59cb\u5168\u8fde\u63a5\u5c42\uff1a\u8f93\u5165\u5c3a\u5bf8\u4e3a <code>7x7x512</code>\uff0c\u8f93\u51fa\u4e3a <code>4096</code> \u4e2a\u795e\u7ecf\u5143\u3002</p> </li> <li> <p>\u8f6c\u5316\u540e\u7684\u5377\u79ef\u5c42\uff1a\u5377\u79ef\u6838\u5927\u5c0f\u8bbe\u7f6e\u4e3a <code>F=7</code>\uff0c\u6b65\u957f\u4e3a <code>1</code>\uff0c\u4e0d\u4f7f\u7528\u586b\u5145\uff08padding\uff09\u3002\u5377\u79ef\u6838\u7684\u6df1\u5ea6\u4e0e\u8f93\u5165\u7684\u6df1\u5ea6\u4e00\u81f4\uff0c\u5373 <code>512</code>\u3002</p> <p>\u7531\u4e8e\u5377\u79ef\u6838\u8986\u76d6\u4e86\u6574\u4e2a\u8f93\u5165\u5e73\u9762\uff08\u5373 <code>7x7</code> \u7684\u533a\u57df\uff09\uff0c\u5377\u79ef\u64cd\u4f5c\u53ea\u4f1a\u4ea7\u751f\u4e00\u4e2a\u8f93\u51fa\uff0c\u56e0\u6b64\u8f93\u51fa\u7684\u7a7a\u95f4\u5c3a\u5bf8\u4e3a <code>1x1</code>\uff0c\u6df1\u5ea6\u4e3a <code>4096</code>\uff0c\u5373 <code>1x1x4096</code>\u3002</p> </li> <li> <p>\u5c06\u7b2c\u4e8c\u4e2a\u5168\u8fde\u63a5\u5c42\u8f6c\u5316\u4e3a\u5377\u79ef\u5c42</p> </li> <li> <p>\u539f\u59cb\u5168\u8fde\u63a5\u5c42\uff1a\u8f93\u5165\u4e3a\u7b2c\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42\u7684 <code>4096</code> \u4e2a\u795e\u7ecf\u5143\uff0c\u8f93\u51fa\u4e5f\u662f <code>4096</code> \u4e2a\u795e\u7ecf\u5143\u3002</p> </li> <li> <p>\u8f6c\u5316\u540e\u7684\u5377\u79ef\u5c42\uff1a\u5377\u79ef\u6838\u5927\u5c0f\u8bbe\u7f6e\u4e3a <code>F=1</code>\uff0c\u6b65\u957f\u4e3a <code>1</code>\uff0c\u8f93\u5165\u6df1\u5ea6\u4e3a <code>4096</code>\uff0c\u8f93\u51fa\u6df1\u5ea6\u4e3a <code>4096</code>\u3002</p> <p>\u7531\u4e8e\u5377\u79ef\u6838\u7684\u5927\u5c0f\u4e3a <code>1x1</code>\uff0c\u8f93\u51fa\u7684\u7a7a\u95f4\u5c3a\u5bf8\u4ecd\u4e3a <code>1x1</code>\uff0c\u6df1\u5ea6\u4e3a <code>4096</code>\uff0c\u5373 <code>1x1x4096</code>\u3002</p> </li> <li> <p>\u5c06\u7b2c\u4e09\u4e2a\u5168\u8fde\u63a5\u5c42\u8f6c\u5316\u4e3a\u5377\u79ef\u5c42</p> </li> <li> <p>\u539f\u59cb\u5168\u8fde\u63a5\u5c42\uff1a\u8f93\u5165\u4e3a\u7b2c\u4e8c\u4e2a\u5168\u8fde\u63a5\u5c42\u7684 <code>4096</code> \u4e2a\u795e\u7ecf\u5143\uff0c\u8f93\u51fa\u4e3a <code>1000</code> \u4e2a\u795e\u7ecf\u5143\uff08\u7528\u4e8e\u5206\u7c7b\uff09\u3002</p> </li> <li> <p>\u8f6c\u5316\u540e\u7684\u5377\u79ef\u5c42\uff1a\u5377\u79ef\u6838\u5927\u5c0f\u8bbe\u7f6e\u4e3a <code>F=1</code>\uff0c\u6b65\u957f\u4e3a <code>1</code>\uff0c\u8f93\u5165\u6df1\u5ea6\u4e3a <code>4096</code>\uff0c\u8f93\u51fa\u6df1\u5ea6\u4e3a <code>1000</code>\u3002</p> <p>\u8f93\u51fa\u7684\u7a7a\u95f4\u5c3a\u5bf8\u4ecd\u4e3a <code>1x1</code>\uff0c\u6df1\u5ea6\u4e3a <code>1000</code>\uff0c\u5373 <code>1x1x1000</code>\u3002</p> </li> </ol> <p><code>\u4e3a\u4ec0\u4e48\u8981\u5c06\u5168\u8fde\u63a5\u5c42\u8f6c\u5316\u4e3a\u5377\u79ef\u5c42</code></p> <ul> <li> <p>\u5047\u8bbe\u4e00\u4e2a\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u7684\u8f93\u5165\u4e3a <code>224x224x3</code> \u7684\u56fe\u50cf\uff0c\u7ecf\u8fc7\u591a\u5c42\u5377\u79ef\u548c\u6c60\u5316\u64cd\u4f5c\u540e\uff0c\u8f93\u51fa\u5c3a\u5bf8\u4e3a <code>7x7x512</code>\u3002\u5982\u679c\u4f7f\u7528\u5168\u8fde\u63a5\u5c42\u8fdb\u884c\u5206\u7c7b\uff0c\u901a\u5e38\u9700\u8981\u5c06\u8fd9\u4e2a <code>7x7x512</code> \u7684\u6fc0\u6d3b\u6570\u636e\u5c55\u5e73\u6210\u4e00\u7ef4\u5411\u91cf\uff0c\u7136\u540e\u8fdb\u884c\u5206\u7c7b\u3002\u4f46\u8fd9\u79cd\u5c55\u5e73\u64cd\u4f5c\u635f\u5931\u4e86\u7a7a\u95f4\u4fe1\u606f\uff0c\u540c\u65f6\u8ba1\u7b97\u6548\u7387\u4f4e\u4e0b\u3002</p> </li> <li> <p>\u901a\u8fc7\u5c06\u5168\u8fde\u63a5\u5c42\u8f6c\u5316\u4e3a\u5377\u79ef\u5c42\uff0c\u53ef\u4ee5\u907f\u514d\u5c55\u5e73\u64cd\u4f5c\uff0c\u5e76\u4e14\u5141\u8bb8\u7f51\u7edc\u5904\u7406\u4e0d\u540c\u5c3a\u5bf8\u7684\u8f93\u5165\u56fe\u50cf\u3002\u8fd9\u79cd\u65b9\u6cd5\u5c24\u5176\u9002\u7528\u4e8e\u4ee5\u4e0b\u60c5\u51b5\uff1a\u5e0c\u671b\u5728\u66f4\u5927\u5c3a\u5bf8\u7684\u56fe\u50cf\u4e0a\u6ed1\u52a8\u8f83\u5c0f\u7684\u7a97\u53e3\uff08\u4f8b\u5982 <code>224x224</code>\uff09\u8fdb\u884c\u5206\u7c7b\uff0c\u5e76\u5728\u4e00\u6b21\u524d\u5411\u4f20\u64ad\u4e2d\u83b7\u5f97\u591a\u4e2a\u4f4d\u7f6e\u7684\u5206\u7c7b\u7ed3\u679c\u3002</p> </li> </ul> <p><code>\u5177\u4f53\u4f8b\u5b50\u5206\u6790</code></p> <p>\u5047\u8bbe\u73b0\u5728\u7684\u8f93\u5165\u56fe\u50cf\u5c3a\u5bf8\u4e3a <code>384x384x3</code>\uff0c\u6211\u4eec\u5e0c\u671b\u4f7f\u7528 <code>224x224</code> \u5c3a\u5bf8\u7684\u6ed1\u52a8\u7a97\u53e3\u4ee5\u6b65\u957f <code>32</code> \u5728\u8fd9\u5f20\u5927\u56fe\u4e0a\u6ed1\u52a8\uff0c\u5e76\u83b7\u5f97\u5404\u4e2a\u7a97\u53e3\u7684\u5206\u7c7b\u7ed3\u679c\u3002\u57fa\u4e8e\u4e4b\u524d\u63d0\u5230\u7684\u8f6c\u6362\u65b9\u6cd5\uff1a</p> <ol> <li>\u8f6c\u6362\u524d\uff1a\u4f20\u7edf\u65b9\u6cd5\u9700\u8981\u5bf9\u6bcf\u4e2a <code>224x224</code> \u7684\u7a97\u53e3\u5206\u522b\u8fdb\u884c\u524d\u5411\u4f20\u64ad\u8ba1\u7b97\uff0c\u5171\u9700 36 \u6b21\u72ec\u7acb\u7684\u8ba1\u7b97\uff08\u5bf9\u5e94 <code>6x6</code> \u4e2a\u4f4d\u7f6e\uff09\u3002</li> <li> <p>\u8f6c\u6362\u540e\uff1a\u5c06\u5168\u8fde\u63a5\u5c42\u8f6c\u5316\u4e3a\u5377\u79ef\u5c42\u540e\uff0c\u53ef\u4ee5\u76f4\u63a5\u5bf9\u6574\u4e2a <code>384x384</code> \u7684\u56fe\u50cf\u8fdb\u884c\u4e00\u6b21\u524d\u5411\u4f20\u64ad\u8ba1\u7b97\u3002\u5982\u679c 224x224 \u7684\u8f93\u5165\u56fe\u7247\u7ecf\u8fc7\u5377\u79ef\u5c42\u548c\u6c60\u5316\u5c42\u4e4b\u540e\u5f97\u5230\u4e86 [7x7x512] \u7684\u6570\u7ec4\uff0c\u90a3\u4e48\uff0c384x384 \u7684\u5927\u56fe\u7247\u76f4\u63a5\u7ecf\u8fc7\u540c\u6837\u7684\u5377\u79ef\u5c42\u548c\u6c60\u5316\u5c42\u4e4b\u540e\u4f1a\u5f97\u5230 [12x12x512] \u7684\u6570\u7ec4\uff08\u56e0\u4e3a\u9014\u5f84 5 \u4e2a\u6c60\u5316\u5c42\uff0c\u5c3a\u5bf8\u53d8\u4e3a 384/2/2/2/2/2 = 12\uff09\u3002\u901a\u8fc7\u5377\u79ef\u5c42\u66ff\u4ee3\u5168\u8fde\u63a5\u5c42\u540e\uff0c\u53ef\u4ee5\u5f97\u5230 <code>6x6x1000</code>\uff08\\(\\dfrac{12-7}{1} + 1 = 6\\)\uff09 \u7684\u8f93\u51fa\uff0c\u8868\u793a\u6bcf\u4e2a <code>224x224</code> \u7a97\u53e3\u7684\u5206\u7c7b\u5f97\u5206\u3002</p> </li> <li> <p><code>\u8fd9\u79cd\u8f6c\u5316\u7684\u6700\u5927\u4f18\u52bf\u5728\u4e8e\u8ba1\u7b97\u6548\u7387\u3002\u539f\u672c\u9700\u8981\u8fdb\u884c 36 \u6b21\u72ec\u7acb\u8ba1\u7b97\u7684\u64cd\u4f5c\uff0c\u8f6c\u5316\u540e\u53ea\u9700\u4e00\u6b21\u524d\u5411\u4f20\u64ad\u5373\u53ef\u5b8c\u6210\u3002\u901a\u8fc7\u5171\u4eab\u8ba1\u7b97\u8d44\u6e90\uff0c\u907f\u514d\u4e86\u91cd\u590d\u8ba1\u7b97\uff0c\u5927\u5e45\u5ea6\u63d0\u9ad8\u4e86\u8ba1\u7b97\u6548\u7387\u3002</code></p> </li> </ol>"},{"location":"CV/Lecture7_ConvolutionalNetworks/#\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u7684\u7ed3\u6784","title":"\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u7684\u7ed3\u6784","text":"<p>\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u901a\u5e38\u662f\u7531\u4e09\u79cd\u5c42\u6784\u6210\uff1a<code>\u5377\u79ef\u5c42</code>\uff0c<code>\u6c60\u5316\u5c42</code>\uff08\u9664\u975e\u7279\u522b\u8bf4\u660e\uff0c\u4e00\u822c\u5c31\u662f<code>\u6700\u5927\u503c\u6c60\u5316</code>\uff09\u548c<code>\u5168\u8fde\u63a5\u5c42</code>\uff08\u7b80\u79f0 <code>FC</code>\uff09\u3002ReLU \u6fc0\u6d3b\u51fd\u6570\u4e5f\u5e94\u8be5\u7b97\u662f\u662f\u4e00\u5c42\uff0c\u5b83\u9010\u5143\u7d20\u5730\u8fdb\u884c\u6fc0\u6d3b\u51fd\u6570\u64cd\u4f5c\u3002\u5728\u672c\u8282\u4e2d\u5c06\u8ba8\u8bba\u5728\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u4e2d\u8fd9\u4e9b\u5c42\u901a\u5e38\u662f\u5982\u4f55\u7ec4\u5408\u5728\u4e00\u8d77\u7684\u3002</p>"},{"location":"CV/Lecture7_ConvolutionalNetworks/#\u5c42\u7684\u6392\u5217\u89c4\u5f8b","title":"\u5c42\u7684\u6392\u5217\u89c4\u5f8b","text":"<p>\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u6700\u5e38\u89c1\u7684\u5f62\u5f0f\u5c31\u662f\u5c06<code>\u4e00\u4e9b\u5377\u79ef\u5c42\u548c ReLU \u5c42\u653e\u5728\u4e00\u8d77\uff0c\u5176\u540e\u7d27\u8ddf\u6c60\u5316\u5c42\uff0c\u7136\u540e\u91cd\u590d\u5982\u6b64\u76f4\u5230\u56fe\u50cf\u5728\u7a7a\u95f4\u4e0a\u88ab\u7f29\u5c0f\u5230\u4e00\u4e2a\u8db3\u591f\u5c0f\u7684\u5c3a\u5bf8</code>\uff0c\u5728\u67d0\u4e2a\u5730\u65b9\u8fc7\u6e21\u6210\u6210\u5168\u8fde\u63a5\u5c42\u4e5f\u8f83\u4e3a\u5e38\u89c1\u3002\u6700\u540e\u7684\u5168\u8fde\u63a5\u5c42\u5f97\u5230\u8f93\u51fa\uff0c\u6bd4\u5982\u5206\u7c7b\u8bc4\u5206\u7b49\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6700\u5e38\u89c1\u7684\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u7ed3\u6784\u5982\u4e0b\uff1a</p> <p>INPUT -&gt; [[CONV -&gt; RELU] _ N -&gt; POOL?] _ M -&gt; [FC -&gt; RELU] * K -&gt; FC</p> <ul> <li> <p>N \u662f\u5377\u79ef\u5c42\u548c ReLU \u5c42\u7ec4\u5408\u7684\u91cd\u590d\u6b21\u6570\u3002</p> </li> <li> <p>POOL? \u8868\u793a\u662f\u5426\u4f7f\u7528\u6c60\u5316\u5c42\u3002</p> </li> <li> <p>M \u662f\u5377\u79ef-\u6c60\u5316\u7ec4\u5408\u7684\u91cd\u590d\u6b21\u6570\u3002</p> </li> <li> <p>K \u662f\u5168\u8fde\u63a5\u5c42\u7684\u91cd\u590d\u6b21\u6570\u3002</p> </li> </ul> <p>\u5e38\u89c1\u7684 CNN \u7ed3\u6784\u5b9e\u4f8b</p> <ul> <li>INPUT -&gt; FC, \u6700\u7b80\u5355\u7684\u7ed3\u6784\uff0c\u5b9e\u73b0\u4e00\u4e2a\u7ebf\u6027\u5206\u7c7b\u5668\uff0c\u6b64\u5904 N = M = K = 0\u3002</li> <li>INPUT -&gt; CONV -&gt; RELU -&gt; FC</li> <li>INPUT -&gt; [CONV -&gt; RELU -&gt; POOL] *2 -&gt; FC -&gt; RELU -&gt; FC\u3002\u6b64\u5904\u5728\u6bcf\u4e2a\u6c60\u5316\u5c42\u4e4b\u95f4\u6709\u4e00\u4e2a\u5377\u79ef\u5c42\u3002</li> <li>INPUT -&gt; [CONV -&gt; RELU -&gt; CONV -&gt; RELU -&gt; POOL] 3 -&gt; [FC -&gt; RELU] 2 -&gt; FC\u3002\u6b64\u5904\u6bcf\u4e2a\u6c60\u5316\u5c42\u524d\u6709\u4e24\u4e2a\u5377\u79ef\u5c42\uff0c\u8fd9\u4e2a\u601d\u8def\u9002\u7528\u4e8e\u66f4\u5927\u66f4\u6df1\u7684\u7f51\u7edc\uff0c\u56e0\u4e3a\u5728\u6267\u884c\u5177\u6709\u7834\u574f\u6027\u7684\u6c60\u5316\u64cd\u4f5c\u524d\uff0c\u591a\u91cd\u7684\u5377\u79ef\u5c42\u53ef\u4ee5\u4ece\u8f93\u5165\u6570\u636e\u4e2d\u5b66\u4e60\u5230\u66f4\u591a\u7684\u590d\u6742\u7279\u5f81\u3002</li> </ul> <p><code>\u5728\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u4e2d\uff0c\u4f7f\u7528\u591a\u4e2a\u5c0f\u6ee4\u6ce2\u5668\uff08\u5982 3x3\uff09\u7684\u5377\u79ef\u5c42\u7ec4\u5408\u6bd4\u4f7f\u7528\u5355\u4e2a\u5927\u6ee4\u6ce2\u5668\uff08\u5982 7x7\uff09\u7684\u5377\u79ef\u5c42\u6709\u660e\u663e\u7684\u4f18\u52bf\u3002\u8fd9\u79cd\u505a\u6cd5\u4e0d\u4ec5\u63d0\u9ad8\u4e86\u7279\u5f81\u63d0\u53d6\u7684\u80fd\u529b\uff0c\u8fd8\u80fd\u51cf\u5c11\u6a21\u578b\u7684\u53c2\u6570\u6570\u91cf\u3002</code></p> <ol> <li>\u611f\u53d7\u91ce\u7684\u6269\u5c55</li> </ol> <p>\u901a\u8fc7\u5806\u53e0 3 \u4e2a 3x3 \u7684\u5377\u79ef\u5c42\uff0c\u9010\u5c42\u6269\u5c55\u611f\u53d7\u91ce\uff1a</p> <ul> <li>\u7b2c\u4e00\u4e2a\u5377\u79ef\u5c42\uff1a\u6bcf\u4e2a\u795e\u7ecf\u5143\u7684\u611f\u53d7\u91ce\u4e3a 3x3\u3002</li> <li>\u7b2c\u4e8c\u4e2a\u5377\u79ef\u5c42\uff1a\u6bcf\u4e2a\u795e\u7ecf\u5143\u7684\u611f\u53d7\u91ce\u6269\u5927\u4e3a 5x5\uff08\u76f8\u5bf9\u4e8e\u8f93\u5165\u6570\u636e\u4f53\uff09\u3002</li> <li>\u7b2c\u4e09\u4e2a\u5377\u79ef\u5c42\uff1a\u6bcf\u4e2a\u795e\u7ecf\u5143\u7684\u611f\u53d7\u91ce\u8fdb\u4e00\u6b65\u6269\u5927\u5230 7x7\u3002</li> </ul> <p>\u4e0e\u6b64\u76f8\u6bd4\uff0c\u76f4\u63a5\u4f7f\u7528\u4e00\u4e2a 7x7 \u7684\u5377\u79ef\u5c42\uff0c\u5176\u611f\u53d7\u91ce\u867d\u7136\u4e5f\u662f 7x7\uff0c\u4f46\u65e0\u6cd5\u5145\u5206\u5229\u7528\u591a\u5c42\u5377\u79ef\u5e26\u6765\u7684\u975e\u7ebf\u6027\u7279\u5f81\u63d0\u53d6\u80fd</p> <ol> <li>\u7279\u5f81\u63d0\u53d6\u80fd\u529b</li> </ol> <p>\u591a\u4e2a\u5c0f\u6ee4\u6ce2\u5668\u5377\u79ef\u5c42\u7684\u7ec4\u5408\u7531\u4e8e\u5728<code>\u6bcf\u4e00\u5c42\u540e\u9762\u90fd\u52a0\u5165\u4e86\u975e\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570</code>\uff08\u5982 ReLU\uff09\uff0c<code>\u4f7f\u5f97\u7f51\u7edc\u80fd\u591f\u5b66\u4e60\u5230\u66f4\u590d\u6742\u3001\u66f4\u6df1\u5c42\u7684\u7279\u5f81</code>\u3002\u5355\u4e2a\u5927\u6ee4\u6ce2\u5668\u5377\u79ef\u5c42\u65e0\u6cd5\u63d0\u4f9b\u8fd9\u79cd\u5c42\u6b21\u5316\u7684\u7279\u5f81\u8868\u8fbe\u80fd\u529b\u3002</p> <ol> <li>\u53c2\u6570\u6570\u91cf\u51cf\u5c11</li> </ol> <p>\u5728\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u4e2d\uff0c\u4f7f\u7528\u591a\u4e2a\u5c0f\u6ee4\u6ce2\u5668\uff08\u5982 3x3\uff09\u7684\u5377\u79ef\u5c42\u7ec4\u5408\u76f8\u6bd4\u4e8e\u4f7f\u7528\u5355\u4e2a\u5927\u6ee4\u6ce2\u5668\uff08\u5982 7x7\uff09\u7684\u5377\u79ef\u5c42\u5177\u6709\u660e\u663e\u7684\u53c2\u6570\u91cf\u51cf\u5c11\u4f18\u52bf\u3002\u4ee5\u4e0b\u662f\u5bf9\u8fd9\u79cd\u53c2\u6570\u51cf\u5c11\u7684\u8be6\u7ec6\u5206\u6790\u3002</p> <p>\u53c2\u6570\u8ba1\u7b97\u65b9\u5f0f</p> <p>\u5bf9\u4e8e\u4e00\u4e2a\u5377\u79ef\u5c42\uff0c\u5047\u8bbe\u8f93\u5165\u7279\u5f81\u56fe\u7684\u901a\u9053\u6570\u4e3a \\(C_{\\text{in}}\\) \uff0c\u8f93\u51fa\u7279\u5f81\u56fe\u7684\u901a\u9053\u6570\u4e3a \\(C_{\\text{out}}\\) \uff0c\u6ee4\u6ce2\u5668\u7684\u5c3a\u5bf8\u4e3a \\(F \\times F\\) \uff1a</p> <ul> <li>\u6bcf\u4e2a\u5377\u79ef\u6838\u7684\u53c2\u6570\u6570\u91cf\u4e3a \\(F \\times F \\times C_{\\text{in}}\\) \u3002</li> <li>\u5377\u79ef\u5c42\u7684\u603b\u53c2\u6570\u6570\u91cf\u4e3a $C{\\text{out}} \\times F \\times F \\times C} $\u3002</li> </ul> <p>\u5927\u6ee4\u6ce2\u5668 vs. \u5c0f\u6ee4\u6ce2\u5668</p> <p>\u5047\u8bbe\u6211\u4eec\u8981\u8bbe\u8ba1\u4e00\u4e2a\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff0c\u5176\u8f93\u5165\u7279\u5f81\u56fe\u7684\u901a\u9053\u6570\u4e3a $C_{\\text{in}} $\uff0c\u8f93\u51fa\u7279\u5f81\u56fe\u7684\u901a\u9053\u6570\u4e3a  \\(C_{\\text{out}}\\) \uff0c\u5206\u522b\u8003\u8651\u4f7f\u7528\u5355\u4e2a \\(7\\times7\\) \u7684\u5927\u6ee4\u6ce2\u5668\u548c\u4e09\u4e2a \\(3\\times3\\) \u7684\u5c0f\u6ee4\u6ce2\u5668\u3002</p> <ul> <li> <p>\u5355\u4e2a 7x7 \u6ee4\u6ce2\u5668\u7684\u53c2\u6570\u91cf</p> <ul> <li> <p>\u6ee4\u6ce2\u5668\u5927\u5c0f\uff1a7x7</p> </li> <li> <p>\u53c2\u6570\u6570\u91cf\uff1a $ C{\\text{out}} \\times 7 \\times 7 \\times C} = C{\\text{out}} \\times 49 \\times C}$</p> </li> </ul> </li> <li> <p>\u4e09\u4e2a 3x3 \u6ee4\u6ce2\u5668\u7684\u53c2\u6570\u91cf</p> <p>\u5982\u679c\u4f7f\u7528\u4e09\u4e2a 3x3 \u7684\u5377\u79ef\u5c42\uff0c\u6bcf\u4e2a\u5377\u79ef\u5c42\u5c06\u4ece\u4e0a\u4e00\u4e2a\u5377\u79ef\u5c42\u7684\u8f93\u51fa\u901a\u9053\u4f5c\u4e3a\u8f93\u5165\u901a\u9053\uff1a</p> <ul> <li>\u7b2c\u4e00\u5c42\uff1a\u8f93\u5165\u901a\u9053\u6570\u4e3a \\(C_{\\text{in}}\\) \uff0c\u8f93\u51fa\u901a\u9053\u6570\u4e3a \\(C_{\\text{out}}\\)</li> </ul> <p>\u53c2\u6570\u6570\u91cf\uff1a \\(C_{\\text{out}} \\times 3 \\times 3 \\times C_{\\text{in}} = C_{\\text{out}} \\times 9 \\times C_{\\text{in}}\\)</p> <ul> <li>\u7b2c\u4e8c\u5c42\uff1a\u8f93\u5165\u901a\u9053\u6570\u4e3a $ C*{\\text{out}}$ \uff0c\u8f93\u51fa\u901a\u9053\u6570\u4e3a \\(C*{\\text{out}}\\)</li> </ul> <p>\u53c2\u6570\u6570\u91cf\uff1a \\(C_{\\text{out}} \\times 3 \\times 3 \\times C_{\\text{out}} = C_{\\text{out}}^2 \\times 9\\)</p> <ul> <li>\u7b2c\u4e09\u5c42\uff1a\u8f93\u5165\u901a\u9053\u6570\u4e3a \\(C_{\\text{out}}\\) \uff0c\u8f93\u51fa\u901a\u9053\u6570\u4e3a \\(C_{\\text{out}}\\)</li> </ul> <p>\u53c2\u6570\u6570\u91cf\uff1a \\(C_{\\text{out}} \\times 3 \\times 3 \\times C_{\\text{out}} = C_{\\text{out}}^2 \\times 9\\)</p> <p>\u4e09\u4e2a 3x3 \u5377\u79ef\u5c42\u7684\u603b\u53c2\u6570\u6570\u91cf\u4e3a\uff1a  [ \\(9 \\times C_{\\text{in}} \\times C_{\\text{out}} + 9 \\times C_{\\text{out}}^2 + 9 \\times C_{\\text{out}}^2 = 9 \\times C_{\\text{in}} \\times C_{\\text{out}} + 18 \\times C_{\\text{out}}^2\\) ]</p> </li> </ul>"},{"location":"CV/Lecture7_ConvolutionalNetworks/#\u5c42\u7684\u5c3a\u5bf8\u8bbe\u7f6e\u89c4\u5f8b","title":"\u5c42\u7684\u5c3a\u5bf8\u8bbe\u7f6e\u89c4\u5f8b","text":"<p>\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff08CNN\uff09\u4e2d\u7684\u5c42\u7684\u5c3a\u5bf8\u8bbe\u7f6e\u662f\u8bbe\u8ba1\u7f51\u7edc\u67b6\u6784\u65f6\u7684\u5173\u952e\u56e0\u7d20\uff0c\u76f4\u63a5\u5f71\u54cd\u6a21\u578b\u7684\u8868\u73b0\u548c\u8ba1\u7b97\u6548\u7387\u3002\u4ee5\u4e0b\u662f\u5bf9\u8fd9\u4e9b\u8bbe\u7f6e\u89c4\u5f8b\u7684\u8be6\u7ec6\u5206\u6790\uff1a</p> <ol> <li>\u8f93\u5165\u5c42\u7684\u5c3a\u5bf8</li> </ol> <p>\u8f93\u5165\u5c42\u7684\u5c3a\u5bf8\u901a\u5e38\u8bbe\u7f6e\u4e3a 32\u300164\u300196\u3001224 \u7b49\uff0c\u8fd9\u4e9b\u5c3a\u5bf8\u7684<code>\u5171\u540c\u7279\u70b9\u662f\u80fd\u88ab 2 \u591a\u6b21\u6574\u9664</code>\u3002\u539f\u56e0\u5728\u4e8e\uff0c\u5728 CNN \u4e2d\uff0c\u7ecf\u8fc7<code>\u591a\u6b21\u6c60\u5316\u64cd\u4f5c</code>\u540e\uff0c\u56fe\u50cf\u7684\u7a7a\u95f4\u5c3a\u5bf8\u9010\u6e10\u51cf\u5c0f\uff0c\u56e0\u6b64\u521d\u59cb\u5c3a\u5bf8\u80fd\u88ab 2 \u6574\u9664\u53ef\u4ee5\u4f7f\u7f51\u7edc\u7ed3\u6784\u66f4\u5bb9\u6613\u8bbe\u8ba1\uff0c\u5e76\u4fdd\u6301\u5bf9\u79f0\u6027\u3002\u4f8b\u5982\uff0c\u5178\u578b\u7684 ImageNet \u6570\u636e\u96c6\u4f7f\u7528 224x224 \u7684\u8f93\u5165\u5c3a\u5bf8\uff0c\u8fd9\u6837\u7684\u5c3a\u5bf8\u53ef\u4ee5\u901a\u8fc7\u591a\u6b21 2x2 \u6c60\u5316\u64cd\u4f5c\u5bf9\u56fe\u50cf\u8fdb\u884c\u4e0b\u91c7\u6837\uff0c\u5e76\u6700\u7ec8\u5728\u5168\u8fde\u63a5\u5c42\u4e4b\u524d\u83b7\u5f97\u5408\u7406\u7684\u5c0f\u5c3a\u5bf8\u7279\u5f81\u56fe\u3002</p> <ol> <li>\u5377\u79ef\u5c42\u7684\u6ee4\u6ce2\u5668\u5c3a\u5bf8\u548c\u6b65\u957f:<code>\u5c0f\u5c3a\u5bf8\u6ee4\u6ce2\u5668\u4e0e\u96f6\u586b\u5145</code></li> </ol> <ul> <li>\u6ee4\u6ce2\u5668\u5c3a\u5bf8\uff1a\u5377\u79ef\u5c42\u901a\u5e38\u4f7f\u7528 3x3 \u6216\u6700\u591a 5x5 \u7684\u5c0f\u6ee4\u6ce2\u5668\u3002\u8f83\u5c0f\u7684\u6ee4\u6ce2\u5668\u5728\u63d0\u53d6\u5c40\u90e8\u7279\u5f81\u65f6\u5177\u6709\u8f83\u9ad8\u7684\u7a7a\u95f4\u5206\u8fa8\u7387\uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7\u5806\u53e0\u591a\u5c42\u5377\u79ef\u6765\u589e\u52a0\u7f51\u7edc\u7684\u611f\u53d7\u91ce\uff0c\u800c\u4e0d\u663e\u8457\u589e\u52a0\u53c2\u6570\u91cf\u3002</li> <li>\u6b65\u957f\u4e0e\u96f6\u586b\u5145\uff1a<code>\u6b65\u957f\u901a\u5e38\u8bbe\u7f6e\u4e3a 1</code>\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u5377\u79ef\u64cd\u4f5c\u4e0d\u4f1a\u8df3\u8fc7\u4efb\u4f55\u50cf\u7d20\uff0c\u4ece\u800c\u4fdd\u7559\u66f4\u591a\u7684\u7a7a\u95f4\u4fe1\u606f\u3002\u4e3a\u4e86\u5728<code>\u5377\u79ef\u540e\u4fdd\u6301\u8f93\u5165\u548c\u8f93\u51fa\u7684\u7a7a\u95f4\u5c3a\u5bf8\u76f8\u540c</code>\uff0c\u901a\u5e38\u4f1a\u5728\u8f93\u5165\u6570\u636e\u5468\u56f4\u8fdb\u884c\u96f6\u586b\u5145\uff08padding\uff09\u3002\u5f53\u6ee4\u6ce2\u5668\u5c3a\u5bf8\u4e3a \\(F\\) \u65f6\uff0c\u4f7f\u7528 \\(P = \\dfrac{F-1}{2}\\) \u7684\u96f6\u586b\u5145\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u8f93\u51fa\u7684\u7a7a\u95f4\u5c3a\u5bf8\u4e0d\u53d8(<code>\u4fdd\u7559\u8fb9\u7f18\u4fe1\u606f</code>)\u3002</li> </ul> <ol> <li>\u6c60\u5316\u5c42\u7684\u8bbe\u7f6e</li> </ol> <p>\u6c60\u5316\u5c42\u901a\u5e38\u7528\u6765\u8fdb\u884c\u7a7a\u95f4\u7ef4\u5ea6\u7684\u964d\u91c7\u6837\uff0c\u4ece\u800c\u51cf\u5c11\u6570\u636e\u7684\u7a7a\u95f4\u5c3a\u5bf8\u548c\u8ba1\u7b97\u91cf\u3002\u5e38\u89c1\u7684\u8bbe\u7f6e\u662f\u4f7f\u7528 2x2 \u7684\u6700\u5927\u6c60\u5316\uff08Max Pooling\uff09\uff0c\u6b65\u957f\u4e3a 2\uff0c<code>\u8fd9\u6837\u6bcf\u6b21\u6c60\u5316\u64cd\u4f5c\u90fd\u4f1a\u5c06\u8f93\u5165\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u51cf\u534a</code>\u3002\u8fd9\u79cd\u8bbe\u7f6e\u53ef\u4ee5\u6709\u6548\u51cf\u5c11\u8f93\u5165\u6570\u636e\u7684\u5c3a\u5bf8\uff0c\u5e76\u4fdd\u7559\u91cd\u8981\u7684\u7279\u5f81\u4fe1\u606f\u3002</p> <p>\u66f4\u5927\u7684\u6c60\u5316\u6ee4\u6ce2\u5668\uff08\u5982 3x3\uff09\u548c\u6b65\u957f\u4e5f\u5076\u5c14\u4f7f\u7528\uff0c\u4f46\u901a\u5e38<code>\u66f4\u5927\u7684\u6c60\u5316\u64cd\u4f5c\u4f1a\u5bfc\u81f4\u8fc7\u591a\u7684\u4fe1\u606f\u635f\u5931\uff0c\u4e0d\u5229\u4e8e\u7f51\u7edc\u6027\u80fd</code>\u3002\u56e0\u6b64\uff0c\u5728\u5b9e\u8df5\u4e2d\uff0c\u66f4\u5927\u7684\u6c60\u5316\u6ee4\u6ce2\u5668\u5f88\u5c11\u4f7f\u7528\u3002</p> <p>\u5728\u8bbe\u8ba1 CNN \u65f6\uff0c\u5185\u5b58\u4f7f\u7528\u548c\u8ba1\u7b97\u5f00\u9500\u5f80\u5f80\u662f\u5fc5\u987b\u8003\u8651\u7684\u56e0\u7d20\uff0c\u5c24\u5176\u662f\u5728\u7f51\u7edc\u7684\u521d\u59cb\u5c42\u3002\u7531\u4e8e\u521d\u59cb\u5c42\u7684\u8f93\u5165\u901a\u5e38\u4e3a\u9ad8\u5206\u8fa8\u7387\u56fe\u50cf\uff0c\u5176\u7279\u5f81\u56fe\u7684\u7a7a\u95f4\u7ef4\u5ea6\u8f83\u5927\uff0c\u56e0\u6b64\u4f1a<code>\u5360\u7528\u5927\u91cf\u5185\u5b58</code>\u3002\u4e3a\u4e86\u5e94\u5bf9\u8fd9\u4e00\u6311\u6218\uff0c\u53ef\u4ee5<code>\u5728\u521d\u59cb\u5c42\u4f7f\u7528\u8f83\u5927\u7684\u6b65\u957f\u6216\u66f4\u5927\u7684\u6ee4\u6ce2\u5668\u5c3a\u5bf8\uff0c\u4ece\u800c\u51cf\u5c11\u7279\u5f81\u56fe\u7684\u5c3a\u5bf8\u548c\u5185\u5b58\u5360\u7528\u3002</code></p> <ul> <li>ZFNet\uff1a\u5728\u7b2c\u4e00\u5c42\u4f7f\u7528 7x7 \u7684\u6ee4\u6ce2\u5668\uff0c\u6b65\u957f\u4e3a 2\uff0c\u51cf\u5c11\u4e86\u7a7a\u95f4\u5c3a\u5bf8\u548c\u5185\u5b58\u6d88\u8017\u3002</li> <li>AlexNet\uff1a\u4f7f\u7528 11x11 \u7684\u6ee4\u6ce2\u5668\uff0c\u6b65\u957f\u4e3a 4\uff0c\u4ee5\u8fdb\u4e00\u6b65\u964d\u4f4e\u521d\u59cb\u5c42\u7684\u8ba1\u7b97\u91cf\u3002</li> </ul>"},{"location":"CV/Lecture7_ConvolutionalNetworks/#\u8ba1\u7b97\u4e0a\u7684\u8003\u91cf","title":"\u8ba1\u7b97\u4e0a\u7684\u8003\u91cf","text":"<p>\u5728\u6784\u5efa\u548c\u8bad\u7ec3\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff08CNN\uff09\u65f6\uff0c\u5185\u5b58\u74f6\u9888\u662f\u4e00\u4e2a\u5173\u952e\u7684\u8ba1\u7b97\u8003\u8651\u56e0\u7d20\uff0c\u5c24\u5176\u5728\u4f7f\u7528\u73b0\u4ee3 GPU \u65f6\u66f4\u4e3a\u663e\u8457\u3002\u8981\u4f18\u5316\u5185\u5b58\u4f7f\u7528\uff0c\u9700\u8981\u7406\u89e3\u548c\u7ba1\u7406\u4ee5\u4e0b\u51e0\u4e2a\u4e3b\u8981\u7684\u5185\u5b58\u6d88\u8017\u6765\u6e90\uff1a</p> <ol> <li> <p>\u4e2d\u95f4\u6570\u636e\u4f53\u5c3a\u5bf8\uff08\u6fc0\u6d3b\u6570\u636e\u548c\u68af\u5ea6\uff09</p> </li> <li> <p>\u6fc0\u6d3b\u6570\u636e\u7684\u5b58\u50a8\uff1a\u5728\u524d\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e00\u5c42\u7684\u6fc0\u6d3b\u6570\u636e\uff08feature map\uff09\u9700\u8981\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u6570\u636e\u5728\u53cd\u5411\u4f20\u64ad\u9636\u6bb5\u9700\u8981\u7528\u6765\u8ba1\u7b97\u68af\u5ea6\u3002\u901a\u5e38\uff0c\u9760\u8fd1\u8f93\u5165\u5c42\u7684\u5377\u79ef\u5c42\u4f1a\u751f\u6210\u66f4\u5927\u7684\u6fc0\u6d3b\u6570\u636e\u4f53\uff0c\u8fd9\u4e9b\u6570\u636e\u7684\u5c3a\u5bf8\u51b3\u5b9a\u4e86\u5185\u5b58\u4f7f\u7528\u7684\u4e3b\u8981\u90e8\u5206\u3002\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u7531\u4e8e\u53cd\u5411\u4f20\u64ad\u7684\u9700\u8981\uff0c\u4e0d\u80fd\u8f7b\u6613\u4e22\u5f03\u8fd9\u4e9b\u6570\u636e\u3002</p> </li> <li> <p>\u6d4b\u8bd5\u4f18\u5316\uff1a\u5728\u6d4b\u8bd5\u65f6\uff0c\u7f51\u7edc\u7684\u6fc0\u6d3b\u6570\u636e\u4e0d\u518d\u9700\u8981\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\uff0c\u56e0\u6b64\u53ef\u4ee5\u5728\u6bcf\u5c42\u8ba1\u7b97\u5b8c\u540e\uff0c\u4e22\u5f03\u4e0d\u518d\u9700\u8981\u7684\u524d\u5c42\u6fc0\u6d3b\u6570\u636e\uff0c\u4ece\u800c\u663e\u8457\u964d\u4f4e\u5185\u5b58\u5360\u7528\u3002</p> </li> <li> <p>\u6765\u81ea\u53c2\u6570\u5c3a\u5bf8</p> </li> <li> <p>\u53c2\u6570\u53ca\u5176\u68af\u5ea6\uff1a\u6bcf\u4e2a\u5377\u79ef\u5c42\u548c\u5168\u8fde\u63a5\u5c42\u90fd\u5305\u542b\u53c2\u6570\uff08\u6743\u91cd\u548c\u504f\u7f6e\uff09\uff0c\u8fd9\u4e9b\u53c2\u6570\u5728\u8bad\u7ec3\u65f6\u9700\u8981\u5b58\u50a8\u5176\u68af\u5ea6\u4fe1\u606f\u3002\u901a\u5e38\u6765\u8bf4\uff0c\u5b58\u50a8\u53c2\u6570\u65f6\u9700\u8981\u989d\u5916\u7684\u5185\u5b58\u6765\u4fdd\u5b58\u8fd9\u4e9b\u68af\u5ea6\uff0c\u4ee5\u53ca\u5728\u4f7f\u7528\u5982\u52a8\u91cf\uff08momentum\uff09\u3001Adagrad\u3001RMSProp \u7b49\u4f18\u5316\u7b97\u6cd5\u65f6\u7684\u5386\u53f2\u8ba1\u7b97\u7f13\u5b58\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u9700\u6c42\u4f1a\u4f7f\u5185\u5b58\u4f7f\u7528\u8fbe\u5230\u539f\u59cb\u53c2\u6570\u91cf\u7684 3 \u500d\u751a\u81f3\u66f4\u591a\u3002</p> </li> <li> <p>\u4f18\u5316\u6280\u5de7\uff1a\u901a\u8fc7\u51cf\u5c11\u7f51\u7edc\u7684\u53c2\u6570\u6570\u91cf\uff0c\u4f8b\u5982\u4f7f\u7528\u8f83\u5c0f\u7684\u5377\u79ef\u6838\u3001\u66f4\u5c11\u7684\u901a\u9053\u6570\u3001\u6216\u79fb\u9664\u5168\u8fde\u63a5\u5c42\uff08\u5982 GoogLeNet \u6240\u505a\u7684\uff09\uff0c\u53ef\u4ee5\u51cf\u5c11\u5185\u5b58\u9700\u6c42\u3002</p> </li> <li> <p>\u5176\u4ed6\u5185\u5b58\u5360\u7528</p> </li> <li>\u6279\u91cf\u6570\u636e\uff1a\u8bad\u7ec3\u65f6\uff0c\u6574\u4e2a\u6279\u6b21\u7684\u6570\u636e\u90fd\u8981\u540c\u65f6\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u8fdb\u884c\u5904\u7406\u3002\u968f\u7740\u6279\u91cf\u5927\u5c0f\uff08batch size\uff09\u7684\u589e\u52a0\uff0c\u5185\u5b58\u9700\u6c42\u4f1a\u663e\u8457\u589e\u52a0\u3002</li> </ol>"}]}